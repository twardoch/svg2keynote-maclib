// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTArchives.proto

#include "TSTArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TST {
PROTOBUF_CONSTEXPR CellID::CellID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expanded_coord_)*/nullptr
  , /*decltype(_impl_.packeddata_)*/0u} {}
struct CellIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellIDDefaultTypeInternal() {}
  union {
    CellID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellIDDefaultTypeInternal _CellID_default_instance_;
PROTOBUF_CONSTEXPR CellUIDLookupListArchive::CellUIDLookupListArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_indexes_)*/{}
  , /*decltype(_impl_.row_indexes_)*/{}
  , /*decltype(_impl_.column_uids_)*/nullptr
  , /*decltype(_impl_.row_uids_)*/nullptr} {}
struct CellUIDLookupListArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellUIDLookupListArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellUIDLookupListArchiveDefaultTypeInternal() {}
  union {
    CellUIDLookupListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellUIDLookupListArchiveDefaultTypeInternal _CellUIDLookupListArchive_default_instance_;
PROTOBUF_CONSTEXPR CellUIDListArchive::CellUIDListArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_uids_)*/{}
  , /*decltype(_impl_.column_uids_)*/{}
  , /*decltype(_impl_.compressed_row_indexes_)*/{}
  , /*decltype(_impl_.compressed_column_indexes_)*/{}
  , /*decltype(_impl_.uncompressed_lookup_list_)*/nullptr} {}
struct CellUIDListArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellUIDListArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellUIDListArchiveDefaultTypeInternal() {}
  union {
    CellUIDListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellUIDListArchiveDefaultTypeInternal _CellUIDListArchive_default_instance_;
PROTOBUF_CONSTEXPR TableSize::TableSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packeddata_)*/0u
  , /*decltype(_impl_.num_columns_)*/0u
  , /*decltype(_impl_.num_rows_)*/0u} {}
struct TableSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableSizeDefaultTypeInternal() {}
  union {
    TableSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableSizeDefaultTypeInternal _TableSize_default_instance_;
PROTOBUF_CONSTEXPR ExpandedTableSize::ExpandedTableSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.num_columns_)*/0u
  , /*decltype(_impl_.num_rows_)*/0u} {}
struct ExpandedTableSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpandedTableSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpandedTableSizeDefaultTypeInternal() {}
  union {
    ExpandedTableSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpandedTableSizeDefaultTypeInternal _ExpandedTableSize_default_instance_;
PROTOBUF_CONSTEXPR CellRange::CellRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr} {}
struct CellRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRangeDefaultTypeInternal() {}
  union {
    CellRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRangeDefaultTypeInternal _CellRange_default_instance_;
PROTOBUF_CONSTEXPR ExpandedCellRange::ExpandedCellRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr} {}
struct ExpandedCellRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpandedCellRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpandedCellRangeDefaultTypeInternal() {}
  union {
    ExpandedCellRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpandedCellRangeDefaultTypeInternal _ExpandedCellRange_default_instance_;
PROTOBUF_CONSTEXPR TableSelection::TableSelection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cellrange_)*/nullptr
  , /*decltype(_impl_.extendedcellrange_)*/nullptr
  , /*decltype(_impl_.extendedcellrangevalid_)*/false
  , /*decltype(_impl_.selection_type_)*/0} {}
struct TableSelectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableSelectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableSelectionDefaultTypeInternal() {}
  union {
    TableSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableSelectionDefaultTypeInternal _TableSelection_default_instance_;
PROTOBUF_CONSTEXPR TileRowInfo::TileRowInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_storage_buffer_pre_bnc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cell_offsets_pre_bnc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cell_storage_buffer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cell_offsets_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tile_row_index_)*/0u
  , /*decltype(_impl_.cell_count_)*/0u
  , /*decltype(_impl_.storage_version_)*/0u
  , /*decltype(_impl_.has_wide_offsets_)*/false} {}
struct TileRowInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileRowInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileRowInfoDefaultTypeInternal() {}
  union {
    TileRowInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileRowInfoDefaultTypeInternal _TileRowInfo_default_instance_;
PROTOBUF_CONSTEXPR Tile::Tile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rowinfos_)*/{}
  , /*decltype(_impl_.maxcolumn_)*/0u
  , /*decltype(_impl_.maxrow_)*/0u
  , /*decltype(_impl_.numcells_)*/0u
  , /*decltype(_impl_.numrows_)*/0u
  , /*decltype(_impl_.storage_version_)*/0u
  , /*decltype(_impl_.last_saved_in_bnc_)*/false
  , /*decltype(_impl_.should_use_wide_rows_)*/false} {}
struct TileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileDefaultTypeInternal() {}
  union {
    Tile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileDefaultTypeInternal _Tile_default_instance_;
PROTOBUF_CONSTEXPR TileStorage_Tile::TileStorage_Tile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tile_)*/nullptr
  , /*decltype(_impl_.tileid_)*/0u} {}
struct TileStorage_TileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileStorage_TileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileStorage_TileDefaultTypeInternal() {}
  union {
    TileStorage_Tile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileStorage_TileDefaultTypeInternal _TileStorage_Tile_default_instance_;
PROTOBUF_CONSTEXPR TileStorage::TileStorage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tiles_)*/{}
  , /*decltype(_impl_.tile_size_)*/0u
  , /*decltype(_impl_.should_use_wide_rows_)*/false} {}
struct TileStorageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TileStorageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TileStorageDefaultTypeInternal() {}
  union {
    TileStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TileStorageDefaultTypeInternal _TileStorage_default_instance_;
PROTOBUF_CONSTEXPR PopUpMenuModel_CellValue::PopUpMenuModel_CellValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.boolean_value_)*/nullptr
  , /*decltype(_impl_.date_value_)*/nullptr
  , /*decltype(_impl_.number_value_)*/nullptr
  , /*decltype(_impl_.string_value_)*/nullptr
  , /*decltype(_impl_.cell_value_type_)*/1} {}
struct PopUpMenuModel_CellValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PopUpMenuModel_CellValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PopUpMenuModel_CellValueDefaultTypeInternal() {}
  union {
    PopUpMenuModel_CellValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PopUpMenuModel_CellValueDefaultTypeInternal _PopUpMenuModel_CellValue_default_instance_;
PROTOBUF_CONSTEXPR PopUpMenuModel::PopUpMenuModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.tsce_item_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PopUpMenuModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PopUpMenuModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PopUpMenuModelDefaultTypeInternal() {}
  union {
    PopUpMenuModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PopUpMenuModelDefaultTypeInternal _PopUpMenuModel_default_instance_;
PROTOBUF_CONSTEXPR ImportWarningSetArchive_FormulaImportWarning::ImportWarningSetArchive_FormulaImportWarning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.original_formula_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.supplementary_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.formula_warning_type_int_)*/0
  , /*decltype(_impl_.formula_warning_type_)*/1} {}
struct ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal() {}
  union {
    ImportWarningSetArchive_FormulaImportWarning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportWarningSetArchive_FormulaImportWarningDefaultTypeInternal _ImportWarningSetArchive_FormulaImportWarning_default_instance_;
PROTOBUF_CONSTEXPR ImportWarningSetArchive::ImportWarningSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.original_data_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.formula_import_warning_)*/nullptr
  , /*decltype(_impl_.cond_format_above_avg_equal_avg_)*/false
  , /*decltype(_impl_.cond_format_above_avg_std_dev_)*/false
  , /*decltype(_impl_.cond_format_complex_formula_)*/false
  , /*decltype(_impl_.cond_format_contains_errors_)*/false
  , /*decltype(_impl_.cond_format_expr_)*/false
  , /*decltype(_impl_.cond_format_not_contains_errors_)*/false
  , /*decltype(_impl_.cond_format_parameters_not_all_same_type_)*/false
  , /*decltype(_impl_.cond_format_stop_if_true_)*/false
  , /*decltype(_impl_.cond_format_unsupported_operator_)*/false
  , /*decltype(_impl_.cond_format_unsupported_styling_)*/false
  , /*decltype(_impl_.cond_format_unsupported_time_period_)*/false
  , /*decltype(_impl_.error_cell_with_no_formula_)*/false
  , /*decltype(_impl_.unsupported_cond_format_)*/false
  , /*decltype(_impl_.formula_warning_filtered_column_formula_not_copied_)*/false
  , /*decltype(_impl_.duration_format_range_changed_)*/false} {}
struct ImportWarningSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportWarningSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportWarningSetArchiveDefaultTypeInternal() {}
  union {
    ImportWarningSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportWarningSetArchiveDefaultTypeInternal _ImportWarningSetArchive_default_instance_;
PROTOBUF_CONSTEXPR CellRefImportWarningSetPairArchive::CellRefImportWarningSetPairArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_ref_)*/nullptr
  , /*decltype(_impl_.warning_set_)*/nullptr} {}
struct CellRefImportWarningSetPairArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRefImportWarningSetPairArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRefImportWarningSetPairArchiveDefaultTypeInternal() {}
  union {
    CellRefImportWarningSetPairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRefImportWarningSetPairArchiveDefaultTypeInternal _CellRefImportWarningSetPairArchive_default_instance_;
PROTOBUF_CONSTEXPR ImportWarningSetByCellRefArchive::ImportWarningSetByCellRefArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cellref_warning_set_pair_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImportWarningSetByCellRefArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImportWarningSetByCellRefArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImportWarningSetByCellRefArchiveDefaultTypeInternal() {}
  union {
    ImportWarningSetByCellRefArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImportWarningSetByCellRefArchiveDefaultTypeInternal _ImportWarningSetByCellRefArchive_default_instance_;
PROTOBUF_CONSTEXPR TableDataList_ListEntry::TableDataList_ListEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reference_)*/nullptr
  , /*decltype(_impl_.formula_)*/nullptr
  , /*decltype(_impl_.format_)*/nullptr
  , /*decltype(_impl_.custom_format_)*/nullptr
  , /*decltype(_impl_.rich_text_payload_)*/nullptr
  , /*decltype(_impl_.comment_storage_)*/nullptr
  , /*decltype(_impl_.import_warning_set_)*/nullptr
  , /*decltype(_impl_.cell_spec_)*/nullptr
  , /*decltype(_impl_.key_)*/0u
  , /*decltype(_impl_.refcount_)*/0u} {}
struct TableDataList_ListEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDataList_ListEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDataList_ListEntryDefaultTypeInternal() {}
  union {
    TableDataList_ListEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDataList_ListEntryDefaultTypeInternal _TableDataList_ListEntry_default_instance_;
PROTOBUF_CONSTEXPR TableDataList::TableDataList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.segments_)*/{}
  , /*decltype(_impl_.nextlistid_)*/0u
  , /*decltype(_impl_.is_new_for_bnc_)*/false
  , /*decltype(_impl_.listtype_)*/1} {}
struct TableDataListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDataListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDataListDefaultTypeInternal() {}
  union {
    TableDataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDataListDefaultTypeInternal _TableDataList_default_instance_;
PROTOBUF_CONSTEXPR TableDataListSegment::TableDataListSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.key_range_)*/nullptr
  , /*decltype(_impl_.list_type_)*/1} {}
struct TableDataListSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDataListSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDataListSegmentDefaultTypeInternal() {}
  union {
    TableDataListSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDataListSegmentDefaultTypeInternal _TableDataListSegment_default_instance_;
PROTOBUF_CONSTEXPR TableRBTree_Node::TableRBTree_Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/0u
  , /*decltype(_impl_.value_)*/0u} {}
struct TableRBTree_NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableRBTree_NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableRBTree_NodeDefaultTypeInternal() {}
  union {
    TableRBTree_Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableRBTree_NodeDefaultTypeInternal _TableRBTree_Node_default_instance_;
PROTOBUF_CONSTEXPR TableRBTree::TableRBTree(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableRBTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableRBTreeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableRBTreeDefaultTypeInternal() {}
  union {
    TableRBTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableRBTreeDefaultTypeInternal _TableRBTree_default_instance_;
PROTOBUF_CONSTEXPR HeaderStorageBucket_Header::HeaderStorageBucket_Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_style_)*/nullptr
  , /*decltype(_impl_.text_style_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_.hidingstate_)*/0u
  , /*decltype(_impl_.numberofcells_)*/0u} {}
struct HeaderStorageBucket_HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderStorageBucket_HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderStorageBucket_HeaderDefaultTypeInternal() {}
  union {
    HeaderStorageBucket_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderStorageBucket_HeaderDefaultTypeInternal _HeaderStorageBucket_Header_default_instance_;
PROTOBUF_CONSTEXPR HeaderStorageBucket::HeaderStorageBucket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.headers_)*/{}
  , /*decltype(_impl_.buckethashfunction_)*/0u} {}
struct HeaderStorageBucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderStorageBucketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderStorageBucketDefaultTypeInternal() {}
  union {
    HeaderStorageBucket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderStorageBucketDefaultTypeInternal _HeaderStorageBucket_default_instance_;
PROTOBUF_CONSTEXPR HeaderStorage::HeaderStorage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buckets_)*/{}
  , /*decltype(_impl_.buckethashfunction_)*/0u} {}
struct HeaderStorageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderStorageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderStorageDefaultTypeInternal() {}
  union {
    HeaderStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderStorageDefaultTypeInternal _HeaderStorage_default_instance_;
PROTOBUF_CONSTEXPR DataStore::DataStore(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rowheaders_)*/nullptr
  , /*decltype(_impl_.columnheaders_)*/nullptr
  , /*decltype(_impl_.tiles_)*/nullptr
  , /*decltype(_impl_.stringtable_)*/nullptr
  , /*decltype(_impl_.styletable_)*/nullptr
  , /*decltype(_impl_.formula_table_)*/nullptr
  , /*decltype(_impl_.rowtiletree_)*/nullptr
  , /*decltype(_impl_.columntiletree_)*/nullptr
  , /*decltype(_impl_.format_table_pre_bnc_)*/nullptr
  , /*decltype(_impl_.formulaerrortable_)*/nullptr
  , /*decltype(_impl_.merge_region_map_)*/nullptr
  , /*decltype(_impl_.deprecated_custom_format_table_)*/nullptr
  , /*decltype(_impl_.multiplechoicelistformattable_)*/nullptr
  , /*decltype(_impl_.rich_text_table_)*/nullptr
  , /*decltype(_impl_.conditionalstyletable_)*/nullptr
  , /*decltype(_impl_.commentstoragetable_)*/nullptr
  , /*decltype(_impl_.importwarningsettable_)*/nullptr
  , /*decltype(_impl_.control_cell_spec_table_)*/nullptr
  , /*decltype(_impl_.format_table_)*/nullptr
  , /*decltype(_impl_.nextrowstripid_)*/0u
  , /*decltype(_impl_.nextcolumnstripid_)*/0u
  , /*decltype(_impl_.storage_version_pre_bnc_)*/0u} {}
struct DataStoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStoreDefaultTypeInternal() {}
  union {
    DataStore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStoreDefaultTypeInternal _DataStore_default_instance_;
PROTOBUF_CONSTEXPR TableInfoArchive::TableInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tablemodel_)*/nullptr
  , /*decltype(_impl_.editing_state_)*/nullptr
  , /*decltype(_impl_.summary_model_)*/nullptr
  , /*decltype(_impl_.category_order_)*/nullptr
  , /*decltype(_impl_.view_column_row_uids_)*/nullptr
  , /*decltype(_impl_.group_by_uuid_)*/nullptr
  , /*decltype(_impl_.hidden_states_uuid_)*/nullptr
  , /*decltype(_impl_.pasteboard_coord_mapper_)*/nullptr
  , /*decltype(_impl_.layout_engine_)*/nullptr
  , /*decltype(_impl_.pivot_data_model_)*/nullptr
  , /*decltype(_impl_.pivot_order_)*/nullptr
  , /*decltype(_impl_.formula_coord_space_in_pre40_)*/0u
  , /*decltype(_impl_.formula_coord_space_)*/0u
  , /*decltype(_impl_.is_a_pivot_table_)*/false} {}
struct TableInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableInfoArchiveDefaultTypeInternal() {}
  union {
    TableInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableInfoArchiveDefaultTypeInternal _TableInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR CategoryInfoArchive::CategoryInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tablemodel_)*/nullptr} {}
struct CategoryInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryInfoArchiveDefaultTypeInternal() {}
  union {
    CategoryInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryInfoArchiveDefaultTypeInternal _CategoryInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR WPTableInfoArchive::WPTableInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.storage_)*/nullptr} {}
struct WPTableInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WPTableInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WPTableInfoArchiveDefaultTypeInternal() {}
  union {
    WPTableInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WPTableInfoArchiveDefaultTypeInternal _WPTableInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR TableStyleNetworkArchive::TableStyleNetworkArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_text_style_)*/nullptr
  , /*decltype(_impl_.header_row_text_style_)*/nullptr
  , /*decltype(_impl_.header_column_text_style_)*/nullptr
  , /*decltype(_impl_.footer_row_text_style_)*/nullptr
  , /*decltype(_impl_.body_cell_style_)*/nullptr
  , /*decltype(_impl_.header_row_style_)*/nullptr
  , /*decltype(_impl_.header_column_style_)*/nullptr
  , /*decltype(_impl_.footer_row_style_)*/nullptr
  , /*decltype(_impl_.table_style_)*/nullptr
  , /*decltype(_impl_.table_name_style_)*/nullptr
  , /*decltype(_impl_.table_name_shape_style_)*/nullptr
  , /*decltype(_impl_.category_level_1_text_style_)*/nullptr
  , /*decltype(_impl_.category_level_2_text_style_)*/nullptr
  , /*decltype(_impl_.category_level_3_text_style_)*/nullptr
  , /*decltype(_impl_.category_level_4_text_style_)*/nullptr
  , /*decltype(_impl_.category_level_5_text_style_)*/nullptr
  , /*decltype(_impl_.category_level_1_style_)*/nullptr
  , /*decltype(_impl_.category_level_2_style_)*/nullptr
  , /*decltype(_impl_.category_level_3_style_)*/nullptr
  , /*decltype(_impl_.category_level_4_style_)*/nullptr
  , /*decltype(_impl_.category_level_5_style_)*/nullptr
  , /*decltype(_impl_.label_level_1_text_style_)*/nullptr
  , /*decltype(_impl_.label_level_2_text_style_)*/nullptr
  , /*decltype(_impl_.label_level_3_text_style_)*/nullptr
  , /*decltype(_impl_.label_level_4_text_style_)*/nullptr
  , /*decltype(_impl_.label_level_5_text_style_)*/nullptr
  , /*decltype(_impl_.label_level_1_style_)*/nullptr
  , /*decltype(_impl_.label_level_2_style_)*/nullptr
  , /*decltype(_impl_.label_level_3_style_)*/nullptr
  , /*decltype(_impl_.label_level_4_style_)*/nullptr
  , /*decltype(_impl_.label_level_5_style_)*/nullptr
  , /*decltype(_impl_.pivot_body_summary_row_style_)*/nullptr
  , /*decltype(_impl_.pivot_body_summary_column_style_)*/nullptr
  , /*decltype(_impl_.pivot_header_column_summary_style_)*/nullptr
  , /*decltype(_impl_.preset_id_)*/0u} {}
struct TableStyleNetworkArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableStyleNetworkArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableStyleNetworkArchiveDefaultTypeInternal() {}
  union {
    TableStyleNetworkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableStyleNetworkArchiveDefaultTypeInternal _TableStyleNetworkArchive_default_instance_;
PROTOBUF_CONSTEXPR TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.grouping_column_uid_)*/nullptr
  , /*decltype(_impl_.column_uid_)*/nullptr
  , /*decltype(_impl_.direction_)*/0} {}
struct TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchiveDefaultTypeInternal() {}
  union {
    TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchiveDefaultTypeInternal _TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_default_instance_;
PROTOBUF_CONSTEXPR TableGroupSortOrderUIDArchive::TableGroupSortOrderUIDArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_sort_rules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableGroupSortOrderUIDArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableGroupSortOrderUIDArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableGroupSortOrderUIDArchiveDefaultTypeInternal() {}
  union {
    TableGroupSortOrderUIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableGroupSortOrderUIDArchiveDefaultTypeInternal _TableGroupSortOrderUIDArchive_default_instance_;
PROTOBUF_CONSTEXPR TableSortOrderArchive_SortRuleArchive::TableSortOrderArchive_SortRuleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.direction_)*/0} {}
struct TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal() {}
  union {
    TableSortOrderArchive_SortRuleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableSortOrderArchive_SortRuleArchiveDefaultTypeInternal _TableSortOrderArchive_SortRuleArchive_default_instance_;
PROTOBUF_CONSTEXPR TableSortOrderArchive::TableSortOrderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_.type_)*/0} {}
struct TableSortOrderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableSortOrderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableSortOrderArchiveDefaultTypeInternal() {}
  union {
    TableSortOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableSortOrderArchiveDefaultTypeInternal _TableSortOrderArchive_default_instance_;
PROTOBUF_CONSTEXPR TableSortOrderUIDArchive_SortRuleArchive::TableSortOrderUIDArchive_SortRuleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_uid_)*/nullptr
  , /*decltype(_impl_.direction_)*/0} {}
struct TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal() {}
  union {
    TableSortOrderUIDArchive_SortRuleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableSortOrderUIDArchive_SortRuleArchiveDefaultTypeInternal _TableSortOrderUIDArchive_SortRuleArchive_default_instance_;
PROTOBUF_CONSTEXPR TableSortOrderUIDArchive::TableSortOrderUIDArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rules_)*/{}
  , /*decltype(_impl_.type_)*/0} {}
struct TableSortOrderUIDArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableSortOrderUIDArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableSortOrderUIDArchiveDefaultTypeInternal() {}
  union {
    TableSortOrderUIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableSortOrderUIDArchiveDefaultTypeInternal _TableSortOrderUIDArchive_default_instance_;
PROTOBUF_CONSTEXPR SortRuleReferenceTrackerArchive::SortRuleReferenceTrackerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_tracker_)*/nullptr} {}
struct SortRuleReferenceTrackerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SortRuleReferenceTrackerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SortRuleReferenceTrackerArchiveDefaultTypeInternal() {}
  union {
    SortRuleReferenceTrackerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SortRuleReferenceTrackerArchiveDefaultTypeInternal _SortRuleReferenceTrackerArchive_default_instance_;
PROTOBUF_CONSTEXPR CellRegion::CellRegion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_ranges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellRegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRegionDefaultTypeInternal() {}
  union {
    CellRegion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRegionDefaultTypeInternal _CellRegion_default_instance_;
PROTOBUF_CONSTEXPR CellUIDRegionArchive::CellUIDRegionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_uid_ranges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellUIDRegionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellUIDRegionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellUIDRegionArchiveDefaultTypeInternal() {}
  union {
    CellUIDRegionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellUIDRegionArchiveDefaultTypeInternal _CellUIDRegionArchive_default_instance_;
PROTOBUF_CONSTEXPR StructuredTextImportRecord::StructuredTextImportRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.import_source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.import_settings_)*/nullptr
  , /*decltype(_impl_.imported_region_)*/nullptr
  , /*decltype(_impl_.import_date_)*/0
  , /*decltype(_impl_.source_encoding_)*/uint64_t{0u}
  , /*decltype(_impl_.source_row_count_)*/uint64_t{0u}
  , /*decltype(_impl_.source_column_count_)*/uint64_t{0u}
  , /*decltype(_impl_.confidence_)*/0} {}
struct StructuredTextImportRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredTextImportRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredTextImportRecordDefaultTypeInternal() {}
  union {
    StructuredTextImportRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredTextImportRecordDefaultTypeInternal _StructuredTextImportRecord_default_instance_;
PROTOBUF_CONSTEXPR TableModelArchive::TableModelArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pivot_value_types_by_col_)*/{}
  , /*decltype(_impl_.pivot_date_grouping_columns_)*/{}
  , /*decltype(_impl_.pivot_date_grouping_types_)*/{}
  , /*decltype(_impl_.table_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_table_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_group_by_uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_style_)*/nullptr
  , /*decltype(_impl_.base_data_store_)*/nullptr
  , /*decltype(_impl_.provider_)*/nullptr
  , /*decltype(_impl_.body_cell_style_)*/nullptr
  , /*decltype(_impl_.header_row_style_)*/nullptr
  , /*decltype(_impl_.header_column_style_)*/nullptr
  , /*decltype(_impl_.footer_row_style_)*/nullptr
  , /*decltype(_impl_.origin_offset_)*/nullptr
  , /*decltype(_impl_.body_text_style_)*/nullptr
  , /*decltype(_impl_.header_row_text_style_)*/nullptr
  , /*decltype(_impl_.header_column_text_style_)*/nullptr
  , /*decltype(_impl_.footer_row_text_style_)*/nullptr
  , /*decltype(_impl_.table_name_style_)*/nullptr
  , /*decltype(_impl_.hidden_state_formula_owner_for_columns_)*/nullptr
  , /*decltype(_impl_.hidden_state_formula_owner_for_rows_)*/nullptr
  , /*decltype(_impl_.table_name_shape_style_)*/nullptr
  , /*decltype(_impl_.row_filter_set_pre_pivot_)*/nullptr
  , /*decltype(_impl_.conditional_style_formula_owner_id_)*/nullptr
  , /*decltype(_impl_.sort_order_)*/nullptr
  , /*decltype(_impl_.sort_rule_reference_tracker_)*/nullptr
  , /*decltype(_impl_.base_column_row_uids_)*/nullptr
  , /*decltype(_impl_.merge_owner_)*/nullptr
  , /*decltype(_impl_.table_style_preset_)*/nullptr
  , /*decltype(_impl_.stroke_sidecar_)*/nullptr
  , /*decltype(_impl_.text_import_record_)*/nullptr
  , /*decltype(_impl_.category_level_1_style_)*/nullptr
  , /*decltype(_impl_.category_level_2_style_)*/nullptr
  , /*decltype(_impl_.category_level_3_style_)*/nullptr
  , /*decltype(_impl_.category_level_4_style_)*/nullptr
  , /*decltype(_impl_.category_level_5_style_)*/nullptr
  , /*decltype(_impl_.category_level_1_text_style_)*/nullptr
  , /*decltype(_impl_.category_level_2_text_style_)*/nullptr
  , /*decltype(_impl_.category_level_3_text_style_)*/nullptr
  , /*decltype(_impl_.category_level_4_text_style_)*/nullptr
  , /*decltype(_impl_.category_level_5_text_style_)*/nullptr
  , /*decltype(_impl_.hidden_states_owner_)*/nullptr
  , /*decltype(_impl_.label_level_1_style_)*/nullptr
  , /*decltype(_impl_.label_level_2_style_)*/nullptr
  , /*decltype(_impl_.label_level_3_style_)*/nullptr
  , /*decltype(_impl_.label_level_4_style_)*/nullptr
  , /*decltype(_impl_.label_level_5_style_)*/nullptr
  , /*decltype(_impl_.label_level_1_text_style_)*/nullptr
  , /*decltype(_impl_.label_level_2_text_style_)*/nullptr
  , /*decltype(_impl_.label_level_3_text_style_)*/nullptr
  , /*decltype(_impl_.label_level_4_text_style_)*/nullptr
  , /*decltype(_impl_.label_level_5_text_style_)*/nullptr
  , /*decltype(_impl_.category_owner_deprecated_)*/nullptr
  , /*decltype(_impl_.pencil_annotation_owner_)*/nullptr
  , /*decltype(_impl_.haunted_owner_)*/nullptr
  , /*decltype(_impl_.pivot_owner_)*/nullptr
  , /*decltype(_impl_.category_owner_)*/nullptr
  , /*decltype(_impl_.pivot_body_summary_row_style_)*/nullptr
  , /*decltype(_impl_.pivot_body_summary_column_style_)*/nullptr
  , /*decltype(_impl_.pivot_header_column_summary_style_)*/nullptr
  , /*decltype(_impl_.number_of_rows_)*/0u
  , /*decltype(_impl_.number_of_columns_)*/0u
  , /*decltype(_impl_.number_of_header_rows_)*/0u
  , /*decltype(_impl_.number_of_header_columns_)*/0u
  , /*decltype(_impl_.number_of_footer_rows_)*/0u
  , /*decltype(_impl_.number_of_hidden_rows_)*/0u
  , /*decltype(_impl_.default_row_height_)*/0
  , /*decltype(_impl_.default_column_width_)*/0
  , /*decltype(_impl_.number_of_hidden_columns_)*/0u
  , /*decltype(_impl_.header_columns_frozen_)*/false
  , /*decltype(_impl_.repeating_header_rows_enabled_)*/false
  , /*decltype(_impl_.style_apply_clears_all_)*/false
  , /*decltype(_impl_.repeating_header_columns_enabled_)*/false
  , /*decltype(_impl_.preset_index_)*/0u
  , /*decltype(_impl_.was_cut_)*/false
  , /*decltype(_impl_.table_name_enabled_)*/false
  , /*decltype(_impl_.table_name_border_enabled_)*/false
  , /*decltype(_impl_.header_rows_frozen_)*/false
  , /*decltype(_impl_.table_name_height_)*/0
  , /*decltype(_impl_.number_of_filtered_rows_)*/0u
  , /*decltype(_impl_.number_of_user_hidden_rows_)*/0u
  , /*decltype(_impl_.number_of_user_hidden_columns_)*/0u
  , /*decltype(_impl_.preset_needs_strong_ownership_)*/false} {}
struct TableModelArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableModelArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableModelArchiveDefaultTypeInternal() {}
  union {
    TableModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableModelArchiveDefaultTypeInternal _TableModelArchive_default_instance_;
PROTOBUF_CONSTEXPR SummaryModelArchive::SummaryModelArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.summary_row_height_list_)*/{}
  , /*decltype(_impl_.label_row_height_list_)*/{}
  , /*decltype(_impl_.label_row_visibility_list_)*/{}
  , /*decltype(_impl_.table_info_)*/nullptr
  , /*decltype(_impl_.data_store_)*/nullptr
  , /*decltype(_impl_.column_row_uids_)*/nullptr
  , /*decltype(_impl_.aggregate_formula_owner_uuid_)*/nullptr
  , /*decltype(_impl_.summary_cell_vendor_)*/nullptr
  , /*decltype(_impl_.group_sort_order_)*/nullptr
  , /*decltype(_impl_.category_column_width_)*/0
  , /*decltype(_impl_.summary_row_level_1_height_)*/0
  , /*decltype(_impl_.summary_row_level_2_height_)*/0
  , /*decltype(_impl_.summary_row_level_3_height_)*/0
  , /*decltype(_impl_.summary_row_level_4_height_)*/0
  , /*decltype(_impl_.summary_row_level_5_height_)*/0
  , /*decltype(_impl_.summary_label_row_level_1_height_)*/0
  , /*decltype(_impl_.summary_label_row_level_2_height_)*/0
  , /*decltype(_impl_.summary_label_row_level_3_height_)*/0
  , /*decltype(_impl_.summary_label_row_level_4_height_)*/0
  , /*decltype(_impl_.summary_label_row_level_5_height_)*/0
  , /*decltype(_impl_.label_row_visibility_1_)*/0u
  , /*decltype(_impl_.label_row_visibility_2_)*/0u
  , /*decltype(_impl_.label_row_visibility_3_)*/0u
  , /*decltype(_impl_.label_row_visibility_4_)*/0u
  , /*decltype(_impl_.label_row_visibility_5_)*/0u} {}
struct SummaryModelArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryModelArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryModelArchiveDefaultTypeInternal() {}
  union {
    SummaryModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryModelArchiveDefaultTypeInternal _SummaryModelArchive_default_instance_;
PROTOBUF_CONSTEXPR SummaryModelGroupByChangeStateArchive::SummaryModelGroupByChangeStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.summary_row_height_list_)*/{}
  , /*decltype(_impl_.label_row_height_list_)*/{}
  , /*decltype(_impl_.label_row_visibility_list_)*/{}
  , /*decltype(_impl_.cell_map_)*/nullptr} {}
struct SummaryModelGroupByChangeStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryModelGroupByChangeStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryModelGroupByChangeStateArchiveDefaultTypeInternal() {}
  union {
    SummaryModelGroupByChangeStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryModelGroupByChangeStateArchiveDefaultTypeInternal _SummaryModelGroupByChangeStateArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnRowUIDMapArchive::ColumnRowUIDMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sorted_column_uids_)*/{}
  , /*decltype(_impl_.column_index_for_uid_)*/{}
  , /*decltype(_impl_.column_uid_for_index_)*/{}
  , /*decltype(_impl_.sorted_row_uids_)*/{}
  , /*decltype(_impl_.row_index_for_uid_)*/{}
  , /*decltype(_impl_.row_uid_for_index_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColumnRowUIDMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnRowUIDMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnRowUIDMapArchiveDefaultTypeInternal() {}
  union {
    ColumnRowUIDMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnRowUIDMapArchiveDefaultTypeInternal _ColumnRowUIDMapArchive_default_instance_;
PROTOBUF_CONSTEXPR StrokeLayerArchive_StrokeRunArchive::StrokeLayerArchive_StrokeRunArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stroke_)*/nullptr
  , /*decltype(_impl_.origin_)*/0
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.order_)*/0u} {}
struct StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal() {}
  union {
    StrokeLayerArchive_StrokeRunArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrokeLayerArchive_StrokeRunArchiveDefaultTypeInternal _StrokeLayerArchive_StrokeRunArchive_default_instance_;
PROTOBUF_CONSTEXPR StrokeLayerArchive::StrokeLayerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stroke_runs_)*/{}
  , /*decltype(_impl_.row_column_index_)*/0u} {}
struct StrokeLayerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrokeLayerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrokeLayerArchiveDefaultTypeInternal() {}
  union {
    StrokeLayerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrokeLayerArchiveDefaultTypeInternal _StrokeLayerArchive_default_instance_;
PROTOBUF_CONSTEXPR StrokeSidecarArchive::StrokeSidecarArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_column_stroke_layers_)*/{}
  , /*decltype(_impl_.right_column_stroke_layers_)*/{}
  , /*decltype(_impl_.top_row_stroke_layers_)*/{}
  , /*decltype(_impl_.bottom_row_stroke_layers_)*/{}
  , /*decltype(_impl_.max_order_)*/0u
  , /*decltype(_impl_.column_count_)*/0u
  , /*decltype(_impl_.row_count_)*/0u} {}
struct StrokeSidecarArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrokeSidecarArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrokeSidecarArchiveDefaultTypeInternal() {}
  union {
    StrokeSidecarArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrokeSidecarArchiveDefaultTypeInternal _StrokeSidecarArchive_default_instance_;
PROTOBUF_CONSTEXPR DurationWrapperArchive::DurationWrapperArchive(
    ::_pbi::ConstantInitialized) {}
struct DurationWrapperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DurationWrapperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DurationWrapperArchiveDefaultTypeInternal() {}
  union {
    DurationWrapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DurationWrapperArchiveDefaultTypeInternal _DurationWrapperArchive_default_instance_;
PROTOBUF_CONSTEXPR Cell::Cell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stringvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cell_style_)*/nullptr
  , /*decltype(_impl_.text_style_)*/nullptr
  , /*decltype(_impl_.current_format_)*/nullptr
  , /*decltype(_impl_.formulaerror_)*/nullptr
  , /*decltype(_impl_.number_format_)*/nullptr
  , /*decltype(_impl_.currency_format_)*/nullptr
  , /*decltype(_impl_.duration_format_)*/nullptr
  , /*decltype(_impl_.date_format_)*/nullptr
  , /*decltype(_impl_.custom_format_)*/nullptr
  , /*decltype(_impl_.base_format_)*/nullptr
  , /*decltype(_impl_.richtext_)*/nullptr
  , /*decltype(_impl_.conditional_style_)*/nullptr
  , /*decltype(_impl_.comment_storage_)*/nullptr
  , /*decltype(_impl_.import_warning_set_)*/nullptr
  , /*decltype(_impl_.custom_format_object_)*/nullptr
  , /*decltype(_impl_.cell_border_)*/nullptr
  , /*decltype(_impl_.cell_spec_)*/nullptr
  , /*decltype(_impl_.text_format_)*/nullptr
  , /*decltype(_impl_.boolean_format_)*/nullptr
  , /*decltype(_impl_.valuetype_)*/0
  , /*decltype(_impl_.boolvalue_)*/false
  , /*decltype(_impl_.numbervalue_)*/0
  , /*decltype(_impl_.explicit_format_flags_)*/0u
  , /*decltype(_impl_.conditional_style_applied_rule_)*/0u
  , /*decltype(_impl_.decimal_value_low_)*/uint64_t{0u}
  , /*decltype(_impl_.decimal_value_high_)*/uint64_t{0u}
  , /*decltype(_impl_.cell_format_kind_)*/0u} {}
struct CellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDefaultTypeInternal() {}
  union {
    Cell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDefaultTypeInternal _Cell_default_instance_;
PROTOBUF_CONSTEXPR MergeRegionMapArchive::MergeRegionMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_range_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MergeRegionMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeRegionMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeRegionMapArchiveDefaultTypeInternal() {}
  union {
    MergeRegionMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeRegionMapArchiveDefaultTypeInternal _MergeRegionMapArchive_default_instance_;
PROTOBUF_CONSTEXPR CellMapArchive::CellMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_tiles_)*/{}
  , /*decltype(_impl_.merge_uid_ranges_)*/{}
  , /*decltype(_impl_.unmerge_uid_ranges_)*/{}
  , /*decltype(_impl_.merge_actions_)*/{}
  , /*decltype(_impl_.expanded_cell_ids_)*/{}
  , /*decltype(_impl_.cell_uid_list_)*/nullptr
  , /*decltype(_impl_.uid_based_)*/false
  , /*decltype(_impl_.may_modify_formulas_in_cells_)*/true
  , /*decltype(_impl_.may_modify_values_referenced_by_formulas_)*/true} {}
struct CellMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellMapArchiveDefaultTypeInternal() {}
  union {
    CellMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellMapArchiveDefaultTypeInternal _CellMapArchive_default_instance_;
PROTOBUF_CONSTEXPR CellListArchive_OptionalCell::CellListArchive_OptionalCell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_)*/nullptr} {}
struct CellListArchive_OptionalCellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellListArchive_OptionalCellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellListArchive_OptionalCellDefaultTypeInternal() {}
  union {
    CellListArchive_OptionalCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellListArchive_OptionalCellDefaultTypeInternal _CellListArchive_OptionalCell_default_instance_;
PROTOBUF_CONSTEXPR CellListArchive::CellListArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cells_)*/{}
  , /*decltype(_impl_.trailing_empty_cell_count_)*/0u} {}
struct CellListArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellListArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellListArchiveDefaultTypeInternal() {}
  union {
    CellListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellListArchiveDefaultTypeInternal _CellListArchive_default_instance_;
PROTOBUF_CONSTEXPR ConcurrentCellMapArchive::ConcurrentCellMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_lists_)*/{}
  , /*decltype(_impl_.merge_actions_)*/{}
  , /*decltype(_impl_.uid_based_)*/false
  , /*decltype(_impl_.may_modify_formulas_in_cells_)*/true
  , /*decltype(_impl_.may_modify_values_referenced_by_formulas_)*/true
  , /*decltype(_impl_.affects_cell_borders_)*/true} {}
struct ConcurrentCellMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConcurrentCellMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConcurrentCellMapArchiveDefaultTypeInternal() {}
  union {
    ConcurrentCellMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConcurrentCellMapArchiveDefaultTypeInternal _ConcurrentCellMapArchive_default_instance_;
PROTOBUF_CONSTEXPR ConcurrentCellListArchive_OptionalCell::ConcurrentCellListArchive_OptionalCell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_)*/nullptr} {}
struct ConcurrentCellListArchive_OptionalCellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConcurrentCellListArchive_OptionalCellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConcurrentCellListArchive_OptionalCellDefaultTypeInternal() {}
  union {
    ConcurrentCellListArchive_OptionalCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConcurrentCellListArchive_OptionalCellDefaultTypeInternal _ConcurrentCellListArchive_OptionalCell_default_instance_;
PROTOBUF_CONSTEXPR ConcurrentCellListArchive::ConcurrentCellListArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cells_)*/{}
  , /*decltype(_impl_.cell_uid_range_)*/nullptr
  , /*decltype(_impl_.cell_range_)*/nullptr} {}
struct ConcurrentCellListArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConcurrentCellListArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConcurrentCellListArchiveDefaultTypeInternal() {}
  union {
    ConcurrentCellListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConcurrentCellListArchiveDefaultTypeInternal _ConcurrentCellListArchive_default_instance_;
PROTOBUF_CONSTEXPR CellFormatAndValueArchive::CellFormatAndValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stringvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.formatted_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.richtextstorage_)*/nullptr
  , /*decltype(_impl_.number_format_)*/nullptr
  , /*decltype(_impl_.currency_format_)*/nullptr
  , /*decltype(_impl_.date_format_)*/nullptr
  , /*decltype(_impl_.duration_format_)*/nullptr
  , /*decltype(_impl_.text_format_)*/nullptr
  , /*decltype(_impl_.boolean_format_)*/nullptr
  , /*decltype(_impl_.formatted_rich_text_value_)*/nullptr
  , /*decltype(_impl_.numbervalue_)*/0
  , /*decltype(_impl_.valuetype_)*/0
  , /*decltype(_impl_.explicit_flags_)*/0u
  , /*decltype(_impl_.cell_format_kind_)*/0u
  , /*decltype(_impl_.boolvalue_)*/false
  , /*decltype(_impl_.use_all_spare_formats_)*/false
  , /*decltype(_impl_.apply_spare_format_only_)*/false
  , /*decltype(_impl_.spare_format_type_)*/false
  , /*decltype(_impl_.decimal_low_)*/uint64_t{0u}
  , /*decltype(_impl_.decimal_high_)*/uint64_t{0u}
  , /*decltype(_impl_.suppress_apply_value_)*/false} {}
struct CellFormatAndValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellFormatAndValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellFormatAndValueArchiveDefaultTypeInternal() {}
  union {
    CellFormatAndValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellFormatAndValueArchiveDefaultTypeInternal _CellFormatAndValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CellSpecArchive::CellSpecArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_)*/nullptr
  , /*decltype(_impl_.chooser_control_popup_model_)*/nullptr
  , /*decltype(_impl_.range_control_min_)*/0
  , /*decltype(_impl_.range_control_max_)*/0
  , /*decltype(_impl_.range_control_inc_)*/0
  , /*decltype(_impl_.interaction_type_)*/0u
  , /*decltype(_impl_.chooser_control_start_w_first_)*/false
  , /*decltype(_impl_.category_summary_should_display_label_)*/false} {}
struct CellSpecArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellSpecArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellSpecArchiveDefaultTypeInternal() {}
  union {
    CellSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellSpecArchiveDefaultTypeInternal _CellSpecArchive_default_instance_;
PROTOBUF_CONSTEXPR CommentStorageWrapperArchive::CommentStorageWrapperArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.comment_storage_)*/nullptr} {}
struct CommentStorageWrapperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommentStorageWrapperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommentStorageWrapperArchiveDefaultTypeInternal() {}
  union {
    CommentStorageWrapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommentStorageWrapperArchiveDefaultTypeInternal _CommentStorageWrapperArchive_default_instance_;
PROTOBUF_CONSTEXPR CellDiffArchive::CellDiffArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_map_to_set_)*/nullptr
  , /*decltype(_impl_.property_map_to_reset_)*/nullptr} {}
struct CellDiffArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDiffArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDiffArchiveDefaultTypeInternal() {}
  union {
    CellDiffArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDiffArchiveDefaultTypeInternal _CellDiffArchive_default_instance_;
PROTOBUF_CONSTEXPR CellDiffArray::CellDiffArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.large_array_)*/nullptr} {}
struct CellDiffArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDiffArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDiffArrayDefaultTypeInternal() {}
  union {
    CellDiffArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDiffArrayDefaultTypeInternal _CellDiffArray_default_instance_;
PROTOBUF_CONSTEXPR CellDiffArraySegment::CellDiffArraySegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.elements_)*/{}
  , /*decltype(_impl_.large_array_segment_)*/nullptr} {}
struct CellDiffArraySegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDiffArraySegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDiffArraySegmentDefaultTypeInternal() {}
  union {
    CellDiffArraySegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDiffArraySegmentDefaultTypeInternal _CellDiffArraySegment_default_instance_;
PROTOBUF_CONSTEXPR CellDiffMapArchive::CellDiffMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expanded_cell_ids_)*/{}
  , /*decltype(_impl_.cell_uids_)*/nullptr
  , /*decltype(_impl_.cell_diff_array_)*/nullptr
  , /*decltype(_impl_.uid_based_)*/false} {}
struct CellDiffMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDiffMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDiffMapArchiveDefaultTypeInternal() {}
  union {
    CellDiffMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDiffMapArchiveDefaultTypeInternal _CellDiffMapArchive_default_instance_;
PROTOBUF_CONSTEXPR HierarchicalCellDiffMapArchive_BoxedRow::HierarchicalCellDiffMapArchive_BoxedRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_diff_list_)*/{}
  , /*decltype(_impl_.column_index_set_)*/nullptr} {}
struct HierarchicalCellDiffMapArchive_BoxedRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalCellDiffMapArchive_BoxedRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalCellDiffMapArchive_BoxedRowDefaultTypeInternal() {}
  union {
    HierarchicalCellDiffMapArchive_BoxedRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalCellDiffMapArchive_BoxedRowDefaultTypeInternal _HierarchicalCellDiffMapArchive_BoxedRow_default_instance_;
PROTOBUF_CONSTEXPR HierarchicalCellDiffMapArchive::HierarchicalCellDiffMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_header_uids_)*/{}
  , /*decltype(_impl_.column_header_uids_)*/{}
  , /*decltype(_impl_.aggregate_rule_uids_)*/{}
  , /*decltype(_impl_.row_value_uids_)*/{}
  , /*decltype(_impl_.row_level_preorder_)*/{}
  , /*decltype(_impl_.column_value_uids_)*/{}
  , /*decltype(_impl_.column_level_preorder_)*/{}
  , /*decltype(_impl_.cell_diff_storage_)*/{}
  , /*decltype(_impl_.row_sizes_)*/{}
  , /*decltype(_impl_.column_sizes_)*/{}
  , /*decltype(_impl_.num_row_rules_)*/0
  , /*decltype(_impl_.num_column_rules_)*/0
  , /*decltype(_impl_.active_flattening_dimension_)*/-1} {}
struct HierarchicalCellDiffMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HierarchicalCellDiffMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HierarchicalCellDiffMapArchiveDefaultTypeInternal() {}
  union {
    HierarchicalCellDiffMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HierarchicalCellDiffMapArchiveDefaultTypeInternal _HierarchicalCellDiffMapArchive_default_instance_;
PROTOBUF_CONSTEXPR DoubleStyleMapArchive_DoubleStyleMapEntryArchive::DoubleStyleMapArchive_DoubleStyleMapEntryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_id_)*/nullptr
  , /*decltype(_impl_.old_style_)*/nullptr
  , /*decltype(_impl_.new_style_)*/nullptr} {}
struct DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal() {}
  union {
    DoubleStyleMapArchive_DoubleStyleMapEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleStyleMapArchive_DoubleStyleMapEntryArchiveDefaultTypeInternal _DoubleStyleMapArchive_DoubleStyleMapEntryArchive_default_instance_;
PROTOBUF_CONSTEXPR DoubleStyleMapArchive::DoubleStyleMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_map_entry_)*/{}
  , /*decltype(_impl_.capacity_)*/0u
  , /*decltype(_impl_.count_)*/0u} {}
struct DoubleStyleMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleStyleMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleStyleMapArchiveDefaultTypeInternal() {}
  union {
    DoubleStyleMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleStyleMapArchiveDefaultTypeInternal _DoubleStyleMapArchive_default_instance_;
PROTOBUF_CONSTEXPR StyleTableMapArchive_StyleTableMapEntryArchive::StyleTableMapArchive_StyleTableMapEntryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_style_)*/nullptr
  , /*decltype(_impl_.new_style_)*/nullptr
  , /*decltype(_impl_.key_)*/0u} {}
struct StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal() {}
  union {
    StyleTableMapArchive_StyleTableMapEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyleTableMapArchive_StyleTableMapEntryArchiveDefaultTypeInternal _StyleTableMapArchive_StyleTableMapEntryArchive_default_instance_;
PROTOBUF_CONSTEXPR StyleTableMapArchive::StyleTableMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_entry_)*/{}
  , /*decltype(_impl_.capacity_)*/0u
  , /*decltype(_impl_.count_)*/0u} {}
struct StyleTableMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyleTableMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyleTableMapArchiveDefaultTypeInternal() {}
  union {
    StyleTableMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyleTableMapArchiveDefaultTypeInternal _StyleTableMapArchive_default_instance_;
PROTOBUF_CONSTEXPR SelectionArchive::SelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_ranges_)*/{}
  , /*decltype(_impl_.base_ranges_)*/{}
  , /*decltype(_impl_.tablemodel_)*/nullptr
  , /*decltype(_impl_.anchor_cell_)*/nullptr
  , /*decltype(_impl_.cursor_cell_)*/nullptr
  , /*decltype(_impl_.table_info_)*/nullptr
  , /*decltype(_impl_.cell_uid_region_)*/nullptr
  , /*decltype(_impl_.base_uid_region_)*/nullptr
  , /*decltype(_impl_.anchor_cell_uid_)*/nullptr
  , /*decltype(_impl_.cursor_cell_uid_)*/nullptr
  , /*decltype(_impl_.selection_type_)*/0} {}
struct SelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectionArchiveDefaultTypeInternal() {}
  union {
    SelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectionArchiveDefaultTypeInternal _SelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR DeathhawkRdar39989167CellSelectionArchive::DeathhawkRdar39989167CellSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_info_)*/nullptr
  , /*decltype(_impl_.cell_uid_region_)*/nullptr
  , /*decltype(_impl_.base_uid_region_)*/nullptr
  , /*decltype(_impl_.anchor_cell_uid_)*/nullptr
  , /*decltype(_impl_.cursor_cell_uid_)*/nullptr
  , /*decltype(_impl_.selection_type_)*/0} {}
struct DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal() {}
  union {
    DeathhawkRdar39989167CellSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeathhawkRdar39989167CellSelectionArchiveDefaultTypeInternal _DeathhawkRdar39989167CellSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR StrokeSelectionArchive::StrokeSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mask_)*/0} {}
struct StrokeSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrokeSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrokeSelectionArchiveDefaultTypeInternal() {}
  union {
    StrokeSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrokeSelectionArchiveDefaultTypeInternal _StrokeSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ControlCellSelectionArchive::ControlCellSelectionArchive(
    ::_pbi::ConstantInitialized) {}
struct ControlCellSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlCellSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlCellSelectionArchiveDefaultTypeInternal() {}
  union {
    ControlCellSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlCellSelectionArchiveDefaultTypeInternal _ControlCellSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR StockCellSelectionArchive::StockCellSelectionArchive(
    ::_pbi::ConstantInitialized) {}
struct StockCellSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StockCellSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StockCellSelectionArchiveDefaultTypeInternal() {}
  union {
    StockCellSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StockCellSelectionArchiveDefaultTypeInternal _StockCellSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR TableNameSelectionArchive::TableNameSelectionArchive(
    ::_pbi::ConstantInitialized) {}
struct TableNameSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableNameSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableNameSelectionArchiveDefaultTypeInternal() {}
  union {
    TableNameSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableNameSelectionArchiveDefaultTypeInternal _TableNameSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR AutofillSelectionArchive::AutofillSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_cell_range_)*/nullptr
  , /*decltype(_impl_.target_cell_range_)*/nullptr} {}
struct AutofillSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillSelectionArchiveDefaultTypeInternal() {}
  union {
    AutofillSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillSelectionArchiveDefaultTypeInternal _AutofillSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR FilterRulePrePivotArchive::FilterRulePrePivotArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.predicate_)*/nullptr
  , /*decltype(_impl_.disabled_)*/false} {}
struct FilterRulePrePivotArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterRulePrePivotArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterRulePrePivotArchiveDefaultTypeInternal() {}
  union {
    FilterRulePrePivotArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterRulePrePivotArchiveDefaultTypeInternal _FilterRulePrePivotArchive_default_instance_;
PROTOBUF_CONSTEXPR FilterRuleArchive::FilterRuleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.predicate_)*/nullptr} {}
struct FilterRuleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterRuleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterRuleArchiveDefaultTypeInternal() {}
  union {
    FilterRuleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterRuleArchiveDefaultTypeInternal _FilterRuleArchive_default_instance_;
PROTOBUF_CONSTEXPR TableStyleArchive::TableStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.table_properties_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u} {}
struct TableStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableStyleArchiveDefaultTypeInternal() {}
  union {
    TableStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableStyleArchiveDefaultTypeInternal _TableStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR CellStyleArchive::CellStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_properties_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u} {}
struct CellStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellStyleArchiveDefaultTypeInternal() {}
  union {
    CellStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellStyleArchiveDefaultTypeInternal _CellStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaPredArgDataArchive::FormulaPredArgDataArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.double_value_)*/0
  , /*decltype(_impl_.decimal_low_)*/uint64_t{0u}
  , /*decltype(_impl_.decimal_high_)*/uint64_t{0u}
  , /*decltype(_impl_.date_value_)*/0
  , /*decltype(_impl_.duration_timeinterval_)*/0
  , /*decltype(_impl_.duration_units_)*/0
  , /*decltype(_impl_.boolean_value_)*/false} {}
struct FormulaPredArgDataArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaPredArgDataArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaPredArgDataArchiveDefaultTypeInternal() {}
  union {
    FormulaPredArgDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaPredArgDataArchiveDefaultTypeInternal _FormulaPredArgDataArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaPredArgArchive::FormulaPredArgArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.list_entries_)*/{}
  , /*decltype(_impl_.arg_value_)*/nullptr
  , /*decltype(_impl_.base_cell_ref_)*/nullptr
  , /*decltype(_impl_.relative_cell_ref_)*/nullptr
  , /*decltype(_impl_.category_ref_)*/nullptr
  , /*decltype(_impl_.uid_tract_list_)*/nullptr
  , /*decltype(_impl_.host_cell_coord_)*/nullptr
  , /*decltype(_impl_.view_tract_ref_)*/nullptr
  , /*decltype(_impl_.arg_type_)*/0
  , /*decltype(_impl_.preserve_row_)*/false
  , /*decltype(_impl_.preserve_column_)*/false} {}
struct FormulaPredArgArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaPredArgArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaPredArgArchiveDefaultTypeInternal() {}
  union {
    FormulaPredArgArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaPredArgArchiveDefaultTypeInternal _FormulaPredArgArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaPredicatePrePivotArchive::FormulaPredicatePrePivotArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_)*/nullptr
  , /*decltype(_impl_.predicate_type_)*/0
  , /*decltype(_impl_.qualifier1_)*/0
  , /*decltype(_impl_.qualifier2_)*/0
  , /*decltype(_impl_.param_index1_)*/0
  , /*decltype(_impl_.param_index2_)*/0
  , /*decltype(_impl_.param_index0_)*/0} {}
struct FormulaPredicatePrePivotArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaPredicatePrePivotArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaPredicatePrePivotArchiveDefaultTypeInternal() {}
  union {
    FormulaPredicatePrePivotArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaPredicatePrePivotArchiveDefaultTypeInternal _FormulaPredicatePrePivotArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaPredicateArchive::FormulaPredicateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.param_value0_)*/nullptr
  , /*decltype(_impl_.param_value1_)*/nullptr
  , /*decltype(_impl_.param_value2_)*/nullptr
  , /*decltype(_impl_.formula_)*/nullptr
  , /*decltype(_impl_.host_table_uid_)*/nullptr
  , /*decltype(_impl_.host_column_uid_)*/nullptr
  , /*decltype(_impl_.host_row_uid_)*/nullptr
  , /*decltype(_impl_.predicate_type_)*/0
  , /*decltype(_impl_.qualifier1_)*/0
  , /*decltype(_impl_.qualifier2_)*/0
  , /*decltype(_impl_.for_conditional_style_)*/false} {}
struct FormulaPredicateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaPredicateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaPredicateArchiveDefaultTypeInternal() {}
  union {
    FormulaPredicateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaPredicateArchiveDefaultTypeInternal _FormulaPredicateArchive_default_instance_;
PROTOBUF_CONSTEXPR ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.predicate_)*/nullptr
  , /*decltype(_impl_.cell_style_)*/nullptr
  , /*decltype(_impl_.text_style_)*/nullptr} {}
struct ConditionalStyleSetArchive_ConditionalStyleRulePrePivotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionalStyleSetArchive_ConditionalStyleRulePrePivotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionalStyleSetArchive_ConditionalStyleRulePrePivotDefaultTypeInternal() {}
  union {
    ConditionalStyleSetArchive_ConditionalStyleRulePrePivot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionalStyleSetArchive_ConditionalStyleRulePrePivotDefaultTypeInternal _ConditionalStyleSetArchive_ConditionalStyleRulePrePivot_default_instance_;
PROTOBUF_CONSTEXPR ConditionalStyleSetArchive_ConditionalStyleRule::ConditionalStyleSetArchive_ConditionalStyleRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.predicate_)*/nullptr
  , /*decltype(_impl_.cell_style_)*/nullptr
  , /*decltype(_impl_.text_style_)*/nullptr} {}
struct ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal() {}
  union {
    ConditionalStyleSetArchive_ConditionalStyleRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionalStyleSetArchive_ConditionalStyleRuleDefaultTypeInternal _ConditionalStyleSetArchive_ConditionalStyleRule_default_instance_;
PROTOBUF_CONSTEXPR ConditionalStyleSetArchive_ConditionalStyleRules::ConditionalStyleSetArchive_ConditionalStyleRules(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rule_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConditionalStyleSetArchive_ConditionalStyleRulesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionalStyleSetArchive_ConditionalStyleRulesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionalStyleSetArchive_ConditionalStyleRulesDefaultTypeInternal() {}
  union {
    ConditionalStyleSetArchive_ConditionalStyleRules _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionalStyleSetArchive_ConditionalStyleRulesDefaultTypeInternal _ConditionalStyleSetArchive_ConditionalStyleRules_default_instance_;
PROTOBUF_CONSTEXPR ConditionalStyleSetArchive::ConditionalStyleSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rules_prepivot_)*/{}
  , /*decltype(_impl_.rules_)*/nullptr
  , /*decltype(_impl_.rulecount_)*/0u} {}
struct ConditionalStyleSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionalStyleSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionalStyleSetArchiveDefaultTypeInternal() {}
  union {
    ConditionalStyleSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionalStyleSetArchiveDefaultTypeInternal _ConditionalStyleSetArchive_default_instance_;
PROTOBUF_CONSTEXPR FilterSetArchive::FilterSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filter_rules_prepivot_)*/{}
  , /*decltype(_impl_.filter_offsets_)*/{}
  , /*decltype(_impl_.filter_enabled_)*/{}
  , /*decltype(_impl_.filter_rules_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.needs_formula_rewrite_for_import_)*/false
  , /*decltype(_impl_.is_enabled_)*/true} {}
struct FilterSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterSetArchiveDefaultTypeInternal() {}
  union {
    FilterSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterSetArchiveDefaultTypeInternal _FilterSetArchive_default_instance_;
PROTOBUF_CONSTEXPR UniqueIndexArchive_UniqueIndexEntryArchive::UniqueIndexArchive_UniqueIndexEntryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_uids_)*/{}
  , /*decltype(_impl_.string_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UniqueIndexArchive_UniqueIndexEntryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UniqueIndexArchive_UniqueIndexEntryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UniqueIndexArchive_UniqueIndexEntryArchiveDefaultTypeInternal() {}
  union {
    UniqueIndexArchive_UniqueIndexEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UniqueIndexArchive_UniqueIndexEntryArchiveDefaultTypeInternal _UniqueIndexArchive_UniqueIndexEntryArchive_default_instance_;
PROTOBUF_CONSTEXPR UniqueIndexArchive::UniqueIndexArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unique_entries_)*/{}
  , /*decltype(_impl_.column_uid_)*/nullptr} {}
struct UniqueIndexArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UniqueIndexArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UniqueIndexArchiveDefaultTypeInternal() {}
  union {
    UniqueIndexArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UniqueIndexArchiveDefaultTypeInternal _UniqueIndexArchive_default_instance_;
PROTOBUF_CONSTEXPR HiddenStateExtentArchive_RowOrColumnState::HiddenStateExtentArchive_RowOrColumnState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_or_column_uid_)*/nullptr
  , /*decltype(_impl_.user_hidden_)*/false
  , /*decltype(_impl_.filtered_)*/false
  , /*decltype(_impl_.pivot_hidden_)*/false} {}
struct HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal() {}
  union {
    HiddenStateExtentArchive_RowOrColumnState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HiddenStateExtentArchive_RowOrColumnStateDefaultTypeInternal _HiddenStateExtentArchive_RowOrColumnState_default_instance_;
PROTOBUF_CONSTEXPR HiddenStateExtentArchive::HiddenStateExtentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_hidden_states_)*/{}
  , /*decltype(_impl_.threshold_value_)*/{}
  , /*decltype(_impl_.collapsed_group_uids_)*/{}
  , /*decltype(_impl_.unique_indexes_)*/{}
  , /*decltype(_impl_.summary_hidden_states_)*/{}
  , /*decltype(_impl_.hidden_state_extent_uid_)*/nullptr
  , /*decltype(_impl_.filter_set_)*/nullptr
  , /*decltype(_impl_.summary_pivot_hidden_indexes_)*/nullptr
  , /*decltype(_impl_.summary_filtered_indexes_)*/nullptr
  , /*decltype(_impl_.row_or_column_direction_)*/0
  , /*decltype(_impl_.needs_to_update_filter_set_for_import_)*/false} {}
struct HiddenStateExtentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HiddenStateExtentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HiddenStateExtentArchiveDefaultTypeInternal() {}
  union {
    HiddenStateExtentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HiddenStateExtentArchiveDefaultTypeInternal _HiddenStateExtentArchive_default_instance_;
PROTOBUF_CONSTEXPR HiddenStatesArchive::HiddenStatesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hidden_states_uid_)*/nullptr
  , /*decltype(_impl_.column_hidden_state_extent_)*/nullptr
  , /*decltype(_impl_.row_hidden_state_extent_)*/nullptr} {}
struct HiddenStatesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HiddenStatesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HiddenStatesArchiveDefaultTypeInternal() {}
  union {
    HiddenStatesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HiddenStatesArchiveDefaultTypeInternal _HiddenStatesArchive_default_instance_;
PROTOBUF_CONSTEXPR HiddenStatesOwnerArchive::HiddenStatesOwnerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hidden_states_)*/{}
  , /*decltype(_impl_.owner_uid_)*/nullptr} {}
struct HiddenStatesOwnerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HiddenStatesOwnerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HiddenStatesOwnerArchiveDefaultTypeInternal() {}
  union {
    HiddenStatesOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HiddenStatesOwnerArchiveDefaultTypeInternal _HiddenStatesOwnerArchive_default_instance_;
PROTOBUF_CONSTEXPR ExpandCollapseStateArchive::ExpandCollapseStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uids_collapsed_)*/{}
  , /*decltype(_impl_.uids_expanded_)*/{}
  , /*decltype(_impl_.dimension_)*/-1} {}
struct ExpandCollapseStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpandCollapseStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpandCollapseStateArchiveDefaultTypeInternal() {}
  union {
    ExpandCollapseStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpandCollapseStateArchiveDefaultTypeInternal _ExpandCollapseStateArchive_default_instance_;
PROTOBUF_CONSTEXPR TokenAttachmentArchive::TokenAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.expressionnode_)*/nullptr} {}
struct TokenAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenAttachmentArchiveDefaultTypeInternal() {}
  union {
    TokenAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenAttachmentArchiveDefaultTypeInternal _TokenAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaArchive::FormulaArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expressiontree_)*/nullptr} {}
struct FormulaArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaArchiveDefaultTypeInternal() {}
  union {
    FormulaArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaArchiveDefaultTypeInternal _FormulaArchive_default_instance_;
PROTOBUF_CONSTEXPR ExpressionNodeArchive::ExpressionNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.first_index_)*/uint64_t{0u}
  , /*decltype(_impl_.last_index_)*/uint64_t{0u}} {}
struct ExpressionNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpressionNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpressionNodeArchiveDefaultTypeInternal() {}
  union {
    ExpressionNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpressionNodeArchiveDefaultTypeInternal _ExpressionNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR BooleanNodeArchive::BooleanNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.value_)*/false} {}
struct BooleanNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BooleanNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BooleanNodeArchiveDefaultTypeInternal() {}
  union {
    BooleanNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BooleanNodeArchiveDefaultTypeInternal _BooleanNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR NumberNodeArchive::NumberNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.number_)*/0
  , /*decltype(_impl_.decimal_low_)*/uint64_t{0u}
  , /*decltype(_impl_.decimal_high_)*/uint64_t{0u}} {}
struct NumberNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberNodeArchiveDefaultTypeInternal() {}
  union {
    NumberNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberNodeArchiveDefaultTypeInternal _NumberNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR StringNodeArchive::StringNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct StringNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringNodeArchiveDefaultTypeInternal() {}
  union {
    StringNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringNodeArchiveDefaultTypeInternal _StringNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR IdentifierNodeArchive::IdentifierNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.symbol_)*/0u} {}
struct IdentifierNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdentifierNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdentifierNodeArchiveDefaultTypeInternal() {}
  union {
    IdentifierNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdentifierNodeArchiveDefaultTypeInternal _IdentifierNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ArrayNodeArchive::ArrayNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.columns_)*/0u
  , /*decltype(_impl_.rows_)*/0u} {}
struct ArrayNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArrayNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArrayNodeArchiveDefaultTypeInternal() {}
  union {
    ArrayNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArrayNodeArchiveDefaultTypeInternal _ArrayNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ListNodeArchive::ListNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ListNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListNodeArchiveDefaultTypeInternal() {}
  union {
    ListNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListNodeArchiveDefaultTypeInternal _ListNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR OperatorNodeArchive::OperatorNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.operatorchar_)*/0u} {}
struct OperatorNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatorNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatorNodeArchiveDefaultTypeInternal() {}
  union {
    OperatorNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatorNodeArchiveDefaultTypeInternal _OperatorNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR PostfixOperatorNodeArchive::PostfixOperatorNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct PostfixOperatorNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostfixOperatorNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostfixOperatorNodeArchiveDefaultTypeInternal() {}
  union {
    PostfixOperatorNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostfixOperatorNodeArchiveDefaultTypeInternal _PostfixOperatorNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR PrefixOperatorNodeArchive::PrefixOperatorNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct PrefixOperatorNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrefixOperatorNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrefixOperatorNodeArchiveDefaultTypeInternal() {}
  union {
    PrefixOperatorNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrefixOperatorNodeArchiveDefaultTypeInternal _PrefixOperatorNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR FunctionNodeArchive::FunctionNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.invalidfunctionname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.functionindex_)*/0u} {}
struct FunctionNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionNodeArchiveDefaultTypeInternal() {}
  union {
    FunctionNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionNodeArchiveDefaultTypeInternal _FunctionNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR FunctionEndNodeArchive::FunctionEndNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct FunctionEndNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionEndNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionEndNodeArchiveDefaultTypeInternal() {}
  union {
    FunctionEndNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionEndNodeArchiveDefaultTypeInternal _FunctionEndNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR DateNodeArchive::DateNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct DateNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateNodeArchiveDefaultTypeInternal() {}
  union {
    DateNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateNodeArchiveDefaultTypeInternal _DateNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ReferenceNodeArchive::ReferenceNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hosttableid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rangereference_)*/nullptr
  , /*decltype(_impl_.table_uid_)*/nullptr
  , /*decltype(_impl_.range_top_left_)*/nullptr
  , /*decltype(_impl_.range_bottom_right_)*/nullptr
  , /*decltype(_impl_.category_ref_)*/nullptr
  , /*decltype(_impl_.uid_range_rect_)*/nullptr
  , /*decltype(_impl_.host_cell_ref_)*/nullptr
  , /*decltype(_impl_.preserve_flags_)*/0u} {}
struct ReferenceNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceNodeArchiveDefaultTypeInternal() {}
  union {
    ReferenceNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceNodeArchiveDefaultTypeInternal _ReferenceNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR DurationNodeArchive::DurationNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.timeinterval_)*/0
  , /*decltype(_impl_.smallest_)*/0u
  , /*decltype(_impl_.largest_)*/0u
  , /*decltype(_impl_.style_)*/0u} {}
struct DurationNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DurationNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DurationNodeArchiveDefaultTypeInternal() {}
  union {
    DurationNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DurationNodeArchiveDefaultTypeInternal _DurationNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ArgumentPlaceholderNodeArchive::ArgumentPlaceholderNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.functionindex_)*/0u
  , /*decltype(_impl_.argumentindex_)*/0u
  , /*decltype(_impl_.mode_)*/0u} {}
struct ArgumentPlaceholderNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArgumentPlaceholderNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArgumentPlaceholderNodeArchiveDefaultTypeInternal() {}
  union {
    ArgumentPlaceholderNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArgumentPlaceholderNodeArchiveDefaultTypeInternal _ArgumentPlaceholderNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR EmptyExpressionNodeArchive::EmptyExpressionNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct EmptyExpressionNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyExpressionNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyExpressionNodeArchiveDefaultTypeInternal() {}
  union {
    EmptyExpressionNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyExpressionNodeArchiveDefaultTypeInternal _EmptyExpressionNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR LetNodeArchive::LetNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.whitespace_after_let_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.whitespace_after_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.whitespace_after_equals_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.whitespace_after_delimiter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct LetNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LetNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LetNodeArchiveDefaultTypeInternal() {}
  union {
    LetNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LetNodeArchiveDefaultTypeInternal _LetNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR InNodeArchive::InNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct InNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InNodeArchiveDefaultTypeInternal() {}
  union {
    InNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InNodeArchiveDefaultTypeInternal _InNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR VariableNodeArchive::VariableNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.symbol_)*/0u} {}
struct VariableNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariableNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariableNodeArchiveDefaultTypeInternal() {}
  union {
    VariableNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariableNodeArchiveDefaultTypeInternal _VariableNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR LayoutHintArchive::LayoutHintArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cellrange_)*/nullptr
  , /*decltype(_impl_.hintid_)*/nullptr
  , /*decltype(_impl_.maximumsize_)*/nullptr
  , /*decltype(_impl_.effectivesize_)*/nullptr
  , /*decltype(_impl_.isvalid_)*/false
  , /*decltype(_impl_.horizontal_)*/false
  , /*decltype(_impl_.partitionposition_)*/0u
  , /*decltype(_impl_.partitioningpass_)*/0u} {}
struct LayoutHintArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayoutHintArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayoutHintArchiveDefaultTypeInternal() {}
  union {
    LayoutHintArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayoutHintArchiveDefaultTypeInternal _LayoutHintArchive_default_instance_;
PROTOBUF_CONSTEXPR CompletionTokenAttachmentArchive::CompletionTokenAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.completiontext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.caretposition_)*/0u
  , /*decltype(_impl_.prefixstart_)*/0u} {}
struct CompletionTokenAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompletionTokenAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompletionTokenAttachmentArchiveDefaultTypeInternal() {}
  union {
    CompletionTokenAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompletionTokenAttachmentArchiveDefaultTypeInternal _CompletionTokenAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR HiddenStateFormulaOwnerArchive::HiddenStateFormulaOwnerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.threshold_value_)*/{}
  , /*decltype(_impl_.owner_id_)*/nullptr
  , /*decltype(_impl_.needs_to_update_filter_set_for_import_)*/false} {}
struct HiddenStateFormulaOwnerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HiddenStateFormulaOwnerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HiddenStateFormulaOwnerArchiveDefaultTypeInternal() {}
  union {
    HiddenStateFormulaOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HiddenStateFormulaOwnerArchiveDefaultTypeInternal _HiddenStateFormulaOwnerArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaStoreArchive_FormulaStorePair::FormulaStoreArchive_FormulaStorePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_)*/nullptr
  , /*decltype(_impl_.formula_index_)*/0u} {}
struct FormulaStoreArchive_FormulaStorePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaStoreArchive_FormulaStorePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaStoreArchive_FormulaStorePairDefaultTypeInternal() {}
  union {
    FormulaStoreArchive_FormulaStorePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaStoreArchive_FormulaStorePairDefaultTypeInternal _FormulaStoreArchive_FormulaStorePair_default_instance_;
PROTOBUF_CONSTEXPR FormulaStoreArchive::FormulaStoreArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formulas_)*/{}
  , /*decltype(_impl_.next_formula_index_)*/0u} {}
struct FormulaStoreArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaStoreArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaStoreArchiveDefaultTypeInternal() {}
  union {
    FormulaStoreArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaStoreArchiveDefaultTypeInternal _FormulaStoreArchive_default_instance_;
PROTOBUF_CONSTEXPR MergeOperationArchive::MergeOperationArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.merge_ranges_)*/{}
  , /*decltype(_impl_.merge_formulas_)*/{}
  , /*decltype(_impl_.merge_formula_indexes_)*/{}
  , /*decltype(_impl_.merge_type_)*/1} {}
struct MergeOperationArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeOperationArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeOperationArchiveDefaultTypeInternal() {}
  union {
    MergeOperationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeOperationArchiveDefaultTypeInternal _MergeOperationArchive_default_instance_;
PROTOBUF_CONSTEXPR MergeOwnerArchive::MergeOwnerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_id_)*/nullptr
  , /*decltype(_impl_.formula_store_)*/nullptr} {}
struct MergeOwnerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeOwnerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeOwnerArchiveDefaultTypeInternal() {}
  union {
    MergeOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeOwnerArchiveDefaultTypeInternal _MergeOwnerArchive_default_instance_;
PROTOBUF_CONSTEXPR PencilAnnotationArchive::PencilAnnotationArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_info_)*/nullptr
  , /*decltype(_impl_.pencil_annotation_storage_)*/nullptr} {}
struct PencilAnnotationArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PencilAnnotationArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PencilAnnotationArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PencilAnnotationArchiveDefaultTypeInternal _PencilAnnotationArchive_default_instance_;
PROTOBUF_CONSTEXPR PencilAnnotationOwnerArchive::PencilAnnotationOwnerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.owner_id_)*/nullptr
  , /*decltype(_impl_.formula_store_)*/nullptr} {}
struct PencilAnnotationOwnerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PencilAnnotationOwnerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PencilAnnotationOwnerArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PencilAnnotationOwnerArchiveDefaultTypeInternal _PencilAnnotationOwnerArchive_default_instance_;
PROTOBUF_CONSTEXPR AccumulatorArchive::AccumulatorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_value_)*/nullptr
  , /*decltype(_impl_.max_value_)*/nullptr
  , /*decltype(_impl_.number_total_value_)*/nullptr
  , /*decltype(_impl_.first_date_seen_)*/nullptr
  , /*decltype(_impl_.product_value_)*/nullptr
  , /*decltype(_impl_.bool_count_)*/0u
  , /*decltype(_impl_.number_count_)*/0u
  , /*decltype(_impl_.date_count_)*/0u
  , /*decltype(_impl_.duration_count_)*/0u
  , /*decltype(_impl_.string_count_)*/0u
  , /*decltype(_impl_.bool_true_count_)*/0u
  , /*decltype(_impl_.total_secs_since_ref_date_)*/0
  , /*decltype(_impl_.secs_to_add_)*/0
  , /*decltype(_impl_.error_count_)*/0u
  , /*decltype(_impl_.is_circular_ref_)*/false
  , /*decltype(_impl_.no_content_count_)*/0u} {}
struct AccumulatorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccumulatorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccumulatorArchiveDefaultTypeInternal() {}
  union {
    AccumulatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccumulatorArchiveDefaultTypeInternal _AccumulatorArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupColumnArchive::GroupColumnArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_uid_)*/nullptr
  , /*decltype(_impl_.grouping_functor_)*/nullptr
  , /*decltype(_impl_.grouping_column_uid_)*/nullptr
  , /*decltype(_impl_.grouping_type_)*/0u} {}
struct GroupColumnArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupColumnArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupColumnArchiveDefaultTypeInternal() {}
  union {
    GroupColumnArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupColumnArchiveDefaultTypeInternal _GroupColumnArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupColumnListArchive::GroupColumnListArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_column_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupColumnListArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupColumnListArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupColumnListArchiveDefaultTypeInternal() {}
  union {
    GroupColumnListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupColumnListArchiveDefaultTypeInternal _GroupColumnListArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnAggregateArchive::ColumnAggregateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_uid_)*/nullptr
  , /*decltype(_impl_.column_aggregate_uid_)*/nullptr
  , /*decltype(_impl_.running_total_group_column_uid_)*/nullptr
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.agg_type_)*/0u
  , /*decltype(_impl_.show_as_type_)*/0u} {}
struct ColumnAggregateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnAggregateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnAggregateArchiveDefaultTypeInternal() {}
  union {
    ColumnAggregateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnAggregateArchiveDefaultTypeInternal _ColumnAggregateArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnAggregateListArchive::ColumnAggregateListArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aggregates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColumnAggregateListArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnAggregateListArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnAggregateListArchiveDefaultTypeInternal() {}
  union {
    ColumnAggregateListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnAggregateListArchiveDefaultTypeInternal _ColumnAggregateListArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupByArchive_AggNodeArchive::GroupByArchive_AggNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.child_)*/{}
  , /*decltype(_impl_.formula_coord_)*/nullptr
  , /*decltype(_impl_.accum_)*/nullptr} {}
struct GroupByArchive_AggNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByArchive_AggNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByArchive_AggNodeArchiveDefaultTypeInternal() {}
  union {
    GroupByArchive_AggNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByArchive_AggNodeArchiveDefaultTypeInternal _GroupByArchive_AggNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupByArchive_AggregatorArchive::GroupByArchive_AggregatorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_uid_)*/nullptr
  , /*decltype(_impl_.agg_node_)*/nullptr} {}
struct GroupByArchive_AggregatorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByArchive_AggregatorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByArchive_AggregatorArchiveDefaultTypeInternal() {}
  union {
    GroupByArchive_AggregatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByArchive_AggregatorArchiveDefaultTypeInternal _GroupByArchive_AggregatorArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.row_uids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal() {}
  union {
    GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveDefaultTypeInternal _GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupByArchive_GroupNodeArchive_FormatManagerArchive::GroupByArchive_GroupNodeArchive_FormatManagerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formats_)*/{}
  , /*decltype(_impl_.row_sets_)*/{}
  , /*decltype(_impl_.row_uid_lookup_sets_)*/{}
  , /*decltype(_impl_.cell_value_)*/nullptr} {}
struct GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal() {}
  union {
    GroupByArchive_GroupNodeArchive_FormatManagerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByArchive_GroupNodeArchive_FormatManagerArchiveDefaultTypeInternal _GroupByArchive_GroupNodeArchive_FormatManagerArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupByArchive_GroupNodeArchive::GroupByArchive_GroupNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.child_)*/{}
  , /*decltype(_impl_.row_uid_)*/{}
  , /*decltype(_impl_.agg_formula_coords_)*/{}
  , /*decltype(_impl_.child_ref_)*/{}
  , /*decltype(_impl_.group_uid_)*/nullptr
  , /*decltype(_impl_.format_manager_)*/nullptr
  , /*decltype(_impl_.group_cell_value_)*/nullptr
  , /*decltype(_impl_.row_indexes_)*/nullptr
  , /*decltype(_impl_.row_lookup_uids_)*/nullptr} {}
struct GroupByArchive_GroupNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByArchive_GroupNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByArchive_GroupNodeArchiveDefaultTypeInternal() {}
  union {
    GroupByArchive_GroupNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByArchive_GroupNodeArchiveDefaultTypeInternal _GroupByArchive_GroupNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupByArchive::GroupByArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_column_)*/{}
  , /*decltype(_impl_.aggregator_)*/{}
  , /*decltype(_impl_.column_agg_type_)*/{}
  , /*decltype(_impl_.aggregator_ref_)*/{}
  , /*decltype(_impl_.group_by_uid_)*/nullptr
  , /*decltype(_impl_.group_node_root_)*/nullptr
  , /*decltype(_impl_.indirect_agg_type_change_formula_)*/nullptr
  , /*decltype(_impl_.grouping_columns_formula_)*/nullptr
  , /*decltype(_impl_.aggs_in_group_root_formula_)*/nullptr
  , /*decltype(_impl_.grouping_column_headers_formula_)*/nullptr
  , /*decltype(_impl_.column_order_changed_formula_)*/nullptr
  , /*decltype(_impl_.row_order_changed_formula_)*/nullptr
  , /*decltype(_impl_.row_order_changed_ignoring_recalc_formula_)*/nullptr
  , /*decltype(_impl_.row_uid_lookup_)*/nullptr
  , /*decltype(_impl_.hidden_states_changed_formula_)*/nullptr
  , /*decltype(_impl_.group_node_root_ref_)*/nullptr
  , /*decltype(_impl_.is_enabled_)*/false
  , /*decltype(_impl_.owner_index_)*/8} {}
struct GroupByArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByArchiveDefaultTypeInternal() {}
  union {
    GroupByArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByArchiveDefaultTypeInternal _GroupByArchive_default_instance_;
PROTOBUF_CONSTEXPR CategoryOwnerArchive::CategoryOwnerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_by_)*/{}
  , /*decltype(_impl_.owner_uid_)*/nullptr} {}
struct CategoryOwnerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryOwnerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryOwnerArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryOwnerArchiveDefaultTypeInternal _CategoryOwnerArchive_default_instance_;
PROTOBUF_CONSTEXPR CategoryOwnerRefArchive::CategoryOwnerRefArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CategoryOwnerRefArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryOwnerRefArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryOwnerRefArchiveDefaultTypeInternal() {}
  union {
    CategoryOwnerRefArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryOwnerRefArchiveDefaultTypeInternal _CategoryOwnerRefArchive_default_instance_;
PROTOBUF_CONSTEXPR PivotGroupingColumnOptionsMapArchive::PivotGroupingColumnOptionsMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uids_)*/{}
  , /*decltype(_impl_.flags_)*/{}
  , /*decltype(_impl_.aggregate_rule_uids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PivotGroupingColumnOptionsMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotGroupingColumnOptionsMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotGroupingColumnOptionsMapArchiveDefaultTypeInternal() {}
  union {
    PivotGroupingColumnOptionsMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotGroupingColumnOptionsMapArchiveDefaultTypeInternal _PivotGroupingColumnOptionsMapArchive_default_instance_;
PROTOBUF_CONSTEXPR PivotOwnerArchive::PivotOwnerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pivot_owner_uid_)*/nullptr
  , /*decltype(_impl_.grouping_columns_for_rows_)*/nullptr
  , /*decltype(_impl_.grouping_columns_for_columns_)*/nullptr
  , /*decltype(_impl_.aggregate_columns_)*/nullptr
  , /*decltype(_impl_.source_table_uid_)*/nullptr
  , /*decltype(_impl_.grpg_col_options_map_)*/nullptr
  , /*decltype(_impl_.formula_store_)*/nullptr
  , /*decltype(_impl_.refresh_uid_)*/nullptr
  , /*decltype(_impl_.row_column_rule_change_uid_)*/nullptr
  , /*decltype(_impl_.aggregate_rule_change_uid_)*/nullptr
  , /*decltype(_impl_.refresh_timestamp_)*/0
  , /*decltype(_impl_.flattening_dimension_)*/0
  , /*decltype(_impl_.is_empty_pivot_)*/false
  , /*decltype(_impl_.hide_grand_total_rows_)*/false
  , /*decltype(_impl_.hide_grand_total_columns_)*/false} {}
struct PivotOwnerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotOwnerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotOwnerArchiveDefaultTypeInternal() {}
  union {
    PivotOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotOwnerArchiveDefaultTypeInternal _PivotOwnerArchive_default_instance_;
PROTOBUF_CONSTEXPR RichTextPayloadArchive::RichTextPayloadArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.storage_)*/nullptr
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.cellid_)*/nullptr} {}
struct RichTextPayloadArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RichTextPayloadArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RichTextPayloadArchiveDefaultTypeInternal() {}
  union {
    RichTextPayloadArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RichTextPayloadArchiveDefaultTypeInternal _RichTextPayloadArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaEqualsTokenAttachmentArchive::FormulaEqualsTokenAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal() {}
  union {
    FormulaEqualsTokenAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaEqualsTokenAttachmentArchiveDefaultTypeInternal _FormulaEqualsTokenAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR CellFillStandIn::CellFillStandIn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fill_)*/nullptr
  , /*decltype(_impl_.type_is_mixed_)*/false
  , /*decltype(_impl_.color_has_been_modified_)*/false
  , /*decltype(_impl_.color_is_mixed_)*/false
  , /*decltype(_impl_.first_color_has_been_modified_)*/false
  , /*decltype(_impl_.first_color_is_mixed_)*/false
  , /*decltype(_impl_.last_color_has_been_modified_)*/false
  , /*decltype(_impl_.last_color_is_mixed_)*/false
  , /*decltype(_impl_.gradient_type_has_been_modified_)*/false
  , /*decltype(_impl_.gradient_type_is_mixed_)*/false
  , /*decltype(_impl_.gradient_angle_has_been_modified_)*/false
  , /*decltype(_impl_.gradient_angle_is_mixed_)*/false
  , /*decltype(_impl_.image_data_has_been_modified_)*/false
  , /*decltype(_impl_.image_data_is_mixed_)*/false
  , /*decltype(_impl_.tint_color_has_been_modified_)*/false
  , /*decltype(_impl_.tint_color_is_mixed_)*/false
  , /*decltype(_impl_.scale_has_been_modified_)*/false
  , /*decltype(_impl_.scale_is_mixed_)*/false
  , /*decltype(_impl_.technique_has_been_modified_)*/false
  , /*decltype(_impl_.technique_is_mixed_)*/false} {}
struct CellFillStandInDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellFillStandInDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellFillStandInDefaultTypeInternal() {}
  union {
    CellFillStandIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellFillStandInDefaultTypeInternal _CellFillStandIn_default_instance_;
PROTOBUF_CONSTEXPR FormulaSelectionArchive::FormulaSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.activetokencharindex_)*/0u} {}
struct FormulaSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaSelectionArchiveDefaultTypeInternal() {}
  union {
    FormulaSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaSelectionArchiveDefaultTypeInternal _FormulaSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR CellBorderArchive::CellBorderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.top_stroke_)*/nullptr
  , /*decltype(_impl_.right_stroke_)*/nullptr
  , /*decltype(_impl_.bottom_stroke_)*/nullptr
  , /*decltype(_impl_.left_stroke_)*/nullptr
  , /*decltype(_impl_.top_stroke_order_)*/0
  , /*decltype(_impl_.right_stroke_order_)*/0
  , /*decltype(_impl_.bottom_stroke_order_)*/0
  , /*decltype(_impl_.left_stroke_order_)*/0} {}
struct CellBorderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellBorderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellBorderArchiveDefaultTypeInternal() {}
  union {
    CellBorderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellBorderArchiveDefaultTypeInternal _CellBorderArchive_default_instance_;
PROTOBUF_CONSTEXPR DefaultCellStylesContainerArchive::DefaultCellStylesContainerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_uids_)*/{}
  , /*decltype(_impl_.column_uids_)*/{}
  , /*decltype(_impl_.row_types_)*/{}
  , /*decltype(_impl_.column_types_)*/{}
  , /*decltype(_impl_.table_style_network_)*/nullptr
  , /*decltype(_impl_.is_a_pivot_table_)*/false} {}
struct DefaultCellStylesContainerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefaultCellStylesContainerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefaultCellStylesContainerArchiveDefaultTypeInternal() {}
  union {
    DefaultCellStylesContainerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefaultCellStylesContainerArchiveDefaultTypeInternal _DefaultCellStylesContainerArchive_default_instance_;
PROTOBUF_CONSTEXPR MultiTableRemapperArchive::MultiTableRemapperArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_uid_mapper_)*/{}
  , /*decltype(_impl_.backing_tables_for_charts_)*/nullptr
  , /*decltype(_impl_.mapping_purpose_)*/0
  , /*decltype(_impl_.should_steal_references_)*/false
  , /*decltype(_impl_.can_reuse_table_names_)*/false
  , /*decltype(_impl_.cross_document_paste_)*/false
  , /*decltype(_impl_.nested_inner_mapper_)*/false} {}
struct MultiTableRemapperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiTableRemapperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiTableRemapperArchiveDefaultTypeInternal() {}
  union {
    MultiTableRemapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiTableRemapperArchiveDefaultTypeInternal _MultiTableRemapperArchive_default_instance_;
PROTOBUF_CONSTEXPR ChangePropagationMapWrapper::ChangePropagationMapWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.style_replace_prototypes_)*/{}
  , /*decltype(_impl_.style_replace_replacements_)*/{}
  , /*decltype(_impl_.style_modify_styles_)*/{}
  , /*decltype(_impl_.style_modify_old_prop_maps_)*/{}
  , /*decltype(_impl_.style_modify_new_prop_maps_)*/{}
  , /*decltype(_impl_.style_delete_prototypes_)*/{}
  , /*decltype(_impl_.style_delete_replacements_)*/{}
  , /*decltype(_impl_.table_preset_replace_prototype_)*/nullptr
  , /*decltype(_impl_.table_preset_replace_replacement_)*/nullptr
  , /*decltype(_impl_.table_preset_delete_prototype_)*/nullptr
  , /*decltype(_impl_.table_preset_delete_replacement_)*/nullptr
  , /*decltype(_impl_.replacement_behavior_)*/0} {}
struct ChangePropagationMapWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangePropagationMapWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangePropagationMapWrapperDefaultTypeInternal() {}
  union {
    ChangePropagationMapWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangePropagationMapWrapperDefaultTypeInternal _ChangePropagationMapWrapper_default_instance_;
PROTOBUF_CONSTEXPR SummaryCellVendorArchive_SummaryCellEntry::SummaryCellVendorArchive_SummaryCellEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wildcarduid_)*/nullptr
  , /*decltype(_impl_.columnuid_)*/nullptr
  , /*decltype(_impl_.cell_)*/nullptr} {}
struct SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal() {}
  union {
    SummaryCellVendorArchive_SummaryCellEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryCellVendorArchive_SummaryCellEntryDefaultTypeInternal _SummaryCellVendorArchive_SummaryCellEntry_default_instance_;
PROTOBUF_CONSTEXPR SummaryCellVendorArchive::SummaryCellVendorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.table_info_)*/nullptr} {}
struct SummaryCellVendorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryCellVendorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryCellVendorArchiveDefaultTypeInternal() {}
  union {
    SummaryCellVendorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryCellVendorArchiveDefaultTypeInternal _SummaryCellVendorArchive_default_instance_;
PROTOBUF_CONSTEXPR CategoryOrderArchive::CategoryOrderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_info_)*/nullptr
  , /*decltype(_impl_.uid_map_)*/nullptr} {}
struct CategoryOrderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryOrderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryOrderArchiveDefaultTypeInternal() {}
  union {
    CategoryOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryOrderArchiveDefaultTypeInternal _CategoryOrderArchive_default_instance_;
PROTOBUF_CONSTEXPR PivotOrderArchive::PivotOrderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uid_map_)*/nullptr} {}
struct PivotOrderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PivotOrderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PivotOrderArchiveDefaultTypeInternal() {}
  union {
    PivotOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PivotOrderArchiveDefaultTypeInternal _PivotOrderArchive_default_instance_;
PROTOBUF_CONSTEXPR HeaderNameMgrTileArchive_NameFragmentArchive::HeaderNameMgrTileArchive_NameFragmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_fragment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_precedent_)*/nullptr
  , /*decltype(_impl_.uses_of_name_fragment_)*/nullptr} {}
struct HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal() {}
  union {
    HeaderNameMgrTileArchive_NameFragmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderNameMgrTileArchive_NameFragmentArchiveDefaultTypeInternal _HeaderNameMgrTileArchive_NameFragmentArchive_default_instance_;
PROTOBUF_CONSTEXPR HeaderNameMgrTileArchive::HeaderNameMgrTileArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_frag_entries_)*/{}
  , /*decltype(_impl_.first_fragment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_fragment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct HeaderNameMgrTileArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderNameMgrTileArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderNameMgrTileArchiveDefaultTypeInternal() {}
  union {
    HeaderNameMgrTileArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderNameMgrTileArchiveDefaultTypeInternal _HeaderNameMgrTileArchive_default_instance_;
PROTOBUF_CONSTEXPR HeaderNameMgrArchive_PerTableArchive::HeaderNameMgrArchive_PerTableArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_row_uids_)*/{}
  , /*decltype(_impl_.header_column_uids_)*/{}
  , /*decltype(_impl_.update_header_row_uids_)*/{}
  , /*decltype(_impl_.update_header_column_uids_)*/{}
  , /*decltype(_impl_.table_uid_)*/nullptr
  , /*decltype(_impl_.per_table_precedent_)*/nullptr
  , /*decltype(_impl_.is_deleted_)*/false} {}
struct HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal() {}
  union {
    HeaderNameMgrArchive_PerTableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderNameMgrArchive_PerTableArchiveDefaultTypeInternal _HeaderNameMgrArchive_PerTableArchive_default_instance_;
PROTOBUF_CONSTEXPR HeaderNameMgrArchive::HeaderNameMgrArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.per_tables_)*/{}
  , /*decltype(_impl_.name_frag_tiles_)*/{}
  , /*decltype(_impl_.owner_uid_)*/nullptr
  , /*decltype(_impl_.nrm_owner_uid_)*/nullptr} {}
struct HeaderNameMgrArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderNameMgrArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderNameMgrArchiveDefaultTypeInternal() {}
  union {
    HeaderNameMgrArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderNameMgrArchiveDefaultTypeInternal _HeaderNameMgrArchive_default_instance_;
PROTOBUF_CONSTEXPR WidthHeightCacheFittingEntry::WidthHeightCacheFittingEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fitting_index_)*/0u
  , /*decltype(_impl_.fitting_size_)*/0} {}
struct WidthHeightCacheFittingEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WidthHeightCacheFittingEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WidthHeightCacheFittingEntryDefaultTypeInternal() {}
  union {
    WidthHeightCacheFittingEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WidthHeightCacheFittingEntryDefaultTypeInternal _WidthHeightCacheFittingEntry_default_instance_;
PROTOBUF_CONSTEXPR WidthHeightCache::WidthHeightCache(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rows_fitting_entries_)*/{}
  , /*decltype(_impl_.columns_count_)*/0u} {}
struct WidthHeightCacheDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WidthHeightCacheDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WidthHeightCacheDefaultTypeInternal() {}
  union {
    WidthHeightCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WidthHeightCacheDefaultTypeInternal _WidthHeightCache_default_instance_;
PROTOBUF_CONSTEXPR LayoutEngineArchive::LayoutEngineArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.width_height_cache_)*/nullptr} {}
struct LayoutEngineArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LayoutEngineArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LayoutEngineArchiveDefaultTypeInternal() {}
  union {
    LayoutEngineArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LayoutEngineArchiveDefaultTypeInternal _LayoutEngineArchive_default_instance_;
PROTOBUF_CONSTEXPR CollaboratorTableCursorSubselectionArchive::CollaboratorTableCursorSubselectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_column_uid_list_)*/{}
  , /*decltype(_impl_.cell_uid_list_)*/nullptr
  , /*decltype(_impl_.selection_type_)*/0} {}
struct CollaboratorTableCursorSubselectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaboratorTableCursorSubselectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaboratorTableCursorSubselectionArchiveDefaultTypeInternal() {}
  union {
    CollaboratorTableCursorSubselectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaboratorTableCursorSubselectionArchiveDefaultTypeInternal _CollaboratorTableCursorSubselectionArchive_default_instance_;
}  // namespace TST
static ::_pb::Metadata file_level_metadata_TSTArchives_2eproto[163];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSTArchives_2eproto[18];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSTArchives_2eproto = nullptr;

const uint32_t TableStruct_TSTArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TST::CellID, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellID, _impl_.packeddata_),
  PROTOBUF_FIELD_OFFSET(::TST::CellID, _impl_.expanded_coord_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, _impl_.column_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, _impl_.row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, _impl_.column_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDLookupListArchive, _impl_.row_indexes_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, _impl_.row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, _impl_.column_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, _impl_.compressed_row_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, _impl_.compressed_column_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDListArchive, _impl_.uncompressed_lookup_list_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, _impl_.packeddata_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, _impl_.num_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSize, _impl_.num_rows_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedTableSize, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedTableSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedTableSize, _impl_.num_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedTableSize, _impl_.num_rows_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellRange, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::TST::CellRange, _impl_.size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedCellRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedCellRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedCellRange, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandedCellRange, _impl_.size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, _impl_.cellrange_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, _impl_.extendedcellrange_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, _impl_.extendedcellrangevalid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSelection, _impl_.selection_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _impl_.tile_row_index_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _impl_.cell_count_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _impl_.cell_storage_buffer_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _impl_.cell_offsets_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _impl_.storage_version_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _impl_.cell_storage_buffer_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _impl_.cell_offsets_),
  PROTOBUF_FIELD_OFFSET(::TST::TileRowInfo, _impl_.has_wide_offsets_),
  4,
  5,
  0,
  1,
  6,
  2,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _impl_.maxcolumn_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _impl_.maxrow_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _impl_.numcells_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _impl_.numrows_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _impl_.rowinfos_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _impl_.storage_version_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _impl_.last_saved_in_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::Tile, _impl_.should_use_wide_rows_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage_Tile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage_Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage_Tile, _impl_.tileid_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage_Tile, _impl_.tile_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, _impl_.tiles_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, _impl_.tile_size_),
  PROTOBUF_FIELD_OFFSET(::TST::TileStorage, _impl_.should_use_wide_rows_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, _impl_.cell_value_type_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, _impl_.boolean_value_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, _impl_.date_value_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, _impl_.number_value_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel_CellValue, _impl_.string_value_),
  4,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::TST::PopUpMenuModel, _impl_.tsce_item_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, _impl_.formula_warning_type_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, _impl_.original_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, _impl_.supplementary_text_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive_FormulaImportWarning, _impl_.formula_warning_type_int_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.formula_import_warning_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_above_avg_equal_avg_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_above_avg_std_dev_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_complex_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_contains_errors_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_expr_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_not_contains_errors_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_parameters_not_all_same_type_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_stop_if_true_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_unsupported_operator_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_unsupported_styling_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.cond_format_unsupported_time_period_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.error_cell_with_no_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.unsupported_cond_format_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.original_data_format_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.formula_warning_filtered_column_formula_not_copied_),
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetArchive, _impl_.duration_format_range_changed_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::TST::CellRefImportWarningSetPairArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellRefImportWarningSetPairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellRefImportWarningSetPairArchive, _impl_.cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::CellRefImportWarningSetPairArchive, _impl_.warning_set_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetByCellRefArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ImportWarningSetByCellRefArchive, _impl_.cellref_warning_set_pair_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.refcount_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.string_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.reference_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.formula_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.custom_format_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.rich_text_payload_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.comment_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.import_warning_set_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList_ListEntry, _impl_.cell_spec_),
  9,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, _impl_.listtype_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, _impl_.nextlistid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, _impl_.segments_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataList, _impl_.is_new_for_bnc_),
  2,
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, _impl_.list_type_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, _impl_.key_range_),
  PROTOBUF_FIELD_OFFSET(::TST::TableDataListSegment, _impl_.entries_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree_Node, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree_Node, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree_Node, _impl_.value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableRBTree, _impl_.nodes_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _impl_.hidingstate_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _impl_.numberofcells_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _impl_.cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket_Header, _impl_.text_style_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket, _impl_.buckethashfunction_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorageBucket, _impl_.headers_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorage, _impl_.buckethashfunction_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderStorage, _impl_.buckets_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.rowheaders_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.columnheaders_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.tiles_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.stringtable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.styletable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.formula_table_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.formulaerrortable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.format_table_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.multiplechoicelistformattable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.merge_region_map_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.deprecated_custom_format_table_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.nextrowstripid_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.nextcolumnstripid_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.rowtiletree_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.columntiletree_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.storage_version_pre_bnc_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.rich_text_table_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.conditionalstyletable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.commentstoragetable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.importwarningsettable_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.control_cell_spec_table_),
  PROTOBUF_FIELD_OFFSET(::TST::DataStore, _impl_.format_table_),
  0,
  1,
  2,
  3,
  4,
  5,
  9,
  8,
  12,
  10,
  11,
  19,
  20,
  6,
  7,
  21,
  13,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.tablemodel_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.editing_state_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.summary_model_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.category_order_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.view_column_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.group_by_uuid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.hidden_states_uuid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.formula_coord_space_in_pre40_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.formula_coord_space_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.pasteboard_coord_mapper_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.layout_engine_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.pivot_data_model_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.is_a_pivot_table_),
  PROTOBUF_FIELD_OFFSET(::TST::TableInfoArchive, _impl_.pivot_order_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  12,
  13,
  8,
  9,
  10,
  14,
  11,
  PROTOBUF_FIELD_OFFSET(::TST::CategoryInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryInfoArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryInfoArchive, _impl_.tablemodel_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::WPTableInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::WPTableInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::WPTableInfoArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::WPTableInfoArchive, _impl_.storage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.body_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.header_row_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.header_column_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.footer_row_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.body_cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.header_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.header_column_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.footer_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.table_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.table_name_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.table_name_shape_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.preset_id_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_1_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_2_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_3_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_4_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_5_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_1_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_2_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_3_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_4_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.category_level_5_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_1_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_2_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_3_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_4_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_5_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_1_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_2_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_3_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_4_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.label_level_5_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.pivot_body_summary_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.pivot_body_summary_column_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleNetworkArchive, _impl_.pivot_header_column_summary_style_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  34,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  PROTOBUF_FIELD_OFFSET(::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive, _impl_.grouping_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive, _impl_.column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive, _impl_.direction_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::TableGroupSortOrderUIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableGroupSortOrderUIDArchive, _impl_.group_sort_rules_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive_SortRuleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive_SortRuleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive_SortRuleArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive_SortRuleArchive, _impl_.direction_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderArchive, _impl_.rules_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive_SortRuleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive_SortRuleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive_SortRuleArchive, _impl_.column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive_SortRuleArchive, _impl_.direction_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSortOrderUIDArchive, _impl_.rules_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::SortRuleReferenceTrackerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SortRuleReferenceTrackerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::SortRuleReferenceTrackerArchive, _impl_.reference_tracker_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::CellRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellRegion, _impl_.cell_ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDRegionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellUIDRegionArchive, _impl_.cell_uid_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_.import_settings_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_.import_source_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_.import_date_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_.source_data_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_.source_encoding_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_.imported_region_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_.source_row_count_),
  PROTOBUF_FIELD_OFFSET(::TST::StructuredTextImportRecord, _impl_.source_column_count_),
  2,
  0,
  4,
  1,
  5,
  8,
  3,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.from_table_id_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.was_cut_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.table_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.body_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.header_row_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.header_column_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.footer_row_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.body_cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.header_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.header_column_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.footer_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.table_name_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.table_name_shape_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.table_style_preset_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.preset_index_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.base_data_store_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.provider_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.table_name_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.table_name_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.table_name_height_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.table_name_border_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_header_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_header_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_footer_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.header_rows_frozen_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.header_columns_frozen_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_hidden_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_hidden_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_user_hidden_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_user_hidden_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.number_of_filtered_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.default_row_height_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.default_column_width_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.origin_offset_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.repeating_header_rows_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.style_apply_clears_all_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.repeating_header_columns_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.hidden_state_formula_owner_for_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.hidden_state_formula_owner_for_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.row_filter_set_pre_pivot_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.conditional_style_formula_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.sort_rule_reference_tracker_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.base_column_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.merge_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.stroke_sidecar_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.preset_needs_strong_ownership_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.text_import_record_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_1_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_2_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_3_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_4_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_5_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_1_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_2_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_3_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_4_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_level_5_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.hidden_states_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_1_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_2_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_3_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_4_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_5_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_1_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_2_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_3_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_4_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.label_level_5_text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_owner_deprecated_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.pencil_annotation_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.from_group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.haunted_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.pivot_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.category_owner_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.pivot_body_summary_row_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.pivot_body_summary_column_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.pivot_header_column_summary_style_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.pivot_value_types_by_col_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.pivot_date_grouping_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::TableModelArchive, _impl_.pivot_date_grouping_types_),
  0,
  2,
  72,
  4,
  12,
  13,
  14,
  15,
  7,
  8,
  9,
  10,
  16,
  19,
  26,
  71,
  5,
  6,
  58,
  59,
  1,
  73,
  76,
  74,
  60,
  61,
  62,
  75,
  67,
  63,
  66,
  78,
  79,
  77,
  64,
  65,
  11,
  68,
  69,
  70,
  17,
  18,
  20,
  21,
  22,
  23,
  24,
  25,
  27,
  80,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  3,
  52,
  53,
  54,
  55,
  56,
  57,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.data_store_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.column_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.aggregate_formula_owner_uuid_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_cell_vendor_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.category_column_width_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_row_level_1_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_row_level_2_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_row_level_3_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_row_level_4_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_row_level_5_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_label_row_level_1_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_label_row_level_2_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_label_row_level_3_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_label_row_level_4_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_label_row_level_5_height_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.label_row_visibility_1_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.label_row_visibility_2_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.label_row_visibility_3_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.label_row_visibility_4_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.label_row_visibility_5_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.summary_row_height_list_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.label_row_height_list_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.label_row_visibility_list_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelArchive, _impl_.group_sort_order_),
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, _impl_.cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, _impl_.summary_row_height_list_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, _impl_.label_row_height_list_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryModelGroupByChangeStateArchive, _impl_.label_row_visibility_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, _impl_.sorted_column_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, _impl_.column_index_for_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, _impl_.column_uid_for_index_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, _impl_.sorted_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, _impl_.row_index_for_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowUIDMapArchive, _impl_.row_uid_for_index_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, _impl_.stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive_StrokeRunArchive, _impl_.order_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive, _impl_.row_column_index_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeLayerArchive, _impl_.stroke_runs_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _impl_.max_order_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _impl_.column_count_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _impl_.row_count_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _impl_.left_column_stroke_layers_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _impl_.right_column_stroke_layers_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _impl_.top_row_stroke_layers_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSidecarArchive, _impl_.bottom_row_stroke_layers_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::DurationWrapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.valuetype_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.numbervalue_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.stringvalue_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.boolvalue_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.current_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.formulaerror_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.number_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.currency_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.duration_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.date_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.custom_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.base_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.explicit_format_flags_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.richtext_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.conditional_style_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.comment_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.conditional_style_applied_rule_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.import_warning_set_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.custom_format_object_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.cell_border_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.cell_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.cell_format_kind_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.text_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.boolean_format_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.decimal_value_low_),
  PROTOBUF_FIELD_OFFSET(::TST::Cell, _impl_.decimal_value_high_),
  20,
  1,
  2,
  22,
  0,
  21,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  23,
  11,
  12,
  13,
  24,
  14,
  15,
  16,
  17,
  27,
  18,
  19,
  25,
  26,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::MergeRegionMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::MergeRegionMapArchive, _impl_.cell_range_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_.cell_tiles_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_.uid_based_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_.expanded_cell_ids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_.cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_.merge_uid_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_.unmerge_uid_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_.merge_actions_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_.may_modify_formulas_in_cells_),
  PROTOBUF_FIELD_OFFSET(::TST::CellMapArchive, _impl_.may_modify_values_referenced_by_formulas_),
  ~0u,
  1,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive_OptionalCell, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive_OptionalCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive_OptionalCell, _impl_.cell_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive, _impl_.cells_),
  PROTOBUF_FIELD_OFFSET(::TST::CellListArchive, _impl_.trailing_empty_cell_count_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _impl_.cell_lists_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _impl_.uid_based_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _impl_.merge_actions_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _impl_.may_modify_formulas_in_cells_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _impl_.may_modify_values_referenced_by_formulas_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellMapArchive, _impl_.affects_cell_borders_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive_OptionalCell, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive_OptionalCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive_OptionalCell, _impl_.cell_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, _impl_.cells_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, _impl_.cell_uid_range_),
  PROTOBUF_FIELD_OFFSET(::TST::ConcurrentCellListArchive, _impl_.cell_range_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.valuetype_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.numbervalue_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.stringvalue_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.boolvalue_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.richtextstorage_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.use_all_spare_formats_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.explicit_flags_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.cell_format_kind_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.number_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.currency_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.date_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.duration_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.text_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.boolean_format_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.formatted_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.formatted_rich_text_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.apply_spare_format_only_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.spare_format_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.decimal_low_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.decimal_high_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFormatAndValueArchive, _impl_.suppress_apply_value_),
  11,
  10,
  0,
  14,
  2,
  15,
  12,
  13,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  9,
  16,
  17,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _impl_.interaction_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _impl_.formula_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _impl_.range_control_min_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _impl_.range_control_max_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _impl_.range_control_inc_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _impl_.chooser_control_popup_model_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _impl_.chooser_control_start_w_first_),
  PROTOBUF_FIELD_OFFSET(::TST::CellSpecArchive, _impl_.category_summary_should_display_label_),
  5,
  0,
  2,
  3,
  4,
  1,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CommentStorageWrapperArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommentStorageWrapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommentStorageWrapperArchive, _impl_.comment_storage_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArchive, _impl_.property_map_to_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArchive, _impl_.property_map_to_reset_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArray, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArray, _impl_.large_array_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArraySegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArraySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArraySegment, _impl_.large_array_segment_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffArraySegment, _impl_.elements_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, _impl_.uid_based_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, _impl_.expanded_cell_ids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, _impl_.cell_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CellDiffMapArchive, _impl_.cell_diff_array_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive_BoxedRow, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive_BoxedRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive_BoxedRow, _impl_.column_index_set_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive_BoxedRow, _impl_.cell_diff_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.num_row_rules_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.num_column_rules_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.row_header_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.column_header_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.aggregate_rule_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.active_flattening_dimension_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.row_value_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.row_level_preorder_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.column_value_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.column_level_preorder_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.cell_diff_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.row_sizes_),
  PROTOBUF_FIELD_OFFSET(::TST::HierarchicalCellDiffMapArchive, _impl_.column_sizes_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _impl_.cell_id_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _impl_.old_style_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _impl_.new_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, _impl_.capacity_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::TST::DoubleStyleMapArchive, _impl_.cell_map_entry_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, _impl_.old_style_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive_StyleTableMapEntryArchive, _impl_.new_style_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, _impl_.capacity_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::TST::StyleTableMapArchive, _impl_.map_entry_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.tablemodel_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.selection_type_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.anchor_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.cell_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.base_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.cursor_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.cell_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.base_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.anchor_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::SelectionArchive, _impl_.cursor_cell_uid_),
  0,
  8,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _impl_.table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _impl_.selection_type_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _impl_.cell_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _impl_.base_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _impl_.anchor_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::DeathhawkRdar39989167CellSelectionArchive, _impl_.cursor_cell_uid_),
  0,
  5,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionArchive, _impl_.mask_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::TableNameSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::AutofillSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::AutofillSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::AutofillSelectionArchive, _impl_.source_cell_range_),
  PROTOBUF_FIELD_OFFSET(::TST::AutofillSelectionArchive, _impl_.target_cell_range_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FilterRulePrePivotArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterRulePrePivotArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FilterRulePrePivotArchive, _impl_.predicate_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterRulePrePivotArchive, _impl_.disabled_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FilterRuleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterRuleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FilterRuleArchive, _impl_.predicate_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStyleArchive, _impl_.table_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStyleArchive, _impl_.cell_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _impl_.double_value_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _impl_.decimal_low_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _impl_.decimal_high_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _impl_.string_value_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _impl_.date_value_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _impl_.duration_timeinterval_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _impl_.duration_units_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgDataArchive, _impl_.boolean_value_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.arg_type_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.arg_value_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.base_cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.relative_cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.category_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.uid_tract_list_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.host_cell_coord_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.preserve_row_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.preserve_column_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.list_entries_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredArgArchive, _impl_.view_tract_ref_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicatePrePivotArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicatePrePivotArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicatePrePivotArchive, _impl_.formula_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicatePrePivotArchive, _impl_.predicate_type_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicatePrePivotArchive, _impl_.qualifier1_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicatePrePivotArchive, _impl_.qualifier2_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicatePrePivotArchive, _impl_.param_index1_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicatePrePivotArchive, _impl_.param_index2_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicatePrePivotArchive, _impl_.param_index0_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.predicate_type_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.qualifier1_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.qualifier2_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.param_value0_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.param_value1_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.param_value2_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.formula_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.for_conditional_style_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.host_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.host_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaPredicateArchive, _impl_.host_row_uid_),
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  10,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot, _impl_.predicate_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot, _impl_.cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot, _impl_.text_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, _impl_.predicate_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, _impl_.cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRule, _impl_.text_style_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive_ConditionalStyleRules, _impl_.rule_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive, _impl_.rulecount_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive, _impl_.rules_prepivot_),
  PROTOBUF_FIELD_OFFSET(::TST::ConditionalStyleSetArchive, _impl_.rules_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _impl_.is_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _impl_.filter_rules_prepivot_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _impl_.needs_formula_rewrite_for_import_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _impl_.filter_offsets_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _impl_.filter_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::FilterSetArchive, _impl_.filter_rules_),
  0,
  2,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::UniqueIndexArchive_UniqueIndexEntryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::UniqueIndexArchive_UniqueIndexEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::UniqueIndexArchive_UniqueIndexEntryArchive, _impl_.string_value_),
  PROTOBUF_FIELD_OFFSET(::TST::UniqueIndexArchive_UniqueIndexEntryArchive, _impl_.row_uids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::UniqueIndexArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::UniqueIndexArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::UniqueIndexArchive, _impl_.column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::UniqueIndexArchive, _impl_.unique_entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, _impl_.row_or_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, _impl_.user_hidden_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, _impl_.filtered_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive_RowOrColumnState, _impl_.pivot_hidden_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.hidden_state_extent_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.base_hidden_states_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.row_or_column_direction_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.threshold_value_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.needs_to_update_filter_set_for_import_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.collapsed_group_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.summary_pivot_hidden_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.summary_filtered_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.unique_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateExtentArchive, _impl_.summary_hidden_states_),
  0,
  ~0u,
  4,
  ~0u,
  5,
  ~0u,
  1,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, _impl_.hidden_states_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, _impl_.column_hidden_state_extent_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesArchive, _impl_.row_hidden_state_extent_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesOwnerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesOwnerArchive, _impl_.owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStatesOwnerArchive, _impl_.hidden_states_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::ExpandCollapseStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandCollapseStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ExpandCollapseStateArchive, _impl_.uids_collapsed_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandCollapseStateArchive, _impl_.uids_expanded_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpandCollapseStateArchive, _impl_.dimension_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::TokenAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TokenAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TokenAttachmentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::TokenAttachmentArchive, _impl_.expressionnode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaArchive, _impl_.expressiontree_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, _impl_.first_index_),
  PROTOBUF_FIELD_OFFSET(::TST::ExpressionNodeArchive, _impl_.last_index_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::BooleanNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::BooleanNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::BooleanNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::BooleanNodeArchive, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, _impl_.decimal_low_),
  PROTOBUF_FIELD_OFFSET(::TST::NumberNodeArchive, _impl_.decimal_high_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::StringNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StringNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StringNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::StringNodeArchive, _impl_.value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TST::IdentifierNodeArchive, _impl_.symbol_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, _impl_.columns_),
  PROTOBUF_FIELD_OFFSET(::TST::ArrayNodeArchive, _impl_.rows_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::ListNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ListNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ListNodeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::OperatorNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::OperatorNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::OperatorNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::OperatorNodeArchive, _impl_.operatorchar_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::PostfixOperatorNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PostfixOperatorNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::PostfixOperatorNodeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::PrefixOperatorNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PrefixOperatorNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::PrefixOperatorNodeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, _impl_.functionindex_),
  PROTOBUF_FIELD_OFFSET(::TST::FunctionNodeArchive, _impl_.invalidfunctionname_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::FunctionEndNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FunctionEndNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FunctionEndNodeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TST::DateNodeArchive, _impl_.format_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.rangereference_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.preserve_flags_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.hosttableid_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.host_cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.range_top_left_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.range_bottom_right_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.category_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::ReferenceNodeArchive, _impl_.uid_range_rect_),
  1,
  2,
  9,
  0,
  8,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, _impl_.timeinterval_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, _impl_.smallest_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, _impl_.largest_),
  PROTOBUF_FIELD_OFFSET(::TST::DurationNodeArchive, _impl_.style_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, _impl_.functionindex_),
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, _impl_.argumentindex_),
  PROTOBUF_FIELD_OFFSET(::TST::ArgumentPlaceholderNodeArchive, _impl_.mode_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::EmptyExpressionNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::EmptyExpressionNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::EmptyExpressionNodeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, _impl_.whitespace_after_let_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, _impl_.whitespace_after_identifier_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, _impl_.whitespace_after_equals_),
  PROTOBUF_FIELD_OFFSET(::TST::LetNodeArchive, _impl_.whitespace_after_delimiter_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::InNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::InNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::InNodeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TST::VariableNodeArchive, _impl_.symbol_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _impl_.isvalid_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _impl_.cellrange_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _impl_.hintid_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _impl_.maximumsize_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _impl_.partitionposition_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _impl_.horizontal_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _impl_.effectivesize_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutHintArchive, _impl_.partitioningpass_),
  4,
  0,
  1,
  2,
  6,
  5,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, _impl_.completiontext_),
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, _impl_.caretposition_),
  PROTOBUF_FIELD_OFFSET(::TST::CompletionTokenAttachmentArchive, _impl_.prefixstart_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, _impl_.threshold_value_),
  PROTOBUF_FIELD_OFFSET(::TST::HiddenStateFormulaOwnerArchive, _impl_.needs_to_update_filter_set_for_import_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive_FormulaStorePair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive_FormulaStorePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive_FormulaStorePair, _impl_.formula_index_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive_FormulaStorePair, _impl_.formula_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive, _impl_.next_formula_index_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaStoreArchive, _impl_.formulas_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, _impl_.merge_type_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, _impl_.merge_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, _impl_.merge_formulas_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOperationArchive, _impl_.merge_formula_indexes_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::MergeOwnerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::MergeOwnerArchive, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::TST::MergeOwnerArchive, _impl_.formula_store_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationArchive, _impl_.table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationArchive, _impl_.pencil_annotation_storage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, _impl_.formula_store_),
  PROTOBUF_FIELD_OFFSET(::TST::PencilAnnotationOwnerArchive, _impl_.annotations_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.bool_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.number_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.date_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.duration_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.string_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.min_value_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.max_value_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.number_total_value_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.first_date_seen_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.total_secs_since_ref_date_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.secs_to_add_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.bool_true_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.error_count_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.is_circular_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.product_value_),
  PROTOBUF_FIELD_OFFSET(::TST::AccumulatorArchive, _impl_.no_content_count_),
  5,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  11,
  12,
  10,
  13,
  14,
  4,
  15,
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, _impl_.column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, _impl_.grouping_type_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, _impl_.grouping_functor_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnArchive, _impl_.grouping_column_uid_),
  0,
  3,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::GroupColumnListArchive, _impl_.group_column_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _impl_.column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _impl_.agg_type_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _impl_.show_as_type_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _impl_.column_aggregate_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateArchive, _impl_.running_total_group_column_uid_),
  0,
  3,
  4,
  5,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnAggregateListArchive, _impl_.aggregates_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_AggNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_AggNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_AggNodeArchive, _impl_.formula_coord_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_AggNodeArchive, _impl_.accum_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_AggNodeArchive, _impl_.child_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_AggregatorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_AggregatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_AggregatorArchive, _impl_.column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_AggregatorArchive, _impl_.agg_node_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive, _impl_.row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive, _impl_.cell_value_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive, _impl_.formats_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive, _impl_.row_sets_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive, _impl_.row_uid_lookup_sets_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_.group_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_.child_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_.row_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_.agg_formula_coords_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_.format_manager_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_.group_cell_value_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_.row_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_.row_lookup_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive_GroupNodeArchive, _impl_.child_ref_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.group_column_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.group_node_root_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.aggregator_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.column_agg_type_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.is_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.indirect_agg_type_change_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.grouping_columns_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.aggs_in_group_root_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.grouping_column_headers_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.column_order_changed_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.row_order_changed_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.row_order_changed_ignoring_recalc_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.owner_index_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.row_uid_lookup_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.hidden_states_changed_formula_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.aggregator_ref_),
  PROTOBUF_FIELD_OFFSET(::TST::GroupByArchive, _impl_.group_node_root_ref_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  12,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  13,
  9,
  10,
  ~0u,
  11,
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive, _impl_.owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerArchive, _impl_.group_by_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerRefArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOwnerRefArchive, _impl_.group_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::PivotGroupingColumnOptionsMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::PivotGroupingColumnOptionsMapArchive, _impl_.uids_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotGroupingColumnOptionsMapArchive, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotGroupingColumnOptionsMapArchive, _impl_.aggregate_rule_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.pivot_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.grouping_columns_for_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.grouping_columns_for_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.aggregate_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.flattening_dimension_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.is_empty_pivot_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.source_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.refresh_timestamp_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.grpg_col_options_map_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.hide_grand_total_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.source_table_name_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.hide_grand_total_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.formula_store_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.refresh_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.row_column_rule_change_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOwnerArchive, _impl_.aggregate_rule_change_uid_),
  1,
  2,
  3,
  4,
  12,
  13,
  5,
  11,
  6,
  14,
  0,
  15,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, _impl_.storage_),
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::TST::RichTextPayloadArchive, _impl_.cellid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEqualsTokenAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEqualsTokenAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEqualsTokenAttachmentArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.fill_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.type_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.color_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.color_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.first_color_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.first_color_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.last_color_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.last_color_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.gradient_type_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.gradient_type_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.gradient_angle_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.gradient_angle_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.image_data_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.image_data_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.tint_color_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.tint_color_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.scale_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.scale_is_mixed_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.technique_has_been_modified_),
  PROTOBUF_FIELD_OFFSET(::TST::CellFillStandIn, _impl_.technique_is_mixed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaSelectionArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaSelectionArchive, _impl_.activetokencharindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _impl_.top_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _impl_.top_stroke_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _impl_.right_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _impl_.right_stroke_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _impl_.bottom_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _impl_.bottom_stroke_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _impl_.left_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellBorderArchive, _impl_.left_stroke_order_),
  0,
  4,
  1,
  5,
  2,
  6,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _impl_.table_style_network_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _impl_.row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _impl_.column_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _impl_.row_types_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _impl_.column_types_),
  PROTOBUF_FIELD_OFFSET(::TST::DefaultCellStylesContainerArchive, _impl_.is_a_pivot_table_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _impl_.mapping_purpose_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _impl_.should_steal_references_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _impl_.can_reuse_table_names_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _impl_.owner_uid_mapper_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _impl_.backing_tables_for_charts_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _impl_.cross_document_paste_),
  PROTOBUF_FIELD_OFFSET(::TST::MultiTableRemapperArchive, _impl_.nested_inner_mapper_),
  1,
  2,
  3,
  ~0u,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.replacement_behavior_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.style_replace_prototypes_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.style_replace_replacements_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.style_modify_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.style_modify_old_prop_maps_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.style_modify_new_prop_maps_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.style_delete_prototypes_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.style_delete_replacements_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.table_preset_replace_prototype_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.table_preset_replace_replacement_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.table_preset_delete_prototype_),
  PROTOBUF_FIELD_OFFSET(::TST::ChangePropagationMapWrapper, _impl_.table_preset_delete_replacement_),
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, _impl_.wildcarduid_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, _impl_.columnuid_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive_SummaryCellEntry, _impl_.cell_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive, _impl_.table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::SummaryCellVendorArchive, _impl_.entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOrderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOrderArchive, _impl_.table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::CategoryOrderArchive, _impl_.uid_map_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::PivotOrderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::PivotOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::PivotOrderArchive, _impl_.uid_map_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, _impl_.name_fragment_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, _impl_.name_precedent_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive_NameFragmentArchive, _impl_.uses_of_name_fragment_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, _impl_.first_fragment_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, _impl_.last_fragment_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrTileArchive, _impl_.name_frag_entries_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _impl_.table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _impl_.per_table_precedent_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _impl_.is_deleted_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _impl_.header_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _impl_.header_column_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _impl_.update_header_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive_PerTableArchive, _impl_.update_header_column_uids_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, _impl_.owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, _impl_.nrm_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, _impl_.per_tables_),
  PROTOBUF_FIELD_OFFSET(::TST::HeaderNameMgrArchive, _impl_.name_frag_tiles_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCacheFittingEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCacheFittingEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCacheFittingEntry, _impl_.fitting_index_),
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCacheFittingEntry, _impl_.fitting_size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCache, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCache, _impl_.rows_fitting_entries_),
  PROTOBUF_FIELD_OFFSET(::TST::WidthHeightCache, _impl_.columns_count_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::LayoutEngineArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::LayoutEngineArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::LayoutEngineArchive, _impl_.width_height_cache_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CollaboratorTableCursorSubselectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CollaboratorTableCursorSubselectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CollaboratorTableCursorSubselectionArchive, _impl_.cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CollaboratorTableCursorSubselectionArchive, _impl_.selection_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CollaboratorTableCursorSubselectionArchive, _impl_.row_column_uid_list_),
  0,
  1,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::TST::CellID)},
  { 10, 20, -1, sizeof(::TST::CellUIDLookupListArchive)},
  { 24, 35, -1, sizeof(::TST::CellUIDListArchive)},
  { 40, 49, -1, sizeof(::TST::TableSize)},
  { 52, 60, -1, sizeof(::TST::ExpandedTableSize)},
  { 62, 70, -1, sizeof(::TST::CellRange)},
  { 72, 80, -1, sizeof(::TST::ExpandedCellRange)},
  { 82, 92, -1, sizeof(::TST::TableSelection)},
  { 96, 110, -1, sizeof(::TST::TileRowInfo)},
  { 118, 132, -1, sizeof(::TST::Tile)},
  { 140, 148, -1, sizeof(::TST::TileStorage_Tile)},
  { 150, 159, -1, sizeof(::TST::TileStorage)},
  { 162, 173, -1, sizeof(::TST::PopUpMenuModel_CellValue)},
  { 178, -1, -1, sizeof(::TST::PopUpMenuModel)},
  { 186, 196, -1, sizeof(::TST::ImportWarningSetArchive_FormulaImportWarning)},
  { 200, 223, -1, sizeof(::TST::ImportWarningSetArchive)},
  { 240, 248, -1, sizeof(::TST::CellRefImportWarningSetPairArchive)},
  { 250, -1, -1, sizeof(::TST::ImportWarningSetByCellRefArchive)},
  { 257, 274, -1, sizeof(::TST::TableDataList_ListEntry)},
  { 285, 296, -1, sizeof(::TST::TableDataList)},
  { 301, 310, -1, sizeof(::TST::TableDataListSegment)},
  { 313, 321, -1, sizeof(::TST::TableRBTree_Node)},
  { 323, -1, -1, sizeof(::TST::TableRBTree)},
  { 330, 342, -1, sizeof(::TST::HeaderStorageBucket_Header)},
  { 348, 356, -1, sizeof(::TST::HeaderStorageBucket)},
  { 358, 366, -1, sizeof(::TST::HeaderStorage)},
  { 368, 396, -1, sizeof(::TST::DataStore)},
  { 418, 439, -1, sizeof(::TST::TableInfoArchive)},
  { 454, 462, -1, sizeof(::TST::CategoryInfoArchive)},
  { 464, 472, -1, sizeof(::TST::WPTableInfoArchive)},
  { 474, 515, -1, sizeof(::TST::TableStyleNetworkArchive)},
  { 550, 559, -1, sizeof(::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive)},
  { 562, -1, -1, sizeof(::TST::TableGroupSortOrderUIDArchive)},
  { 569, 577, -1, sizeof(::TST::TableSortOrderArchive_SortRuleArchive)},
  { 579, 587, -1, sizeof(::TST::TableSortOrderArchive)},
  { 589, 597, -1, sizeof(::TST::TableSortOrderUIDArchive_SortRuleArchive)},
  { 599, 607, -1, sizeof(::TST::TableSortOrderUIDArchive)},
  { 609, 616, -1, sizeof(::TST::SortRuleReferenceTrackerArchive)},
  { 617, -1, -1, sizeof(::TST::CellRegion)},
  { 624, -1, -1, sizeof(::TST::CellUIDRegionArchive)},
  { 631, 646, -1, sizeof(::TST::StructuredTextImportRecord)},
  { 655, 745, -1, sizeof(::TST::TableModelArchive)},
  { 829, 860, -1, sizeof(::TST::SummaryModelArchive)},
  { 885, 895, -1, sizeof(::TST::SummaryModelGroupByChangeStateArchive)},
  { 899, -1, -1, sizeof(::TST::ColumnRowUIDMapArchive)},
  { 911, 921, -1, sizeof(::TST::StrokeLayerArchive_StrokeRunArchive)},
  { 925, 933, -1, sizeof(::TST::StrokeLayerArchive)},
  { 935, 948, -1, sizeof(::TST::StrokeSidecarArchive)},
  { 955, -1, -1, sizeof(::TST::DurationWrapperArchive)},
  { 961, 995, -1, sizeof(::TST::Cell)},
  { 1023, -1, -1, sizeof(::TST::MergeRegionMapArchive)},
  { 1030, 1045, -1, sizeof(::TST::CellMapArchive)},
  { 1054, 1061, -1, sizeof(::TST::CellListArchive_OptionalCell)},
  { 1062, 1070, -1, sizeof(::TST::CellListArchive)},
  { 1072, 1084, -1, sizeof(::TST::ConcurrentCellMapArchive)},
  { 1090, 1097, -1, sizeof(::TST::ConcurrentCellListArchive_OptionalCell)},
  { 1098, 1107, -1, sizeof(::TST::ConcurrentCellListArchive)},
  { 1110, 1137, -1, sizeof(::TST::CellFormatAndValueArchive)},
  { 1158, 1172, -1, sizeof(::TST::CellSpecArchive)},
  { 1180, 1187, -1, sizeof(::TST::CommentStorageWrapperArchive)},
  { 1188, 1196, -1, sizeof(::TST::CellDiffArchive)},
  { 1198, 1205, -1, sizeof(::TST::CellDiffArray)},
  { 1206, 1214, -1, sizeof(::TST::CellDiffArraySegment)},
  { 1216, 1226, -1, sizeof(::TST::CellDiffMapArchive)},
  { 1230, 1238, -1, sizeof(::TST::HierarchicalCellDiffMapArchive_BoxedRow)},
  { 1240, 1259, -1, sizeof(::TST::HierarchicalCellDiffMapArchive)},
  { 1272, 1281, -1, sizeof(::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive)},
  { 1284, 1293, -1, sizeof(::TST::DoubleStyleMapArchive)},
  { 1296, 1305, -1, sizeof(::TST::StyleTableMapArchive_StyleTableMapEntryArchive)},
  { 1308, 1317, -1, sizeof(::TST::StyleTableMapArchive)},
  { 1320, 1337, -1, sizeof(::TST::SelectionArchive)},
  { 1348, 1360, -1, sizeof(::TST::DeathhawkRdar39989167CellSelectionArchive)},
  { 1366, 1373, -1, sizeof(::TST::StrokeSelectionArchive)},
  { 1374, -1, -1, sizeof(::TST::ControlCellSelectionArchive)},
  { 1380, -1, -1, sizeof(::TST::StockCellSelectionArchive)},
  { 1386, -1, -1, sizeof(::TST::TableNameSelectionArchive)},
  { 1392, 1400, -1, sizeof(::TST::AutofillSelectionArchive)},
  { 1402, 1410, -1, sizeof(::TST::FilterRulePrePivotArchive)},
  { 1412, 1419, -1, sizeof(::TST::FilterRuleArchive)},
  { 1420, 1429, -1, sizeof(::TST::TableStyleArchive)},
  { 1432, 1441, -1, sizeof(::TST::CellStyleArchive)},
  { 1444, 1458, -1, sizeof(::TST::FormulaPredArgDataArchive)},
  { 1466, 1483, -1, sizeof(::TST::FormulaPredArgArchive)},
  { 1494, 1507, -1, sizeof(::TST::FormulaPredicatePrePivotArchive)},
  { 1514, 1531, -1, sizeof(::TST::FormulaPredicateArchive)},
  { 1542, 1551, -1, sizeof(::TST::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot)},
  { 1554, 1563, -1, sizeof(::TST::ConditionalStyleSetArchive_ConditionalStyleRule)},
  { 1566, -1, -1, sizeof(::TST::ConditionalStyleSetArchive_ConditionalStyleRules)},
  { 1573, 1582, -1, sizeof(::TST::ConditionalStyleSetArchive)},
  { 1585, 1598, -1, sizeof(::TST::FilterSetArchive)},
  { 1605, 1613, -1, sizeof(::TST::UniqueIndexArchive_UniqueIndexEntryArchive)},
  { 1615, 1623, -1, sizeof(::TST::UniqueIndexArchive)},
  { 1625, 1635, -1, sizeof(::TST::HiddenStateExtentArchive_RowOrColumnState)},
  { 1639, 1656, -1, sizeof(::TST::HiddenStateExtentArchive)},
  { 1667, 1676, -1, sizeof(::TST::HiddenStatesArchive)},
  { 1679, 1687, -1, sizeof(::TST::HiddenStatesOwnerArchive)},
  { 1689, 1698, -1, sizeof(::TST::ExpandCollapseStateArchive)},
  { 1701, 1709, -1, sizeof(::TST::TokenAttachmentArchive)},
  { 1711, 1718, -1, sizeof(::TST::FormulaArchive)},
  { 1719, 1728, -1, sizeof(::TST::ExpressionNodeArchive)},
  { 1731, 1739, -1, sizeof(::TST::BooleanNodeArchive)},
  { 1741, 1751, -1, sizeof(::TST::NumberNodeArchive)},
  { 1755, 1763, -1, sizeof(::TST::StringNodeArchive)},
  { 1765, 1774, -1, sizeof(::TST::IdentifierNodeArchive)},
  { 1777, 1786, -1, sizeof(::TST::ArrayNodeArchive)},
  { 1789, 1796, -1, sizeof(::TST::ListNodeArchive)},
  { 1797, 1805, -1, sizeof(::TST::OperatorNodeArchive)},
  { 1807, 1814, -1, sizeof(::TST::PostfixOperatorNodeArchive)},
  { 1815, 1822, -1, sizeof(::TST::PrefixOperatorNodeArchive)},
  { 1823, 1832, -1, sizeof(::TST::FunctionNodeArchive)},
  { 1835, 1842, -1, sizeof(::TST::FunctionEndNodeArchive)},
  { 1843, 1852, -1, sizeof(::TST::DateNodeArchive)},
  { 1855, 1871, -1, sizeof(::TST::ReferenceNodeArchive)},
  { 1881, 1892, -1, sizeof(::TST::DurationNodeArchive)},
  { 1897, 1907, -1, sizeof(::TST::ArgumentPlaceholderNodeArchive)},
  { 1911, 1918, -1, sizeof(::TST::EmptyExpressionNodeArchive)},
  { 1919, 1930, -1, sizeof(::TST::LetNodeArchive)},
  { 1935, 1942, -1, sizeof(::TST::InNodeArchive)},
  { 1943, 1952, -1, sizeof(::TST::VariableNodeArchive)},
  { 1955, 1969, -1, sizeof(::TST::LayoutHintArchive)},
  { 1977, 1987, -1, sizeof(::TST::CompletionTokenAttachmentArchive)},
  { 1991, 2000, -1, sizeof(::TST::HiddenStateFormulaOwnerArchive)},
  { 2003, 2011, -1, sizeof(::TST::FormulaStoreArchive_FormulaStorePair)},
  { 2013, 2021, -1, sizeof(::TST::FormulaStoreArchive)},
  { 2023, 2033, -1, sizeof(::TST::MergeOperationArchive)},
  { 2037, 2045, -1, sizeof(::TST::MergeOwnerArchive)},
  { 2047, 2055, -1, sizeof(::TST::PencilAnnotationArchive)},
  { 2057, 2066, -1, sizeof(::TST::PencilAnnotationOwnerArchive)},
  { 2069, 2091, -1, sizeof(::TST::AccumulatorArchive)},
  { 2107, 2117, -1, sizeof(::TST::GroupColumnArchive)},
  { 2121, -1, -1, sizeof(::TST::GroupColumnListArchive)},
  { 2128, 2140, -1, sizeof(::TST::ColumnAggregateArchive)},
  { 2146, -1, -1, sizeof(::TST::ColumnAggregateListArchive)},
  { 2153, 2162, -1, sizeof(::TST::GroupByArchive_AggNodeArchive)},
  { 2165, 2173, -1, sizeof(::TST::GroupByArchive_AggregatorArchive)},
  { 2175, -1, -1, sizeof(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive)},
  { 2182, 2192, -1, sizeof(::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive)},
  { 2196, 2211, -1, sizeof(::TST::GroupByArchive_GroupNodeArchive)},
  { 2220, 2244, -1, sizeof(::TST::GroupByArchive)},
  { 2262, 2270, -1, sizeof(::TST::CategoryOwnerArchive)},
  { 2272, -1, -1, sizeof(::TST::CategoryOwnerRefArchive)},
  { 2279, -1, -1, sizeof(::TST::PivotGroupingColumnOptionsMapArchive)},
  { 2288, 2310, -1, sizeof(::TST::PivotOwnerArchive)},
  { 2326, 2335, -1, sizeof(::TST::RichTextPayloadArchive)},
  { 2338, 2345, -1, sizeof(::TST::FormulaEqualsTokenAttachmentArchive)},
  { 2346, 2372, -1, sizeof(::TST::CellFillStandIn)},
  { 2392, 2400, -1, sizeof(::TST::FormulaSelectionArchive)},
  { 2402, 2416, -1, sizeof(::TST::CellBorderArchive)},
  { 2424, 2436, -1, sizeof(::TST::DefaultCellStylesContainerArchive)},
  { 2442, 2455, -1, sizeof(::TST::MultiTableRemapperArchive)},
  { 2462, 2480, -1, sizeof(::TST::ChangePropagationMapWrapper)},
  { 2492, 2501, -1, sizeof(::TST::SummaryCellVendorArchive_SummaryCellEntry)},
  { 2504, 2512, -1, sizeof(::TST::SummaryCellVendorArchive)},
  { 2514, 2522, -1, sizeof(::TST::CategoryOrderArchive)},
  { 2524, 2531, -1, sizeof(::TST::PivotOrderArchive)},
  { 2532, 2541, -1, sizeof(::TST::HeaderNameMgrTileArchive_NameFragmentArchive)},
  { 2544, 2553, -1, sizeof(::TST::HeaderNameMgrTileArchive)},
  { 2556, 2569, -1, sizeof(::TST::HeaderNameMgrArchive_PerTableArchive)},
  { 2576, 2586, -1, sizeof(::TST::HeaderNameMgrArchive)},
  { 2590, 2598, -1, sizeof(::TST::WidthHeightCacheFittingEntry)},
  { 2600, 2608, -1, sizeof(::TST::WidthHeightCache)},
  { 2610, 2617, -1, sizeof(::TST::LayoutEngineArchive)},
  { 2618, 2627, -1, sizeof(::TST::CollaboratorTableCursorSubselectionArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TST::_CellID_default_instance_._instance,
  &::TST::_CellUIDLookupListArchive_default_instance_._instance,
  &::TST::_CellUIDListArchive_default_instance_._instance,
  &::TST::_TableSize_default_instance_._instance,
  &::TST::_ExpandedTableSize_default_instance_._instance,
  &::TST::_CellRange_default_instance_._instance,
  &::TST::_ExpandedCellRange_default_instance_._instance,
  &::TST::_TableSelection_default_instance_._instance,
  &::TST::_TileRowInfo_default_instance_._instance,
  &::TST::_Tile_default_instance_._instance,
  &::TST::_TileStorage_Tile_default_instance_._instance,
  &::TST::_TileStorage_default_instance_._instance,
  &::TST::_PopUpMenuModel_CellValue_default_instance_._instance,
  &::TST::_PopUpMenuModel_default_instance_._instance,
  &::TST::_ImportWarningSetArchive_FormulaImportWarning_default_instance_._instance,
  &::TST::_ImportWarningSetArchive_default_instance_._instance,
  &::TST::_CellRefImportWarningSetPairArchive_default_instance_._instance,
  &::TST::_ImportWarningSetByCellRefArchive_default_instance_._instance,
  &::TST::_TableDataList_ListEntry_default_instance_._instance,
  &::TST::_TableDataList_default_instance_._instance,
  &::TST::_TableDataListSegment_default_instance_._instance,
  &::TST::_TableRBTree_Node_default_instance_._instance,
  &::TST::_TableRBTree_default_instance_._instance,
  &::TST::_HeaderStorageBucket_Header_default_instance_._instance,
  &::TST::_HeaderStorageBucket_default_instance_._instance,
  &::TST::_HeaderStorage_default_instance_._instance,
  &::TST::_DataStore_default_instance_._instance,
  &::TST::_TableInfoArchive_default_instance_._instance,
  &::TST::_CategoryInfoArchive_default_instance_._instance,
  &::TST::_WPTableInfoArchive_default_instance_._instance,
  &::TST::_TableStyleNetworkArchive_default_instance_._instance,
  &::TST::_TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_default_instance_._instance,
  &::TST::_TableGroupSortOrderUIDArchive_default_instance_._instance,
  &::TST::_TableSortOrderArchive_SortRuleArchive_default_instance_._instance,
  &::TST::_TableSortOrderArchive_default_instance_._instance,
  &::TST::_TableSortOrderUIDArchive_SortRuleArchive_default_instance_._instance,
  &::TST::_TableSortOrderUIDArchive_default_instance_._instance,
  &::TST::_SortRuleReferenceTrackerArchive_default_instance_._instance,
  &::TST::_CellRegion_default_instance_._instance,
  &::TST::_CellUIDRegionArchive_default_instance_._instance,
  &::TST::_StructuredTextImportRecord_default_instance_._instance,
  &::TST::_TableModelArchive_default_instance_._instance,
  &::TST::_SummaryModelArchive_default_instance_._instance,
  &::TST::_SummaryModelGroupByChangeStateArchive_default_instance_._instance,
  &::TST::_ColumnRowUIDMapArchive_default_instance_._instance,
  &::TST::_StrokeLayerArchive_StrokeRunArchive_default_instance_._instance,
  &::TST::_StrokeLayerArchive_default_instance_._instance,
  &::TST::_StrokeSidecarArchive_default_instance_._instance,
  &::TST::_DurationWrapperArchive_default_instance_._instance,
  &::TST::_Cell_default_instance_._instance,
  &::TST::_MergeRegionMapArchive_default_instance_._instance,
  &::TST::_CellMapArchive_default_instance_._instance,
  &::TST::_CellListArchive_OptionalCell_default_instance_._instance,
  &::TST::_CellListArchive_default_instance_._instance,
  &::TST::_ConcurrentCellMapArchive_default_instance_._instance,
  &::TST::_ConcurrentCellListArchive_OptionalCell_default_instance_._instance,
  &::TST::_ConcurrentCellListArchive_default_instance_._instance,
  &::TST::_CellFormatAndValueArchive_default_instance_._instance,
  &::TST::_CellSpecArchive_default_instance_._instance,
  &::TST::_CommentStorageWrapperArchive_default_instance_._instance,
  &::TST::_CellDiffArchive_default_instance_._instance,
  &::TST::_CellDiffArray_default_instance_._instance,
  &::TST::_CellDiffArraySegment_default_instance_._instance,
  &::TST::_CellDiffMapArchive_default_instance_._instance,
  &::TST::_HierarchicalCellDiffMapArchive_BoxedRow_default_instance_._instance,
  &::TST::_HierarchicalCellDiffMapArchive_default_instance_._instance,
  &::TST::_DoubleStyleMapArchive_DoubleStyleMapEntryArchive_default_instance_._instance,
  &::TST::_DoubleStyleMapArchive_default_instance_._instance,
  &::TST::_StyleTableMapArchive_StyleTableMapEntryArchive_default_instance_._instance,
  &::TST::_StyleTableMapArchive_default_instance_._instance,
  &::TST::_SelectionArchive_default_instance_._instance,
  &::TST::_DeathhawkRdar39989167CellSelectionArchive_default_instance_._instance,
  &::TST::_StrokeSelectionArchive_default_instance_._instance,
  &::TST::_ControlCellSelectionArchive_default_instance_._instance,
  &::TST::_StockCellSelectionArchive_default_instance_._instance,
  &::TST::_TableNameSelectionArchive_default_instance_._instance,
  &::TST::_AutofillSelectionArchive_default_instance_._instance,
  &::TST::_FilterRulePrePivotArchive_default_instance_._instance,
  &::TST::_FilterRuleArchive_default_instance_._instance,
  &::TST::_TableStyleArchive_default_instance_._instance,
  &::TST::_CellStyleArchive_default_instance_._instance,
  &::TST::_FormulaPredArgDataArchive_default_instance_._instance,
  &::TST::_FormulaPredArgArchive_default_instance_._instance,
  &::TST::_FormulaPredicatePrePivotArchive_default_instance_._instance,
  &::TST::_FormulaPredicateArchive_default_instance_._instance,
  &::TST::_ConditionalStyleSetArchive_ConditionalStyleRulePrePivot_default_instance_._instance,
  &::TST::_ConditionalStyleSetArchive_ConditionalStyleRule_default_instance_._instance,
  &::TST::_ConditionalStyleSetArchive_ConditionalStyleRules_default_instance_._instance,
  &::TST::_ConditionalStyleSetArchive_default_instance_._instance,
  &::TST::_FilterSetArchive_default_instance_._instance,
  &::TST::_UniqueIndexArchive_UniqueIndexEntryArchive_default_instance_._instance,
  &::TST::_UniqueIndexArchive_default_instance_._instance,
  &::TST::_HiddenStateExtentArchive_RowOrColumnState_default_instance_._instance,
  &::TST::_HiddenStateExtentArchive_default_instance_._instance,
  &::TST::_HiddenStatesArchive_default_instance_._instance,
  &::TST::_HiddenStatesOwnerArchive_default_instance_._instance,
  &::TST::_ExpandCollapseStateArchive_default_instance_._instance,
  &::TST::_TokenAttachmentArchive_default_instance_._instance,
  &::TST::_FormulaArchive_default_instance_._instance,
  &::TST::_ExpressionNodeArchive_default_instance_._instance,
  &::TST::_BooleanNodeArchive_default_instance_._instance,
  &::TST::_NumberNodeArchive_default_instance_._instance,
  &::TST::_StringNodeArchive_default_instance_._instance,
  &::TST::_IdentifierNodeArchive_default_instance_._instance,
  &::TST::_ArrayNodeArchive_default_instance_._instance,
  &::TST::_ListNodeArchive_default_instance_._instance,
  &::TST::_OperatorNodeArchive_default_instance_._instance,
  &::TST::_PostfixOperatorNodeArchive_default_instance_._instance,
  &::TST::_PrefixOperatorNodeArchive_default_instance_._instance,
  &::TST::_FunctionNodeArchive_default_instance_._instance,
  &::TST::_FunctionEndNodeArchive_default_instance_._instance,
  &::TST::_DateNodeArchive_default_instance_._instance,
  &::TST::_ReferenceNodeArchive_default_instance_._instance,
  &::TST::_DurationNodeArchive_default_instance_._instance,
  &::TST::_ArgumentPlaceholderNodeArchive_default_instance_._instance,
  &::TST::_EmptyExpressionNodeArchive_default_instance_._instance,
  &::TST::_LetNodeArchive_default_instance_._instance,
  &::TST::_InNodeArchive_default_instance_._instance,
  &::TST::_VariableNodeArchive_default_instance_._instance,
  &::TST::_LayoutHintArchive_default_instance_._instance,
  &::TST::_CompletionTokenAttachmentArchive_default_instance_._instance,
  &::TST::_HiddenStateFormulaOwnerArchive_default_instance_._instance,
  &::TST::_FormulaStoreArchive_FormulaStorePair_default_instance_._instance,
  &::TST::_FormulaStoreArchive_default_instance_._instance,
  &::TST::_MergeOperationArchive_default_instance_._instance,
  &::TST::_MergeOwnerArchive_default_instance_._instance,
  &::TST::_PencilAnnotationArchive_default_instance_._instance,
  &::TST::_PencilAnnotationOwnerArchive_default_instance_._instance,
  &::TST::_AccumulatorArchive_default_instance_._instance,
  &::TST::_GroupColumnArchive_default_instance_._instance,
  &::TST::_GroupColumnListArchive_default_instance_._instance,
  &::TST::_ColumnAggregateArchive_default_instance_._instance,
  &::TST::_ColumnAggregateListArchive_default_instance_._instance,
  &::TST::_GroupByArchive_AggNodeArchive_default_instance_._instance,
  &::TST::_GroupByArchive_AggregatorArchive_default_instance_._instance,
  &::TST::_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive_default_instance_._instance,
  &::TST::_GroupByArchive_GroupNodeArchive_FormatManagerArchive_default_instance_._instance,
  &::TST::_GroupByArchive_GroupNodeArchive_default_instance_._instance,
  &::TST::_GroupByArchive_default_instance_._instance,
  &::TST::_CategoryOwnerArchive_default_instance_._instance,
  &::TST::_CategoryOwnerRefArchive_default_instance_._instance,
  &::TST::_PivotGroupingColumnOptionsMapArchive_default_instance_._instance,
  &::TST::_PivotOwnerArchive_default_instance_._instance,
  &::TST::_RichTextPayloadArchive_default_instance_._instance,
  &::TST::_FormulaEqualsTokenAttachmentArchive_default_instance_._instance,
  &::TST::_CellFillStandIn_default_instance_._instance,
  &::TST::_FormulaSelectionArchive_default_instance_._instance,
  &::TST::_CellBorderArchive_default_instance_._instance,
  &::TST::_DefaultCellStylesContainerArchive_default_instance_._instance,
  &::TST::_MultiTableRemapperArchive_default_instance_._instance,
  &::TST::_ChangePropagationMapWrapper_default_instance_._instance,
  &::TST::_SummaryCellVendorArchive_SummaryCellEntry_default_instance_._instance,
  &::TST::_SummaryCellVendorArchive_default_instance_._instance,
  &::TST::_CategoryOrderArchive_default_instance_._instance,
  &::TST::_PivotOrderArchive_default_instance_._instance,
  &::TST::_HeaderNameMgrTileArchive_NameFragmentArchive_default_instance_._instance,
  &::TST::_HeaderNameMgrTileArchive_default_instance_._instance,
  &::TST::_HeaderNameMgrArchive_PerTableArchive_default_instance_._instance,
  &::TST::_HeaderNameMgrArchive_default_instance_._instance,
  &::TST::_WidthHeightCacheFittingEntry_default_instance_._instance,
  &::TST::_WidthHeightCache_default_instance_._instance,
  &::TST::_LayoutEngineArchive_default_instance_._instance,
  &::TST::_CollaboratorTableCursorSubselectionArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSTArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021TSTArchives.proto\022\003TST\032\021TSPMessages.pr"
  "oto\032\021TSDArchives.proto\032\021TSKArchives.prot"
  "o\032\021TSSArchives.proto\032\022TSCEArchives.proto"
  "\032\022TSWPArchives.proto\032\037TSTStylePropertyAr"
  "chiving.proto\"Q\n\006CellID\022\022\n\npackedData\030\001 "
  "\002(\007\0223\n\016expanded_coord\030\002 \001(\0132\033.TSCE.CellC"
  "oordinateArchive\"\246\001\n\030CellUIDLookupListAr"
  "chive\022/\n\013column_uids\030\001 \001(\0132\032.TSCE.UidLoo"
  "kupListArchive\022,\n\010row_uids\030\002 \001(\0132\032.TSCE."
  "UidLookupListArchive\022\026\n\016column_indexes\030\003"
  " \003(\005\022\023\n\013row_indexes\030\004 \003(\005\"\325\001\n\022CellUIDLis"
  "tArchive\022\033\n\010row_uids\030\001 \003(\0132\t.TSP.UUID\022\036\n"
  "\013column_uids\030\002 \003(\0132\t.TSP.UUID\022\036\n\026compres"
  "sed_row_indexes\030\003 \003(\005\022!\n\031compressed_colu"
  "mn_indexes\030\004 \003(\005\022\?\n\030uncompressed_lookup_"
  "list\030\005 \001(\0132\035.TST.CellUIDLookupListArchiv"
  "e\"F\n\tTableSize\022\022\n\npackedData\030\001 \002(\007\022\023\n\013nu"
  "m_columns\030\002 \001(\r\022\020\n\010num_rows\030\003 \001(\r\":\n\021Exp"
  "andedTableSize\022\023\n\013num_columns\030\001 \002(\r\022\020\n\010n"
  "um_rows\030\002 \002(\r\"F\n\tCellRange\022\033\n\006origin\030\001 \002"
  "(\0132\013.TST.CellID\022\034\n\004size\030\002 \002(\0132\016.TST.Tabl"
  "eSize\"f\n\021ExpandedCellRange\022+\n\006origin\030\001 \002"
  "(\0132\033.TSCE.CellCoordinateArchive\022$\n\004size\030"
  "\002 \002(\0132\026.TST.ExpandedTableSize\"\261\001\n\016TableS"
  "election\022!\n\tcellRange\030\001 \002(\0132\016.TST.CellRa"
  "nge\022)\n\021extendedCellRange\030\002 \002(\0132\016.TST.Cel"
  "lRange\022\036\n\026extendedCellRangeValid\030\003 \002(\010\0221"
  "\n\016selection_type\030\004 \002(\0162\031.TST.SelectionTy"
  "peArchive\"\342\001\n\013TileRowInfo\022\026\n\016tile_row_in"
  "dex\030\001 \002(\r\022\022\n\ncell_count\030\002 \002(\r\022#\n\033cell_st"
  "orage_buffer_pre_bnc\030\003 \002(\014\022\034\n\024cell_offse"
  "ts_pre_bnc\030\004 \002(\014\022\027\n\017storage_version\030\005 \001("
  "\r\022\033\n\023cell_storage_buffer\030\006 \001(\014\022\024\n\014cell_o"
  "ffsets\030\007 \001(\014\022\030\n\020has_wide_offsets\030\010 \001(\010\"\302"
  "\001\n\004Tile\022\021\n\tmaxColumn\030\001 \002(\r\022\016\n\006maxRow\030\002 \002"
  "(\r\022\020\n\010numCells\030\003 \002(\r\022\017\n\007numrows\030\004 \002(\r\022\"\n"
  "\010rowInfos\030\005 \003(\0132\020.TST.TileRowInfo\022\027\n\017sto"
  "rage_version\030\006 \001(\r\022\031\n\021last_saved_in_BNC\030"
  "\007 \001(\010\022\034\n\024should_use_wide_rows\030\010 \001(\010\"\232\001\n\013"
  "TileStorage\022$\n\005tiles\030\001 \003(\0132\025.TST.TileSto"
  "rage.Tile\022\021\n\ttile_size\030\002 \001(\r\022\034\n\024should_u"
  "se_wide_rows\030\003 \001(\010\0324\n\004Tile\022\016\n\006tileid\030\001 \002"
  "(\r\022\034\n\004tile\030\002 \002(\0132\016.TSP.Reference\"\346\003\n\016Pop"
  "UpMenuModel\022/\n\004item\030\001 \003(\0132\035.TST.PopUpMen"
  "uModel.CellValueB\002\030\001\022)\n\ttsce_item\030\002 \003(\0132"
  "\026.TSCE.CellValueArchive\032\225\002\n\tCellValue\022:\n"
  "\017cell_value_type\030\001 \002(\0162!.TST.PopUpMenuMo"
  "del.CellValueType\0224\n\rboolean_value\030\002 \001(\013"
  "2\035.TSCE.BooleanCellValueArchive\022.\n\ndate_"
  "value\030\003 \001(\0132\032.TSCE.DateCellValueArchive\022"
  "2\n\014number_value\030\004 \001(\0132\034.TSCE.NumberCellV"
  "alueArchive\0222\n\014string_value\030\005 \001(\0132\034.TSCE"
  ".StringCellValueArchive\"`\n\rCellValueType"
  "\022\014\n\010NIL_TYPE\020\001\022\020\n\014BOOLEAN_TYPE\020\002\022\r\n\tDATE"
  "_TYPE\020\003\022\017\n\013NUMBER_TYPE\020\004\022\017\n\013STRING_TYPE\020"
  "\005\"\262\013\n\027ImportWarningSetArchive\022Q\n\026formula"
  "_import_warning\030\001 \001(\01321.TST.ImportWarnin"
  "gSetArchive.FormulaImportWarning\022.\n\037cond"
  "_format_above_avg_equal_avg\030\002 \001(\010:\005false"
  "\022,\n\035cond_format_above_avg_std_dev\030\003 \001(\010:"
  "\005false\022*\n\033cond_format_complex_formula\030\004 "
  "\001(\010:\005false\022*\n\033cond_format_contains_error"
  "s\030\005 \001(\010:\005false\022\037\n\020cond_format_expr\030\006 \001(\010"
  ":\005false\022.\n\037cond_format_not_contains_erro"
  "rs\030\007 \001(\010:\005false\0227\n(cond_format_parameter"
  "s_not_all_same_type\030\010 \001(\010:\005false\022\'\n\030cond"
  "_format_stop_if_true\030\t \001(\010:\005false\022/\n con"
  "d_format_unsupported_operator\030\n \001(\010:\005fal"
  "se\022.\n\037cond_format_unsupported_styling\030\013 "
  "\001(\010:\005false\0222\n#cond_format_unsupported_ti"
  "me_period\030\014 \001(\010:\005false\022)\n\032error_cell_wit"
  "h_no_formula\030\r \001(\010:\005false\022&\n\027unsupported"
  "_cond_format\030\016 \001(\010:\005false\022\034\n\024original_da"
  "ta_format\030\017 \001(\t\022A\n2formula_warning_filte"
  "red_column_formula_not_copied\030\020 \001(\010:\005fal"
  "se\022,\n\035duration_format_range_changed\030\021 \001("
  "\010:\005false\032\275\001\n\024FormulaImportWarning\022M\n\024for"
  "mula_warning_type\030\001 \002(\0162/.TST.ImportWarn"
  "ingSetArchive.FormulaWarningType\022\030\n\020orig"
  "inal_formula\030\002 \001(\t\022\032\n\022supplementary_text"
  "\030\003 \001(\t\022 \n\030formula_warning_type_int\030\004 \001(\005"
  "\"\243\003\n\022FormulaWarningType\022\025\n\021THREE_D_REFER"
  "ENCE\020\001\022\023\n\017ARRAYED_FORMULA\020\002\022#\n\037DIFFERENT"
  "_BEHAVIOR_FOR_FUNCTION\020\003\022\017\n\013ERROR_TOKEN\020"
  "\004\022\026\n\022EXTERNAL_REFERENCE\020\005\022\034\n\030NATURAL_LAN"
  "GUAGE_FORMULA\020\006\022\033\n\027REFERENCE_OUT_OF_BOUN"
  "DS\020\007\022!\n\035SHARED_FORMULA_BASE_NOT_FOUND\020\010\022"
  "\020\n\014UNKNOWN_NAME\020\t\022\027\n\023UNSUPPORTED_FORMULA"
  "\020\n\022\030\n\024UNSUPPORTED_FUNCTION\020\013\022\024\n\020UNSUPPOR"
  "TED_NAME\020\014\022\030\n\024TRANSPOSED_NO_ISSUES\020\r\022\032\n\026"
  "TRANSPOSED_WITH_ISSUES\020\016\022$\n TRANSPOSED_W"
  "ITH_ISSUES_UNCHANGED\020\017\"\205\001\n\"CellRefImport"
  "WarningSetPairArchive\022,\n\010cell_ref\030\001 \002(\0132"
  "\032.TSCE.CellReferenceArchive\0221\n\013warning_s"
  "et\030\003 \001(\0132\034.TST.ImportWarningSetArchive\"m"
  "\n ImportWarningSetByCellRefArchive\022I\n\030ce"
  "llref_warning_set_pair\030\001 \003(\0132\'.TST.CellR"
  "efImportWarningSetPairArchive\"\306\006\n\rTableD"
  "ataList\022-\n\010listType\030\001 \002(\0162\033.TST.TableDat"
  "aList.ListType\022\022\n\nnextListID\030\002 \002(\r\022-\n\007en"
  "tries\030\003 \003(\0132\034.TST.TableDataList.ListEntr"
  "y\022 \n\010segments\030\004 \003(\0132\016.TSP.Reference\022\026\n\016i"
  "s_new_for_bnc\030\005 \001(\010\032\226\003\n\tListEntry\022\013\n\003key"
  "\030\001 \002(\r\022\020\n\010refcount\030\002 \002(\r\022\016\n\006string\030\003 \001(\t"
  "\022!\n\treference\030\004 \001(\0132\016.TSP.Reference\022%\n\007f"
  "ormula\030\005 \001(\0132\024.TSCE.FormulaArchive\022(\n\006fo"
  "rmat\030\006 \001(\0132\030.TSK.FormatStructArchive\022/\n\r"
  "custom_format\030\010 \001(\0132\030.TSK.CustomFormatAr"
  "chive\022)\n\021rich_text_payload\030\t \001(\0132\016.TSP.R"
  "eference\022\'\n\017comment_storage\030\n \001(\0132\016.TSP."
  "Reference\0228\n\022import_warning_set\030\013 \001(\0132\034."
  "TST.ImportWarningSetArchive\022\'\n\tcell_spec"
  "\030\014 \001(\0132\024.TST.CellSpecArchive\"\357\001\n\010ListTyp"
  "e\022\n\n\006STRING\020\001\022\n\n\006FORMAT\020\002\022\013\n\007FORMULA\020\003\022\t"
  "\n\005STYLE\020\004\022\021\n\rFORMULA_ERROR\020\005\022\021\n\rCUSTOM_F"
  "ORMAT\020\006\022\037\n\033MULTIPLE_CHOICE_LIST_FORMAT\020\007"
  "\022\025\n\021RICH_TEXT_PAYLOAD\020\010\022\025\n\021CONDITIONAL_S"
  "TYLE\020\t\022\023\n\017COMMENT_STORAGE\020\n\022\022\n\016IMPORT_WA"
  "RNING\020\013\022\025\n\021CONTROL_CELL_SPEC\020\014\"\224\001\n\024Table"
  "DataListSegment\022.\n\tlist_type\030\001 \002(\0162\033.TST"
  ".TableDataList.ListType\022\035\n\tkey_range\030\002 \002"
  "(\0132\n.TSP.Range\022-\n\007entries\030\003 \003(\0132\034.TST.Ta"
  "bleDataList.ListEntry\"W\n\013TableRBTree\022$\n\005"
  "nodes\030\001 \003(\0132\025.TST.TableRBTree.Node\032\"\n\004No"
  "de\022\013\n\003key\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"\377\001\n\023Heade"
  "rStorageBucket\022\032\n\022bucketHashFunction\030\001 \002"
  "(\r\0220\n\007headers\030\002 \003(\0132\037.TST.HeaderStorageB"
  "ucket.Header\032\231\001\n\006Header\022\r\n\005index\030\001 \002(\r\022\014"
  "\n\004size\030\002 \002(\002\022\023\n\013hidingState\030\003 \002(\r\022\025\n\rnum"
  "berOfCells\030\004 \002(\r\022\"\n\ncell_style\030\005 \001(\0132\016.T"
  "SP.Reference\022\"\n\ntext_style\030\006 \001(\0132\016.TSP.R"
  "eference\"L\n\rHeaderStorage\022\032\n\022bucketHashF"
  "unction\030\001 \002(\r\022\037\n\007buckets\030\002 \003(\0132\016.TSP.Ref"
  "erence\"\215\007\n\tDataStore\022&\n\nrowHeaders\030\001 \002(\013"
  "2\022.TST.HeaderStorage\022%\n\rcolumnHeaders\030\002 "
  "\002(\0132\016.TSP.Reference\022\037\n\005tiles\030\003 \002(\0132\020.TST"
  ".TileStorage\022#\n\013stringTable\030\004 \002(\0132\016.TSP."
  "Reference\022\"\n\nstyleTable\030\005 \002(\0132\016.TSP.Refe"
  "rence\022%\n\rformula_table\030\006 \002(\0132\016.TSP.Refer"
  "ence\022)\n\021formulaErrorTable\030\014 \001(\0132\016.TSP.Re"
  "ference\022,\n\024format_table_pre_bnc\030\013 \002(\0132\016."
  "TSP.Reference\0225\n\035multipleChoiceListForma"
  "tTable\030\020 \001(\0132\016.TSP.Reference\022(\n\020merge_re"
  "gion_map\030\r \001(\0132\016.TSP.Reference\0226\n\036deprec"
  "ated_custom_format_table\030\017 \001(\0132\016.TSP.Ref"
  "erence\022\026\n\016nextRowStripID\030\007 \002(\r\022\031\n\021nextCo"
  "lumnStripID\030\010 \002(\r\022%\n\013rowTileTree\030\t \002(\0132\020"
  ".TST.TableRBTree\022(\n\016columnTileTree\030\n \002(\013"
  "2\020.TST.TableRBTree\022\037\n\027storage_version_pr"
  "e_bnc\030\016 \001(\r\022\'\n\017rich_text_table\030\021 \001(\0132\016.T"
  "SP.Reference\022-\n\025conditionalstyletable\030\022 "
  "\001(\0132\016.TSP.Reference\022+\n\023commentStorageTab"
  "le\030\023 \001(\0132\016.TSP.Reference\022-\n\025importWarnin"
  "gSetTable\030\024 \001(\0132\016.TSP.Reference\022/\n\027contr"
  "ol_cell_spec_table\030\025 \001(\0132\016.TSP.Reference"
  "\022$\n\014format_table\030\026 \001(\0132\016.TSP.Reference\"\350"
  "\004\n\020TableInfoArchive\022#\n\005super\030\001 \002(\0132\024.TSD"
  ".DrawableArchive\022\"\n\ntableModel\030\002 \002(\0132\016.T"
  "SP.Reference\022)\n\rediting_state\030\003 \001(\0132\016.TS"
  "P.ReferenceB\002\030\001\022%\n\rsummary_model\030\004 \001(\0132\016"
  ".TSP.Reference\022&\n\016category_order\030\005 \001(\0132\016"
  ".TSP.Reference\022,\n\024view_column_row_uids\030\006"
  " \001(\0132\016.TSP.Reference\022 \n\rgroup_by_uuid\030\007 "
  "\001(\0132\t.TSP.UUID\022%\n\022hidden_states_uuid\030\010 \001"
  "(\0132\t.TSP.UUID\022(\n\034formula_coord_space_in_"
  "pre40\030\t \001(\rB\002\030\001\022\033\n\023formula_coord_space\030\n"
  " \001(\r\0229\n\027pasteboard_coord_mapper\030\r \001(\0132\030."
  "TSCE.CoordMapperArchive\022/\n\rlayout_engine"
  "\030\016 \001(\0132\030.TST.LayoutEngineArchive\022(\n\020pivo"
  "t_data_model\030\017 \001(\0132\016.TSP.Reference\022\030\n\020is"
  "_a_pivot_table\030\020 \001(\010\022#\n\013pivot_order\030\021 \001("
  "\0132\016.TSP.Reference\"^\n\023CategoryInfoArchive"
  "\022#\n\005super\030\001 \002(\0132\024.TSD.DrawableArchive\022\"\n"
  "\ntableModel\030\002 \002(\0132\016.TSP.Reference\"[\n\022WPT"
  "ableInfoArchive\022$\n\005super\030\001 \002(\0132\025.TST.Tab"
  "leInfoArchive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Ref"
  "erence\"\215\r\n\030TableStyleNetworkArchive\022\'\n\017b"
  "ody_text_style\030\001 \002(\0132\016.TSP.Reference\022-\n\025"
  "header_row_text_style\030\002 \002(\0132\016.TSP.Refere"
  "nce\0220\n\030header_column_text_style\030\003 \002(\0132\016."
  "TSP.Reference\022-\n\025footer_row_text_style\030\004"
  " \002(\0132\016.TSP.Reference\022\'\n\017body_cell_style\030"
  "\005 \002(\0132\016.TSP.Reference\022(\n\020header_row_styl"
  "e\030\006 \002(\0132\016.TSP.Reference\022+\n\023header_column"
  "_style\030\007 \002(\0132\016.TSP.Reference\022(\n\020footer_r"
  "ow_style\030\010 \002(\0132\016.TSP.Reference\022#\n\013table_"
  "style\030\t \002(\0132\016.TSP.Reference\022(\n\020table_nam"
  "e_style\030\n \001(\0132\016.TSP.Reference\022.\n\026table_n"
  "ame_shape_style\030\013 \001(\0132\016.TSP.Reference\022\021\n"
  "\tpreset_id\030\014 \001(\r\0223\n\033category_level_1_tex"
  "t_style\030\r \001(\0132\016.TSP.Reference\0223\n\033categor"
  "y_level_2_text_style\030\016 \001(\0132\016.TSP.Referen"
  "ce\0223\n\033category_level_3_text_style\030\017 \001(\0132"
  "\016.TSP.Reference\0223\n\033category_level_4_text"
  "_style\030\020 \001(\0132\016.TSP.Reference\0223\n\033category"
  "_level_5_text_style\030\021 \001(\0132\016.TSP.Referenc"
  "e\022.\n\026category_level_1_style\030\022 \001(\0132\016.TSP."
  "Reference\022.\n\026category_level_2_style\030\023 \001("
  "\0132\016.TSP.Reference\022.\n\026category_level_3_st"
  "yle\030\024 \001(\0132\016.TSP.Reference\022.\n\026category_le"
  "vel_4_style\030\025 \001(\0132\016.TSP.Reference\022.\n\026cat"
  "egory_level_5_style\030\026 \001(\0132\016.TSP.Referenc"
  "e\0220\n\030label_level_1_text_style\030\027 \001(\0132\016.TS"
  "P.Reference\0220\n\030label_level_2_text_style\030"
  "\030 \001(\0132\016.TSP.Reference\0220\n\030label_level_3_t"
  "ext_style\030\031 \001(\0132\016.TSP.Reference\0220\n\030label"
  "_level_4_text_style\030\032 \001(\0132\016.TSP.Referenc"
  "e\0220\n\030label_level_5_text_style\030\033 \001(\0132\016.TS"
  "P.Reference\022+\n\023label_level_1_style\030\034 \001(\013"
  "2\016.TSP.Reference\022+\n\023label_level_2_style\030"
  "\035 \001(\0132\016.TSP.Reference\022+\n\023label_level_3_s"
  "tyle\030\036 \001(\0132\016.TSP.Reference\022+\n\023label_leve"
  "l_4_style\030\037 \001(\0132\016.TSP.Reference\022+\n\023label"
  "_level_5_style\030  \001(\0132\016.TSP.Reference\0224\n\034"
  "pivot_body_summary_row_style\030! \001(\0132\016.TSP"
  ".Reference\0227\n\037pivot_body_summary_column_"
  "style\030\" \001(\0132\016.TSP.Reference\0229\n!pivot_hea"
  "der_column_summary_style\030# \001(\0132\016.TSP.Ref"
  "erence\"\335\002\n\035TableGroupSortOrderUIDArchive"
  "\022T\n\020group_sort_rules\030\001 \003(\0132:.TST.TableGr"
  "oupSortOrderUIDArchive.GroupSortRuleUIDA"
  "rchive\032\345\001\n\027GroupSortRuleUIDArchive\022&\n\023gr"
  "ouping_column_uid\030\001 \001(\0132\t.TSP.UUID\022\035\n\nco"
  "lumn_uid\030\002 \001(\0132\t.TSP.UUID\022W\n\tdirection\030\003"
  " \001(\0162D.TST.TableGroupSortOrderUIDArchive"
  ".GroupSortRuleUIDArchive.Direction\"*\n\tDi"
  "rection\022\r\n\tascending\020\000\022\016\n\ndescending\020\001\"\312"
  "\002\n\025TableSortOrderArchive\0221\n\004type\030\001 \002(\0162#"
  ".TST.TableSortOrderArchive.SortType\0229\n\005r"
  "ules\030\002 \003(\0132*.TST.TableSortOrderArchive.S"
  "ortRuleArchive\032\225\001\n\017SortRuleArchive\022\r\n\005in"
  "dex\030\001 \002(\r\022G\n\tdirection\030\002 \002(\01624.TST.Table"
  "SortOrderArchive.SortRuleArchive.Directi"
  "on\"*\n\tDirection\022\r\n\tascending\020\000\022\016\n\ndescen"
  "ding\020\001\"+\n\010SortType\022\020\n\014entire_table\020\000\022\r\n\t"
  "row_range\020\001\"\346\002\n\030TableSortOrderUIDArchive"
  "\0224\n\004type\030\001 \002(\0162&.TST.TableSortOrderUIDAr"
  "chive.SortType\022<\n\005rules\030\002 \003(\0132-.TST.Tabl"
  "eSortOrderUIDArchive.SortRuleArchive\032\250\001\n"
  "\017SortRuleArchive\022\035\n\ncolumn_uid\030\001 \002(\0132\t.T"
  "SP.UUID\022J\n\tdirection\030\002 \002(\01627.TST.TableSo"
  "rtOrderUIDArchive.SortRuleArchive.Direct"
  "ion\"*\n\tDirection\022\r\n\tascending\020\000\022\016\n\ndesce"
  "nding\020\001\"+\n\010SortType\022\020\n\014entire_table\020\000\022\r\n"
  "\trow_range\020\001\"L\n\037SortRuleReferenceTracker"
  "Archive\022)\n\021reference_tracker\030\001 \002(\0132\016.TSP"
  ".Reference\"1\n\nCellRegion\022#\n\013cell_ranges\030"
  "\001 \003(\0132\016.TST.CellRange\"E\n\024CellUIDRegionAr"
  "chive\022-\n\017cell_uid_ranges\030\001 \003(\0132\024.TSP.UUI"
  "DRectArchive\"\247\002\n\032StructuredTextImportRec"
  "ord\022:\n\017import_settings\030\001 \002(\0132!.TSK.Struc"
  "turedTextImportSettings\022\025\n\rimport_source"
  "\030\002 \001(\t\022\023\n\013import_date\030\003 \001(\001\022\023\n\013source_da"
  "ta\030\004 \001(\014\022\027\n\017source_encoding\030\005 \001(\004\022\022\n\ncon"
  "fidence\030\006 \001(\002\022(\n\017imported_region\030\007 \001(\0132\017"
  ".TST.CellRegion\022\030\n\020source_row_count\030\010 \001("
  "\004\022\033\n\023source_column_count\030\t \001(\004\"\211\034\n\021Table"
  "ModelArchive\022\020\n\010table_id\030\001 \002(\t\022\025\n\rfrom_t"
  "able_id\030+ \001(\t\022\017\n\007was_cut\0302 \001(\010\022#\n\013table_"
  "style\030\003 \002(\0132\016.TSP.Reference\022\'\n\017body_text"
  "_style\030\030 \002(\0132\016.TSP.Reference\022-\n\025header_r"
  "ow_text_style\030\031 \002(\0132\016.TSP.Reference\0220\n\030h"
  "eader_column_text_style\030\032 \002(\0132\016.TSP.Refe"
  "rence\022-\n\025footer_row_text_style\030\033 \002(\0132\016.T"
  "SP.Reference\022\'\n\017body_cell_style\030\022 \002(\0132\016."
  "TSP.Reference\022(\n\020header_row_style\030\023 \002(\0132"
  "\016.TSP.Reference\022+\n\023header_column_style\030\024"
  " \002(\0132\016.TSP.Reference\022(\n\020footer_row_style"
  "\030\025 \002(\0132\016.TSP.Reference\022(\n\020table_name_sty"
  "le\030\036 \001(\0132\016.TSP.Reference\022.\n\026table_name_s"
  "hape_style\030$ \001(\0132\016.TSP.Reference\022*\n\022tabl"
  "e_style_preset\0300 \001(\0132\016.TSP.Reference\022\024\n\014"
  "preset_index\030\034 \001(\r\022\'\n\017base_data_store\030\004 "
  "\002(\0132\016.TST.DataStore\022 \n\010provider\030\005 \001(\0132\016."
  "TSP.Reference\022\026\n\016number_of_rows\030\006 \002(\r\022\031\n"
  "\021number_of_columns\030\007 \002(\r\022\022\n\ntable_name\030\010"
  " \002(\t\022\032\n\022table_name_enabled\030\026 \001(\010\022\031\n\021tabl"
  "e_name_height\030! \001(\001\022!\n\031table_name_border"
  "_enabled\030% \001(\010\022\035\n\025number_of_header_rows\030"
  "\t \001(\r\022 \n\030number_of_header_columns\030\n \001(\r\022"
  "\035\n\025number_of_footer_rows\030\013 \001(\r\022\032\n\022header"
  "_rows_frozen\030\014 \001(\010\022\035\n\025header_columns_fro"
  "zen\030\r \001(\010\022\035\n\025number_of_hidden_rows\030\016 \001(\r"
  "\022 \n\030number_of_hidden_columns\030\017 \001(\r\022\"\n\032nu"
  "mber_of_user_hidden_rows\030) \001(\r\022%\n\035number"
  "_of_user_hidden_columns\030* \001(\r\022\037\n\027number_"
  "of_filtered_rows\030( \001(\r\022\032\n\022default_row_he"
  "ight\030\020 \002(\001\022\034\n\024default_column_width\030\021 \002(\001"
  "\022&\n\rorigin_offset\030\027 \001(\0132\013.TST.CellIDB\002\030\001"
  "\022%\n\035repeating_header_rows_enabled\030\035 \001(\010\022"
  "\036\n\026style_apply_clears_all\030\037 \001(\010\022(\n repea"
  "ting_header_columns_enabled\030  \001(\010\022>\n&hid"
  "den_state_formula_owner_for_columns\030\" \001("
  "\0132\016.TSP.Reference\022;\n#hidden_state_formul"
  "a_owner_for_rows\030# \001(\0132\016.TSP.Reference\0220"
  "\n\030row_filter_set_pre_pivot\030& \001(\0132\016.TSP.R"
  "eference\022>\n\"conditional_style_formula_ow"
  "ner_id\030\' \001(\0132\022.TSP.CFUUIDArchive\022.\n\nsort"
  "_order\030, \001(\0132\032.TST.TableSortOrderArchive"
  "\022I\n\033sort_rule_reference_tracker\030- \001(\0132$."
  "TST.SortRuleReferenceTrackerArchive\022,\n\024b"
  "ase_column_row_uids\030. \001(\0132\016.TSP.Referenc"
  "e\022+\n\013merge_owner\030/ \001(\0132\026.TST.MergeOwnerA"
  "rchive\022&\n\016stroke_sidecar\0301 \001(\0132\016.TSP.Ref"
  "erence\022%\n\035preset_needs_strong_ownership\030"
  "3 \001(\010\022;\n\022text_import_record\0304 \001(\0132\037.TST."
  "StructuredTextImportRecord\022.\n\026category_l"
  "evel_1_style\030< \001(\0132\016.TSP.Reference\022.\n\026ca"
  "tegory_level_2_style\030= \001(\0132\016.TSP.Referen"
  "ce\022.\n\026category_level_3_style\030> \001(\0132\016.TSP"
  ".Reference\022.\n\026category_level_4_style\030\? \001"
  "(\0132\016.TSP.Reference\022.\n\026category_level_5_s"
  "tyle\030@ \001(\0132\016.TSP.Reference\0223\n\033category_l"
  "evel_1_text_style\030A \001(\0132\016.TSP.Reference\022"
  "3\n\033category_level_2_text_style\030B \001(\0132\016.T"
  "SP.Reference\0223\n\033category_level_3_text_st"
  "yle\030C \001(\0132\016.TSP.Reference\0223\n\033category_le"
  "vel_4_text_style\030D \001(\0132\016.TSP.Reference\0223"
  "\n\033category_level_5_text_style\030E \001(\0132\016.TS"
  "P.Reference\022:\n\023hidden_states_owner\030F \001(\013"
  "2\035.TST.HiddenStatesOwnerArchive\022+\n\023label"
  "_level_1_style\030G \001(\0132\016.TSP.Reference\022+\n\023"
  "label_level_2_style\030H \001(\0132\016.TSP.Referenc"
  "e\022+\n\023label_level_3_style\030I \001(\0132\016.TSP.Ref"
  "erence\022+\n\023label_level_4_style\030J \001(\0132\016.TS"
  "P.Reference\022+\n\023label_level_5_style\030K \001(\013"
  "2\016.TSP.Reference\0220\n\030label_level_1_text_s"
  "tyle\030L \001(\0132\016.TSP.Reference\0220\n\030label_leve"
  "l_2_text_style\030M \001(\0132\016.TSP.Reference\0220\n\030"
  "label_level_3_text_style\030N \001(\0132\016.TSP.Ref"
  "erence\0220\n\030label_level_4_text_style\030O \001(\013"
  "2\016.TSP.Reference\0220\n\030label_level_5_text_s"
  "tyle\030P \001(\0132\016.TSP.Reference\022<\n\031category_o"
  "wner_deprecated\030Q \001(\0132\031.TST.CategoryOwne"
  "rArchive\022B\n\027pencil_annotation_owner\030R \001("
  "\0132!.TST.PencilAnnotationOwnerArchive\022\031\n\021"
  "from_group_by_uid\030S \001(\t\0220\n\rhaunted_owner"
  "\030T \001(\0132\031.TSCE.HauntedOwnerArchive\022#\n\013piv"
  "ot_owner\030U \001(\0132\016.TSP.Reference\022&\n\016catego"
  "ry_owner\030V \001(\0132\016.TSP.Reference\0224\n\034pivot_"
  "body_summary_row_style\030W \001(\0132\016.TSP.Refer"
  "ence\0227\n\037pivot_body_summary_column_style\030"
  "X \001(\0132\016.TSP.Reference\0229\n!pivot_header_co"
  "lumn_summary_style\030Y \001(\0132\016.TSP.Reference"
  "\022 \n\030pivot_value_types_by_col\030Z \003(\r\022#\n\033pi"
  "vot_date_grouping_columns\030[ \003(\r\022!\n\031pivot"
  "_date_grouping_types\030\\ \003(\r\"\206\010\n\023SummaryMo"
  "delArchive\022\"\n\ntable_info\030\001 \002(\0132\016.TSP.Ref"
  "erence\022\"\n\ndata_store\030\002 \001(\0132\016.TST.DataSto"
  "re\022\'\n\017column_row_uids\030\003 \001(\0132\016.TSP.Refere"
  "nce\022/\n\034aggregate_formula_owner_uuid\030\004 \001("
  "\0132\t.TSP.UUID\022+\n\023summary_cell_vendor\030\005 \001("
  "\0132\016.TSP.Reference\022\035\n\025category_column_wid"
  "th\030\n \001(\001\022&\n\032summary_row_level_1_height\030\013"
  " \001(\001B\002\030\001\022&\n\032summary_row_level_2_height\030\014"
  " \001(\001B\002\030\001\022&\n\032summary_row_level_3_height\030\r"
  " \001(\001B\002\030\001\022&\n\032summary_row_level_4_height\030\016"
  " \001(\001B\002\030\001\022&\n\032summary_row_level_5_height\030\017"
  " \001(\001B\002\030\001\022,\n summary_label_row_level_1_he"
  "ight\030\020 \001(\001B\002\030\001\022,\n summary_label_row_leve"
  "l_2_height\030\021 \001(\001B\002\030\001\022,\n summary_label_ro"
  "w_level_3_height\030\022 \001(\001B\002\030\001\022,\n summary_la"
  "bel_row_level_4_height\030\023 \001(\001B\002\030\001\022,\n summ"
  "ary_label_row_level_5_height\030\024 \001(\001B\002\030\001\022\""
  "\n\026label_row_visibility_1\030\025 \001(\rB\002\030\001\022\"\n\026la"
  "bel_row_visibility_2\030\026 \001(\rB\002\030\001\022\"\n\026label_"
  "row_visibility_3\030\027 \001(\rB\002\030\001\022\"\n\026label_row_"
  "visibility_4\030\030 \001(\rB\002\030\001\022\"\n\026label_row_visi"
  "bility_5\030\031 \001(\rB\002\030\001\022\037\n\027summary_row_height"
  "_list\030\032 \003(\001\022\035\n\025label_row_height_list\030\033 \003"
  "(\001\022!\n\031label_row_visibility_list\030\034 \003(\r\022<\n"
  "\020group_sort_order\030\035 \001(\0132\".TST.TableGroup"
  "SortOrderUIDArchive\"\254\001\n%SummaryModelGrou"
  "pByChangeStateArchive\022 \n\010cell_map\030\001 \001(\0132"
  "\016.TSP.Reference\022\037\n\027summary_row_height_li"
  "st\030\002 \003(\001\022\035\n\025label_row_height_list\030\003 \003(\001\022"
  "!\n\031label_row_visibility_list\030\004 \003(\r\"\325\001\n\026C"
  "olumnRowUIDMapArchive\022%\n\022sorted_column_u"
  "ids\030\001 \003(\0132\t.TSP.UUID\022\034\n\024column_index_for"
  "_uid\030\002 \003(\r\022\034\n\024column_uid_for_index\030\003 \003(\r"
  "\022\"\n\017sorted_row_uids\030\004 \003(\0132\t.TSP.UUID\022\031\n\021"
  "row_index_for_uid\030\005 \003(\r\022\031\n\021row_uid_for_i"
  "ndex\030\006 \003(\r\"\324\001\n\022StrokeLayerArchive\022\030\n\020row"
  "_column_index\030\001 \001(\r\022=\n\013stroke_runs\030\002 \003(\013"
  "2(.TST.StrokeLayerArchive.StrokeRunArchi"
  "ve\032e\n\020StrokeRunArchive\022\016\n\006origin\030\001 \001(\005\022\016"
  "\n\006length\030\002 \001(\r\022\"\n\006stroke\030\003 \001(\0132\022.TSD.Str"
  "okeArchive\022\r\n\005order\030\004 \001(\r\"\232\002\n\024StrokeSide"
  "carArchive\022\021\n\tmax_order\030\001 \001(\r\022\024\n\014column_"
  "count\030\002 \001(\r\022\021\n\trow_count\030\003 \001(\r\0221\n\031left_c"
  "olumn_stroke_layers\030\004 \003(\0132\016.TSP.Referenc"
  "e\0222\n\032right_column_stroke_layers\030\005 \003(\0132\016."
  "TSP.Reference\022-\n\025top_row_stroke_layers\030\006"
  " \003(\0132\016.TSP.Reference\0220\n\030bottom_row_strok"
  "e_layers\030\007 \003(\0132\016.TSP.Reference\"\030\n\026Durati"
  "onWrapperArchive\"\347\010\n\004Cell\022%\n\tvalueType\030\002"
  " \002(\0162\022.TST.CellValueType\022\"\n\ncell_style\030\003"
  " \001(\0132\016.TSP.Reference\022\"\n\ntext_style\030\004 \001(\013"
  "2\016.TSP.Reference\022\023\n\013numberValue\030\005 \001(\001\022\023\n"
  "\013stringValue\030\006 \001(\t\022\021\n\tboolValue\030\007 \001(\010\0220\n"
  "\016current_format\030\t \001(\0132\030.TSK.FormatStruct"
  "Archive\022$\n\014formulaError\030\n \001(\0132\016.TSP.Refe"
  "rence\022/\n\rnumber_format\030\013 \001(\0132\030.TSK.Forma"
  "tStructArchive\0221\n\017currency_format\030\014 \001(\0132"
  "\030.TSK.FormatStructArchive\0221\n\017duration_fo"
  "rmat\030\r \001(\0132\030.TSK.FormatStructArchive\022-\n\013"
  "date_format\030\016 \001(\0132\030.TSK.FormatStructArch"
  "ive\022/\n\rcustom_format\030\020 \001(\0132\030.TSK.FormatS"
  "tructArchive\022-\n\013base_format\030\021 \001(\0132\030.TSK."
  "FormatStructArchive\022\035\n\025explicit_format_f"
  "lags\030\023 \001(\r\022 \n\010richText\030\024 \001(\0132\016.TSP.Refer"
  "ence\022)\n\021conditional_style\030\025 \001(\0132\016.TSP.Re"
  "ference\022\'\n\017comment_storage\030\027 \001(\0132\016.TSP.R"
  "eference\022&\n\036conditional_style_applied_ru"
  "le\030\030 \001(\r\0228\n\022import_warning_set\030\031 \001(\0132\034.T"
  "ST.ImportWarningSetArchive\0226\n\024custom_for"
  "mat_object\030\032 \001(\0132\030.TSK.CustomFormatArchi"
  "ve\022+\n\013cell_border\030\033 \001(\0132\026.TST.CellBorder"
  "Archive\022\'\n\tcell_spec\030\034 \001(\0132\024.TST.CellSpe"
  "cArchive\022\030\n\020cell_format_kind\030\035 \001(\r\022-\n\013te"
  "xt_format\030\036 \001(\0132\030.TSK.FormatStructArchiv"
  "e\0220\n\016boolean_format\030\037 \001(\0132\030.TSK.FormatSt"
  "ructArchive\022\031\n\021decimal_value_low\030  \001(\004\022\032"
  "\n\022decimal_value_high\030! \001(\004\";\n\025MergeRegio"
  "nMapArchive\022\"\n\ncell_range\030\001 \003(\0132\016.TST.Ce"
  "llRange\"\250\003\n\016CellMapArchive\022\"\n\ncell_tiles"
  "\030\002 \003(\0132\016.TSP.Reference\022\021\n\tuid_based\030\003 \002("
  "\010\0226\n\021expanded_cell_ids\030\016 \003(\0132\033.TSCE.Cell"
  "CoordinateArchive\022.\n\rcell_uid_list\030\005 \001(\013"
  "2\027.TST.CellUIDListArchive\022.\n\020merge_uid_r"
  "anges\030\007 \003(\0132\024.TSP.UUIDRectArchive\0220\n\022unm"
  "erge_uid_ranges\030\t \003(\0132\024.TSP.UUIDRectArch"
  "ive\0221\n\rmerge_actions\030\r \003(\0132\032.TST.MergeOp"
  "erationArchive\022*\n\034may_modify_formulas_in"
  "_cells\030\n \001(\010:\004true\0226\n(may_modify_values_"
  "referenced_by_formulas\030\013 \001(\010:\004true\"\217\001\n\017C"
  "ellListArchive\0220\n\005cells\030\001 \003(\0132!.TST.Cell"
  "ListArchive.OptionalCell\022!\n\031trailing_emp"
  "ty_cell_count\030\002 \001(\r\032\'\n\014OptionalCell\022\027\n\004c"
  "ell\030\001 \001(\0132\t.TST.Cell\"\214\002\n\030ConcurrentCellM"
  "apArchive\022\"\n\ncell_lists\030\001 \003(\0132\016.TSP.Refe"
  "rence\022\021\n\tuid_based\030\002 \002(\010\0221\n\rmerge_action"
  "s\030\003 \003(\0132\032.TST.MergeOperationArchive\022*\n\034m"
  "ay_modify_formulas_in_cells\030\004 \001(\010:\004true\022"
  "6\n(may_modify_values_referenced_by_formu"
  "las\030\005 \001(\010:\004true\022\"\n\024affects_cell_borders\030"
  "\006 \001(\010:\004true\"\322\001\n\031ConcurrentCellListArchiv"
  "e\022:\n\005cells\030\001 \003(\0132+.TST.ConcurrentCellLis"
  "tArchive.OptionalCell\022,\n\016cell_uid_range\030"
  "\002 \001(\0132\024.TSP.UUIDRectArchive\022\"\n\ncell_rang"
  "e\030\003 \001(\0132\016.TST.CellRange\032\'\n\014OptionalCell\022"
  "\027\n\004cell\030\001 \001(\0132\t.TST.Cell\"\361\005\n\031CellFormatA"
  "ndValueArchive\022%\n\tvalueType\030\001 \002(\0162\022.TST."
  "CellValueType\022\023\n\013numberValue\030\002 \001(\001\022\023\n\013st"
  "ringValue\030\003 \001(\t\022\021\n\tboolValue\030\004 \001(\010\022\'\n\017ri"
  "chTextStorage\030\005 \001(\0132\016.TSP.Reference\022\035\n\025u"
  "se_all_spare_formats\030\006 \002(\010\022\026\n\016explicit_f"
  "lags\030\007 \002(\r\022\030\n\020cell_format_kind\030\010 \002(\r\022/\n\r"
  "number_format\030\n \001(\0132\030.TSK.FormatStructAr"
  "chive\0221\n\017currency_format\030\013 \001(\0132\030.TSK.For"
  "matStructArchive\022-\n\013date_format\030\014 \001(\0132\030."
  "TSK.FormatStructArchive\0221\n\017duration_form"
  "at\030\r \001(\0132\030.TSK.FormatStructArchive\022-\n\013te"
  "xt_format\030\016 \001(\0132\030.TSK.FormatStructArchiv"
  "e\0220\n\016boolean_format\030\017 \001(\0132\030.TSK.FormatSt"
  "ructArchive\022\027\n\017formatted_value\030\020 \001(\t\0221\n\031"
  "formatted_rich_text_value\030\021 \001(\0132\016.TSP.Re"
  "ference\022\037\n\027apply_spare_format_only\030\022 \002(\010"
  "\022\031\n\021spare_format_type\030\023 \002(\010\022\023\n\013decimal_l"
  "ow\030\024 \001(\004\022\024\n\014decimal_high\030\025 \001(\004\022\034\n\024suppre"
  "ss_apply_value\030\026 \001(\010\"\262\002\n\017CellSpecArchive"
  "\022\030\n\020interaction_type\030\001 \002(\r\022%\n\007formula\030\002 "
  "\001(\0132\024.TSCE.FormulaArchive\022\031\n\021range_contr"
  "ol_min\030\003 \001(\001\022\031\n\021range_control_max\030\004 \001(\001\022"
  "\031\n\021range_control_inc\030\005 \001(\001\0223\n\033chooser_co"
  "ntrol_popup_model\030\006 \001(\0132\016.TSP.Reference\022"
  "%\n\035chooser_control_start_w_first\030\007 \001(\010\0221"
  "\n%category_summary_should_display_label\030"
  "\010 \001(\010B\002\030\001\"G\n\034CommentStorageWrapperArchiv"
  "e\022\'\n\017comment_storage\030\001 \001(\0132\016.TSP.Referen"
  "ce\"\215\001\n\017CellDiffArchive\022;\n\023property_map_t"
  "o_set\030\001 \002(\0132\036.TSS.CommandPropertyMapArch"
  "ive\022=\n\025property_map_to_reset\030\002 \002(\0132\036.TSS"
  ".CommandPropertyMapArchive\"5\n\rCellDiffAr"
  "ray\022$\n\013large_array\030\001 \001(\0132\017.TSP.LargeArra"
  "y\"s\n\024CellDiffArraySegment\0223\n\023large_array"
  "_segment\030\001 \001(\0132\026.TSP.LargeArraySegment\022&"
  "\n\010elements\030\002 \003(\0132\024.TST.CellDiffArchive\"\264"
  "\001\n\022CellDiffMapArchive\022\021\n\tuid_based\030\001 \002(\010"
  "\0226\n\021expanded_cell_ids\030\002 \003(\0132\033.TSCE.CellC"
  "oordinateArchive\022*\n\tcell_uids\030\003 \002(\0132\027.TS"
  "T.CellUIDListArchive\022\'\n\017cell_diff_array\030"
  "\004 \001(\0132\016.TSP.Reference\"\336\004\n\036HierarchicalCe"
  "llDiffMapArchive\022\025\n\rnum_row_rules\030\001 \002(\005\022"
  "\030\n\020num_column_rules\030\002 \002(\005\022\"\n\017row_header_"
  "uids\030\003 \003(\0132\t.TSP.UUID\022%\n\022column_header_u"
  "ids\030\004 \003(\0132\t.TSP.UUID\022&\n\023aggregate_rule_u"
  "ids\030\005 \003(\0132\t.TSP.UUID\022\?\n\033active_flattenin"
  "g_dimension\030\006 \002(\0162\032.TST.TableDimensionAr"
  "chive\022!\n\016row_value_uids\030\007 \003(\0132\t.TSP.UUID"
  "\022\032\n\022row_level_preorder\030\010 \003(\r\022$\n\021column_v"
  "alue_uids\030\t \003(\0132\t.TSP.UUID\022\035\n\025column_lev"
  "el_preorder\030\n \003(\r\022G\n\021cell_diff_storage\030\013"
  " \003(\0132,.TST.HierarchicalCellDiffMapArchiv"
  "e.BoxedRow\022\021\n\trow_sizes\030\014 \003(\001\022\024\n\014column_"
  "sizes\030\r \003(\001\032a\n\010BoxedRow\022\'\n\020column_index_"
  "set\030\001 \002(\0132\r.TSP.IndexSet\022,\n\016cell_diff_li"
  "st\030\002 \003(\0132\024.TST.CellDiffArchive\"\212\002\n\025Doubl"
  "eStyleMapArchive\022\020\n\010capacity\030\001 \002(\r\022\r\n\005co"
  "unt\030\002 \002(\r\022M\n\016cell_map_entry\030\003 \003(\01325.TST."
  "DoubleStyleMapArchive.DoubleStyleMapEntr"
  "yArchive\032\200\001\n\032DoubleStyleMapEntryArchive\022"
  "\034\n\007cell_id\030\001 \002(\0132\013.TST.CellID\022!\n\told_sty"
  "le\030\002 \002(\0132\016.TSP.Reference\022!\n\tnew_style\030\003 "
  "\002(\0132\016.TSP.Reference\"\357\001\n\024StyleTableMapArc"
  "hive\022\020\n\010capacity\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022F\n"
  "\tmap_entry\030\003 \003(\01323.TST.StyleTableMapArch"
  "ive.StyleTableMapEntryArchive\032n\n\031StyleTa"
  "bleMapEntryArchive\022\013\n\003key\030\001 \002(\r\022!\n\told_s"
  "tyle\030\002 \002(\0132\016.TSP.Reference\022!\n\tnew_style\030"
  "\003 \002(\0132\016.TSP.Reference\"\347\003\n\020SelectionArchi"
  "ve\022&\n\ntableModel\030\001 \001(\0132\016.TSP.ReferenceB\002"
  "\030\001\0221\n\016selection_type\030\004 \002(\0162\031.TST.Selecti"
  "onTypeArchive\022 \n\013anchor_cell\030\005 \001(\0132\013.TST"
  ".CellID\022#\n\013cell_ranges\030\006 \003(\0132\016.TST.CellR"
  "ange\022#\n\013base_ranges\030\007 \003(\0132\016.TST.CellRang"
  "e\022 \n\013cursor_cell\030\010 \001(\0132\013.TST.CellID\022\"\n\nt"
  "able_info\030\t \001(\0132\016.TSP.Reference\0222\n\017cell_"
  "uid_region\030\n \001(\0132\031.TST.CellUIDRegionArch"
  "ive\0222\n\017base_uid_region\030\013 \001(\0132\031.TST.CellU"
  "IDRegionArchive\022.\n\017anchor_cell_uid\030\014 \001(\013"
  "2\025.TSP.UUIDCoordArchive\022.\n\017cursor_cell_u"
  "id\030\r \001(\0132\025.TSP.UUIDCoordArchive\"\312\002\n)Deat"
  "hhawkRdar39989167CellSelectionArchive\022\"\n"
  "\ntable_info\030\001 \001(\0132\016.TSP.Reference\0221\n\016sel"
  "ection_type\030\002 \001(\0162\031.TST.SelectionTypeArc"
  "hive\0222\n\017cell_uid_region\030\003 \001(\0132\031.TST.Cell"
  "UIDRegionArchive\0222\n\017base_uid_region\030\004 \001("
  "\0132\031.TST.CellUIDRegionArchive\022.\n\017anchor_c"
  "ell_uid\030\005 \001(\0132\025.TSP.UUIDCoordArchive\022.\n\017"
  "cursor_cell_uid\030\006 \001(\0132\025.TSP.UUIDCoordArc"
  "hive\"&\n\026StrokeSelectionArchive\022\014\n\004mask\030\001"
  " \001(\005\"\035\n\033ControlCellSelectionArchive\"\033\n\031S"
  "tockCellSelectionArchive\"\033\n\031TableNameSel"
  "ectionArchive\"p\n\030AutofillSelectionArchiv"
  "e\022)\n\021source_cell_range\030\001 \001(\0132\016.TST.CellR"
  "ange\022)\n\021target_cell_range\030\002 \001(\0132\016.TST.Ce"
  "llRange\"f\n\031FilterRulePrePivotArchive\0227\n\t"
  "predicate\030\001 \002(\0132$.TST.FormulaPredicatePr"
  "ePivotArchive\022\020\n\010disabled\030\002 \001(\010\"D\n\021Filte"
  "rRuleArchive\022/\n\tpredicate\030\001 \002(\0132\034.TST.Fo"
  "rmulaPredicateArchive\"\214\001\n\021TableStyleArch"
  "ive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n"
  "\016override_count\030\n \001(\r:\0010\022:\n\020table_proper"
  "ties\030\013 \001(\0132 .TST.TableStylePropertiesArc"
  "hive\"\211\001\n\020CellStyleArchive\022 \n\005super\030\001 \002(\013"
  "2\021.TSS.StyleArchive\022\031\n\016override_count\030\n "
  "\001(\r:\0010\0228\n\017cell_properties\030\013 \001(\0132\037.TST.Ce"
  "llStylePropertiesArchive\"\324\001\n\031FormulaPred"
  "ArgDataArchive\022\024\n\014double_value\030\001 \001(\001\022\023\n\013"
  "decimal_low\030\002 \001(\004\022\024\n\014decimal_high\030\003 \001(\004\022"
  "\024\n\014string_value\030\004 \001(\t\022\022\n\ndate_value\030\005 \001("
  "\001\022\035\n\025duration_timeinterval\030\006 \001(\001\022\026\n\016dura"
  "tion_units\030\007 \001(\005\022\025\n\rboolean_value\030\010 \001(\010\""
  "\217\004\n\025FormulaPredArgArchive\022\020\n\010arg_type\030\001 "
  "\002(\005\0221\n\targ_value\030\002 \001(\0132\036.TST.FormulaPred"
  "ArgDataArchive\0221\n\rbase_cell_ref\030\003 \001(\0132\032."
  "TSCE.CellReferenceArchive\0227\n\021relative_ce"
  "ll_ref\030\004 \001(\0132\034.TSCE.RelativeCellRefArchi"
  "ve\0224\n\014category_ref\030\005 \001(\0132\036.TSCE.Category"
  "ReferenceArchive\022A\n\016uid_tract_list\030\006 \001(\013"
  "2).TSCE.ASTNodeArrayArchive.ASTUidTractL"
  "ist\0224\n\017host_cell_coord\030\007 \001(\0132\033.TSCE.Cell"
  "CoordinateArchive\022\024\n\014preserve_row\030\010 \001(\010\022"
  "\027\n\017preserve_column\030\t \001(\010\0224\n\014list_entries"
  "\030\n \003(\0132\036.TST.FormulaPredArgDataArchive\0221"
  "\n\016view_tract_ref\030\013 \001(\0132\031.TSCE.ViewTractR"
  "efArchive\"\312\001\n\037FormulaPredicatePrePivotAr"
  "chive\022%\n\007formula\030\001 \002(\0132\024.TSCE.FormulaArc"
  "hive\022\026\n\016predicate_type\030\002 \002(\005\022\022\n\nqualifie"
  "r1\030\003 \002(\005\022\022\n\nqualifier2\030\004 \002(\005\022\024\n\014param_in"
  "dex1\030\005 \002(\005\022\024\n\014param_index2\030\006 \002(\005\022\024\n\014para"
  "m_index0\030\007 \002(\005\"\235\003\n\027FormulaPredicateArchi"
  "ve\022\026\n\016predicate_type\030\001 \002(\005\022\022\n\nqualifier1"
  "\030\002 \002(\005\022\022\n\nqualifier2\030\003 \002(\005\0220\n\014param_valu"
  "e0\030\004 \001(\0132\032.TST.FormulaPredArgArchive\0220\n\014"
  "param_value1\030\005 \001(\0132\032.TST.FormulaPredArgA"
  "rchive\0220\n\014param_value2\030\006 \001(\0132\032.TST.Formu"
  "laPredArgArchive\022%\n\007formula\030\007 \001(\0132\024.TSCE"
  ".FormulaArchive\022\035\n\025for_conditional_style"
  "\030\010 \001(\010\022!\n\016host_table_uid\030\t \001(\0132\t.TSP.UUI"
  "D\022\"\n\017host_column_uid\030\n \001(\0132\t.TSP.UUID\022\037\n"
  "\014host_row_uid\030\013 \001(\0132\t.TSP.UUID\"\334\004\n\032Condi"
  "tionalStyleSetArchive\022\021\n\truleCount\030\001 \002(\r"
  "\022T\n\016rules_prepivot\030\002 \003(\0132<.TST.Condition"
  "alStyleSetArchive.ConditionalStyleRulePr"
  "ePivot\022D\n\005rules\030\003 \001(\01325.TST.ConditionalS"
  "tyleSetArchive.ConditionalStyleRules\032\237\001\n"
  "\034ConditionalStyleRulePrePivot\0227\n\tpredica"
  "te\030\001 \002(\0132$.TST.FormulaPredicatePrePivotA"
  "rchive\022\"\n\ncell_style\030\002 \002(\0132\016.TSP.Referen"
  "ce\022\"\n\ntext_style\030\003 \002(\0132\016.TSP.Reference\032\217"
  "\001\n\024ConditionalStyleRule\022/\n\tpredicate\030\001 \001"
  "(\0132\034.TST.FormulaPredicateArchive\022\"\n\ncell"
  "_style\030\002 \002(\0132\016.TSP.Reference\022\"\n\ntext_sty"
  "le\030\003 \002(\0132\016.TSP.Reference\032[\n\025ConditionalS"
  "tyleRules\022B\n\004rule\030\001 \003(\01324.TST.Conditiona"
  "lStyleSetArchive.ConditionalStyleRule\"\221\003"
  "\n\020FilterSetArchive\022J\n\004type\030\001 \001(\0162#.TST.F"
  "ilterSetArchive.FilterSetType:\027FilterSet"
  "ArchiveTypeAll\022\030\n\nis_enabled\030\002 \001(\010:\004true"
  "\022=\n\025filter_rules_prepivot\030\003 \003(\0132\036.TST.Fi"
  "lterRulePrePivotArchive\022/\n needs_formula"
  "_rewrite_for_import\030\004 \001(\010:\005false\022\026\n\016filt"
  "er_offsets\030\005 \003(\r\022\026\n\016filter_enabled\030\006 \003(\010"
  "\022,\n\014filter_rules\030\007 \003(\0132\026.TST.FilterRuleA"
  "rchive\"I\n\rFilterSetType\022\033\n\027FilterSetArch"
  "iveTypeAll\020\000\022\033\n\027FilterSetArchiveTypeAny\020"
  "\001\"\312\001\n\022UniqueIndexArchive\022\035\n\ncolumn_uid\030\001"
  " \002(\0132\t.TSP.UUID\022G\n\016unique_entries\030\002 \003(\0132"
  "/.TST.UniqueIndexArchive.UniqueIndexEntr"
  "yArchive\032L\n\027UniqueIndexEntryArchive\022\024\n\014s"
  "tring_value\030\001 \002(\t\022\033\n\010row_uids\030\002 \003(\0132\t.TS"
  "P.UUID\"\307\006\n\030HiddenStateExtentArchive\022*\n\027h"
  "idden_state_extent_uid\030\001 \002(\0132\t.TSP.UUID\022"
  "J\n\022base_hidden_states\030\002 \003(\0132..TST.Hidden"
  "StateExtentArchive.RowOrColumnState\022S\n\027r"
  "ow_or_column_direction\030\003 \002(\01622.TST.Hidde"
  "nStateExtentArchive.RowOrColumnDirection"
  "\022/\n\017threshold_value\030\005 \003(\0132\026.TSCE.CellVal"
  "ueArchive\0224\n%needs_to_update_filter_set_"
  "for_import\030\006 \001(\010:\005false\022\'\n\024collapsed_gro"
  "up_uids\030\007 \003(\0132\t.TSP.UUID\022\"\n\nfilter_set\030\010"
  " \001(\0132\016.TSP.Reference\022;\n\034summary_pivot_hi"
  "dden_indexes\030\t \001(\0132\025.TSCE.IndexSetArchiv"
  "e\0227\n\030summary_filtered_indexes\030\n \001(\0132\025.TS"
  "CE.IndexSetArchive\022/\n\016unique_indexes\030\013 \003"
  "(\0132\027.TST.UniqueIndexArchive\022M\n\025summary_h"
  "idden_states\030\014 \003(\0132..TST.HiddenStateExte"
  "ntArchive.RowOrColumnState\032u\n\020RowOrColum"
  "nState\022$\n\021row_or_column_uid\030\001 \002(\0132\t.TSP."
  "UUID\022\023\n\013user_hidden\030\002 \001(\010\022\020\n\010filtered\030\003 "
  "\001(\010\022\024\n\014pivot_hidden\030\004 \001(\010\"=\n\024RowOrColumn"
  "Direction\022\023\n\017ColumnDirection\020\000\022\020\n\014RowDir"
  "ection\020\001\"\276\001\n\023HiddenStatesArchive\022$\n\021hidd"
  "en_states_uid\030\001 \002(\0132\t.TSP.UUID\022A\n\032column"
  "_hidden_state_extent\030\002 \002(\0132\035.TST.HiddenS"
  "tateExtentArchive\022>\n\027row_hidden_state_ex"
  "tent\030\003 \002(\0132\035.TST.HiddenStateExtentArchiv"
  "e\"i\n\030HiddenStatesOwnerArchive\022\034\n\towner_u"
  "id\030\001 \002(\0132\t.TSP.UUID\022/\n\rhidden_states\030\002 \003"
  "(\0132\030.TST.HiddenStatesArchive\"\220\001\n\032ExpandC"
  "ollapseStateArchive\022!\n\016uids_collapsed\030\001 "
  "\003(\0132\t.TSP.UUID\022 \n\ruids_expanded\030\002 \003(\0132\t."
  "TSP.UUID\022-\n\tdimension\030\003 \001(\0162\032.TST.TableD"
  "imensionArchive\"l\n\026TokenAttachmentArchiv"
  "e\022*\n\005super\030\001 \002(\0132\033.TSWP.UIGraphicalAttac"
  "hment\022&\n\016expressionNode\030\002 \001(\0132\016.TSP.Refe"
  "rence\"8\n\016FormulaArchive\022&\n\016expressionTre"
  "e\030\001 \001(\0132\016.TSP.Reference\"h\n\025ExpressionNod"
  "eArchive\022 \n\010children\030\001 \003(\0132\016.TSP.Referen"
  "ce\022\026\n\013first_index\030\002 \001(\004:\0010\022\025\n\nlast_index"
  "\030\003 \001(\004:\0010\"N\n\022BooleanNodeArchive\022)\n\005super"
  "\030\001 \002(\0132\032.TST.ExpressionNodeArchive\022\r\n\005va"
  "lue\030\002 \002(\010\"y\n\021NumberNodeArchive\022)\n\005super\030"
  "\001 \002(\0132\032.TST.ExpressionNodeArchive\022\016\n\006num"
  "ber\030\002 \001(\001\022\023\n\013decimal_low\030\003 \001(\004\022\024\n\014decima"
  "l_high\030\004 \001(\004\"M\n\021StringNodeArchive\022)\n\005sup"
  "er\030\001 \002(\0132\032.TST.ExpressionNodeArchive\022\r\n\005"
  "value\030\002 \002(\t\"f\n\025IdentifierNodeArchive\022)\n\005"
  "super\030\001 \002(\0132\032.TST.ExpressionNodeArchive\022"
  "\022\n\nidentifier\030\002 \001(\t\022\016\n\006symbol\030\003 \001(\r\"\\\n\020A"
  "rrayNodeArchive\022)\n\005super\030\001 \002(\0132\032.TST.Exp"
  "ressionNodeArchive\022\017\n\007columns\030\002 \001(\r\022\014\n\004r"
  "ows\030\003 \001(\r\"<\n\017ListNodeArchive\022)\n\005super\030\001 "
  "\002(\0132\032.TST.ExpressionNodeArchive\"V\n\023Opera"
  "torNodeArchive\022)\n\005super\030\001 \002(\0132\032.TST.Expr"
  "essionNodeArchive\022\024\n\014operatorChar\030\002 \002(\r\""
  "E\n\032PostfixOperatorNodeArchive\022\'\n\005super\030\001"
  " \002(\0132\030.TST.OperatorNodeArchive\"D\n\031Prefix"
  "OperatorNodeArchive\022\'\n\005super\030\001 \002(\0132\030.TST"
  ".OperatorNodeArchive\"t\n\023FunctionNodeArch"
  "ive\022)\n\005super\030\001 \002(\0132\032.TST.ExpressionNodeA"
  "rchive\022\025\n\rfunctionIndex\030\002 \002(\r\022\033\n\023invalid"
  "FunctionName\030\003 \001(\t\"C\n\026FunctionEndNodeArc"
  "hive\022)\n\005super\030\001 \002(\0132\032.TST.ExpressionNode"
  "Archive\"[\n\017DateNodeArchive\022)\n\005super\030\001 \002("
  "\0132\032.TST.ExpressionNodeArchive\022\r\n\005value\030\002"
  " \002(\t\022\016\n\006format\030\003 \001(\t\"\272\003\n\024ReferenceNodeAr"
  "chive\022)\n\005super\030\001 \002(\0132\032.TST.ExpressionNod"
  "eArchive\0223\n\016rangeReference\030\002 \001(\0132\033.TSCE."
  "RangeReferenceArchive\022\026\n\016preserve_flags\030"
  "\003 \002(\r\022\023\n\013hostTableID\030\004 \001(\t\0221\n\rhost_cell_"
  "ref\030\n \001(\0132\032.TSCE.CellReferenceArchive\022\034\n"
  "\ttable_uid\030\005 \001(\0132\t.TSP.UUID\022-\n\016range_top"
  "_left\030\006 \001(\0132\025.TSP.UUIDCoordArchive\0221\n\022ra"
  "nge_bottom_right\030\007 \001(\0132\025.TSP.UUIDCoordAr"
  "chive\0224\n\014category_ref\030\010 \001(\0132\036.TSCE.Categ"
  "oryReferenceArchive\022,\n\016uid_range_rect\030\t "
  "\001(\0132\024.TSP.UUIDRectArchive\"\210\001\n\023DurationNo"
  "deArchive\022)\n\005super\030\001 \002(\0132\032.TST.Expressio"
  "nNodeArchive\022\024\n\014timeinterval\030\002 \002(\001\022\020\n\010sm"
  "allest\030\003 \002(\r\022\017\n\007largest\030\004 \002(\r\022\r\n\005style\030\005"
  " \002(\r\"\207\001\n\036ArgumentPlaceholderNodeArchive\022"
  ")\n\005super\030\001 \002(\0132\032.TST.ExpressionNodeArchi"
  "ve\022\025\n\rfunctionIndex\030\002 \001(\r\022\025\n\rargumentInd"
  "ex\030\003 \001(\r\022\014\n\004mode\030\004 \001(\r\"G\n\032EmptyExpressio"
  "nNodeArchive\022)\n\005super\030\001 \002(\0132\032.TST.Expres"
  "sionNodeArchive\"\303\001\n\016LetNodeArchive\022)\n\005su"
  "per\030\001 \002(\0132\032.TST.ExpressionNodeArchive\022\034\n"
  "\024whitespace_after_let\030\002 \001(\t\022#\n\033whitespac"
  "e_after_identifier\030\003 \001(\t\022\037\n\027whitespace_a"
  "fter_equals\030\004 \001(\t\022\"\n\032whitespace_after_de"
  "limiter\030\005 \001(\t\":\n\rInNodeArchive\022)\n\005super\030"
  "\001 \002(\0132\032.TST.ExpressionNodeArchive\"d\n\023Var"
  "iableNodeArchive\022)\n\005super\030\001 \002(\0132\032.TST.Ex"
  "pressionNodeArchive\022\022\n\nidentifier\030\002 \002(\t\022"
  "\016\n\006symbol\030\003 \002(\r\"\357\001\n\021LayoutHintArchive\022\017\n"
  "\007isValid\030\001 \002(\010\022!\n\tcellRange\030\002 \001(\0132\016.TST."
  "CellRange\022\033\n\006hintID\030\003 \001(\0132\013.TST.CellID\022\036"
  "\n\013maximumSize\030\004 \002(\0132\t.TSP.Size\022\031\n\021partit"
  "ionPosition\030\005 \002(\r\022\022\n\nhorizontal\030\006 \002(\010\022 \n"
  "\reffectiveSize\030\007 \001(\0132\t.TSP.Size\022\030\n\020parti"
  "tioningPass\030\010 \001(\r\"\222\001\n CompletionTokenAtt"
  "achmentArchive\022*\n\005super\030\001 \002(\0132\033.TST.Toke"
  "nAttachmentArchive\022\026\n\016completionText\030\002 \001"
  "(\t\022\025\n\rcaretPosition\030\003 \001(\r\022\023\n\013prefixStart"
  "\030\004 \001(\r\"\255\001\n\036HiddenStateFormulaOwnerArchiv"
  "e\022$\n\010owner_id\030\001 \001(\0132\022.TSP.CFUUIDArchive\022"
  "/\n\017threshold_value\030\002 \003(\0132\026.TSCE.CellValu"
  "eArchive\0224\n%needs_to_update_filter_set_f"
  "or_import\030\003 \001(\010:\005false\"\300\001\n\023FormulaStoreA"
  "rchive\022\032\n\022next_formula_index\030\002 \002(\r\022;\n\010fo"
  "rmulas\030\003 \003(\0132).TST.FormulaStoreArchive.F"
  "ormulaStorePair\032P\n\020FormulaStorePair\022\025\n\rf"
  "ormula_index\030\001 \002(\r\022%\n\007formula\030\002 \002(\0132\024.TS"
  "CE.FormulaArchive\"\275\001\n\025MergeOperationArch"
  "ive\022+\n\nmerge_type\030\001 \002(\0162\027.TST.MergeActio"
  "nArchive\022*\n\014merge_ranges\030\002 \003(\0132\024.TSP.UUI"
  "DRectArchive\022,\n\016merge_formulas\030\003 \003(\0132\024.T"
  "SCE.FormulaArchive\022\035\n\025merge_formula_inde"
  "xes\030\004 \003(\r\"j\n\021MergeOwnerArchive\022$\n\010owner_"
  "id\030\001 \002(\0132\022.TSP.CFUUIDArchive\022/\n\rformula_"
  "store\030\002 \001(\0132\030.TST.FormulaStoreArchive\"p\n"
  "\027PencilAnnotationArchive\022\"\n\ntable_info\030\001"
  " \001(\0132\016.TSP.Reference\0221\n\031pencil_annotatio"
  "n_storage\030\002 \001(\0132\016.TSP.Reference\"\232\001\n\034Penc"
  "ilAnnotationOwnerArchive\022$\n\010owner_id\030\001 \002"
  "(\0132\022.TSP.CFUUIDArchive\022/\n\rformula_store\030"
  "\002 \001(\0132\030.TST.FormulaStoreArchive\022#\n\013annot"
  "ations\030\003 \003(\0132\016.TSP.Reference\"\203\004\n\022Accumul"
  "atorArchive\022\022\n\nbool_count\030\001 \001(\r\022\024\n\014numbe"
  "r_count\030\002 \001(\r\022\022\n\ndate_count\030\003 \001(\r\022\026\n\016dur"
  "ation_count\030\004 \001(\r\022\024\n\014string_count\030\005 \001(\r\022"
  ")\n\tmin_value\030\006 \002(\0132\026.TSCE.CellValueArchi"
  "ve\022)\n\tmax_value\030\007 \002(\0132\026.TSCE.CellValueAr"
  "chive\0222\n\022number_total_value\030\010 \002(\0132\026.TSCE"
  ".CellValueArchive\022/\n\017first_date_seen\030\t \001"
  "(\0132\026.TSCE.CellValueArchive\022!\n\031total_secs"
  "_since_ref_date\030\n \001(\001\022\023\n\013secs_to_add\030\013 \001"
  "(\001\022\027\n\017bool_true_count\030\014 \001(\r\022\023\n\013error_cou"
  "nt\030\r \001(\r\022\027\n\017is_circular_ref\030\016 \001(\010\022-\n\rpro"
  "duct_value\030\017 \001(\0132\026.TSCE.CellValueArchive"
  "\022\030\n\020no_content_count\030\020 \001(\r\"\242\001\n\022GroupColu"
  "mnArchive\022\035\n\ncolumn_uid\030\001 \002(\0132\t.TSP.UUID"
  "\022\025\n\rgrouping_type\030\002 \002(\r\022.\n\020grouping_func"
  "tor\030\003 \001(\0132\024.TSCE.FunctorArchive\022&\n\023group"
  "ing_column_uid\030\004 \001(\0132\t.TSP.UUID\"G\n\026Group"
  "ColumnListArchive\022-\n\014group_column\030\001 \003(\0132"
  "\027.TST.GroupColumnArchive\"\312\001\n\026ColumnAggre"
  "gateArchive\022\035\n\ncolumn_uid\030\001 \002(\0132\t.TSP.UU"
  "ID\022\r\n\005level\030\002 \002(\r\022\020\n\010agg_type\030\003 \002(\r\022\024\n\014s"
  "how_as_type\030\004 \001(\r\022\'\n\024column_aggregate_ui"
  "d\030\005 \001(\0132\t.TSP.UUID\0221\n\036running_total_grou"
  "p_column_uid\030\006 \001(\0132\t.TSP.UUID\"M\n\032ColumnA"
  "ggregateListArchive\022/\n\naggregates\030\001 \003(\0132"
  "\033.TST.ColumnAggregateArchive\"\343\017\n\016GroupBy"
  "Archive\022\037\n\014group_by_uid\030\001 \002(\0132\t.TSP.UUID"
  "\022-\n\014group_column\030\002 \003(\0132\027.TST.GroupColumn"
  "Archive\022=\n\017group_node_root\030\003 \001(\0132$.TST.G"
  "roupByArchive.GroupNodeArchive\0229\n\naggreg"
  "ator\030\004 \003(\0132%.TST.GroupByArchive.Aggregat"
  "orArchive\0224\n\017column_agg_type\030\005 \003(\0132\033.TST"
  ".ColumnAggregateArchive\022\022\n\nis_enabled\030\006 "
  "\002(\010\022E\n indirect_agg_type_change_formula\030"
  "\007 \001(\0132\033.TSCE.CellCoordinateArchive\022=\n\030gr"
  "ouping_columns_formula\030\010 \001(\0132\033.TSCE.Cell"
  "CoordinateArchive\022\?\n\032aggs_in_group_root_"
  "formula\030\t \001(\0132\033.TSCE.CellCoordinateArchi"
  "ve\022D\n\037grouping_column_headers_formula\030\n "
  "\001(\0132\033.TSCE.CellCoordinateArchive\022A\n\034colu"
  "mn_order_changed_formula\030\013 \001(\0132\033.TSCE.Ce"
  "llCoordinateArchive\022>\n\031row_order_changed"
  "_formula\030\014 \001(\0132\033.TSCE.CellCoordinateArch"
  "ive\022N\n)row_order_changed_ignoring_recalc"
  "_formula\030\r \001(\0132\033.TSCE.CellCoordinateArch"
  "ive\022\026\n\013owner_index\030\016 \001(\005:\0018\0222\n\016row_uid_l"
  "ookup\030\017 \001(\0132\032.TSCE.UidLookupListArchive\022"
  "B\n\035hidden_states_changed_formula\030\020 \001(\0132\033"
  ".TSCE.CellCoordinateArchive\022&\n\016aggregato"
  "r_ref\030\021 \003(\0132\016.TSP.Reference\022+\n\023group_nod"
  "e_root_ref\030\022 \001(\0132\016.TSP.Reference\032\237\001\n\016Agg"
  "NodeArchive\0222\n\rformula_coord\030\001 \002(\0132\033.TSC"
  "E.CellCoordinateArchive\022&\n\005accum\030\002 \001(\0132\027"
  ".TST.AccumulatorArchive\0221\n\005child\030\003 \003(\0132\""
  ".TST.GroupByArchive.AggNodeArchive\032h\n\021Ag"
  "gregatorArchive\022\035\n\ncolumn_uid\030\001 \002(\0132\t.TS"
  "P.UUID\0224\n\010agg_node\030\002 \001(\0132\".TST.GroupByAr"
  "chive.AggNodeArchive\032\353\005\n\020GroupNodeArchiv"
  "e\022\034\n\tgroup_uid\030\001 \002(\0132\t.TSP.UUID\0223\n\005child"
  "\030\003 \003(\0132$.TST.GroupByArchive.GroupNodeArc"
  "hive\022\032\n\007row_uid\030\004 \003(\0132\t.TSP.UUID\0227\n\022agg_"
  "formula_coords\030\005 \003(\0132\033.TSCE.CellCoordina"
  "teArchive\022Q\n\016format_manager\030\006 \001(\01329.TST."
  "GroupByArchive.GroupNodeArchive.FormatMa"
  "nagerArchive\0220\n\020group_cell_value\030\007 \001(\0132\026"
  ".TSCE.CellValueArchive\022*\n\013row_indexes\030\010 "
  "\001(\0132\025.TSCE.IndexSetArchive\022.\n\017row_lookup"
  "_uids\030\t \001(\0132\025.TSCE.IndexSetArchive\022!\n\tch"
  "ild_ref\030\n \003(\0132\016.TSP.Reference\032\252\002\n\024Format"
  "ManagerArchive\022*\n\ncell_value\030\001 \001(\0132\026.TSC"
  "E.CellValueArchive\022)\n\007formats\030\002 \003(\0132\030.TS"
  "K.FormatStructArchive\022Y\n\010row_sets\030\003 \003(\0132"
  "G.TST.GroupByArchive.GroupNodeArchive.Fo"
  "rmatManagerArchive.RowSetArchive\0222\n\023row_"
  "uid_lookup_sets\030\004 \003(\0132\025.TSCE.IndexSetArc"
  "hive\032,\n\rRowSetArchive\022\033\n\010row_uids\030\001 \003(\0132"
  "\t.TSP.UUID\"[\n\024CategoryOwnerArchive\022\034\n\tow"
  "ner_uid\030\001 \002(\0132\t.TSP.UUID\022%\n\010group_by\030\002 \003"
  "(\0132\023.TST.GroupByArchive\";\n\027CategoryOwner"
  "RefArchive\022 \n\010group_by\030\001 \003(\0132\016.TSP.Refer"
  "ence\"v\n$PivotGroupingColumnOptionsMapArc"
  "hive\022\027\n\004uids\030\001 \003(\0132\t.TSP.UUID\022\r\n\005flags\030\002"
  " \003(\r\022&\n\023aggregate_rule_uids\030\004 \003(\0132\t.TSP."
  "UUID\"\244\005\n\021PivotOwnerArchive\022\"\n\017pivot_owne"
  "r_uid\030\002 \001(\0132\t.TSP.UUID\022>\n\031grouping_colum"
  "ns_for_rows\030\003 \001(\0132\033.TST.GroupColumnListA"
  "rchive\022A\n\034grouping_columns_for_columns\030\004"
  " \001(\0132\033.TST.GroupColumnListArchive\022:\n\021agg"
  "regate_columns\030\005 \001(\0132\037.TST.ColumnAggrega"
  "teListArchive\022\034\n\024flattening_dimension\030\006 "
  "\001(\005\022\026\n\016is_empty_pivot\030\007 \001(\010\022#\n\020source_ta"
  "ble_uid\030\010 \001(\0132\t.TSP.UUID\022\031\n\021refresh_time"
  "stamp\030\t \001(\001\022,\n\024grpg_col_options_map\030\n \001("
  "\0132\016.TSP.Reference\022\035\n\025hide_grand_total_ro"
  "ws\030\013 \001(\010\022\031\n\021source_table_name\030\014 \001(\t\022 \n\030h"
  "ide_grand_total_columns\030\r \001(\010\022/\n\rformula"
  "_store\030\021 \001(\0132\030.TST.FormulaStoreArchive\022\036"
  "\n\013refresh_uid\030\022 \001(\0132\t.TSP.UUID\022-\n\032row_co"
  "lumn_rule_change_uid\030\023 \001(\0132\t.TSP.UUID\022,\n"
  "\031aggregate_rule_change_uid\030\024 \001(\0132\t.TSP.U"
  "UID\"q\n\026RichTextPayloadArchive\022\037\n\007storage"
  "\030\001 \002(\0132\016.TSP.Reference\022\031\n\005range\030\002 \001(\0132\n."
  "TSP.Range\022\033\n\006cellid\030\003 \002(\0132\013.TST.CellID\"Q"
  "\n#FormulaEqualsTokenAttachmentArchive\022*\n"
  "\005super\030\001 \002(\0132\033.TSWP.UIGraphicalAttachmen"
  "t\"\235\005\n\017CellFillStandIn\022\036\n\004fill\030\001 \002(\0132\020.TS"
  "D.FillArchive\022\025\n\rtype_is_mixed\030\002 \001(\010\022\037\n\027"
  "color_has_been_modified\030\003 \001(\010\022\026\n\016color_i"
  "s_mixed\030\004 \001(\010\022%\n\035first_color_has_been_mo"
  "dified\030\005 \001(\010\022\034\n\024first_color_is_mixed\030\006 \001"
  "(\010\022$\n\034last_color_has_been_modified\030\007 \001(\010"
  "\022\033\n\023last_color_is_mixed\030\010 \001(\010\022\'\n\037gradien"
  "t_type_has_been_modified\030\t \001(\010\022\036\n\026gradie"
  "nt_type_is_mixed\030\n \001(\010\022(\n gradient_angle"
  "_has_been_modified\030\013 \001(\010\022\037\n\027gradient_ang"
  "le_is_mixed\030\014 \001(\010\022$\n\034image_data_has_been"
  "_modified\030\r \001(\010\022\033\n\023image_data_is_mixed\030\016"
  " \001(\010\022$\n\034tint_color_has_been_modified\030\017 \001"
  "(\010\022\033\n\023tint_color_is_mixed\030\020 \001(\010\022\037\n\027scale"
  "_has_been_modified\030\021 \001(\010\022\026\n\016scale_is_mix"
  "ed\030\022 \001(\010\022#\n\033technique_has_been_modified\030"
  "\023 \001(\010\022\032\n\022technique_is_mixed\030\024 \001(\010\"^\n\027For"
  "mulaSelectionArchive\022%\n\005super\030\001 \002(\0132\026.TS"
  "WP.SelectionArchive\022\034\n\024activeTokenCharIn"
  "dex\030\002 \001(\r\"\247\002\n\021CellBorderArchive\022&\n\ntop_s"
  "troke\030\001 \001(\0132\022.TSD.StrokeArchive\022\030\n\020top_s"
  "troke_order\030\002 \001(\005\022(\n\014right_stroke\030\003 \001(\0132"
  "\022.TSD.StrokeArchive\022\032\n\022right_stroke_orde"
  "r\030\004 \001(\005\022)\n\rbottom_stroke\030\005 \001(\0132\022.TSD.Str"
  "okeArchive\022\033\n\023bottom_stroke_order\030\006 \001(\005\022"
  "\'\n\013left_stroke\030\007 \001(\0132\022.TSD.StrokeArchive"
  "\022\031\n\021left_stroke_order\030\010 \001(\005\"\320\001\n!DefaultC"
  "ellStylesContainerArchive\022+\n\023table_style"
  "_network\030\001 \002(\0132\016.TSP.Reference\022\033\n\010row_ui"
  "ds\030\002 \003(\0132\t.TSP.UUID\022\036\n\013column_uids\030\003 \003(\013"
  "2\t.TSP.UUID\022\021\n\trow_types\030\004 \003(\r\022\024\n\014column"
  "_types\030\005 \003(\r\022\030\n\020is_a_pivot_table\030\006 \001(\010\"\225"
  "\003\n\031MultiTableRemapperArchive\022\?\n\017mapping_"
  "purpose\030\001 \002(\0162&.TST.MultiTableRemapperAr"
  "chive.Purpose\022\037\n\027should_steal_references"
  "\030\002 \002(\010\022\035\n\025can_reuse_table_names\030\003 \002(\010\0225\n"
  "\020owner_uid_mapper\030\004 \003(\0132\033.TSCE.OwnerUIDM"
  "apperArchive\0226\n\031backing_tables_for_chart"
  "s\030\005 \002(\0132\023.TSP.UUIDMapArchive\022\034\n\024cross_do"
  "cument_paste\030\006 \002(\010\022\033\n\023nested_inner_mappe"
  "r\030\007 \002(\010\"M\n\007Purpose\022\013\n\007DEFAULT\020\000\022\014\n\010GROUP"
  "ING\020\001\022\'\n#PAGES_SECTION_DUPLICATION_NONCO"
  "LLAB\020\002\"\374\004\n\033ChangePropagationMapWrapper\022\034"
  "\n\024replacement_behavior\030\001 \002(\005\0220\n\030style_re"
  "place_prototypes\030\002 \003(\0132\016.TSP.Reference\0222"
  "\n\032style_replace_replacements\030\003 \003(\0132\016.TSP"
  ".Reference\022+\n\023style_modify_styles\030\004 \003(\0132"
  "\016.TSP.Reference\0222\n\032style_modify_old_prop"
  "_maps\030\005 \003(\0132\016.TSP.Reference\0222\n\032style_mod"
  "ify_new_prop_maps\030\006 \003(\0132\016.TSP.Reference\022"
  "/\n\027style_delete_prototypes\030\007 \003(\0132\016.TSP.R"
  "eference\0221\n\031style_delete_replacements\030\010 "
  "\003(\0132\016.TSP.Reference\0226\n\036table_preset_repl"
  "ace_prototype\030\t \001(\0132\016.TSP.Reference\0228\n t"
  "able_preset_replace_replacement\030\n \001(\0132\016."
  "TSP.Reference\0225\n\035table_preset_delete_pro"
  "totype\030\013 \001(\0132\016.TSP.Reference\0227\n\037table_pr"
  "eset_delete_replacement\030\014 \001(\0132\016.TSP.Refe"
  "rence\"\352\001\n\030SummaryCellVendorArchive\022\"\n\nta"
  "ble_info\030\001 \002(\0132\016.TSP.Reference\022\?\n\007entrie"
  "s\030\002 \003(\0132..TST.SummaryCellVendorArchive.S"
  "ummaryCellEntry\032i\n\020SummaryCellEntry\022\036\n\013w"
  "ildcardUID\030\001 \002(\0132\t.TSP.UUID\022\034\n\tcolumnUID"
  "\030\002 \002(\0132\t.TSP.UUID\022\027\n\004cell\030\003 \002(\0132\t.TST.Ce"
  "ll\"[\n\024CategoryOrderArchive\022\"\n\ntable_info"
  "\030\001 \002(\0132\016.TSP.Reference\022\037\n\007uid_map\030\002 \002(\0132"
  "\016.TSP.Reference\"4\n\021PivotOrderArchive\022\037\n\007"
  "uid_map\030\001 \001(\0132\016.TSP.Reference\"\266\002\n\030Header"
  "NameMgrTileArchive\022\026\n\016first_fragment\030\001 \002"
  "(\t\022\025\n\rlast_fragment\030\002 \002(\t\022L\n\021name_frag_e"
  "ntries\030\003 \003(\01321.TST.HeaderNameMgrTileArch"
  "ive.NameFragmentArchive\032\234\001\n\023NameFragment"
  "Archive\022\025\n\rname_fragment\030\001 \002(\t\0223\n\016name_p"
  "recedent\030\002 \002(\0132\033.TSCE.CellCoordinateArch"
  "ive\0229\n\025uses_of_name_fragment\030\003 \001(\0132\032.TSC"
  "E.UidCellRefSetArchive\"\342\003\n\024HeaderNameMgr"
  "Archive\022\034\n\towner_uid\030\001 \002(\0132\t.TSP.UUID\022 \n"
  "\rnrm_owner_uid\030\002 \001(\0132\t.TSP.UUID\022=\n\nper_t"
  "ables\030\003 \003(\0132).TST.HeaderNameMgrArchive.P"
  "erTableArchive\022\'\n\017name_frag_tiles\030\004 \003(\0132"
  "\016.TSP.Reference\032\241\002\n\017PerTableArchive\022\034\n\tt"
  "able_uid\030\001 \002(\0132\t.TSP.UUID\0228\n\023per_table_p"
  "recedent\030\002 \002(\0132\033.TSCE.CellCoordinateArch"
  "ive\022\022\n\nis_deleted\030\003 \001(\010\022\"\n\017header_row_ui"
  "ds\030\005 \003(\0132\t.TSP.UUID\022%\n\022header_column_uid"
  "s\030\006 \003(\0132\t.TSP.UUID\022)\n\026update_header_row_"
  "uids\030\007 \003(\0132\t.TSP.UUID\022,\n\031update_header_c"
  "olumn_uids\030\010 \003(\0132\t.TSP.UUID\"K\n\034WidthHeig"
  "htCacheFittingEntry\022\025\n\rfitting_index\030\001 \001"
  "(\r\022\024\n\014fitting_size\030\002 \001(\002\"j\n\020WidthHeightC"
  "ache\022\?\n\024rows_fitting_entries\030\001 \003(\0132!.TST"
  ".WidthHeightCacheFittingEntry\022\025\n\rcolumns"
  "_count\030\003 \001(\r\"H\n\023LayoutEngineArchive\0221\n\022w"
  "idth_height_cache\030\001 \001(\0132\025.TST.WidthHeigh"
  "tCache\"\254\002\n*CollaboratorTableCursorSubsel"
  "ectionArchive\022.\n\rcell_uid_list\030\001 \001(\0132\027.T"
  "ST.CellUIDListArchive\0221\n\016selection_type\030"
  "\003 \001(\0162\031.TST.SelectionTypeArchive\022&\n\023row_"
  "column_uid_list\030\004 \003(\0132\t.TSP.UUID2s\n\031tabl"
  "e_cursor_subselection\022\036.TSK.Collaborator"
  "CursorArchive\030\310\001 \001(\0132/.TST.CollaboratorT"
  "ableCursorSubselectionArchive*\327\001\n\010CellTy"
  "pe\022\023\n\017genericCellType\020\000\022\020\n\014spanCellType\020"
  "\001\022\022\n\016numberCellType\020\002\022\020\n\014textCellType\020\003\022"
  "\023\n\017formulaCellType\020\004\022\020\n\014dateCellType\020\005\022\020"
  "\n\014boolCellType\020\006\022\024\n\020durationCellType\020\007\022\030"
  "\n\024formulaErrorCellType\020\010\022\025\n\021automaticCel"
  "lType\020\t*\206\002\n\rCellValueType\022\026\n\022emptyCellVa"
  "lueType\020\000\022\027\n\023numberCellValueType\020\001\022\027\n\023st"
  "ringCellValueType\020\002\022\031\n\025providedCellValue"
  "Type\020\003\022\025\n\021dateCellValueType\020\004\022\025\n\021boolCel"
  "lValueType\020\005\022\031\n\025durationCellValueType\020\006\022"
  "\026\n\022errorCellValueType\020\007\022\024\n\020richTextCellT"
  "ype\020\010\022\031\n\025currencyCellValueType\020\t*]\n\025Tabl"
  "eDimensionArchive\022\035\n\020dimensionNeither\020\377\377"
  "\377\377\377\377\377\377\377\001\022\020\n\014dimensionRow\020\000\022\023\n\017dimensionC"
  "olumn\020\001*\204\002\n\024SelectionTypeArchive\022\037\n\033depr"
  "ecatedCellSelectionType\020\000\022\024\n\020rowSelectio"
  "nType\020\001\022\027\n\023columnSelectionType\020\002\022&\n\"depr"
  "ecatedCellEditingSelectionType\020\003\022$\n depr"
  "ecatedTableNameSelectionType\020\004\022 \n\034deprec"
  "atedTableSelectionType\020\005\022\027\n\023regionSelect"
  "ionType\020\006\022\023\n\017noSelectionType\020\007*y\n\024FillDi"
  "rectionArchive\022\027\n\023kTSTFillDownArchive\020\001\022"
  "\025\n\021kTSTFillUpArchive\020\002\022\030\n\024kTSTFillRightA"
  "rchive\020\003\022\027\n\023kTSTFillLeftArchive\020\004*n\n\022Mer"
  "geActionArchive\022\025\n\021mergeActionInsert\020\001\022\025"
  "\n\021mergeActionRemove\020\002\022\025\n\021mergeActionShri"
  "nk\020\003\022\023\n\017mergeActionGrow\020\004*G\n\025HideShowAct"
  "ionArchive\022\026\n\022hideShowActionHide\020\000\022\026\n\022hi"
  "deShowActionShow\020\001:[\n\022import_warning_set"
  "\022 .TSS.CommandPropertyEntryArchive\030\364\003 \001("
  "\0132\034.TST.ImportWarningSetArchive:[\n\020forma"
  "t_and_value\022 .TSS.CommandPropertyEntryAr"
  "chive\030\365\003 \001(\0132\036.TST.CellFormatAndValueArc"
  "hive:N\n\013cell_border\022 .TSS.CommandPropert"
  "yEntryArchive\030\367\003 \001(\0132\026.TST.CellBorderArc"
  "hive:]\n\017comment_storage\022 .TSS.CommandPro"
  "pertyEntryArchive\030\370\003 \001(\0132!.TST.CommentSt"
  "orageWrapperArchive:J\n\tcell_spec\022 .TSS.C"
  "ommandPropertyEntryArchive\030\371\003 \001(\0132\024.TST."
  "CellSpecArchive"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSTArchives_2eproto_deps[7] = {
  &::descriptor_table_TSCEArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTStylePropertyArchiving_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSTArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSTArchives_2eproto = {
    false, false, 39895, descriptor_table_protodef_TSTArchives_2eproto,
    "TSTArchives.proto",
    &descriptor_table_TSTArchives_2eproto_once, descriptor_table_TSTArchives_2eproto_deps, 7, 163,
    schemas, file_default_instances, TableStruct_TSTArchives_2eproto::offsets,
    file_level_metadata_TSTArchives_2eproto, file_level_enum_descriptors_TSTArchives_2eproto,
    file_level_service_descriptors_TSTArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSTArchives_2eproto_getter() {
  return &descriptor_table_TSTArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSTArchives_2eproto(&descriptor_table_TSTArchives_2eproto);
namespace TST {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PopUpMenuModel_CellValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[0];
}
bool PopUpMenuModel_CellValueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::NIL_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::BOOLEAN_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::DATE_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::NUMBER_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::STRING_TYPE;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::CellValueType_MIN;
constexpr PopUpMenuModel_CellValueType PopUpMenuModel::CellValueType_MAX;
constexpr int PopUpMenuModel::CellValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImportWarningSetArchive_FormulaWarningType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[1];
}
bool ImportWarningSetArchive_FormulaWarningType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::THREE_D_REFERENCE;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::ARRAYED_FORMULA;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::DIFFERENT_BEHAVIOR_FOR_FUNCTION;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::ERROR_TOKEN;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::EXTERNAL_REFERENCE;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::NATURAL_LANGUAGE_FORMULA;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::REFERENCE_OUT_OF_BOUNDS;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::SHARED_FORMULA_BASE_NOT_FOUND;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::UNKNOWN_NAME;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::UNSUPPORTED_FORMULA;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::UNSUPPORTED_FUNCTION;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::UNSUPPORTED_NAME;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::TRANSPOSED_NO_ISSUES;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::TRANSPOSED_WITH_ISSUES;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::TRANSPOSED_WITH_ISSUES_UNCHANGED;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::FormulaWarningType_MIN;
constexpr ImportWarningSetArchive_FormulaWarningType ImportWarningSetArchive::FormulaWarningType_MAX;
constexpr int ImportWarningSetArchive::FormulaWarningType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableDataList_ListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[2];
}
bool TableDataList_ListType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TableDataList_ListType TableDataList::STRING;
constexpr TableDataList_ListType TableDataList::FORMAT;
constexpr TableDataList_ListType TableDataList::FORMULA;
constexpr TableDataList_ListType TableDataList::STYLE;
constexpr TableDataList_ListType TableDataList::FORMULA_ERROR;
constexpr TableDataList_ListType TableDataList::CUSTOM_FORMAT;
constexpr TableDataList_ListType TableDataList::MULTIPLE_CHOICE_LIST_FORMAT;
constexpr TableDataList_ListType TableDataList::RICH_TEXT_PAYLOAD;
constexpr TableDataList_ListType TableDataList::CONDITIONAL_STYLE;
constexpr TableDataList_ListType TableDataList::COMMENT_STORAGE;
constexpr TableDataList_ListType TableDataList::IMPORT_WARNING;
constexpr TableDataList_ListType TableDataList::CONTROL_CELL_SPEC;
constexpr TableDataList_ListType TableDataList::ListType_MIN;
constexpr TableDataList_ListType TableDataList::ListType_MAX;
constexpr int TableDataList::ListType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[3];
}
bool TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::ascending;
constexpr TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::descending;
constexpr TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::Direction_MIN;
constexpr TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::Direction_MAX;
constexpr int TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderArchive_SortRuleArchive_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[4];
}
bool TableSortOrderArchive_SortRuleArchive_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::ascending;
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::descending;
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::Direction_MIN;
constexpr TableSortOrderArchive_SortRuleArchive_Direction TableSortOrderArchive_SortRuleArchive::Direction_MAX;
constexpr int TableSortOrderArchive_SortRuleArchive::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderArchive_SortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[5];
}
bool TableSortOrderArchive_SortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TableSortOrderArchive_SortType TableSortOrderArchive::entire_table;
constexpr TableSortOrderArchive_SortType TableSortOrderArchive::row_range;
constexpr TableSortOrderArchive_SortType TableSortOrderArchive::SortType_MIN;
constexpr TableSortOrderArchive_SortType TableSortOrderArchive::SortType_MAX;
constexpr int TableSortOrderArchive::SortType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderUIDArchive_SortRuleArchive_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[6];
}
bool TableSortOrderUIDArchive_SortRuleArchive_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::ascending;
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::descending;
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::Direction_MIN;
constexpr TableSortOrderUIDArchive_SortRuleArchive_Direction TableSortOrderUIDArchive_SortRuleArchive::Direction_MAX;
constexpr int TableSortOrderUIDArchive_SortRuleArchive::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableSortOrderUIDArchive_SortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[7];
}
bool TableSortOrderUIDArchive_SortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::entire_table;
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::row_range;
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::SortType_MIN;
constexpr TableSortOrderUIDArchive_SortType TableSortOrderUIDArchive::SortType_MAX;
constexpr int TableSortOrderUIDArchive::SortType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterSetArchive_FilterSetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[8];
}
bool FilterSetArchive_FilterSetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FilterSetArchive_FilterSetType FilterSetArchive::FilterSetArchiveTypeAll;
constexpr FilterSetArchive_FilterSetType FilterSetArchive::FilterSetArchiveTypeAny;
constexpr FilterSetArchive_FilterSetType FilterSetArchive::FilterSetType_MIN;
constexpr FilterSetArchive_FilterSetType FilterSetArchive::FilterSetType_MAX;
constexpr int FilterSetArchive::FilterSetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HiddenStateExtentArchive_RowOrColumnDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[9];
}
bool HiddenStateExtentArchive_RowOrColumnDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::ColumnDirection;
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::RowDirection;
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::RowOrColumnDirection_MIN;
constexpr HiddenStateExtentArchive_RowOrColumnDirection HiddenStateExtentArchive::RowOrColumnDirection_MAX;
constexpr int HiddenStateExtentArchive::RowOrColumnDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiTableRemapperArchive_Purpose_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[10];
}
bool MultiTableRemapperArchive_Purpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::DEFAULT;
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::GROUPING;
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::PAGES_SECTION_DUPLICATION_NONCOLLAB;
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::Purpose_MIN;
constexpr MultiTableRemapperArchive_Purpose MultiTableRemapperArchive::Purpose_MAX;
constexpr int MultiTableRemapperArchive::Purpose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[11];
}
bool CellType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[12];
}
bool CellValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableDimensionArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[13];
}
bool TableDimensionArchive_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelectionTypeArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[14];
}
bool SelectionTypeArchive_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillDirectionArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[15];
}
bool FillDirectionArchive_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MergeActionArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[16];
}
bool MergeActionArchive_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HideShowActionArchive_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTArchives_2eproto);
  return file_level_enum_descriptors_TSTArchives_2eproto[17];
}
bool HideShowActionArchive_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CellID::_Internal {
 public:
  using HasBits = decltype(std::declval<CellID>()._impl_._has_bits_);
  static void set_has_packeddata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellCoordinateArchive& expanded_coord(const CellID* msg);
  static void set_has_expanded_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
CellID::_Internal::expanded_coord(const CellID* msg) {
  return *msg->_impl_.expanded_coord_;
}
void CellID::clear_expanded_coord() {
  if (_impl_.expanded_coord_ != nullptr) _impl_.expanded_coord_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CellID::CellID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellID)
}
CellID::CellID(const CellID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expanded_coord_){nullptr}
    , decltype(_impl_.packeddata_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expanded_coord()) {
    _this->_impl_.expanded_coord_ = new ::TSCE::CellCoordinateArchive(*from._impl_.expanded_coord_);
  }
  _this->_impl_.packeddata_ = from._impl_.packeddata_;
  // @@protoc_insertion_point(copy_constructor:TST.CellID)
}

inline void CellID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expanded_coord_){nullptr}
    , decltype(_impl_.packeddata_){0u}
  };
}

CellID::~CellID() {
  // @@protoc_insertion_point(destructor:TST.CellID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expanded_coord_;
}

void CellID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellID::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.expanded_coord_ != nullptr);
    _impl_.expanded_coord_->Clear();
  }
  _impl_.packeddata_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required fixed32 packedData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_packeddata(&has_bits);
          _impl_.packeddata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive expanded_coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expanded_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required fixed32 packedData = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_packeddata(), target);
  }

  // optional .TSCE.CellCoordinateArchive expanded_coord = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::expanded_coord(this),
        _Internal::expanded_coord(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellID)
  return target;
}

size_t CellID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellID)
  size_t total_size = 0;

  // required fixed32 packedData = 1;
  if (_internal_has_packeddata()) {
    total_size += 1 + 4;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.CellCoordinateArchive expanded_coord = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expanded_coord_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellID::GetClassData() const { return &_class_data_; }


void CellID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellID*>(&to_msg);
  auto& from = static_cast<const CellID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_expanded_coord()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_expanded_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.packeddata_ = from._impl_.packeddata_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellID::CopyFrom(const CellID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellID::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CellID::InternalSwap(CellID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellID, _impl_.packeddata_)
      + sizeof(CellID::_impl_.packeddata_)
      - PROTOBUF_FIELD_OFFSET(CellID, _impl_.expanded_coord_)>(
          reinterpret_cast<char*>(&_impl_.expanded_coord_),
          reinterpret_cast<char*>(&other->_impl_.expanded_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[0]);
}

// ===================================================================

class CellUIDLookupListArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellUIDLookupListArchive>()._impl_._has_bits_);
  static const ::TSCE::UidLookupListArchive& column_uids(const CellUIDLookupListArchive* msg);
  static void set_has_column_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::UidLookupListArchive& row_uids(const CellUIDLookupListArchive* msg);
  static void set_has_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::UidLookupListArchive&
CellUIDLookupListArchive::_Internal::column_uids(const CellUIDLookupListArchive* msg) {
  return *msg->_impl_.column_uids_;
}
const ::TSCE::UidLookupListArchive&
CellUIDLookupListArchive::_Internal::row_uids(const CellUIDLookupListArchive* msg) {
  return *msg->_impl_.row_uids_;
}
void CellUIDLookupListArchive::clear_column_uids() {
  if (_impl_.column_uids_ != nullptr) _impl_.column_uids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CellUIDLookupListArchive::clear_row_uids() {
  if (_impl_.row_uids_ != nullptr) _impl_.row_uids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CellUIDLookupListArchive::CellUIDLookupListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellUIDLookupListArchive)
}
CellUIDLookupListArchive::CellUIDLookupListArchive(const CellUIDLookupListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellUIDLookupListArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_indexes_){from._impl_.column_indexes_}
    , decltype(_impl_.row_indexes_){from._impl_.row_indexes_}
    , decltype(_impl_.column_uids_){nullptr}
    , decltype(_impl_.row_uids_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uids()) {
    _this->_impl_.column_uids_ = new ::TSCE::UidLookupListArchive(*from._impl_.column_uids_);
  }
  if (from._internal_has_row_uids()) {
    _this->_impl_.row_uids_ = new ::TSCE::UidLookupListArchive(*from._impl_.row_uids_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellUIDLookupListArchive)
}

inline void CellUIDLookupListArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_indexes_){arena}
    , decltype(_impl_.row_indexes_){arena}
    , decltype(_impl_.column_uids_){nullptr}
    , decltype(_impl_.row_uids_){nullptr}
  };
}

CellUIDLookupListArchive::~CellUIDLookupListArchive() {
  // @@protoc_insertion_point(destructor:TST.CellUIDLookupListArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellUIDLookupListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_indexes_.~RepeatedField();
  _impl_.row_indexes_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.column_uids_;
  if (this != internal_default_instance()) delete _impl_.row_uids_;
}

void CellUIDLookupListArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellUIDLookupListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellUIDLookupListArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_indexes_.Clear();
  _impl_.row_indexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.column_uids_ != nullptr);
      _impl_.column_uids_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.row_uids_ != nullptr);
      _impl_.row_uids_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellUIDLookupListArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.UidLookupListArchive column_uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.UidLookupListArchive row_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 column_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_column_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 row_indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_row_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_row_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellUIDLookupListArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellUIDLookupListArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.UidLookupListArchive column_uids = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column_uids(this),
        _Internal::column_uids(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.UidLookupListArchive row_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::row_uids(this),
        _Internal::row_uids(this).GetCachedSize(), target, stream);
  }

  // repeated int32 column_indexes = 3;
  for (int i = 0, n = this->_internal_column_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_column_indexes(i), target);
  }

  // repeated int32 row_indexes = 4;
  for (int i = 0, n = this->_internal_row_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_row_indexes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellUIDLookupListArchive)
  return target;
}

size_t CellUIDLookupListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellUIDLookupListArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 column_indexes = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.column_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_column_indexes_size());
    total_size += data_size;
  }

  // repeated int32 row_indexes = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.row_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_row_indexes_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.UidLookupListArchive column_uids = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.column_uids_);
    }

    // optional .TSCE.UidLookupListArchive row_uids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.row_uids_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellUIDLookupListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellUIDLookupListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellUIDLookupListArchive::GetClassData() const { return &_class_data_; }


void CellUIDLookupListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellUIDLookupListArchive*>(&to_msg);
  auto& from = static_cast<const CellUIDLookupListArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellUIDLookupListArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_indexes_.MergeFrom(from._impl_.column_indexes_);
  _this->_impl_.row_indexes_.MergeFrom(from._impl_.row_indexes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_uids()->::TSCE::UidLookupListArchive::MergeFrom(
          from._internal_column_uids());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_row_uids()->::TSCE::UidLookupListArchive::MergeFrom(
          from._internal_row_uids());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellUIDLookupListArchive::CopyFrom(const CellUIDLookupListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellUIDLookupListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellUIDLookupListArchive::IsInitialized() const {
  if (_internal_has_column_uids()) {
    if (!_impl_.column_uids_->IsInitialized()) return false;
  }
  if (_internal_has_row_uids()) {
    if (!_impl_.row_uids_->IsInitialized()) return false;
  }
  return true;
}

void CellUIDLookupListArchive::InternalSwap(CellUIDLookupListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.column_indexes_.InternalSwap(&other->_impl_.column_indexes_);
  _impl_.row_indexes_.InternalSwap(&other->_impl_.row_indexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellUIDLookupListArchive, _impl_.row_uids_)
      + sizeof(CellUIDLookupListArchive::_impl_.row_uids_)
      - PROTOBUF_FIELD_OFFSET(CellUIDLookupListArchive, _impl_.column_uids_)>(
          reinterpret_cast<char*>(&_impl_.column_uids_),
          reinterpret_cast<char*>(&other->_impl_.column_uids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellUIDLookupListArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[1]);
}

// ===================================================================

class CellUIDListArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellUIDListArchive>()._impl_._has_bits_);
  static const ::TST::CellUIDLookupListArchive& uncompressed_lookup_list(const CellUIDListArchive* msg);
  static void set_has_uncompressed_lookup_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TST::CellUIDLookupListArchive&
CellUIDListArchive::_Internal::uncompressed_lookup_list(const CellUIDListArchive* msg) {
  return *msg->_impl_.uncompressed_lookup_list_;
}
void CellUIDListArchive::clear_row_uids() {
  _impl_.row_uids_.Clear();
}
void CellUIDListArchive::clear_column_uids() {
  _impl_.column_uids_.Clear();
}
CellUIDListArchive::CellUIDListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellUIDListArchive)
}
CellUIDListArchive::CellUIDListArchive(const CellUIDListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellUIDListArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_uids_){from._impl_.row_uids_}
    , decltype(_impl_.column_uids_){from._impl_.column_uids_}
    , decltype(_impl_.compressed_row_indexes_){from._impl_.compressed_row_indexes_}
    , decltype(_impl_.compressed_column_indexes_){from._impl_.compressed_column_indexes_}
    , decltype(_impl_.uncompressed_lookup_list_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uncompressed_lookup_list()) {
    _this->_impl_.uncompressed_lookup_list_ = new ::TST::CellUIDLookupListArchive(*from._impl_.uncompressed_lookup_list_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellUIDListArchive)
}

inline void CellUIDListArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_uids_){arena}
    , decltype(_impl_.column_uids_){arena}
    , decltype(_impl_.compressed_row_indexes_){arena}
    , decltype(_impl_.compressed_column_indexes_){arena}
    , decltype(_impl_.uncompressed_lookup_list_){nullptr}
  };
}

CellUIDListArchive::~CellUIDListArchive() {
  // @@protoc_insertion_point(destructor:TST.CellUIDListArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellUIDListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_uids_.~RepeatedPtrField();
  _impl_.column_uids_.~RepeatedPtrField();
  _impl_.compressed_row_indexes_.~RepeatedField();
  _impl_.compressed_column_indexes_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.uncompressed_lookup_list_;
}

void CellUIDListArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellUIDListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellUIDListArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_uids_.Clear();
  _impl_.column_uids_.Clear();
  _impl_.compressed_row_indexes_.Clear();
  _impl_.compressed_column_indexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uncompressed_lookup_list_ != nullptr);
    _impl_.uncompressed_lookup_list_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellUIDListArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID row_uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID column_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 compressed_row_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_compressed_row_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_compressed_row_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 compressed_column_indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_compressed_column_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_compressed_column_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDLookupListArchive uncompressed_lookup_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uncompressed_lookup_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellUIDListArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellUIDListArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID column_uids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 compressed_row_indexes = 3;
  for (int i = 0, n = this->_internal_compressed_row_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_compressed_row_indexes(i), target);
  }

  // repeated int32 compressed_column_indexes = 4;
  for (int i = 0, n = this->_internal_compressed_column_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_compressed_column_indexes(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.CellUIDLookupListArchive uncompressed_lookup_list = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::uncompressed_lookup_list(this),
        _Internal::uncompressed_lookup_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellUIDListArchive)
  return target;
}

size_t CellUIDListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellUIDListArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 1;
  total_size += 1UL * this->_internal_row_uids_size();
  for (const auto& msg : this->_impl_.row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID column_uids = 2;
  total_size += 1UL * this->_internal_column_uids_size();
  for (const auto& msg : this->_impl_.column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 compressed_row_indexes = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.compressed_row_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_compressed_row_indexes_size());
    total_size += data_size;
  }

  // repeated int32 compressed_column_indexes = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.compressed_column_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_compressed_column_indexes_size());
    total_size += data_size;
  }

  // optional .TST.CellUIDLookupListArchive uncompressed_lookup_list = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uncompressed_lookup_list_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellUIDListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellUIDListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellUIDListArchive::GetClassData() const { return &_class_data_; }


void CellUIDListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellUIDListArchive*>(&to_msg);
  auto& from = static_cast<const CellUIDListArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellUIDListArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_uids_.MergeFrom(from._impl_.row_uids_);
  _this->_impl_.column_uids_.MergeFrom(from._impl_.column_uids_);
  _this->_impl_.compressed_row_indexes_.MergeFrom(from._impl_.compressed_row_indexes_);
  _this->_impl_.compressed_column_indexes_.MergeFrom(from._impl_.compressed_column_indexes_);
  if (from._internal_has_uncompressed_lookup_list()) {
    _this->_internal_mutable_uncompressed_lookup_list()->::TST::CellUIDLookupListArchive::MergeFrom(
        from._internal_uncompressed_lookup_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellUIDListArchive::CopyFrom(const CellUIDListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellUIDListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellUIDListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_uids_))
    return false;
  if (_internal_has_uncompressed_lookup_list()) {
    if (!_impl_.uncompressed_lookup_list_->IsInitialized()) return false;
  }
  return true;
}

void CellUIDListArchive::InternalSwap(CellUIDListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_uids_.InternalSwap(&other->_impl_.row_uids_);
  _impl_.column_uids_.InternalSwap(&other->_impl_.column_uids_);
  _impl_.compressed_row_indexes_.InternalSwap(&other->_impl_.compressed_row_indexes_);
  _impl_.compressed_column_indexes_.InternalSwap(&other->_impl_.compressed_column_indexes_);
  swap(_impl_.uncompressed_lookup_list_, other->_impl_.uncompressed_lookup_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellUIDListArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[2]);
}

// ===================================================================

class TableSize::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSize>()._impl_._has_bits_);
  static void set_has_packeddata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TableSize::TableSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableSize)
}
TableSize::TableSize(const TableSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packeddata_){}
    , decltype(_impl_.num_columns_){}
    , decltype(_impl_.num_rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.packeddata_, &from._impl_.packeddata_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_rows_) -
    reinterpret_cast<char*>(&_impl_.packeddata_)) + sizeof(_impl_.num_rows_));
  // @@protoc_insertion_point(copy_constructor:TST.TableSize)
}

inline void TableSize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packeddata_){0u}
    , decltype(_impl_.num_columns_){0u}
    , decltype(_impl_.num_rows_){0u}
  };
}

TableSize::~TableSize() {
  // @@protoc_insertion_point(destructor:TST.TableSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableSize::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.packeddata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_rows_) -
        reinterpret_cast<char*>(&_impl_.packeddata_)) + sizeof(_impl_.num_rows_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required fixed32 packedData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_packeddata(&has_bits);
          _impl_.packeddata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_columns(&has_bits);
          _impl_.num_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_rows(&has_bits);
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required fixed32 packedData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_packeddata(), target);
  }

  // optional uint32 num_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_columns(), target);
  }

  // optional uint32 num_rows = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSize)
  return target;
}

size_t TableSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSize)
  size_t total_size = 0;

  // required fixed32 packedData = 1;
  if (_internal_has_packeddata()) {
    total_size += 1 + 4;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 num_columns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_columns());
    }

    // optional uint32 num_rows = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_rows());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSize::GetClassData() const { return &_class_data_; }


void TableSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableSize*>(&to_msg);
  auto& from = static_cast<const TableSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.packeddata_ = from._impl_.packeddata_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_columns_ = from._impl_.num_columns_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_rows_ = from._impl_.num_rows_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSize::CopyFrom(const TableSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TableSize::InternalSwap(TableSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableSize, _impl_.num_rows_)
      + sizeof(TableSize::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(TableSize, _impl_.packeddata_)>(
          reinterpret_cast<char*>(&_impl_.packeddata_),
          reinterpret_cast<char*>(&other->_impl_.packeddata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[3]);
}

// ===================================================================

class ExpandedTableSize::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpandedTableSize>()._impl_._has_bits_);
  static void set_has_num_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ExpandedTableSize::ExpandedTableSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ExpandedTableSize)
}
ExpandedTableSize::ExpandedTableSize(const ExpandedTableSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpandedTableSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_columns_){}
    , decltype(_impl_.num_rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_columns_, &from._impl_.num_columns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_rows_) -
    reinterpret_cast<char*>(&_impl_.num_columns_)) + sizeof(_impl_.num_rows_));
  // @@protoc_insertion_point(copy_constructor:TST.ExpandedTableSize)
}

inline void ExpandedTableSize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_columns_){0u}
    , decltype(_impl_.num_rows_){0u}
  };
}

ExpandedTableSize::~ExpandedTableSize() {
  // @@protoc_insertion_point(destructor:TST.ExpandedTableSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpandedTableSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExpandedTableSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpandedTableSize::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ExpandedTableSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.num_columns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_rows_) -
        reinterpret_cast<char*>(&_impl_.num_columns_)) + sizeof(_impl_.num_rows_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedTableSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 num_columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_columns(&has_bits);
          _impl_.num_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 num_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_rows(&has_bits);
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpandedTableSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ExpandedTableSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 num_columns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_columns(), target);
  }

  // required uint32 num_rows = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ExpandedTableSize)
  return target;
}

size_t ExpandedTableSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ExpandedTableSize)
  size_t total_size = 0;

  if (_internal_has_num_columns()) {
    // required uint32 num_columns = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_columns());
  }

  if (_internal_has_num_rows()) {
    // required uint32 num_rows = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_rows());
  }

  return total_size;
}
size_t ExpandedTableSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ExpandedTableSize)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 num_columns = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_columns());

    // required uint32 num_rows = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_rows());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandedTableSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpandedTableSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandedTableSize::GetClassData() const { return &_class_data_; }


void ExpandedTableSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpandedTableSize*>(&to_msg);
  auto& from = static_cast<const ExpandedTableSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ExpandedTableSize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_columns_ = from._impl_.num_columns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_rows_ = from._impl_.num_rows_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandedTableSize::CopyFrom(const ExpandedTableSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ExpandedTableSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedTableSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ExpandedTableSize::InternalSwap(ExpandedTableSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandedTableSize, _impl_.num_rows_)
      + sizeof(ExpandedTableSize::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(ExpandedTableSize, _impl_.num_columns_)>(
          reinterpret_cast<char*>(&_impl_.num_columns_),
          reinterpret_cast<char*>(&other->_impl_.num_columns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedTableSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[4]);
}

// ===================================================================

class CellRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRange>()._impl_._has_bits_);
  static const ::TST::CellID& origin(const CellRange* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::TableSize& size(const CellRange* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CellID&
CellRange::_Internal::origin(const CellRange* msg) {
  return *msg->_impl_.origin_;
}
const ::TST::TableSize&
CellRange::_Internal::size(const CellRange* msg) {
  return *msg->_impl_.size_;
}
CellRange::CellRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellRange)
}
CellRange::CellRange(const CellRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::TST::CellID(*from._impl_.origin_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::TST::TableSize(*from._impl_.size_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellRange)
}

inline void CellRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.size_){nullptr}
  };
}

CellRange::~CellRange() {
  // @@protoc_insertion_point(destructor:TST.CellRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
  if (this != internal_default_instance()) delete _impl_.size_;
}

void CellRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRange::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.origin_ != nullptr);
      _impl_.origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellID origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableSize size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CellID origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // required .TST.TableSize size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellRange)
  return target;
}

size_t CellRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CellRange)
  size_t total_size = 0;

  if (_internal_has_origin()) {
    // required .TST.CellID origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);
  }

  if (_internal_has_size()) {
    // required .TST.TableSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  return total_size;
}
size_t CellRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellRange)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CellID origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);

    // required .TST.TableSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRange::GetClassData() const { return &_class_data_; }


void CellRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRange*>(&to_msg);
  auto& from = static_cast<const CellRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::TST::CellID::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_size()->::TST::TableSize::MergeFrom(
          from._internal_size());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRange::CopyFrom(const CellRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_origin()) {
    if (!_impl_.origin_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!_impl_.size_->IsInitialized()) return false;
  }
  return true;
}

void CellRange::InternalSwap(CellRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRange, _impl_.size_)
      + sizeof(CellRange::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(CellRange, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[5]);
}

// ===================================================================

class ExpandedCellRange::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpandedCellRange>()._impl_._has_bits_);
  static const ::TSCE::CellCoordinateArchive& origin(const ExpandedCellRange* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ExpandedTableSize& size(const ExpandedCellRange* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
ExpandedCellRange::_Internal::origin(const ExpandedCellRange* msg) {
  return *msg->_impl_.origin_;
}
const ::TST::ExpandedTableSize&
ExpandedCellRange::_Internal::size(const ExpandedCellRange* msg) {
  return *msg->_impl_.size_;
}
void ExpandedCellRange::clear_origin() {
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ExpandedCellRange::ExpandedCellRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ExpandedCellRange)
}
ExpandedCellRange::ExpandedCellRange(const ExpandedCellRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpandedCellRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::TSCE::CellCoordinateArchive(*from._impl_.origin_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::TST::ExpandedTableSize(*from._impl_.size_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.ExpandedCellRange)
}

inline void ExpandedCellRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.size_){nullptr}
  };
}

ExpandedCellRange::~ExpandedCellRange() {
  // @@protoc_insertion_point(destructor:TST.ExpandedCellRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpandedCellRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
  if (this != internal_default_instance()) delete _impl_.size_;
}

void ExpandedCellRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpandedCellRange::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ExpandedCellRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.origin_ != nullptr);
      _impl_.origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedCellRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.ExpandedTableSize size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpandedCellRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ExpandedCellRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellCoordinateArchive origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // required .TST.ExpandedTableSize size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ExpandedCellRange)
  return target;
}

size_t ExpandedCellRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ExpandedCellRange)
  size_t total_size = 0;

  if (_internal_has_origin()) {
    // required .TSCE.CellCoordinateArchive origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);
  }

  if (_internal_has_size()) {
    // required .TST.ExpandedTableSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  return total_size;
}
size_t ExpandedCellRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ExpandedCellRange)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);

    // required .TST.ExpandedTableSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandedCellRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpandedCellRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandedCellRange::GetClassData() const { return &_class_data_; }


void ExpandedCellRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpandedCellRange*>(&to_msg);
  auto& from = static_cast<const ExpandedCellRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ExpandedCellRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_size()->::TST::ExpandedTableSize::MergeFrom(
          from._internal_size());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandedCellRange::CopyFrom(const ExpandedCellRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ExpandedCellRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedCellRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_size()) {
    if (!_impl_.size_->IsInitialized()) return false;
  }
  return true;
}

void ExpandedCellRange::InternalSwap(ExpandedCellRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandedCellRange, _impl_.size_)
      + sizeof(ExpandedCellRange::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(ExpandedCellRange, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedCellRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[6]);
}

// ===================================================================

class TableSelection::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSelection>()._impl_._has_bits_);
  static const ::TST::CellRange& cellrange(const TableSelection* msg);
  static void set_has_cellrange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellRange& extendedcellrange(const TableSelection* msg);
  static void set_has_extendedcellrange(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extendedcellrangevalid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TST::CellRange&
TableSelection::_Internal::cellrange(const TableSelection* msg) {
  return *msg->_impl_.cellrange_;
}
const ::TST::CellRange&
TableSelection::_Internal::extendedcellrange(const TableSelection* msg) {
  return *msg->_impl_.extendedcellrange_;
}
TableSelection::TableSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableSelection)
}
TableSelection::TableSelection(const TableSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableSelection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cellrange_){nullptr}
    , decltype(_impl_.extendedcellrange_){nullptr}
    , decltype(_impl_.extendedcellrangevalid_){}
    , decltype(_impl_.selection_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cellrange()) {
    _this->_impl_.cellrange_ = new ::TST::CellRange(*from._impl_.cellrange_);
  }
  if (from._internal_has_extendedcellrange()) {
    _this->_impl_.extendedcellrange_ = new ::TST::CellRange(*from._impl_.extendedcellrange_);
  }
  ::memcpy(&_impl_.extendedcellrangevalid_, &from._impl_.extendedcellrangevalid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.selection_type_) -
    reinterpret_cast<char*>(&_impl_.extendedcellrangevalid_)) + sizeof(_impl_.selection_type_));
  // @@protoc_insertion_point(copy_constructor:TST.TableSelection)
}

inline void TableSelection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cellrange_){nullptr}
    , decltype(_impl_.extendedcellrange_){nullptr}
    , decltype(_impl_.extendedcellrangevalid_){false}
    , decltype(_impl_.selection_type_){0}
  };
}

TableSelection::~TableSelection() {
  // @@protoc_insertion_point(destructor:TST.TableSelection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cellrange_;
  if (this != internal_default_instance()) delete _impl_.extendedcellrange_;
}

void TableSelection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cellrange_ != nullptr);
      _impl_.cellrange_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.extendedcellrange_ != nullptr);
      _impl_.extendedcellrange_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.extendedcellrangevalid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.selection_type_) -
        reinterpret_cast<char*>(&_impl_.extendedcellrangevalid_)) + sizeof(_impl_.selection_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSelection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellRange cellRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellrange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.CellRange extendedCellRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendedcellrange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool extendedCellRangeValid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_extendedcellrangevalid(&has_bits);
          _impl_.extendedcellrangevalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.SelectionTypeArchive selection_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::SelectionTypeArchive_IsValid(val))) {
            _internal_set_selection_type(static_cast<::TST::SelectionTypeArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CellRange cellRange = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cellrange(this),
        _Internal::cellrange(this).GetCachedSize(), target, stream);
  }

  // required .TST.CellRange extendedCellRange = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::extendedcellrange(this),
        _Internal::extendedcellrange(this).GetCachedSize(), target, stream);
  }

  // required bool extendedCellRangeValid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_extendedcellrangevalid(), target);
  }

  // required .TST.SelectionTypeArchive selection_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_selection_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSelection)
  return target;
}

size_t TableSelection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableSelection)
  size_t total_size = 0;

  if (_internal_has_cellrange()) {
    // required .TST.CellRange cellRange = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cellrange_);
  }

  if (_internal_has_extendedcellrange()) {
    // required .TST.CellRange extendedCellRange = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extendedcellrange_);
  }

  if (_internal_has_extendedcellrangevalid()) {
    // required bool extendedCellRangeValid = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_selection_type()) {
    // required .TST.SelectionTypeArchive selection_type = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_type());
  }

  return total_size;
}
size_t TableSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSelection)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TST.CellRange cellRange = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cellrange_);

    // required .TST.CellRange extendedCellRange = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extendedcellrange_);

    // required bool extendedCellRangeValid = 3;
    total_size += 1 + 1;

    // required .TST.SelectionTypeArchive selection_type = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSelection::GetClassData() const { return &_class_data_; }


void TableSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableSelection*>(&to_msg);
  auto& from = static_cast<const TableSelection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSelection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cellrange()->::TST::CellRange::MergeFrom(
          from._internal_cellrange());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_extendedcellrange()->::TST::CellRange::MergeFrom(
          from._internal_extendedcellrange());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.extendedcellrangevalid_ = from._impl_.extendedcellrangevalid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.selection_type_ = from._impl_.selection_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSelection::CopyFrom(const TableSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSelection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cellrange()) {
    if (!_impl_.cellrange_->IsInitialized()) return false;
  }
  if (_internal_has_extendedcellrange()) {
    if (!_impl_.extendedcellrange_->IsInitialized()) return false;
  }
  return true;
}

void TableSelection::InternalSwap(TableSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableSelection, _impl_.selection_type_)
      + sizeof(TableSelection::_impl_.selection_type_)
      - PROTOBUF_FIELD_OFFSET(TableSelection, _impl_.cellrange_)>(
          reinterpret_cast<char*>(&_impl_.cellrange_),
          reinterpret_cast<char*>(&other->_impl_.cellrange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSelection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[7]);
}

// ===================================================================

class TileRowInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TileRowInfo>()._impl_._has_bits_);
  static void set_has_tile_row_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cell_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cell_storage_buffer_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cell_offsets_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_storage_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cell_storage_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cell_offsets(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_wide_offsets(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000033) ^ 0x00000033) != 0;
  }
};

TileRowInfo::TileRowInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TileRowInfo)
}
TileRowInfo::TileRowInfo(const TileRowInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TileRowInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_storage_buffer_pre_bnc_){}
    , decltype(_impl_.cell_offsets_pre_bnc_){}
    , decltype(_impl_.cell_storage_buffer_){}
    , decltype(_impl_.cell_offsets_){}
    , decltype(_impl_.tile_row_index_){}
    , decltype(_impl_.cell_count_){}
    , decltype(_impl_.storage_version_){}
    , decltype(_impl_.has_wide_offsets_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cell_storage_buffer_pre_bnc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_storage_buffer_pre_bnc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cell_storage_buffer_pre_bnc()) {
    _this->_impl_.cell_storage_buffer_pre_bnc_.Set(from._internal_cell_storage_buffer_pre_bnc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cell_offsets_pre_bnc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_offsets_pre_bnc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cell_offsets_pre_bnc()) {
    _this->_impl_.cell_offsets_pre_bnc_.Set(from._internal_cell_offsets_pre_bnc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cell_storage_buffer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_storage_buffer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cell_storage_buffer()) {
    _this->_impl_.cell_storage_buffer_.Set(from._internal_cell_storage_buffer(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cell_offsets_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_offsets_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cell_offsets()) {
    _this->_impl_.cell_offsets_.Set(from._internal_cell_offsets(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tile_row_index_, &from._impl_.tile_row_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_wide_offsets_) -
    reinterpret_cast<char*>(&_impl_.tile_row_index_)) + sizeof(_impl_.has_wide_offsets_));
  // @@protoc_insertion_point(copy_constructor:TST.TileRowInfo)
}

inline void TileRowInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_storage_buffer_pre_bnc_){}
    , decltype(_impl_.cell_offsets_pre_bnc_){}
    , decltype(_impl_.cell_storage_buffer_){}
    , decltype(_impl_.cell_offsets_){}
    , decltype(_impl_.tile_row_index_){0u}
    , decltype(_impl_.cell_count_){0u}
    , decltype(_impl_.storage_version_){0u}
    , decltype(_impl_.has_wide_offsets_){false}
  };
  _impl_.cell_storage_buffer_pre_bnc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_storage_buffer_pre_bnc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cell_offsets_pre_bnc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_offsets_pre_bnc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cell_storage_buffer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_storage_buffer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cell_offsets_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cell_offsets_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TileRowInfo::~TileRowInfo() {
  // @@protoc_insertion_point(destructor:TST.TileRowInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileRowInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_storage_buffer_pre_bnc_.Destroy();
  _impl_.cell_offsets_pre_bnc_.Destroy();
  _impl_.cell_storage_buffer_.Destroy();
  _impl_.cell_offsets_.Destroy();
}

void TileRowInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TileRowInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TileRowInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cell_storage_buffer_pre_bnc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cell_offsets_pre_bnc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cell_storage_buffer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.cell_offsets_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.tile_row_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_wide_offsets_) -
        reinterpret_cast<char*>(&_impl_.tile_row_index_)) + sizeof(_impl_.has_wide_offsets_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileRowInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 tile_row_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tile_row_index(&has_bits);
          _impl_.tile_row_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 cell_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cell_count(&has_bits);
          _impl_.cell_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes cell_storage_buffer_pre_bnc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cell_storage_buffer_pre_bnc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes cell_offsets_pre_bnc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cell_offsets_pre_bnc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 storage_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_storage_version(&has_bits);
          _impl_.storage_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes cell_storage_buffer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cell_storage_buffer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes cell_offsets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_cell_offsets();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_wide_offsets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_has_wide_offsets(&has_bits);
          _impl_.has_wide_offsets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileRowInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TileRowInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 tile_row_index = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tile_row_index(), target);
  }

  // required uint32 cell_count = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cell_count(), target);
  }

  // required bytes cell_storage_buffer_pre_bnc = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cell_storage_buffer_pre_bnc(), target);
  }

  // required bytes cell_offsets_pre_bnc = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cell_offsets_pre_bnc(), target);
  }

  // optional uint32 storage_version = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_storage_version(), target);
  }

  // optional bytes cell_storage_buffer = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_cell_storage_buffer(), target);
  }

  // optional bytes cell_offsets = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_cell_offsets(), target);
  }

  // optional bool has_wide_offsets = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_has_wide_offsets(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TileRowInfo)
  return target;
}

size_t TileRowInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TileRowInfo)
  size_t total_size = 0;

  if (_internal_has_cell_storage_buffer_pre_bnc()) {
    // required bytes cell_storage_buffer_pre_bnc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cell_storage_buffer_pre_bnc());
  }

  if (_internal_has_cell_offsets_pre_bnc()) {
    // required bytes cell_offsets_pre_bnc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cell_offsets_pre_bnc());
  }

  if (_internal_has_tile_row_index()) {
    // required uint32 tile_row_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tile_row_index());
  }

  if (_internal_has_cell_count()) {
    // required uint32 cell_count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_count());
  }

  return total_size;
}
size_t TileRowInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TileRowInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required bytes cell_storage_buffer_pre_bnc = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cell_storage_buffer_pre_bnc());

    // required bytes cell_offsets_pre_bnc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cell_offsets_pre_bnc());

    // required uint32 tile_row_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tile_row_index());

    // required uint32 cell_count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional bytes cell_storage_buffer = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cell_storage_buffer());
    }

    // optional bytes cell_offsets = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cell_offsets());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional uint32 storage_version = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_version());
    }

    // optional bool has_wide_offsets = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileRowInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TileRowInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileRowInfo::GetClassData() const { return &_class_data_; }


void TileRowInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TileRowInfo*>(&to_msg);
  auto& from = static_cast<const TileRowInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TileRowInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cell_storage_buffer_pre_bnc(from._internal_cell_storage_buffer_pre_bnc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cell_offsets_pre_bnc(from._internal_cell_offsets_pre_bnc());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_cell_storage_buffer(from._internal_cell_storage_buffer());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_cell_offsets(from._internal_cell_offsets());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tile_row_index_ = from._impl_.tile_row_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cell_count_ = from._impl_.cell_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.storage_version_ = from._impl_.storage_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.has_wide_offsets_ = from._impl_.has_wide_offsets_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileRowInfo::CopyFrom(const TileRowInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TileRowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileRowInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TileRowInfo::InternalSwap(TileRowInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cell_storage_buffer_pre_bnc_, lhs_arena,
      &other->_impl_.cell_storage_buffer_pre_bnc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cell_offsets_pre_bnc_, lhs_arena,
      &other->_impl_.cell_offsets_pre_bnc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cell_storage_buffer_, lhs_arena,
      &other->_impl_.cell_storage_buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cell_offsets_, lhs_arena,
      &other->_impl_.cell_offsets_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileRowInfo, _impl_.has_wide_offsets_)
      + sizeof(TileRowInfo::_impl_.has_wide_offsets_)
      - PROTOBUF_FIELD_OFFSET(TileRowInfo, _impl_.tile_row_index_)>(
          reinterpret_cast<char*>(&_impl_.tile_row_index_),
          reinterpret_cast<char*>(&other->_impl_.tile_row_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileRowInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[8]);
}

// ===================================================================

class Tile::_Internal {
 public:
  using HasBits = decltype(std::declval<Tile>()._impl_._has_bits_);
  static void set_has_maxcolumn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxrow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numcells(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_numrows(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_storage_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_saved_in_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_should_use_wide_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Tile::Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.Tile)
}
Tile::Tile(const Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rowinfos_){from._impl_.rowinfos_}
    , decltype(_impl_.maxcolumn_){}
    , decltype(_impl_.maxrow_){}
    , decltype(_impl_.numcells_){}
    , decltype(_impl_.numrows_){}
    , decltype(_impl_.storage_version_){}
    , decltype(_impl_.last_saved_in_bnc_){}
    , decltype(_impl_.should_use_wide_rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.maxcolumn_, &from._impl_.maxcolumn_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.should_use_wide_rows_) -
    reinterpret_cast<char*>(&_impl_.maxcolumn_)) + sizeof(_impl_.should_use_wide_rows_));
  // @@protoc_insertion_point(copy_constructor:TST.Tile)
}

inline void Tile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rowinfos_){arena}
    , decltype(_impl_.maxcolumn_){0u}
    , decltype(_impl_.maxrow_){0u}
    , decltype(_impl_.numcells_){0u}
    , decltype(_impl_.numrows_){0u}
    , decltype(_impl_.storage_version_){0u}
    , decltype(_impl_.last_saved_in_bnc_){false}
    , decltype(_impl_.should_use_wide_rows_){false}
  };
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:TST.Tile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rowinfos_.~RepeatedPtrField();
}

void Tile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.Tile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rowinfos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.maxcolumn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.should_use_wide_rows_) -
        reinterpret_cast<char*>(&_impl_.maxcolumn_)) + sizeof(_impl_.should_use_wide_rows_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 maxColumn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_maxcolumn(&has_bits);
          _impl_.maxcolumn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 maxRow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_maxrow(&has_bits);
          _impl_.maxrow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 numCells = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_numcells(&has_bits);
          _impl_.numcells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 numrows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_numrows(&has_bits);
          _impl_.numrows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.TileRowInfo rowInfos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rowinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 storage_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_storage_version(&has_bits);
          _impl_.storage_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool last_saved_in_BNC = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_last_saved_in_bnc(&has_bits);
          _impl_.last_saved_in_bnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_use_wide_rows = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_should_use_wide_rows(&has_bits);
          _impl_.should_use_wide_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.Tile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 maxColumn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maxcolumn(), target);
  }

  // required uint32 maxRow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxrow(), target);
  }

  // required uint32 numCells = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numcells(), target);
  }

  // required uint32 numrows = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_numrows(), target);
  }

  // repeated .TST.TileRowInfo rowInfos = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rowinfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_rowinfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 storage_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_storage_version(), target);
  }

  // optional bool last_saved_in_BNC = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_last_saved_in_bnc(), target);
  }

  // optional bool should_use_wide_rows = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_should_use_wide_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.Tile)
  return target;
}

size_t Tile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.Tile)
  size_t total_size = 0;

  if (_internal_has_maxcolumn()) {
    // required uint32 maxColumn = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxcolumn());
  }

  if (_internal_has_maxrow()) {
    // required uint32 maxRow = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxrow());
  }

  if (_internal_has_numcells()) {
    // required uint32 numCells = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numcells());
  }

  if (_internal_has_numrows()) {
    // required uint32 numrows = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numrows());
  }

  return total_size;
}
size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.Tile)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 maxColumn = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxcolumn());

    // required uint32 maxRow = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxrow());

    // required uint32 numCells = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numcells());

    // required uint32 numrows = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numrows());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TileRowInfo rowInfos = 5;
  total_size += 1UL * this->_internal_rowinfos_size();
  for (const auto& msg : this->_impl_.rowinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000070u) {
    // optional uint32 storage_version = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_version());
    }

    // optional bool last_saved_in_BNC = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool should_use_wide_rows = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tile::GetClassData() const { return &_class_data_; }


void Tile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tile*>(&to_msg);
  auto& from = static_cast<const Tile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.Tile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rowinfos_.MergeFrom(from._impl_.rowinfos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.maxcolumn_ = from._impl_.maxcolumn_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.maxrow_ = from._impl_.maxrow_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.numcells_ = from._impl_.numcells_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.numrows_ = from._impl_.numrows_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.storage_version_ = from._impl_.storage_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.last_saved_in_bnc_ = from._impl_.last_saved_in_bnc_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.should_use_wide_rows_ = from._impl_.should_use_wide_rows_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rowinfos_))
    return false;
  return true;
}

void Tile::InternalSwap(Tile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rowinfos_.InternalSwap(&other->_impl_.rowinfos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile, _impl_.should_use_wide_rows_)
      + sizeof(Tile::_impl_.should_use_wide_rows_)
      - PROTOBUF_FIELD_OFFSET(Tile, _impl_.maxcolumn_)>(
          reinterpret_cast<char*>(&_impl_.maxcolumn_),
          reinterpret_cast<char*>(&other->_impl_.maxcolumn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[9]);
}

// ===================================================================

class TileStorage_Tile::_Internal {
 public:
  using HasBits = decltype(std::declval<TileStorage_Tile>()._impl_._has_bits_);
  static void set_has_tileid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& tile(const TileStorage_Tile* msg);
  static void set_has_tile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
TileStorage_Tile::_Internal::tile(const TileStorage_Tile* msg) {
  return *msg->_impl_.tile_;
}
void TileStorage_Tile::clear_tile() {
  if (_impl_.tile_ != nullptr) _impl_.tile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TileStorage_Tile::TileStorage_Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TileStorage.Tile)
}
TileStorage_Tile::TileStorage_Tile(const TileStorage_Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TileStorage_Tile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tile_){nullptr}
    , decltype(_impl_.tileid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tile()) {
    _this->_impl_.tile_ = new ::TSP::Reference(*from._impl_.tile_);
  }
  _this->_impl_.tileid_ = from._impl_.tileid_;
  // @@protoc_insertion_point(copy_constructor:TST.TileStorage.Tile)
}

inline void TileStorage_Tile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tile_){nullptr}
    , decltype(_impl_.tileid_){0u}
  };
}

TileStorage_Tile::~TileStorage_Tile() {
  // @@protoc_insertion_point(destructor:TST.TileStorage.Tile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileStorage_Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tile_;
}

void TileStorage_Tile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TileStorage_Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TileStorage.Tile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.tile_ != nullptr);
    _impl_.tile_->Clear();
  }
  _impl_.tileid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileStorage_Tile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 tileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tileid(&has_bits);
          _impl_.tileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference tile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileStorage_Tile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TileStorage.Tile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 tileid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tileid(), target);
  }

  // required .TSP.Reference tile = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tile(this),
        _Internal::tile(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TileStorage.Tile)
  return target;
}

size_t TileStorage_Tile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TileStorage.Tile)
  size_t total_size = 0;

  if (_internal_has_tile()) {
    // required .TSP.Reference tile = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tile_);
  }

  if (_internal_has_tileid()) {
    // required uint32 tileid = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tileid());
  }

  return total_size;
}
size_t TileStorage_Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TileStorage.Tile)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference tile = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tile_);

    // required uint32 tileid = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tileid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileStorage_Tile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TileStorage_Tile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileStorage_Tile::GetClassData() const { return &_class_data_; }


void TileStorage_Tile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TileStorage_Tile*>(&to_msg);
  auto& from = static_cast<const TileStorage_Tile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TileStorage.Tile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tile()->::TSP::Reference::MergeFrom(
          from._internal_tile());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tileid_ = from._impl_.tileid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileStorage_Tile::CopyFrom(const TileStorage_Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TileStorage.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileStorage_Tile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_tile()) {
    if (!_impl_.tile_->IsInitialized()) return false;
  }
  return true;
}

void TileStorage_Tile::InternalSwap(TileStorage_Tile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileStorage_Tile, _impl_.tileid_)
      + sizeof(TileStorage_Tile::_impl_.tileid_)
      - PROTOBUF_FIELD_OFFSET(TileStorage_Tile, _impl_.tile_)>(
          reinterpret_cast<char*>(&_impl_.tile_),
          reinterpret_cast<char*>(&other->_impl_.tile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileStorage_Tile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[10]);
}

// ===================================================================

class TileStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<TileStorage>()._impl_._has_bits_);
  static void set_has_tile_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_should_use_wide_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TileStorage::TileStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TileStorage)
}
TileStorage::TileStorage(const TileStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TileStorage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tiles_){from._impl_.tiles_}
    , decltype(_impl_.tile_size_){}
    , decltype(_impl_.should_use_wide_rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tile_size_, &from._impl_.tile_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.should_use_wide_rows_) -
    reinterpret_cast<char*>(&_impl_.tile_size_)) + sizeof(_impl_.should_use_wide_rows_));
  // @@protoc_insertion_point(copy_constructor:TST.TileStorage)
}

inline void TileStorage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tiles_){arena}
    , decltype(_impl_.tile_size_){0u}
    , decltype(_impl_.should_use_wide_rows_){false}
  };
}

TileStorage::~TileStorage() {
  // @@protoc_insertion_point(destructor:TST.TileStorage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TileStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tiles_.~RepeatedPtrField();
}

void TileStorage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TileStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TileStorage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tiles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.tile_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.should_use_wide_rows_) -
        reinterpret_cast<char*>(&_impl_.tile_size_)) + sizeof(_impl_.should_use_wide_rows_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileStorage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.TileStorage.Tile tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tile_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tile_size(&has_bits);
          _impl_.tile_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_use_wide_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_should_use_wide_rows(&has_bits);
          _impl_.should_use_wide_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TileStorage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TileStorage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.TileStorage.Tile tiles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_tiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tile_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tile_size(), target);
  }

  // optional bool should_use_wide_rows = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_should_use_wide_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TileStorage)
  return target;
}

size_t TileStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TileStorage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TileStorage.Tile tiles = 1;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->_impl_.tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 tile_size = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tile_size());
    }

    // optional bool should_use_wide_rows = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileStorage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TileStorage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileStorage::GetClassData() const { return &_class_data_; }


void TileStorage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TileStorage*>(&to_msg);
  auto& from = static_cast<const TileStorage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TileStorage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tiles_.MergeFrom(from._impl_.tiles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tile_size_ = from._impl_.tile_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.should_use_wide_rows_ = from._impl_.should_use_wide_rows_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileStorage::CopyFrom(const TileStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TileStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileStorage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tiles_))
    return false;
  return true;
}

void TileStorage::InternalSwap(TileStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tiles_.InternalSwap(&other->_impl_.tiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileStorage, _impl_.should_use_wide_rows_)
      + sizeof(TileStorage::_impl_.should_use_wide_rows_)
      - PROTOBUF_FIELD_OFFSET(TileStorage, _impl_.tile_size_)>(
          reinterpret_cast<char*>(&_impl_.tile_size_),
          reinterpret_cast<char*>(&other->_impl_.tile_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileStorage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[11]);
}

// ===================================================================

class PopUpMenuModel_CellValue::_Internal {
 public:
  using HasBits = decltype(std::declval<PopUpMenuModel_CellValue>()._impl_._has_bits_);
  static void set_has_cell_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::BooleanCellValueArchive& boolean_value(const PopUpMenuModel_CellValue* msg);
  static void set_has_boolean_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::DateCellValueArchive& date_value(const PopUpMenuModel_CellValue* msg);
  static void set_has_date_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::NumberCellValueArchive& number_value(const PopUpMenuModel_CellValue* msg);
  static void set_has_number_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::StringCellValueArchive& string_value(const PopUpMenuModel_CellValue* msg);
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TSCE::BooleanCellValueArchive&
PopUpMenuModel_CellValue::_Internal::boolean_value(const PopUpMenuModel_CellValue* msg) {
  return *msg->_impl_.boolean_value_;
}
const ::TSCE::DateCellValueArchive&
PopUpMenuModel_CellValue::_Internal::date_value(const PopUpMenuModel_CellValue* msg) {
  return *msg->_impl_.date_value_;
}
const ::TSCE::NumberCellValueArchive&
PopUpMenuModel_CellValue::_Internal::number_value(const PopUpMenuModel_CellValue* msg) {
  return *msg->_impl_.number_value_;
}
const ::TSCE::StringCellValueArchive&
PopUpMenuModel_CellValue::_Internal::string_value(const PopUpMenuModel_CellValue* msg) {
  return *msg->_impl_.string_value_;
}
void PopUpMenuModel_CellValue::clear_boolean_value() {
  if (_impl_.boolean_value_ != nullptr) _impl_.boolean_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PopUpMenuModel_CellValue::clear_date_value() {
  if (_impl_.date_value_ != nullptr) _impl_.date_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PopUpMenuModel_CellValue::clear_number_value() {
  if (_impl_.number_value_ != nullptr) _impl_.number_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PopUpMenuModel_CellValue::clear_string_value() {
  if (_impl_.string_value_ != nullptr) _impl_.string_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
PopUpMenuModel_CellValue::PopUpMenuModel_CellValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.PopUpMenuModel.CellValue)
}
PopUpMenuModel_CellValue::PopUpMenuModel_CellValue(const PopUpMenuModel_CellValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PopUpMenuModel_CellValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boolean_value_){nullptr}
    , decltype(_impl_.date_value_){nullptr}
    , decltype(_impl_.number_value_){nullptr}
    , decltype(_impl_.string_value_){nullptr}
    , decltype(_impl_.cell_value_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boolean_value()) {
    _this->_impl_.boolean_value_ = new ::TSCE::BooleanCellValueArchive(*from._impl_.boolean_value_);
  }
  if (from._internal_has_date_value()) {
    _this->_impl_.date_value_ = new ::TSCE::DateCellValueArchive(*from._impl_.date_value_);
  }
  if (from._internal_has_number_value()) {
    _this->_impl_.number_value_ = new ::TSCE::NumberCellValueArchive(*from._impl_.number_value_);
  }
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_ = new ::TSCE::StringCellValueArchive(*from._impl_.string_value_);
  }
  _this->_impl_.cell_value_type_ = from._impl_.cell_value_type_;
  // @@protoc_insertion_point(copy_constructor:TST.PopUpMenuModel.CellValue)
}

inline void PopUpMenuModel_CellValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boolean_value_){nullptr}
    , decltype(_impl_.date_value_){nullptr}
    , decltype(_impl_.number_value_){nullptr}
    , decltype(_impl_.string_value_){nullptr}
    , decltype(_impl_.cell_value_type_){1}
  };
}

PopUpMenuModel_CellValue::~PopUpMenuModel_CellValue() {
  // @@protoc_insertion_point(destructor:TST.PopUpMenuModel.CellValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PopUpMenuModel_CellValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.boolean_value_;
  if (this != internal_default_instance()) delete _impl_.date_value_;
  if (this != internal_default_instance()) delete _impl_.number_value_;
  if (this != internal_default_instance()) delete _impl_.string_value_;
}

void PopUpMenuModel_CellValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PopUpMenuModel_CellValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PopUpMenuModel.CellValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.boolean_value_ != nullptr);
      _impl_.boolean_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.date_value_ != nullptr);
      _impl_.date_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.number_value_ != nullptr);
      _impl_.number_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.string_value_ != nullptr);
      _impl_.string_value_->Clear();
    }
    _impl_.cell_value_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PopUpMenuModel_CellValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::PopUpMenuModel_CellValueType_IsValid(val))) {
            _internal_set_cell_value_type(static_cast<::TST::PopUpMenuModel_CellValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.DateCellValueArchive date_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.NumberCellValueArchive number_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.StringCellValueArchive string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PopUpMenuModel_CellValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PopUpMenuModel.CellValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cell_value_type(), target);
  }

  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::boolean_value(this),
        _Internal::boolean_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.DateCellValueArchive date_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::date_value(this),
        _Internal::date_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::number_value(this),
        _Internal::number_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.StringCellValueArchive string_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::string_value(this),
        _Internal::string_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PopUpMenuModel.CellValue)
  return target;
}

size_t PopUpMenuModel_CellValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PopUpMenuModel.CellValue)
  size_t total_size = 0;

  // required .TST.PopUpMenuModel.CellValueType cell_value_type = 1;
  if (_internal_has_cell_value_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cell_value_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.boolean_value_);
    }

    // optional .TSCE.DateCellValueArchive date_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_value_);
    }

    // optional .TSCE.NumberCellValueArchive number_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.number_value_);
    }

    // optional .TSCE.StringCellValueArchive string_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.string_value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PopUpMenuModel_CellValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PopUpMenuModel_CellValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PopUpMenuModel_CellValue::GetClassData() const { return &_class_data_; }


void PopUpMenuModel_CellValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PopUpMenuModel_CellValue*>(&to_msg);
  auto& from = static_cast<const PopUpMenuModel_CellValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.PopUpMenuModel.CellValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_boolean_value()->::TSCE::BooleanCellValueArchive::MergeFrom(
          from._internal_boolean_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_date_value()->::TSCE::DateCellValueArchive::MergeFrom(
          from._internal_date_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_number_value()->::TSCE::NumberCellValueArchive::MergeFrom(
          from._internal_number_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_string_value()->::TSCE::StringCellValueArchive::MergeFrom(
          from._internal_string_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cell_value_type_ = from._impl_.cell_value_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PopUpMenuModel_CellValue::CopyFrom(const PopUpMenuModel_CellValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PopUpMenuModel.CellValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopUpMenuModel_CellValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_boolean_value()) {
    if (!_impl_.boolean_value_->IsInitialized()) return false;
  }
  if (_internal_has_date_value()) {
    if (!_impl_.date_value_->IsInitialized()) return false;
  }
  if (_internal_has_number_value()) {
    if (!_impl_.number_value_->IsInitialized()) return false;
  }
  if (_internal_has_string_value()) {
    if (!_impl_.string_value_->IsInitialized()) return false;
  }
  return true;
}

void PopUpMenuModel_CellValue::InternalSwap(PopUpMenuModel_CellValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PopUpMenuModel_CellValue, _impl_.string_value_)
      + sizeof(PopUpMenuModel_CellValue::_impl_.string_value_)
      - PROTOBUF_FIELD_OFFSET(PopUpMenuModel_CellValue, _impl_.boolean_value_)>(
          reinterpret_cast<char*>(&_impl_.boolean_value_),
          reinterpret_cast<char*>(&other->_impl_.boolean_value_));
  swap(_impl_.cell_value_type_, other->_impl_.cell_value_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PopUpMenuModel_CellValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[12]);
}

// ===================================================================

class PopUpMenuModel::_Internal {
 public:
};

void PopUpMenuModel::clear_tsce_item() {
  _impl_.tsce_item_.Clear();
}
PopUpMenuModel::PopUpMenuModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.PopUpMenuModel)
}
PopUpMenuModel::PopUpMenuModel(const PopUpMenuModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PopUpMenuModel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.tsce_item_){from._impl_.tsce_item_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.PopUpMenuModel)
}

inline void PopUpMenuModel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){arena}
    , decltype(_impl_.tsce_item_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PopUpMenuModel::~PopUpMenuModel() {
  // @@protoc_insertion_point(destructor:TST.PopUpMenuModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PopUpMenuModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
  _impl_.tsce_item_.~RepeatedPtrField();
}

void PopUpMenuModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PopUpMenuModel::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PopUpMenuModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _impl_.tsce_item_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PopUpMenuModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellValueArchive tsce_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tsce_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PopUpMenuModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PopUpMenuModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CellValueArchive tsce_item = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tsce_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_tsce_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PopUpMenuModel)
  return target;
}

size_t PopUpMenuModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PopUpMenuModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.PopUpMenuModel.CellValue item = 1 [deprecated = true];
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellValueArchive tsce_item = 2;
  total_size += 1UL * this->_internal_tsce_item_size();
  for (const auto& msg : this->_impl_.tsce_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PopUpMenuModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PopUpMenuModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PopUpMenuModel::GetClassData() const { return &_class_data_; }


void PopUpMenuModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PopUpMenuModel*>(&to_msg);
  auto& from = static_cast<const PopUpMenuModel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.PopUpMenuModel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  _this->_impl_.tsce_item_.MergeFrom(from._impl_.tsce_item_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PopUpMenuModel::CopyFrom(const PopUpMenuModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PopUpMenuModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopUpMenuModel::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.item_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tsce_item_))
    return false;
  return true;
}

void PopUpMenuModel::InternalSwap(PopUpMenuModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  _impl_.tsce_item_.InternalSwap(&other->_impl_.tsce_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PopUpMenuModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[13]);
}

// ===================================================================

class ImportWarningSetArchive_FormulaImportWarning::_Internal {
 public:
  using HasBits = decltype(std::declval<ImportWarningSetArchive_FormulaImportWarning>()._impl_._has_bits_);
  static void set_has_formula_warning_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_original_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_supplementary_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_formula_warning_type_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

ImportWarningSetArchive_FormulaImportWarning::ImportWarningSetArchive_FormulaImportWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ImportWarningSetArchive.FormulaImportWarning)
}
ImportWarningSetArchive_FormulaImportWarning::ImportWarningSetArchive_FormulaImportWarning(const ImportWarningSetArchive_FormulaImportWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportWarningSetArchive_FormulaImportWarning* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.original_formula_){}
    , decltype(_impl_.supplementary_text_){}
    , decltype(_impl_.formula_warning_type_int_){}
    , decltype(_impl_.formula_warning_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.original_formula_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_formula_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_original_formula()) {
    _this->_impl_.original_formula_.Set(from._internal_original_formula(), 
      _this->GetArenaForAllocation());
  }
  _impl_.supplementary_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.supplementary_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_supplementary_text()) {
    _this->_impl_.supplementary_text_.Set(from._internal_supplementary_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.formula_warning_type_int_, &from._impl_.formula_warning_type_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.formula_warning_type_) -
    reinterpret_cast<char*>(&_impl_.formula_warning_type_int_)) + sizeof(_impl_.formula_warning_type_));
  // @@protoc_insertion_point(copy_constructor:TST.ImportWarningSetArchive.FormulaImportWarning)
}

inline void ImportWarningSetArchive_FormulaImportWarning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.original_formula_){}
    , decltype(_impl_.supplementary_text_){}
    , decltype(_impl_.formula_warning_type_int_){0}
    , decltype(_impl_.formula_warning_type_){1}
  };
  _impl_.original_formula_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_formula_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.supplementary_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.supplementary_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImportWarningSetArchive_FormulaImportWarning::~ImportWarningSetArchive_FormulaImportWarning() {
  // @@protoc_insertion_point(destructor:TST.ImportWarningSetArchive.FormulaImportWarning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportWarningSetArchive_FormulaImportWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.original_formula_.Destroy();
  _impl_.supplementary_text_.Destroy();
}

void ImportWarningSetArchive_FormulaImportWarning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportWarningSetArchive_FormulaImportWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.original_formula_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.supplementary_text_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    _impl_.formula_warning_type_int_ = 0;
    _impl_.formula_warning_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportWarningSetArchive_FormulaImportWarning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ImportWarningSetArchive.FormulaWarningType formula_warning_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::ImportWarningSetArchive_FormulaWarningType_IsValid(val))) {
            _internal_set_formula_warning_type(static_cast<::TST::ImportWarningSetArchive_FormulaWarningType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string original_formula = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_original_formula();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.ImportWarningSetArchive.FormulaImportWarning.original_formula");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string supplementary_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_supplementary_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.ImportWarningSetArchive.FormulaImportWarning.supplementary_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 formula_warning_type_int = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_formula_warning_type_int(&has_bits);
          _impl_.formula_warning_type_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportWarningSetArchive_FormulaImportWarning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ImportWarningSetArchive.FormulaWarningType formula_warning_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_formula_warning_type(), target);
  }

  // optional string original_formula = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_formula().data(), static_cast<int>(this->_internal_original_formula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.ImportWarningSetArchive.FormulaImportWarning.original_formula");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_original_formula(), target);
  }

  // optional string supplementary_text = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_supplementary_text().data(), static_cast<int>(this->_internal_supplementary_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.ImportWarningSetArchive.FormulaImportWarning.supplementary_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_supplementary_text(), target);
  }

  // optional int32 formula_warning_type_int = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_formula_warning_type_int(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ImportWarningSetArchive.FormulaImportWarning)
  return target;
}

size_t ImportWarningSetArchive_FormulaImportWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  size_t total_size = 0;

  // required .TST.ImportWarningSetArchive.FormulaWarningType formula_warning_type = 1;
  if (_internal_has_formula_warning_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_formula_warning_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string original_formula = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_formula());
    }

    // optional string supplementary_text = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_supplementary_text());
    }

    // optional int32 formula_warning_type_int = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_formula_warning_type_int());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportWarningSetArchive_FormulaImportWarning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportWarningSetArchive_FormulaImportWarning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportWarningSetArchive_FormulaImportWarning::GetClassData() const { return &_class_data_; }


void ImportWarningSetArchive_FormulaImportWarning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportWarningSetArchive_FormulaImportWarning*>(&to_msg);
  auto& from = static_cast<const ImportWarningSetArchive_FormulaImportWarning&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_original_formula(from._internal_original_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_supplementary_text(from._internal_supplementary_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.formula_warning_type_int_ = from._impl_.formula_warning_type_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.formula_warning_type_ = from._impl_.formula_warning_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportWarningSetArchive_FormulaImportWarning::CopyFrom(const ImportWarningSetArchive_FormulaImportWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ImportWarningSetArchive.FormulaImportWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportWarningSetArchive_FormulaImportWarning::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ImportWarningSetArchive_FormulaImportWarning::InternalSwap(ImportWarningSetArchive_FormulaImportWarning* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.original_formula_, lhs_arena,
      &other->_impl_.original_formula_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.supplementary_text_, lhs_arena,
      &other->_impl_.supplementary_text_, rhs_arena
  );
  swap(_impl_.formula_warning_type_int_, other->_impl_.formula_warning_type_int_);
  swap(_impl_.formula_warning_type_, other->_impl_.formula_warning_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportWarningSetArchive_FormulaImportWarning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[14]);
}

// ===================================================================

class ImportWarningSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImportWarningSetArchive>()._impl_._has_bits_);
  static const ::TST::ImportWarningSetArchive_FormulaImportWarning& formula_import_warning(const ImportWarningSetArchive* msg);
  static void set_has_formula_import_warning(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cond_format_above_avg_equal_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cond_format_above_avg_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cond_format_complex_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cond_format_contains_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cond_format_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cond_format_not_contains_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cond_format_parameters_not_all_same_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cond_format_stop_if_true(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cond_format_unsupported_operator(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cond_format_unsupported_styling(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cond_format_unsupported_time_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_error_cell_with_no_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_unsupported_cond_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_original_data_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_formula_warning_filtered_column_formula_not_copied(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_duration_format_range_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::TST::ImportWarningSetArchive_FormulaImportWarning&
ImportWarningSetArchive::_Internal::formula_import_warning(const ImportWarningSetArchive* msg) {
  return *msg->_impl_.formula_import_warning_;
}
ImportWarningSetArchive::ImportWarningSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ImportWarningSetArchive)
}
ImportWarningSetArchive::ImportWarningSetArchive(const ImportWarningSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportWarningSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.original_data_format_){}
    , decltype(_impl_.formula_import_warning_){nullptr}
    , decltype(_impl_.cond_format_above_avg_equal_avg_){}
    , decltype(_impl_.cond_format_above_avg_std_dev_){}
    , decltype(_impl_.cond_format_complex_formula_){}
    , decltype(_impl_.cond_format_contains_errors_){}
    , decltype(_impl_.cond_format_expr_){}
    , decltype(_impl_.cond_format_not_contains_errors_){}
    , decltype(_impl_.cond_format_parameters_not_all_same_type_){}
    , decltype(_impl_.cond_format_stop_if_true_){}
    , decltype(_impl_.cond_format_unsupported_operator_){}
    , decltype(_impl_.cond_format_unsupported_styling_){}
    , decltype(_impl_.cond_format_unsupported_time_period_){}
    , decltype(_impl_.error_cell_with_no_formula_){}
    , decltype(_impl_.unsupported_cond_format_){}
    , decltype(_impl_.formula_warning_filtered_column_formula_not_copied_){}
    , decltype(_impl_.duration_format_range_changed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.original_data_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_data_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_original_data_format()) {
    _this->_impl_.original_data_format_.Set(from._internal_original_data_format(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_formula_import_warning()) {
    _this->_impl_.formula_import_warning_ = new ::TST::ImportWarningSetArchive_FormulaImportWarning(*from._impl_.formula_import_warning_);
  }
  ::memcpy(&_impl_.cond_format_above_avg_equal_avg_, &from._impl_.cond_format_above_avg_equal_avg_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_format_range_changed_) -
    reinterpret_cast<char*>(&_impl_.cond_format_above_avg_equal_avg_)) + sizeof(_impl_.duration_format_range_changed_));
  // @@protoc_insertion_point(copy_constructor:TST.ImportWarningSetArchive)
}

inline void ImportWarningSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.original_data_format_){}
    , decltype(_impl_.formula_import_warning_){nullptr}
    , decltype(_impl_.cond_format_above_avg_equal_avg_){false}
    , decltype(_impl_.cond_format_above_avg_std_dev_){false}
    , decltype(_impl_.cond_format_complex_formula_){false}
    , decltype(_impl_.cond_format_contains_errors_){false}
    , decltype(_impl_.cond_format_expr_){false}
    , decltype(_impl_.cond_format_not_contains_errors_){false}
    , decltype(_impl_.cond_format_parameters_not_all_same_type_){false}
    , decltype(_impl_.cond_format_stop_if_true_){false}
    , decltype(_impl_.cond_format_unsupported_operator_){false}
    , decltype(_impl_.cond_format_unsupported_styling_){false}
    , decltype(_impl_.cond_format_unsupported_time_period_){false}
    , decltype(_impl_.error_cell_with_no_formula_){false}
    , decltype(_impl_.unsupported_cond_format_){false}
    , decltype(_impl_.formula_warning_filtered_column_formula_not_copied_){false}
    , decltype(_impl_.duration_format_range_changed_){false}
  };
  _impl_.original_data_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_data_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImportWarningSetArchive::~ImportWarningSetArchive() {
  // @@protoc_insertion_point(destructor:TST.ImportWarningSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportWarningSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.original_data_format_.Destroy();
  if (this != internal_default_instance()) delete _impl_.formula_import_warning_;
}

void ImportWarningSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportWarningSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ImportWarningSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.original_data_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.formula_import_warning_ != nullptr);
      _impl_.formula_import_warning_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.cond_format_above_avg_equal_avg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cond_format_not_contains_errors_) -
        reinterpret_cast<char*>(&_impl_.cond_format_above_avg_equal_avg_)) + sizeof(_impl_.cond_format_not_contains_errors_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.cond_format_parameters_not_all_same_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.formula_warning_filtered_column_formula_not_copied_) -
        reinterpret_cast<char*>(&_impl_.cond_format_parameters_not_all_same_type_)) + sizeof(_impl_.formula_warning_filtered_column_formula_not_copied_));
  }
  _impl_.duration_format_range_changed_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportWarningSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.ImportWarningSetArchive.FormulaImportWarning formula_import_warning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_import_warning(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_above_avg_equal_avg = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cond_format_above_avg_equal_avg(&has_bits);
          _impl_.cond_format_above_avg_equal_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_above_avg_std_dev = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cond_format_above_avg_std_dev(&has_bits);
          _impl_.cond_format_above_avg_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_complex_formula = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cond_format_complex_formula(&has_bits);
          _impl_.cond_format_complex_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_contains_errors = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cond_format_contains_errors(&has_bits);
          _impl_.cond_format_contains_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_expr = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cond_format_expr(&has_bits);
          _impl_.cond_format_expr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_not_contains_errors = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cond_format_not_contains_errors(&has_bits);
          _impl_.cond_format_not_contains_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_parameters_not_all_same_type = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_cond_format_parameters_not_all_same_type(&has_bits);
          _impl_.cond_format_parameters_not_all_same_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_stop_if_true = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_cond_format_stop_if_true(&has_bits);
          _impl_.cond_format_stop_if_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_unsupported_operator = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_cond_format_unsupported_operator(&has_bits);
          _impl_.cond_format_unsupported_operator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_unsupported_styling = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_cond_format_unsupported_styling(&has_bits);
          _impl_.cond_format_unsupported_styling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cond_format_unsupported_time_period = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_cond_format_unsupported_time_period(&has_bits);
          _impl_.cond_format_unsupported_time_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool error_cell_with_no_formula = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_error_cell_with_no_formula(&has_bits);
          _impl_.error_cell_with_no_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unsupported_cond_format = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_unsupported_cond_format(&has_bits);
          _impl_.unsupported_cond_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string original_data_format = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_original_data_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.ImportWarningSetArchive.original_data_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool formula_warning_filtered_column_formula_not_copied = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_formula_warning_filtered_column_formula_not_copied(&has_bits);
          _impl_.formula_warning_filtered_column_formula_not_copied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool duration_format_range_changed = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_duration_format_range_changed(&has_bits);
          _impl_.duration_format_range_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportWarningSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ImportWarningSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.ImportWarningSetArchive.FormulaImportWarning formula_import_warning = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::formula_import_warning(this),
        _Internal::formula_import_warning(this).GetCachedSize(), target, stream);
  }

  // optional bool cond_format_above_avg_equal_avg = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_cond_format_above_avg_equal_avg(), target);
  }

  // optional bool cond_format_above_avg_std_dev = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_cond_format_above_avg_std_dev(), target);
  }

  // optional bool cond_format_complex_formula = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_cond_format_complex_formula(), target);
  }

  // optional bool cond_format_contains_errors = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_cond_format_contains_errors(), target);
  }

  // optional bool cond_format_expr = 6 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_cond_format_expr(), target);
  }

  // optional bool cond_format_not_contains_errors = 7 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_cond_format_not_contains_errors(), target);
  }

  // optional bool cond_format_parameters_not_all_same_type = 8 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_cond_format_parameters_not_all_same_type(), target);
  }

  // optional bool cond_format_stop_if_true = 9 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_cond_format_stop_if_true(), target);
  }

  // optional bool cond_format_unsupported_operator = 10 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_cond_format_unsupported_operator(), target);
  }

  // optional bool cond_format_unsupported_styling = 11 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_cond_format_unsupported_styling(), target);
  }

  // optional bool cond_format_unsupported_time_period = 12 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_cond_format_unsupported_time_period(), target);
  }

  // optional bool error_cell_with_no_formula = 13 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_error_cell_with_no_formula(), target);
  }

  // optional bool unsupported_cond_format = 14 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_unsupported_cond_format(), target);
  }

  // optional string original_data_format = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_data_format().data(), static_cast<int>(this->_internal_original_data_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.ImportWarningSetArchive.original_data_format");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_original_data_format(), target);
  }

  // optional bool formula_warning_filtered_column_formula_not_copied = 16 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_formula_warning_filtered_column_formula_not_copied(), target);
  }

  // optional bool duration_format_range_changed = 17 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_duration_format_range_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ImportWarningSetArchive)
  return target;
}

size_t ImportWarningSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ImportWarningSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string original_data_format = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_data_format());
    }

    // optional .TST.ImportWarningSetArchive.FormulaImportWarning formula_import_warning = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_import_warning_);
    }

    // optional bool cond_format_above_avg_equal_avg = 2 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_above_avg_std_dev = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_complex_formula = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_contains_errors = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_expr = 6 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_not_contains_errors = 7 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool cond_format_parameters_not_all_same_type = 8 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_stop_if_true = 9 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_unsupported_operator = 10 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_unsupported_styling = 11 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool cond_format_unsupported_time_period = 12 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool error_cell_with_no_formula = 13 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool unsupported_cond_format = 14 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool formula_warning_filtered_column_formula_not_copied = 16 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional bool duration_format_range_changed = 17 [default = false];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportWarningSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportWarningSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportWarningSetArchive::GetClassData() const { return &_class_data_; }


void ImportWarningSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportWarningSetArchive*>(&to_msg);
  auto& from = static_cast<const ImportWarningSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ImportWarningSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_original_data_format(from._internal_original_data_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_formula_import_warning()->::TST::ImportWarningSetArchive_FormulaImportWarning::MergeFrom(
          from._internal_formula_import_warning());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cond_format_above_avg_equal_avg_ = from._impl_.cond_format_above_avg_equal_avg_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cond_format_above_avg_std_dev_ = from._impl_.cond_format_above_avg_std_dev_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cond_format_complex_formula_ = from._impl_.cond_format_complex_formula_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cond_format_contains_errors_ = from._impl_.cond_format_contains_errors_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.cond_format_expr_ = from._impl_.cond_format_expr_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.cond_format_not_contains_errors_ = from._impl_.cond_format_not_contains_errors_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.cond_format_parameters_not_all_same_type_ = from._impl_.cond_format_parameters_not_all_same_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.cond_format_stop_if_true_ = from._impl_.cond_format_stop_if_true_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.cond_format_unsupported_operator_ = from._impl_.cond_format_unsupported_operator_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.cond_format_unsupported_styling_ = from._impl_.cond_format_unsupported_styling_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.cond_format_unsupported_time_period_ = from._impl_.cond_format_unsupported_time_period_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.error_cell_with_no_formula_ = from._impl_.error_cell_with_no_formula_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.unsupported_cond_format_ = from._impl_.unsupported_cond_format_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.formula_warning_filtered_column_formula_not_copied_ = from._impl_.formula_warning_filtered_column_formula_not_copied_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_duration_format_range_changed(from._internal_duration_format_range_changed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportWarningSetArchive::CopyFrom(const ImportWarningSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ImportWarningSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportWarningSetArchive::IsInitialized() const {
  if (_internal_has_formula_import_warning()) {
    if (!_impl_.formula_import_warning_->IsInitialized()) return false;
  }
  return true;
}

void ImportWarningSetArchive::InternalSwap(ImportWarningSetArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.original_data_format_, lhs_arena,
      &other->_impl_.original_data_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImportWarningSetArchive, _impl_.duration_format_range_changed_)
      + sizeof(ImportWarningSetArchive::_impl_.duration_format_range_changed_)
      - PROTOBUF_FIELD_OFFSET(ImportWarningSetArchive, _impl_.formula_import_warning_)>(
          reinterpret_cast<char*>(&_impl_.formula_import_warning_),
          reinterpret_cast<char*>(&other->_impl_.formula_import_warning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportWarningSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[15]);
}

// ===================================================================

class CellRefImportWarningSetPairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRefImportWarningSetPairArchive>()._impl_._has_bits_);
  static const ::TSCE::CellReferenceArchive& cell_ref(const CellRefImportWarningSetPairArchive* msg);
  static void set_has_cell_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ImportWarningSetArchive& warning_set(const CellRefImportWarningSetPairArchive* msg);
  static void set_has_warning_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
CellRefImportWarningSetPairArchive::_Internal::cell_ref(const CellRefImportWarningSetPairArchive* msg) {
  return *msg->_impl_.cell_ref_;
}
const ::TST::ImportWarningSetArchive&
CellRefImportWarningSetPairArchive::_Internal::warning_set(const CellRefImportWarningSetPairArchive* msg) {
  return *msg->_impl_.warning_set_;
}
void CellRefImportWarningSetPairArchive::clear_cell_ref() {
  if (_impl_.cell_ref_ != nullptr) _impl_.cell_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CellRefImportWarningSetPairArchive::CellRefImportWarningSetPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellRefImportWarningSetPairArchive)
}
CellRefImportWarningSetPairArchive::CellRefImportWarningSetPairArchive(const CellRefImportWarningSetPairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRefImportWarningSetPairArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_ref_){nullptr}
    , decltype(_impl_.warning_set_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_ref()) {
    _this->_impl_.cell_ref_ = new ::TSCE::CellReferenceArchive(*from._impl_.cell_ref_);
  }
  if (from._internal_has_warning_set()) {
    _this->_impl_.warning_set_ = new ::TST::ImportWarningSetArchive(*from._impl_.warning_set_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellRefImportWarningSetPairArchive)
}

inline void CellRefImportWarningSetPairArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_ref_){nullptr}
    , decltype(_impl_.warning_set_){nullptr}
  };
}

CellRefImportWarningSetPairArchive::~CellRefImportWarningSetPairArchive() {
  // @@protoc_insertion_point(destructor:TST.CellRefImportWarningSetPairArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRefImportWarningSetPairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_ref_;
  if (this != internal_default_instance()) delete _impl_.warning_set_;
}

void CellRefImportWarningSetPairArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRefImportWarningSetPairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellRefImportWarningSetPairArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_ref_ != nullptr);
      _impl_.cell_ref_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.warning_set_ != nullptr);
      _impl_.warning_set_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRefImportWarningSetPairArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellReferenceArchive cell_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ImportWarningSetArchive warning_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_warning_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRefImportWarningSetPairArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellRefImportWarningSetPairArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellReferenceArchive cell_ref = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell_ref(this),
        _Internal::cell_ref(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ImportWarningSetArchive warning_set = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::warning_set(this),
        _Internal::warning_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellRefImportWarningSetPairArchive)
  return target;
}

size_t CellRefImportWarningSetPairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellRefImportWarningSetPairArchive)
  size_t total_size = 0;

  // required .TSCE.CellReferenceArchive cell_ref = 1;
  if (_internal_has_cell_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_ref_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.ImportWarningSetArchive warning_set = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.warning_set_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRefImportWarningSetPairArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRefImportWarningSetPairArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRefImportWarningSetPairArchive::GetClassData() const { return &_class_data_; }


void CellRefImportWarningSetPairArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRefImportWarningSetPairArchive*>(&to_msg);
  auto& from = static_cast<const CellRefImportWarningSetPairArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellRefImportWarningSetPairArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_ref()->::TSCE::CellReferenceArchive::MergeFrom(
          from._internal_cell_ref());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_warning_set()->::TST::ImportWarningSetArchive::MergeFrom(
          from._internal_warning_set());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRefImportWarningSetPairArchive::CopyFrom(const CellRefImportWarningSetPairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellRefImportWarningSetPairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRefImportWarningSetPairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_ref()) {
    if (!_impl_.cell_ref_->IsInitialized()) return false;
  }
  if (_internal_has_warning_set()) {
    if (!_impl_.warning_set_->IsInitialized()) return false;
  }
  return true;
}

void CellRefImportWarningSetPairArchive::InternalSwap(CellRefImportWarningSetPairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRefImportWarningSetPairArchive, _impl_.warning_set_)
      + sizeof(CellRefImportWarningSetPairArchive::_impl_.warning_set_)
      - PROTOBUF_FIELD_OFFSET(CellRefImportWarningSetPairArchive, _impl_.cell_ref_)>(
          reinterpret_cast<char*>(&_impl_.cell_ref_),
          reinterpret_cast<char*>(&other->_impl_.cell_ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRefImportWarningSetPairArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[16]);
}

// ===================================================================

class ImportWarningSetByCellRefArchive::_Internal {
 public:
};

ImportWarningSetByCellRefArchive::ImportWarningSetByCellRefArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ImportWarningSetByCellRefArchive)
}
ImportWarningSetByCellRefArchive::ImportWarningSetByCellRefArchive(const ImportWarningSetByCellRefArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImportWarningSetByCellRefArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cellref_warning_set_pair_){from._impl_.cellref_warning_set_pair_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ImportWarningSetByCellRefArchive)
}

inline void ImportWarningSetByCellRefArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cellref_warning_set_pair_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImportWarningSetByCellRefArchive::~ImportWarningSetByCellRefArchive() {
  // @@protoc_insertion_point(destructor:TST.ImportWarningSetByCellRefArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImportWarningSetByCellRefArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cellref_warning_set_pair_.~RepeatedPtrField();
}

void ImportWarningSetByCellRefArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImportWarningSetByCellRefArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ImportWarningSetByCellRefArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cellref_warning_set_pair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportWarningSetByCellRefArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.CellRefImportWarningSetPairArchive cellref_warning_set_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cellref_warning_set_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportWarningSetByCellRefArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ImportWarningSetByCellRefArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.CellRefImportWarningSetPairArchive cellref_warning_set_pair = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cellref_warning_set_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_cellref_warning_set_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ImportWarningSetByCellRefArchive)
  return target;
}

size_t ImportWarningSetByCellRefArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ImportWarningSetByCellRefArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellRefImportWarningSetPairArchive cellref_warning_set_pair = 1;
  total_size += 1UL * this->_internal_cellref_warning_set_pair_size();
  for (const auto& msg : this->_impl_.cellref_warning_set_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportWarningSetByCellRefArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImportWarningSetByCellRefArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportWarningSetByCellRefArchive::GetClassData() const { return &_class_data_; }


void ImportWarningSetByCellRefArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImportWarningSetByCellRefArchive*>(&to_msg);
  auto& from = static_cast<const ImportWarningSetByCellRefArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ImportWarningSetByCellRefArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cellref_warning_set_pair_.MergeFrom(from._impl_.cellref_warning_set_pair_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportWarningSetByCellRefArchive::CopyFrom(const ImportWarningSetByCellRefArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ImportWarningSetByCellRefArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportWarningSetByCellRefArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cellref_warning_set_pair_))
    return false;
  return true;
}

void ImportWarningSetByCellRefArchive::InternalSwap(ImportWarningSetByCellRefArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cellref_warning_set_pair_.InternalSwap(&other->_impl_.cellref_warning_set_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportWarningSetByCellRefArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[17]);
}

// ===================================================================

class TableDataList_ListEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TableDataList_ListEntry>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_refcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& reference(const TableDataList_ListEntry* msg);
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulaArchive& formula(const TableDataList_ListEntry* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::FormatStructArchive& format(const TableDataList_ListEntry* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSK::CustomFormatArchive& custom_format(const TableDataList_ListEntry* msg);
  static void set_has_custom_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& rich_text_payload(const TableDataList_ListEntry* msg);
  static void set_has_rich_text_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& comment_storage(const TableDataList_ListEntry* msg);
  static void set_has_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::ImportWarningSetArchive& import_warning_set(const TableDataList_ListEntry* msg);
  static void set_has_import_warning_set(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TST::CellSpecArchive& cell_spec(const TableDataList_ListEntry* msg);
  static void set_has_cell_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000600) ^ 0x00000600) != 0;
  }
};

const ::TSP::Reference&
TableDataList_ListEntry::_Internal::reference(const TableDataList_ListEntry* msg) {
  return *msg->_impl_.reference_;
}
const ::TSCE::FormulaArchive&
TableDataList_ListEntry::_Internal::formula(const TableDataList_ListEntry* msg) {
  return *msg->_impl_.formula_;
}
const ::TSK::FormatStructArchive&
TableDataList_ListEntry::_Internal::format(const TableDataList_ListEntry* msg) {
  return *msg->_impl_.format_;
}
const ::TSK::CustomFormatArchive&
TableDataList_ListEntry::_Internal::custom_format(const TableDataList_ListEntry* msg) {
  return *msg->_impl_.custom_format_;
}
const ::TSP::Reference&
TableDataList_ListEntry::_Internal::rich_text_payload(const TableDataList_ListEntry* msg) {
  return *msg->_impl_.rich_text_payload_;
}
const ::TSP::Reference&
TableDataList_ListEntry::_Internal::comment_storage(const TableDataList_ListEntry* msg) {
  return *msg->_impl_.comment_storage_;
}
const ::TST::ImportWarningSetArchive&
TableDataList_ListEntry::_Internal::import_warning_set(const TableDataList_ListEntry* msg) {
  return *msg->_impl_.import_warning_set_;
}
const ::TST::CellSpecArchive&
TableDataList_ListEntry::_Internal::cell_spec(const TableDataList_ListEntry* msg) {
  return *msg->_impl_.cell_spec_;
}
void TableDataList_ListEntry::clear_reference() {
  if (_impl_.reference_ != nullptr) _impl_.reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TableDataList_ListEntry::clear_formula() {
  if (_impl_.formula_ != nullptr) _impl_.formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TableDataList_ListEntry::clear_format() {
  if (_impl_.format_ != nullptr) _impl_.format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TableDataList_ListEntry::clear_custom_format() {
  if (_impl_.custom_format_ != nullptr) _impl_.custom_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void TableDataList_ListEntry::clear_rich_text_payload() {
  if (_impl_.rich_text_payload_ != nullptr) _impl_.rich_text_payload_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void TableDataList_ListEntry::clear_comment_storage() {
  if (_impl_.comment_storage_ != nullptr) _impl_.comment_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
TableDataList_ListEntry::TableDataList_ListEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableDataList.ListEntry)
}
TableDataList_ListEntry::TableDataList_ListEntry(const TableDataList_ListEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableDataList_ListEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_){}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.custom_format_){nullptr}
    , decltype(_impl_.rich_text_payload_){nullptr}
    , decltype(_impl_.comment_storage_){nullptr}
    , decltype(_impl_.import_warning_set_){nullptr}
    , decltype(_impl_.cell_spec_){nullptr}
    , decltype(_impl_.key_){}
    , decltype(_impl_.refcount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string()) {
    _this->_impl_.string_.Set(from._internal_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_reference()) {
    _this->_impl_.reference_ = new ::TSP::Reference(*from._impl_.reference_);
  }
  if (from._internal_has_formula()) {
    _this->_impl_.formula_ = new ::TSCE::FormulaArchive(*from._impl_.formula_);
  }
  if (from._internal_has_format()) {
    _this->_impl_.format_ = new ::TSK::FormatStructArchive(*from._impl_.format_);
  }
  if (from._internal_has_custom_format()) {
    _this->_impl_.custom_format_ = new ::TSK::CustomFormatArchive(*from._impl_.custom_format_);
  }
  if (from._internal_has_rich_text_payload()) {
    _this->_impl_.rich_text_payload_ = new ::TSP::Reference(*from._impl_.rich_text_payload_);
  }
  if (from._internal_has_comment_storage()) {
    _this->_impl_.comment_storage_ = new ::TSP::Reference(*from._impl_.comment_storage_);
  }
  if (from._internal_has_import_warning_set()) {
    _this->_impl_.import_warning_set_ = new ::TST::ImportWarningSetArchive(*from._impl_.import_warning_set_);
  }
  if (from._internal_has_cell_spec()) {
    _this->_impl_.cell_spec_ = new ::TST::CellSpecArchive(*from._impl_.cell_spec_);
  }
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refcount_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.refcount_));
  // @@protoc_insertion_point(copy_constructor:TST.TableDataList.ListEntry)
}

inline void TableDataList_ListEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_){}
    , decltype(_impl_.reference_){nullptr}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.custom_format_){nullptr}
    , decltype(_impl_.rich_text_payload_){nullptr}
    , decltype(_impl_.comment_storage_){nullptr}
    , decltype(_impl_.import_warning_set_){nullptr}
    , decltype(_impl_.cell_spec_){nullptr}
    , decltype(_impl_.key_){0u}
    , decltype(_impl_.refcount_){0u}
  };
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableDataList_ListEntry::~TableDataList_ListEntry() {
  // @@protoc_insertion_point(destructor:TST.TableDataList.ListEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableDataList_ListEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.reference_;
  if (this != internal_default_instance()) delete _impl_.formula_;
  if (this != internal_default_instance()) delete _impl_.format_;
  if (this != internal_default_instance()) delete _impl_.custom_format_;
  if (this != internal_default_instance()) delete _impl_.rich_text_payload_;
  if (this != internal_default_instance()) delete _impl_.comment_storage_;
  if (this != internal_default_instance()) delete _impl_.import_warning_set_;
  if (this != internal_default_instance()) delete _impl_.cell_spec_;
}

void TableDataList_ListEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableDataList_ListEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableDataList.ListEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.reference_ != nullptr);
      _impl_.reference_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formula_ != nullptr);
      _impl_.formula_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.format_ != nullptr);
      _impl_.format_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.custom_format_ != nullptr);
      _impl_.custom_format_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.rich_text_payload_ != nullptr);
      _impl_.rich_text_payload_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.comment_storage_ != nullptr);
      _impl_.comment_storage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.import_warning_set_ != nullptr);
      _impl_.import_warning_set_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.cell_spec_ != nullptr);
    _impl_.cell_spec_->Clear();
  }
  if (cached_has_bits & 0x00000600u) {
    ::memset(&_impl_.key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.refcount_) -
        reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.refcount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableDataList_ListEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 refcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_refcount(&has_bits);
          _impl_.refcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.TableDataList.ListEntry.string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive formula = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CustomFormatArchive custom_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference rich_text_payload = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rich_text_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference comment_storage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ImportWarningSetArchive import_warning_set = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_warning_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellSpecArchive cell_spec = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableDataList_ListEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableDataList.ListEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 key = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // required uint32 refcount = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_refcount(), target);
  }

  // optional string string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableDataList.ListEntry.string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string(), target);
  }

  // optional .TSP.Reference reference = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::reference(this),
        _Internal::reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.FormulaArchive formula = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::formula(this),
        _Internal::formula(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive format = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::format(this),
        _Internal::format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CustomFormatArchive custom_format = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::custom_format(this),
        _Internal::custom_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference rich_text_payload = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::rich_text_payload(this),
        _Internal::rich_text_payload(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference comment_storage = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::comment_storage(this),
        _Internal::comment_storage(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ImportWarningSetArchive import_warning_set = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::import_warning_set(this),
        _Internal::import_warning_set(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellSpecArchive cell_spec = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::cell_spec(this),
        _Internal::cell_spec(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableDataList.ListEntry)
  return target;
}

size_t TableDataList_ListEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableDataList.ListEntry)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required uint32 key = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key());
  }

  if (_internal_has_refcount()) {
    // required uint32 refcount = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_refcount());
  }

  return total_size;
}
size_t TableDataList_ListEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableDataList.ListEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000600) ^ 0x00000600) == 0) {  // All required fields are present.
    // required uint32 key = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key());

    // required uint32 refcount = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_refcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
    }

    // optional .TSP.Reference reference = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_);
    }

    // optional .TSCE.FormulaArchive formula = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_);
    }

    // optional .TSK.FormatStructArchive format = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.format_);
    }

    // optional .TSK.CustomFormatArchive custom_format = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_format_);
    }

    // optional .TSP.Reference rich_text_payload = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rich_text_payload_);
    }

    // optional .TSP.Reference comment_storage = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.comment_storage_);
    }

    // optional .TST.ImportWarningSetArchive import_warning_set = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.import_warning_set_);
    }

  }
  // optional .TST.CellSpecArchive cell_spec = 12;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableDataList_ListEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableDataList_ListEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableDataList_ListEntry::GetClassData() const { return &_class_data_; }


void TableDataList_ListEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableDataList_ListEntry*>(&to_msg);
  auto& from = static_cast<const TableDataList_ListEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableDataList.ListEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_reference()->::TSP::Reference::MergeFrom(
          from._internal_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_formula());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_format());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_custom_format()->::TSK::CustomFormatArchive::MergeFrom(
          from._internal_custom_format());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_rich_text_payload()->::TSP::Reference::MergeFrom(
          from._internal_rich_text_payload());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_comment_storage()->::TSP::Reference::MergeFrom(
          from._internal_comment_storage());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_import_warning_set()->::TST::ImportWarningSetArchive::MergeFrom(
          from._internal_import_warning_set());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_cell_spec()->::TST::CellSpecArchive::MergeFrom(
          from._internal_cell_spec());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.refcount_ = from._impl_.refcount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableDataList_ListEntry::CopyFrom(const TableDataList_ListEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableDataList.ListEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataList_ListEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_reference()) {
    if (!_impl_.reference_->IsInitialized()) return false;
  }
  if (_internal_has_formula()) {
    if (!_impl_.formula_->IsInitialized()) return false;
  }
  if (_internal_has_format()) {
    if (!_impl_.format_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format()) {
    if (!_impl_.custom_format_->IsInitialized()) return false;
  }
  if (_internal_has_rich_text_payload()) {
    if (!_impl_.rich_text_payload_->IsInitialized()) return false;
  }
  if (_internal_has_comment_storage()) {
    if (!_impl_.comment_storage_->IsInitialized()) return false;
  }
  if (_internal_has_import_warning_set()) {
    if (!_impl_.import_warning_set_->IsInitialized()) return false;
  }
  if (_internal_has_cell_spec()) {
    if (!_impl_.cell_spec_->IsInitialized()) return false;
  }
  return true;
}

void TableDataList_ListEntry::InternalSwap(TableDataList_ListEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_, lhs_arena,
      &other->_impl_.string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableDataList_ListEntry, _impl_.refcount_)
      + sizeof(TableDataList_ListEntry::_impl_.refcount_)
      - PROTOBUF_FIELD_OFFSET(TableDataList_ListEntry, _impl_.reference_)>(
          reinterpret_cast<char*>(&_impl_.reference_),
          reinterpret_cast<char*>(&other->_impl_.reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableDataList_ListEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[18]);
}

// ===================================================================

class TableDataList::_Internal {
 public:
  using HasBits = decltype(std::declval<TableDataList>()._impl_._has_bits_);
  static void set_has_listtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nextlistid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_new_for_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

void TableDataList::clear_segments() {
  _impl_.segments_.Clear();
}
TableDataList::TableDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableDataList)
}
TableDataList::TableDataList(const TableDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableDataList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.segments_){from._impl_.segments_}
    , decltype(_impl_.nextlistid_){}
    , decltype(_impl_.is_new_for_bnc_){}
    , decltype(_impl_.listtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.nextlistid_, &from._impl_.nextlistid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.listtype_) -
    reinterpret_cast<char*>(&_impl_.nextlistid_)) + sizeof(_impl_.listtype_));
  // @@protoc_insertion_point(copy_constructor:TST.TableDataList)
}

inline void TableDataList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.segments_){arena}
    , decltype(_impl_.nextlistid_){0u}
    , decltype(_impl_.is_new_for_bnc_){false}
    , decltype(_impl_.listtype_){1}
  };
}

TableDataList::~TableDataList() {
  // @@protoc_insertion_point(destructor:TST.TableDataList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  _impl_.segments_.~RepeatedPtrField();
}

void TableDataList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableDataList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.segments_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.nextlistid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_new_for_bnc_) -
        reinterpret_cast<char*>(&_impl_.nextlistid_)) + sizeof(_impl_.is_new_for_bnc_));
    _impl_.listtype_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableDataList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableDataList.ListType listType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDataList_ListType_IsValid(val))) {
            _internal_set_listtype(static_cast<::TST::TableDataList_ListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 nextListID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_nextlistid(&has_bits);
          _impl_.nextlistid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.TableDataList.ListEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference segments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_new_for_bnc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_new_for_bnc(&has_bits);
          _impl_.is_new_for_bnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableDataList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableDataList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableDataList.ListType listType = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_listtype(), target);
  }

  // required uint32 nextListID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nextlistid(), target);
  }

  // repeated .TST.TableDataList.ListEntry entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference segments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_new_for_bnc = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_new_for_bnc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableDataList)
  return target;
}

size_t TableDataList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableDataList)
  size_t total_size = 0;

  if (_internal_has_nextlistid()) {
    // required uint32 nextListID = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nextlistid());
  }

  if (_internal_has_listtype()) {
    // required .TST.TableDataList.ListType listType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_listtype());
  }

  return total_size;
}
size_t TableDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableDataList)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required uint32 nextListID = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nextlistid());

    // required .TST.TableDataList.ListType listType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_listtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableDataList.ListEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference segments = 4;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->_impl_.segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_new_for_bnc = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableDataList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableDataList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableDataList::GetClassData() const { return &_class_data_; }


void TableDataList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableDataList*>(&to_msg);
  auto& from = static_cast<const TableDataList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableDataList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_impl_.segments_.MergeFrom(from._impl_.segments_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nextlistid_ = from._impl_.nextlistid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_new_for_bnc_ = from._impl_.is_new_for_bnc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.listtype_ = from._impl_.listtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableDataList::CopyFrom(const TableDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.segments_))
    return false;
  return true;
}

void TableDataList::InternalSwap(TableDataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableDataList, _impl_.is_new_for_bnc_)
      + sizeof(TableDataList::_impl_.is_new_for_bnc_)
      - PROTOBUF_FIELD_OFFSET(TableDataList, _impl_.nextlistid_)>(
          reinterpret_cast<char*>(&_impl_.nextlistid_),
          reinterpret_cast<char*>(&other->_impl_.nextlistid_));
  swap(_impl_.listtype_, other->_impl_.listtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableDataList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[19]);
}

// ===================================================================

class TableDataListSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<TableDataListSegment>()._impl_._has_bits_);
  static void set_has_list_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Range& key_range(const TableDataListSegment* msg);
  static void set_has_key_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Range&
TableDataListSegment::_Internal::key_range(const TableDataListSegment* msg) {
  return *msg->_impl_.key_range_;
}
void TableDataListSegment::clear_key_range() {
  if (_impl_.key_range_ != nullptr) _impl_.key_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TableDataListSegment::TableDataListSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableDataListSegment)
}
TableDataListSegment::TableDataListSegment(const TableDataListSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableDataListSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.key_range_){nullptr}
    , decltype(_impl_.list_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key_range()) {
    _this->_impl_.key_range_ = new ::TSP::Range(*from._impl_.key_range_);
  }
  _this->_impl_.list_type_ = from._impl_.list_type_;
  // @@protoc_insertion_point(copy_constructor:TST.TableDataListSegment)
}

inline void TableDataListSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.key_range_){nullptr}
    , decltype(_impl_.list_type_){1}
  };
}

TableDataListSegment::~TableDataListSegment() {
  // @@protoc_insertion_point(destructor:TST.TableDataListSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableDataListSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.key_range_;
}

void TableDataListSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableDataListSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableDataListSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.key_range_ != nullptr);
      _impl_.key_range_->Clear();
    }
    _impl_.list_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableDataListSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableDataList.ListType list_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDataList_ListType_IsValid(val))) {
            _internal_set_list_type(static_cast<::TST::TableDataList_ListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Range key_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.TableDataList.ListEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableDataListSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableDataListSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableDataList.ListType list_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_list_type(), target);
  }

  // required .TSP.Range key_range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::key_range(this),
        _Internal::key_range(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.TableDataList.ListEntry entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableDataListSegment)
  return target;
}

size_t TableDataListSegment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableDataListSegment)
  size_t total_size = 0;

  if (_internal_has_key_range()) {
    // required .TSP.Range key_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_range_);
  }

  if (_internal_has_list_type()) {
    // required .TST.TableDataList.ListType list_type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_list_type());
  }

  return total_size;
}
size_t TableDataListSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableDataListSegment)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Range key_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_range_);

    // required .TST.TableDataList.ListType list_type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_list_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableDataList.ListEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableDataListSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableDataListSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableDataListSegment::GetClassData() const { return &_class_data_; }


void TableDataListSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableDataListSegment*>(&to_msg);
  auto& from = static_cast<const TableDataListSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableDataListSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_key_range()->::TSP::Range::MergeFrom(
          from._internal_key_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.list_type_ = from._impl_.list_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableDataListSegment::CopyFrom(const TableDataListSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableDataListSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDataListSegment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  if (_internal_has_key_range()) {
    if (!_impl_.key_range_->IsInitialized()) return false;
  }
  return true;
}

void TableDataListSegment::InternalSwap(TableDataListSegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  swap(_impl_.key_range_, other->_impl_.key_range_);
  swap(_impl_.list_type_, other->_impl_.list_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableDataListSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[20]);
}

// ===================================================================

class TableRBTree_Node::_Internal {
 public:
  using HasBits = decltype(std::declval<TableRBTree_Node>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TableRBTree_Node::TableRBTree_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableRBTree.Node)
}
TableRBTree_Node::TableRBTree_Node(const TableRBTree_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableRBTree_Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:TST.TableRBTree.Node)
}

inline void TableRBTree_Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){0u}
    , decltype(_impl_.value_){0u}
  };
}

TableRBTree_Node::~TableRBTree_Node() {
  // @@protoc_insertion_point(destructor:TST.TableRBTree.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableRBTree_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableRBTree_Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableRBTree_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableRBTree.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableRBTree_Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableRBTree_Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableRBTree.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // required uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableRBTree.Node)
  return target;
}

size_t TableRBTree_Node::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableRBTree.Node)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required uint32 key = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key());
  }

  if (_internal_has_value()) {
    // required uint32 value = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return total_size;
}
size_t TableRBTree_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableRBTree.Node)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 key = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key());

    // required uint32 value = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableRBTree_Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableRBTree_Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableRBTree_Node::GetClassData() const { return &_class_data_; }


void TableRBTree_Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableRBTree_Node*>(&to_msg);
  auto& from = static_cast<const TableRBTree_Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableRBTree.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableRBTree_Node::CopyFrom(const TableRBTree_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableRBTree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRBTree_Node::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TableRBTree_Node::InternalSwap(TableRBTree_Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableRBTree_Node, _impl_.value_)
      + sizeof(TableRBTree_Node::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(TableRBTree_Node, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableRBTree_Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[21]);
}

// ===================================================================

class TableRBTree::_Internal {
 public:
};

TableRBTree::TableRBTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableRBTree)
}
TableRBTree::TableRBTree(const TableRBTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableRBTree* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.TableRBTree)
}

inline void TableRBTree::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TableRBTree::~TableRBTree() {
  // @@protoc_insertion_point(destructor:TST.TableRBTree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableRBTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
}

void TableRBTree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableRBTree::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableRBTree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableRBTree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.TableRBTree.Node nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableRBTree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableRBTree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.TableRBTree.Node nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableRBTree)
  return target;
}

size_t TableRBTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableRBTree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableRBTree.Node nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableRBTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableRBTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableRBTree::GetClassData() const { return &_class_data_; }


void TableRBTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableRBTree*>(&to_msg);
  auto& from = static_cast<const TableRBTree&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableRBTree)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableRBTree::CopyFrom(const TableRBTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableRBTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableRBTree::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.nodes_))
    return false;
  return true;
}

void TableRBTree::InternalSwap(TableRBTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableRBTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[22]);
}

// ===================================================================

class HeaderStorageBucket_Header::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderStorageBucket_Header>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hidingstate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_numberofcells(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& cell_style(const HeaderStorageBucket_Header* msg);
  static void set_has_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& text_style(const HeaderStorageBucket_Header* msg);
  static void set_has_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003c) ^ 0x0000003c) != 0;
  }
};

const ::TSP::Reference&
HeaderStorageBucket_Header::_Internal::cell_style(const HeaderStorageBucket_Header* msg) {
  return *msg->_impl_.cell_style_;
}
const ::TSP::Reference&
HeaderStorageBucket_Header::_Internal::text_style(const HeaderStorageBucket_Header* msg) {
  return *msg->_impl_.text_style_;
}
void HeaderStorageBucket_Header::clear_cell_style() {
  if (_impl_.cell_style_ != nullptr) _impl_.cell_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HeaderStorageBucket_Header::clear_text_style() {
  if (_impl_.text_style_ != nullptr) _impl_.text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
HeaderStorageBucket_Header::HeaderStorageBucket_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HeaderStorageBucket.Header)
}
HeaderStorageBucket_Header::HeaderStorageBucket_Header(const HeaderStorageBucket_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderStorageBucket_Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.hidingstate_){}
    , decltype(_impl_.numberofcells_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_style()) {
    _this->_impl_.cell_style_ = new ::TSP::Reference(*from._impl_.cell_style_);
  }
  if (from._internal_has_text_style()) {
    _this->_impl_.text_style_ = new ::TSP::Reference(*from._impl_.text_style_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numberofcells_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.numberofcells_));
  // @@protoc_insertion_point(copy_constructor:TST.HeaderStorageBucket.Header)
}

inline void HeaderStorageBucket_Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.size_){0}
    , decltype(_impl_.hidingstate_){0u}
    , decltype(_impl_.numberofcells_){0u}
  };
}

HeaderStorageBucket_Header::~HeaderStorageBucket_Header() {
  // @@protoc_insertion_point(destructor:TST.HeaderStorageBucket.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderStorageBucket_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_style_;
  if (this != internal_default_instance()) delete _impl_.text_style_;
}

void HeaderStorageBucket_Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderStorageBucket_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderStorageBucket.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_style_ != nullptr);
      _impl_.cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.text_style_ != nullptr);
      _impl_.text_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numberofcells_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.numberofcells_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderStorageBucket_Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required uint32 hidingState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hidingstate(&has_bits);
          _impl_.hidingstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 numberOfCells = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_numberofcells(&has_bits);
          _impl_.numberofcells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference text_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeaderStorageBucket_Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderStorageBucket.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // required float size = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_size(), target);
  }

  // required uint32 hidingState = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hidingstate(), target);
  }

  // required uint32 numberOfCells = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_numberofcells(), target);
  }

  // optional .TSP.Reference cell_style = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cell_style(this),
        _Internal::cell_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference text_style = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::text_style(this),
        _Internal::text_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderStorageBucket.Header)
  return target;
}

size_t HeaderStorageBucket_Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HeaderStorageBucket.Header)
  size_t total_size = 0;

  if (_internal_has_index()) {
    // required uint32 index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  if (_internal_has_size()) {
    // required float size = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_hidingstate()) {
    // required uint32 hidingState = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hidingstate());
  }

  if (_internal_has_numberofcells()) {
    // required uint32 numberOfCells = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numberofcells());
  }

  return total_size;
}
size_t HeaderStorageBucket_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderStorageBucket.Header)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003c) ^ 0x0000003c) == 0) {  // All required fields are present.
    // required uint32 index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

    // required float size = 2;
    total_size += 1 + 4;

    // required uint32 hidingState = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hidingstate());

    // required uint32 numberOfCells = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numberofcells());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference cell_style = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_style_);
    }

    // optional .TSP.Reference text_style = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.text_style_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderStorageBucket_Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderStorageBucket_Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderStorageBucket_Header::GetClassData() const { return &_class_data_; }


void HeaderStorageBucket_Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderStorageBucket_Header*>(&to_msg);
  auto& from = static_cast<const HeaderStorageBucket_Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderStorageBucket.Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_style()->::TSP::Reference::MergeFrom(
          from._internal_cell_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_text_style()->::TSP::Reference::MergeFrom(
          from._internal_text_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.hidingstate_ = from._impl_.hidingstate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.numberofcells_ = from._impl_.numberofcells_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderStorageBucket_Header::CopyFrom(const HeaderStorageBucket_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderStorageBucket.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderStorageBucket_Header::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_style()) {
    if (!_impl_.cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_text_style()) {
    if (!_impl_.text_style_->IsInitialized()) return false;
  }
  return true;
}

void HeaderStorageBucket_Header::InternalSwap(HeaderStorageBucket_Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderStorageBucket_Header, _impl_.numberofcells_)
      + sizeof(HeaderStorageBucket_Header::_impl_.numberofcells_)
      - PROTOBUF_FIELD_OFFSET(HeaderStorageBucket_Header, _impl_.cell_style_)>(
          reinterpret_cast<char*>(&_impl_.cell_style_),
          reinterpret_cast<char*>(&other->_impl_.cell_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderStorageBucket_Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[23]);
}

// ===================================================================

class HeaderStorageBucket::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderStorageBucket>()._impl_._has_bits_);
  static void set_has_buckethashfunction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

HeaderStorageBucket::HeaderStorageBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HeaderStorageBucket)
}
HeaderStorageBucket::HeaderStorageBucket(const HeaderStorageBucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderStorageBucket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headers_){from._impl_.headers_}
    , decltype(_impl_.buckethashfunction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.buckethashfunction_ = from._impl_.buckethashfunction_;
  // @@protoc_insertion_point(copy_constructor:TST.HeaderStorageBucket)
}

inline void HeaderStorageBucket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.headers_){arena}
    , decltype(_impl_.buckethashfunction_){0u}
  };
}

HeaderStorageBucket::~HeaderStorageBucket() {
  // @@protoc_insertion_point(destructor:TST.HeaderStorageBucket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderStorageBucket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headers_.~RepeatedPtrField();
}

void HeaderStorageBucket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderStorageBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderStorageBucket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _impl_.buckethashfunction_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderStorageBucket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 bucketHashFunction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buckethashfunction(&has_bits);
          _impl_.buckethashfunction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.HeaderStorageBucket.Header headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeaderStorageBucket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderStorageBucket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 bucketHashFunction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_buckethashfunction(), target);
  }

  // repeated .TST.HeaderStorageBucket.Header headers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_headers_size()); i < n; i++) {
    const auto& repfield = this->_internal_headers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderStorageBucket)
  return target;
}

size_t HeaderStorageBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderStorageBucket)
  size_t total_size = 0;

  // required uint32 bucketHashFunction = 1;
  if (_internal_has_buckethashfunction()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buckethashfunction());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HeaderStorageBucket.Header headers = 2;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->_impl_.headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderStorageBucket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderStorageBucket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderStorageBucket::GetClassData() const { return &_class_data_; }


void HeaderStorageBucket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderStorageBucket*>(&to_msg);
  auto& from = static_cast<const HeaderStorageBucket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderStorageBucket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  if (from._internal_has_buckethashfunction()) {
    _this->_internal_set_buckethashfunction(from._internal_buckethashfunction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderStorageBucket::CopyFrom(const HeaderStorageBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderStorageBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderStorageBucket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.headers_))
    return false;
  return true;
}

void HeaderStorageBucket::InternalSwap(HeaderStorageBucket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  swap(_impl_.buckethashfunction_, other->_impl_.buckethashfunction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderStorageBucket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[24]);
}

// ===================================================================

class HeaderStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderStorage>()._impl_._has_bits_);
  static void set_has_buckethashfunction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void HeaderStorage::clear_buckets() {
  _impl_.buckets_.Clear();
}
HeaderStorage::HeaderStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HeaderStorage)
}
HeaderStorage::HeaderStorage(const HeaderStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderStorage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buckets_){from._impl_.buckets_}
    , decltype(_impl_.buckethashfunction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.buckethashfunction_ = from._impl_.buckethashfunction_;
  // @@protoc_insertion_point(copy_constructor:TST.HeaderStorage)
}

inline void HeaderStorage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buckets_){arena}
    , decltype(_impl_.buckethashfunction_){0u}
  };
}

HeaderStorage::~HeaderStorage() {
  // @@protoc_insertion_point(destructor:TST.HeaderStorage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buckets_.~RepeatedPtrField();
}

void HeaderStorage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderStorage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buckets_.Clear();
  _impl_.buckethashfunction_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderStorage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 bucketHashFunction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_buckethashfunction(&has_bits);
          _impl_.buckethashfunction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference buckets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeaderStorage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderStorage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 bucketHashFunction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_buckethashfunction(), target);
  }

  // repeated .TSP.Reference buckets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buckets_size()); i < n; i++) {
    const auto& repfield = this->_internal_buckets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderStorage)
  return target;
}

size_t HeaderStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderStorage)
  size_t total_size = 0;

  // required uint32 bucketHashFunction = 1;
  if (_internal_has_buckethashfunction()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buckethashfunction());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference buckets = 2;
  total_size += 1UL * this->_internal_buckets_size();
  for (const auto& msg : this->_impl_.buckets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderStorage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderStorage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderStorage::GetClassData() const { return &_class_data_; }


void HeaderStorage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderStorage*>(&to_msg);
  auto& from = static_cast<const HeaderStorage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderStorage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buckets_.MergeFrom(from._impl_.buckets_);
  if (from._internal_has_buckethashfunction()) {
    _this->_internal_set_buckethashfunction(from._internal_buckethashfunction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderStorage::CopyFrom(const HeaderStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderStorage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buckets_))
    return false;
  return true;
}

void HeaderStorage::InternalSwap(HeaderStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.buckets_.InternalSwap(&other->_impl_.buckets_);
  swap(_impl_.buckethashfunction_, other->_impl_.buckethashfunction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderStorage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[25]);
}

// ===================================================================

class DataStore::_Internal {
 public:
  using HasBits = decltype(std::declval<DataStore>()._impl_._has_bits_);
  static const ::TST::HeaderStorage& rowheaders(const DataStore* msg);
  static void set_has_rowheaders(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& columnheaders(const DataStore* msg);
  static void set_has_columnheaders(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TileStorage& tiles(const DataStore* msg);
  static void set_has_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& stringtable(const DataStore* msg);
  static void set_has_stringtable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& styletable(const DataStore* msg);
  static void set_has_styletable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& formula_table(const DataStore* msg);
  static void set_has_formula_table(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& formulaerrortable(const DataStore* msg);
  static void set_has_formulaerrortable(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& format_table_pre_bnc(const DataStore* msg);
  static void set_has_format_table_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& multiplechoicelistformattable(const DataStore* msg);
  static void set_has_multiplechoicelistformattable(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& merge_region_map(const DataStore* msg);
  static void set_has_merge_region_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& deprecated_custom_format_table(const DataStore* msg);
  static void set_has_deprecated_custom_format_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_nextrowstripid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_nextcolumnstripid(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TST::TableRBTree& rowtiletree(const DataStore* msg);
  static void set_has_rowtiletree(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::TableRBTree& columntiletree(const DataStore* msg);
  static void set_has_columntiletree(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_storage_version_pre_bnc(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::Reference& rich_text_table(const DataStore* msg);
  static void set_has_rich_text_table(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Reference& conditionalstyletable(const DataStore* msg);
  static void set_has_conditionalstyletable(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& commentstoragetable(const DataStore* msg);
  static void set_has_commentstoragetable(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& importwarningsettable(const DataStore* msg);
  static void set_has_importwarningsettable(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Reference& control_cell_spec_table(const DataStore* msg);
  static void set_has_control_cell_spec_table(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& format_table(const DataStore* msg);
  static void set_has_format_table(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x001801ff) ^ 0x001801ff) != 0;
  }
};

const ::TST::HeaderStorage&
DataStore::_Internal::rowheaders(const DataStore* msg) {
  return *msg->_impl_.rowheaders_;
}
const ::TSP::Reference&
DataStore::_Internal::columnheaders(const DataStore* msg) {
  return *msg->_impl_.columnheaders_;
}
const ::TST::TileStorage&
DataStore::_Internal::tiles(const DataStore* msg) {
  return *msg->_impl_.tiles_;
}
const ::TSP::Reference&
DataStore::_Internal::stringtable(const DataStore* msg) {
  return *msg->_impl_.stringtable_;
}
const ::TSP::Reference&
DataStore::_Internal::styletable(const DataStore* msg) {
  return *msg->_impl_.styletable_;
}
const ::TSP::Reference&
DataStore::_Internal::formula_table(const DataStore* msg) {
  return *msg->_impl_.formula_table_;
}
const ::TSP::Reference&
DataStore::_Internal::formulaerrortable(const DataStore* msg) {
  return *msg->_impl_.formulaerrortable_;
}
const ::TSP::Reference&
DataStore::_Internal::format_table_pre_bnc(const DataStore* msg) {
  return *msg->_impl_.format_table_pre_bnc_;
}
const ::TSP::Reference&
DataStore::_Internal::multiplechoicelistformattable(const DataStore* msg) {
  return *msg->_impl_.multiplechoicelistformattable_;
}
const ::TSP::Reference&
DataStore::_Internal::merge_region_map(const DataStore* msg) {
  return *msg->_impl_.merge_region_map_;
}
const ::TSP::Reference&
DataStore::_Internal::deprecated_custom_format_table(const DataStore* msg) {
  return *msg->_impl_.deprecated_custom_format_table_;
}
const ::TST::TableRBTree&
DataStore::_Internal::rowtiletree(const DataStore* msg) {
  return *msg->_impl_.rowtiletree_;
}
const ::TST::TableRBTree&
DataStore::_Internal::columntiletree(const DataStore* msg) {
  return *msg->_impl_.columntiletree_;
}
const ::TSP::Reference&
DataStore::_Internal::rich_text_table(const DataStore* msg) {
  return *msg->_impl_.rich_text_table_;
}
const ::TSP::Reference&
DataStore::_Internal::conditionalstyletable(const DataStore* msg) {
  return *msg->_impl_.conditionalstyletable_;
}
const ::TSP::Reference&
DataStore::_Internal::commentstoragetable(const DataStore* msg) {
  return *msg->_impl_.commentstoragetable_;
}
const ::TSP::Reference&
DataStore::_Internal::importwarningsettable(const DataStore* msg) {
  return *msg->_impl_.importwarningsettable_;
}
const ::TSP::Reference&
DataStore::_Internal::control_cell_spec_table(const DataStore* msg) {
  return *msg->_impl_.control_cell_spec_table_;
}
const ::TSP::Reference&
DataStore::_Internal::format_table(const DataStore* msg) {
  return *msg->_impl_.format_table_;
}
void DataStore::clear_columnheaders() {
  if (_impl_.columnheaders_ != nullptr) _impl_.columnheaders_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DataStore::clear_stringtable() {
  if (_impl_.stringtable_ != nullptr) _impl_.stringtable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void DataStore::clear_styletable() {
  if (_impl_.styletable_ != nullptr) _impl_.styletable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void DataStore::clear_formula_table() {
  if (_impl_.formula_table_ != nullptr) _impl_.formula_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void DataStore::clear_formulaerrortable() {
  if (_impl_.formulaerrortable_ != nullptr) _impl_.formulaerrortable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void DataStore::clear_format_table_pre_bnc() {
  if (_impl_.format_table_pre_bnc_ != nullptr) _impl_.format_table_pre_bnc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void DataStore::clear_multiplechoicelistformattable() {
  if (_impl_.multiplechoicelistformattable_ != nullptr) _impl_.multiplechoicelistformattable_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void DataStore::clear_merge_region_map() {
  if (_impl_.merge_region_map_ != nullptr) _impl_.merge_region_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void DataStore::clear_deprecated_custom_format_table() {
  if (_impl_.deprecated_custom_format_table_ != nullptr) _impl_.deprecated_custom_format_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void DataStore::clear_rich_text_table() {
  if (_impl_.rich_text_table_ != nullptr) _impl_.rich_text_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void DataStore::clear_conditionalstyletable() {
  if (_impl_.conditionalstyletable_ != nullptr) _impl_.conditionalstyletable_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void DataStore::clear_commentstoragetable() {
  if (_impl_.commentstoragetable_ != nullptr) _impl_.commentstoragetable_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void DataStore::clear_importwarningsettable() {
  if (_impl_.importwarningsettable_ != nullptr) _impl_.importwarningsettable_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void DataStore::clear_control_cell_spec_table() {
  if (_impl_.control_cell_spec_table_ != nullptr) _impl_.control_cell_spec_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void DataStore::clear_format_table() {
  if (_impl_.format_table_ != nullptr) _impl_.format_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
DataStore::DataStore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.DataStore)
}
DataStore::DataStore(const DataStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataStore* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rowheaders_){nullptr}
    , decltype(_impl_.columnheaders_){nullptr}
    , decltype(_impl_.tiles_){nullptr}
    , decltype(_impl_.stringtable_){nullptr}
    , decltype(_impl_.styletable_){nullptr}
    , decltype(_impl_.formula_table_){nullptr}
    , decltype(_impl_.rowtiletree_){nullptr}
    , decltype(_impl_.columntiletree_){nullptr}
    , decltype(_impl_.format_table_pre_bnc_){nullptr}
    , decltype(_impl_.formulaerrortable_){nullptr}
    , decltype(_impl_.merge_region_map_){nullptr}
    , decltype(_impl_.deprecated_custom_format_table_){nullptr}
    , decltype(_impl_.multiplechoicelistformattable_){nullptr}
    , decltype(_impl_.rich_text_table_){nullptr}
    , decltype(_impl_.conditionalstyletable_){nullptr}
    , decltype(_impl_.commentstoragetable_){nullptr}
    , decltype(_impl_.importwarningsettable_){nullptr}
    , decltype(_impl_.control_cell_spec_table_){nullptr}
    , decltype(_impl_.format_table_){nullptr}
    , decltype(_impl_.nextrowstripid_){}
    , decltype(_impl_.nextcolumnstripid_){}
    , decltype(_impl_.storage_version_pre_bnc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rowheaders()) {
    _this->_impl_.rowheaders_ = new ::TST::HeaderStorage(*from._impl_.rowheaders_);
  }
  if (from._internal_has_columnheaders()) {
    _this->_impl_.columnheaders_ = new ::TSP::Reference(*from._impl_.columnheaders_);
  }
  if (from._internal_has_tiles()) {
    _this->_impl_.tiles_ = new ::TST::TileStorage(*from._impl_.tiles_);
  }
  if (from._internal_has_stringtable()) {
    _this->_impl_.stringtable_ = new ::TSP::Reference(*from._impl_.stringtable_);
  }
  if (from._internal_has_styletable()) {
    _this->_impl_.styletable_ = new ::TSP::Reference(*from._impl_.styletable_);
  }
  if (from._internal_has_formula_table()) {
    _this->_impl_.formula_table_ = new ::TSP::Reference(*from._impl_.formula_table_);
  }
  if (from._internal_has_rowtiletree()) {
    _this->_impl_.rowtiletree_ = new ::TST::TableRBTree(*from._impl_.rowtiletree_);
  }
  if (from._internal_has_columntiletree()) {
    _this->_impl_.columntiletree_ = new ::TST::TableRBTree(*from._impl_.columntiletree_);
  }
  if (from._internal_has_format_table_pre_bnc()) {
    _this->_impl_.format_table_pre_bnc_ = new ::TSP::Reference(*from._impl_.format_table_pre_bnc_);
  }
  if (from._internal_has_formulaerrortable()) {
    _this->_impl_.formulaerrortable_ = new ::TSP::Reference(*from._impl_.formulaerrortable_);
  }
  if (from._internal_has_merge_region_map()) {
    _this->_impl_.merge_region_map_ = new ::TSP::Reference(*from._impl_.merge_region_map_);
  }
  if (from._internal_has_deprecated_custom_format_table()) {
    _this->_impl_.deprecated_custom_format_table_ = new ::TSP::Reference(*from._impl_.deprecated_custom_format_table_);
  }
  if (from._internal_has_multiplechoicelistformattable()) {
    _this->_impl_.multiplechoicelistformattable_ = new ::TSP::Reference(*from._impl_.multiplechoicelistformattable_);
  }
  if (from._internal_has_rich_text_table()) {
    _this->_impl_.rich_text_table_ = new ::TSP::Reference(*from._impl_.rich_text_table_);
  }
  if (from._internal_has_conditionalstyletable()) {
    _this->_impl_.conditionalstyletable_ = new ::TSP::Reference(*from._impl_.conditionalstyletable_);
  }
  if (from._internal_has_commentstoragetable()) {
    _this->_impl_.commentstoragetable_ = new ::TSP::Reference(*from._impl_.commentstoragetable_);
  }
  if (from._internal_has_importwarningsettable()) {
    _this->_impl_.importwarningsettable_ = new ::TSP::Reference(*from._impl_.importwarningsettable_);
  }
  if (from._internal_has_control_cell_spec_table()) {
    _this->_impl_.control_cell_spec_table_ = new ::TSP::Reference(*from._impl_.control_cell_spec_table_);
  }
  if (from._internal_has_format_table()) {
    _this->_impl_.format_table_ = new ::TSP::Reference(*from._impl_.format_table_);
  }
  ::memcpy(&_impl_.nextrowstripid_, &from._impl_.nextrowstripid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.storage_version_pre_bnc_) -
    reinterpret_cast<char*>(&_impl_.nextrowstripid_)) + sizeof(_impl_.storage_version_pre_bnc_));
  // @@protoc_insertion_point(copy_constructor:TST.DataStore)
}

inline void DataStore::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rowheaders_){nullptr}
    , decltype(_impl_.columnheaders_){nullptr}
    , decltype(_impl_.tiles_){nullptr}
    , decltype(_impl_.stringtable_){nullptr}
    , decltype(_impl_.styletable_){nullptr}
    , decltype(_impl_.formula_table_){nullptr}
    , decltype(_impl_.rowtiletree_){nullptr}
    , decltype(_impl_.columntiletree_){nullptr}
    , decltype(_impl_.format_table_pre_bnc_){nullptr}
    , decltype(_impl_.formulaerrortable_){nullptr}
    , decltype(_impl_.merge_region_map_){nullptr}
    , decltype(_impl_.deprecated_custom_format_table_){nullptr}
    , decltype(_impl_.multiplechoicelistformattable_){nullptr}
    , decltype(_impl_.rich_text_table_){nullptr}
    , decltype(_impl_.conditionalstyletable_){nullptr}
    , decltype(_impl_.commentstoragetable_){nullptr}
    , decltype(_impl_.importwarningsettable_){nullptr}
    , decltype(_impl_.control_cell_spec_table_){nullptr}
    , decltype(_impl_.format_table_){nullptr}
    , decltype(_impl_.nextrowstripid_){0u}
    , decltype(_impl_.nextcolumnstripid_){0u}
    , decltype(_impl_.storage_version_pre_bnc_){0u}
  };
}

DataStore::~DataStore() {
  // @@protoc_insertion_point(destructor:TST.DataStore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataStore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rowheaders_;
  if (this != internal_default_instance()) delete _impl_.columnheaders_;
  if (this != internal_default_instance()) delete _impl_.tiles_;
  if (this != internal_default_instance()) delete _impl_.stringtable_;
  if (this != internal_default_instance()) delete _impl_.styletable_;
  if (this != internal_default_instance()) delete _impl_.formula_table_;
  if (this != internal_default_instance()) delete _impl_.rowtiletree_;
  if (this != internal_default_instance()) delete _impl_.columntiletree_;
  if (this != internal_default_instance()) delete _impl_.format_table_pre_bnc_;
  if (this != internal_default_instance()) delete _impl_.formulaerrortable_;
  if (this != internal_default_instance()) delete _impl_.merge_region_map_;
  if (this != internal_default_instance()) delete _impl_.deprecated_custom_format_table_;
  if (this != internal_default_instance()) delete _impl_.multiplechoicelistformattable_;
  if (this != internal_default_instance()) delete _impl_.rich_text_table_;
  if (this != internal_default_instance()) delete _impl_.conditionalstyletable_;
  if (this != internal_default_instance()) delete _impl_.commentstoragetable_;
  if (this != internal_default_instance()) delete _impl_.importwarningsettable_;
  if (this != internal_default_instance()) delete _impl_.control_cell_spec_table_;
  if (this != internal_default_instance()) delete _impl_.format_table_;
}

void DataStore::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataStore::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DataStore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.rowheaders_ != nullptr);
      _impl_.rowheaders_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.columnheaders_ != nullptr);
      _impl_.columnheaders_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tiles_ != nullptr);
      _impl_.tiles_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.stringtable_ != nullptr);
      _impl_.stringtable_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.styletable_ != nullptr);
      _impl_.styletable_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.formula_table_ != nullptr);
      _impl_.formula_table_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.rowtiletree_ != nullptr);
      _impl_.rowtiletree_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.columntiletree_ != nullptr);
      _impl_.columntiletree_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.format_table_pre_bnc_ != nullptr);
      _impl_.format_table_pre_bnc_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.formulaerrortable_ != nullptr);
      _impl_.formulaerrortable_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.merge_region_map_ != nullptr);
      _impl_.merge_region_map_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.deprecated_custom_format_table_ != nullptr);
      _impl_.deprecated_custom_format_table_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.multiplechoicelistformattable_ != nullptr);
      _impl_.multiplechoicelistformattable_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.rich_text_table_ != nullptr);
      _impl_.rich_text_table_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.conditionalstyletable_ != nullptr);
      _impl_.conditionalstyletable_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.commentstoragetable_ != nullptr);
      _impl_.commentstoragetable_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.importwarningsettable_ != nullptr);
      _impl_.importwarningsettable_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.control_cell_spec_table_ != nullptr);
      _impl_.control_cell_spec_table_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.format_table_ != nullptr);
      _impl_.format_table_->Clear();
    }
  }
  if (cached_has_bits & 0x00380000u) {
    ::memset(&_impl_.nextrowstripid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.storage_version_pre_bnc_) -
        reinterpret_cast<char*>(&_impl_.nextrowstripid_)) + sizeof(_impl_.storage_version_pre_bnc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataStore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.HeaderStorage rowHeaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rowheaders(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference columnHeaders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_columnheaders(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TileStorage tiles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference stringTable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stringtable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference styleTable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_styletable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference formula_table = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 nextRowStripID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_nextrowstripid(&has_bits);
          _impl_.nextrowstripid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 nextColumnStripID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_nextcolumnstripid(&has_bits);
          _impl_.nextcolumnstripid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableRBTree rowTileTree = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rowtiletree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableRBTree columnTileTree = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_columntiletree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference format_table_pre_bnc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_table_pre_bnc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formulaErrorTable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulaerrortable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference merge_region_map = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_region_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 storage_version_pre_bnc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_storage_version_pre_bnc(&has_bits);
          _impl_.storage_version_pre_bnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_custom_format_table = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_custom_format_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference multipleChoiceListFormatTable = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiplechoicelistformattable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference rich_text_table = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rich_text_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference conditionalstyletable = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditionalstyletable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference commentStorageTable = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_commentstoragetable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference importWarningSetTable = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_importwarningsettable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference control_cell_spec_table = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_cell_spec_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference format_table = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataStore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DataStore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.HeaderStorage rowHeaders = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rowheaders(this),
        _Internal::rowheaders(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference columnHeaders = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::columnheaders(this),
        _Internal::columnheaders(this).GetCachedSize(), target, stream);
  }

  // required .TST.TileStorage tiles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tiles(this),
        _Internal::tiles(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference stringTable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::stringtable(this),
        _Internal::stringtable(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference styleTable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::styletable(this),
        _Internal::styletable(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference formula_table = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::formula_table(this),
        _Internal::formula_table(this).GetCachedSize(), target, stream);
  }

  // required uint32 nextRowStripID = 7;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_nextrowstripid(), target);
  }

  // required uint32 nextColumnStripID = 8;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_nextcolumnstripid(), target);
  }

  // required .TST.TableRBTree rowTileTree = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::rowtiletree(this),
        _Internal::rowtiletree(this).GetCachedSize(), target, stream);
  }

  // required .TST.TableRBTree columnTileTree = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::columntiletree(this),
        _Internal::columntiletree(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference format_table_pre_bnc = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::format_table_pre_bnc(this),
        _Internal::format_table_pre_bnc(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formulaErrorTable = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::formulaerrortable(this),
        _Internal::formulaerrortable(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference merge_region_map = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::merge_region_map(this),
        _Internal::merge_region_map(this).GetCachedSize(), target, stream);
  }

  // optional uint32 storage_version_pre_bnc = 14;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_storage_version_pre_bnc(), target);
  }

  // optional .TSP.Reference deprecated_custom_format_table = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::deprecated_custom_format_table(this),
        _Internal::deprecated_custom_format_table(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference multipleChoiceListFormatTable = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::multiplechoicelistformattable(this),
        _Internal::multiplechoicelistformattable(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference rich_text_table = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::rich_text_table(this),
        _Internal::rich_text_table(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference conditionalstyletable = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::conditionalstyletable(this),
        _Internal::conditionalstyletable(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference commentStorageTable = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::commentstoragetable(this),
        _Internal::commentstoragetable(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference importWarningSetTable = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::importwarningsettable(this),
        _Internal::importwarningsettable(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference control_cell_spec_table = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::control_cell_spec_table(this),
        _Internal::control_cell_spec_table(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference format_table = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::format_table(this),
        _Internal::format_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DataStore)
  return target;
}

size_t DataStore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DataStore)
  size_t total_size = 0;

  if (_internal_has_rowheaders()) {
    // required .TST.HeaderStorage rowHeaders = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rowheaders_);
  }

  if (_internal_has_columnheaders()) {
    // required .TSP.Reference columnHeaders = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.columnheaders_);
  }

  if (_internal_has_tiles()) {
    // required .TST.TileStorage tiles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tiles_);
  }

  if (_internal_has_stringtable()) {
    // required .TSP.Reference stringTable = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stringtable_);
  }

  if (_internal_has_styletable()) {
    // required .TSP.Reference styleTable = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.styletable_);
  }

  if (_internal_has_formula_table()) {
    // required .TSP.Reference formula_table = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_table_);
  }

  if (_internal_has_rowtiletree()) {
    // required .TST.TableRBTree rowTileTree = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rowtiletree_);
  }

  if (_internal_has_columntiletree()) {
    // required .TST.TableRBTree columnTileTree = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.columntiletree_);
  }

  if (_internal_has_format_table_pre_bnc()) {
    // required .TSP.Reference format_table_pre_bnc = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_table_pre_bnc_);
  }

  if (_internal_has_nextrowstripid()) {
    // required uint32 nextRowStripID = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nextrowstripid());
  }

  if (_internal_has_nextcolumnstripid()) {
    // required uint32 nextColumnStripID = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nextcolumnstripid());
  }

  return total_size;
}
size_t DataStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DataStore)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x001801ff) ^ 0x001801ff) == 0) {  // All required fields are present.
    // required .TST.HeaderStorage rowHeaders = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rowheaders_);

    // required .TSP.Reference columnHeaders = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.columnheaders_);

    // required .TST.TileStorage tiles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tiles_);

    // required .TSP.Reference stringTable = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stringtable_);

    // required .TSP.Reference styleTable = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.styletable_);

    // required .TSP.Reference formula_table = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_table_);

    // required .TST.TableRBTree rowTileTree = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rowtiletree_);

    // required .TST.TableRBTree columnTileTree = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.columntiletree_);

    // required .TSP.Reference format_table_pre_bnc = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_table_pre_bnc_);

    // required uint32 nextRowStripID = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nextrowstripid());

    // required uint32 nextColumnStripID = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nextcolumnstripid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000fe00u) {
    // optional .TSP.Reference formulaErrorTable = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formulaerrortable_);
    }

    // optional .TSP.Reference merge_region_map = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.merge_region_map_);
    }

    // optional .TSP.Reference deprecated_custom_format_table = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_custom_format_table_);
    }

    // optional .TSP.Reference multipleChoiceListFormatTable = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.multiplechoicelistformattable_);
    }

    // optional .TSP.Reference rich_text_table = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rich_text_table_);
    }

    // optional .TSP.Reference conditionalstyletable = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.conditionalstyletable_);
    }

    // optional .TSP.Reference commentStorageTable = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commentstoragetable_);
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional .TSP.Reference importWarningSetTable = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.importwarningsettable_);
    }

    // optional .TSP.Reference control_cell_spec_table = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_cell_spec_table_);
    }

    // optional .TSP.Reference format_table = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.format_table_);
    }

  }
  // optional uint32 storage_version_pre_bnc = 14;
  if (cached_has_bits & 0x00200000u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_version_pre_bnc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataStore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataStore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataStore::GetClassData() const { return &_class_data_; }


void DataStore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataStore*>(&to_msg);
  auto& from = static_cast<const DataStore&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.DataStore)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rowheaders()->::TST::HeaderStorage::MergeFrom(
          from._internal_rowheaders());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_columnheaders()->::TSP::Reference::MergeFrom(
          from._internal_columnheaders());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tiles()->::TST::TileStorage::MergeFrom(
          from._internal_tiles());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_stringtable()->::TSP::Reference::MergeFrom(
          from._internal_stringtable());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_styletable()->::TSP::Reference::MergeFrom(
          from._internal_styletable());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_formula_table()->::TSP::Reference::MergeFrom(
          from._internal_formula_table());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_rowtiletree()->::TST::TableRBTree::MergeFrom(
          from._internal_rowtiletree());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_columntiletree()->::TST::TableRBTree::MergeFrom(
          from._internal_columntiletree());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_format_table_pre_bnc()->::TSP::Reference::MergeFrom(
          from._internal_format_table_pre_bnc());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_formulaerrortable()->::TSP::Reference::MergeFrom(
          from._internal_formulaerrortable());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_merge_region_map()->::TSP::Reference::MergeFrom(
          from._internal_merge_region_map());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_deprecated_custom_format_table()->::TSP::Reference::MergeFrom(
          from._internal_deprecated_custom_format_table());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_multiplechoicelistformattable()->::TSP::Reference::MergeFrom(
          from._internal_multiplechoicelistformattable());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_rich_text_table()->::TSP::Reference::MergeFrom(
          from._internal_rich_text_table());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_conditionalstyletable()->::TSP::Reference::MergeFrom(
          from._internal_conditionalstyletable());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_commentstoragetable()->::TSP::Reference::MergeFrom(
          from._internal_commentstoragetable());
    }
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_importwarningsettable()->::TSP::Reference::MergeFrom(
          from._internal_importwarningsettable());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_control_cell_spec_table()->::TSP::Reference::MergeFrom(
          from._internal_control_cell_spec_table());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_format_table()->::TSP::Reference::MergeFrom(
          from._internal_format_table());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.nextrowstripid_ = from._impl_.nextrowstripid_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.nextcolumnstripid_ = from._impl_.nextcolumnstripid_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.storage_version_pre_bnc_ = from._impl_.storage_version_pre_bnc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataStore::CopyFrom(const DataStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DataStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStore::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_rowheaders()) {
    if (!_impl_.rowheaders_->IsInitialized()) return false;
  }
  if (_internal_has_columnheaders()) {
    if (!_impl_.columnheaders_->IsInitialized()) return false;
  }
  if (_internal_has_tiles()) {
    if (!_impl_.tiles_->IsInitialized()) return false;
  }
  if (_internal_has_stringtable()) {
    if (!_impl_.stringtable_->IsInitialized()) return false;
  }
  if (_internal_has_styletable()) {
    if (!_impl_.styletable_->IsInitialized()) return false;
  }
  if (_internal_has_formula_table()) {
    if (!_impl_.formula_table_->IsInitialized()) return false;
  }
  if (_internal_has_rowtiletree()) {
    if (!_impl_.rowtiletree_->IsInitialized()) return false;
  }
  if (_internal_has_columntiletree()) {
    if (!_impl_.columntiletree_->IsInitialized()) return false;
  }
  if (_internal_has_format_table_pre_bnc()) {
    if (!_impl_.format_table_pre_bnc_->IsInitialized()) return false;
  }
  if (_internal_has_formulaerrortable()) {
    if (!_impl_.formulaerrortable_->IsInitialized()) return false;
  }
  if (_internal_has_merge_region_map()) {
    if (!_impl_.merge_region_map_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_custom_format_table()) {
    if (!_impl_.deprecated_custom_format_table_->IsInitialized()) return false;
  }
  if (_internal_has_multiplechoicelistformattable()) {
    if (!_impl_.multiplechoicelistformattable_->IsInitialized()) return false;
  }
  if (_internal_has_rich_text_table()) {
    if (!_impl_.rich_text_table_->IsInitialized()) return false;
  }
  if (_internal_has_conditionalstyletable()) {
    if (!_impl_.conditionalstyletable_->IsInitialized()) return false;
  }
  if (_internal_has_commentstoragetable()) {
    if (!_impl_.commentstoragetable_->IsInitialized()) return false;
  }
  if (_internal_has_importwarningsettable()) {
    if (!_impl_.importwarningsettable_->IsInitialized()) return false;
  }
  if (_internal_has_control_cell_spec_table()) {
    if (!_impl_.control_cell_spec_table_->IsInitialized()) return false;
  }
  if (_internal_has_format_table()) {
    if (!_impl_.format_table_->IsInitialized()) return false;
  }
  return true;
}

void DataStore::InternalSwap(DataStore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStore, _impl_.storage_version_pre_bnc_)
      + sizeof(DataStore::_impl_.storage_version_pre_bnc_)
      - PROTOBUF_FIELD_OFFSET(DataStore, _impl_.rowheaders_)>(
          reinterpret_cast<char*>(&_impl_.rowheaders_),
          reinterpret_cast<char*>(&other->_impl_.rowheaders_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataStore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[26]);
}

// ===================================================================

class TableInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableInfoArchive>()._impl_._has_bits_);
  static const ::TSD::DrawableArchive& super(const TableInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tablemodel(const TableInfoArchive* msg);
  static void set_has_tablemodel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& editing_state(const TableInfoArchive* msg);
  static void set_has_editing_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& summary_model(const TableInfoArchive* msg);
  static void set_has_summary_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& category_order(const TableInfoArchive* msg);
  static void set_has_category_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& view_column_row_uids(const TableInfoArchive* msg);
  static void set_has_view_column_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& group_by_uuid(const TableInfoArchive* msg);
  static void set_has_group_by_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUID& hidden_states_uuid(const TableInfoArchive* msg);
  static void set_has_hidden_states_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_formula_coord_space_in_pre40(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_formula_coord_space(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCE::CoordMapperArchive& pasteboard_coord_mapper(const TableInfoArchive* msg);
  static void set_has_pasteboard_coord_mapper(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TST::LayoutEngineArchive& layout_engine(const TableInfoArchive* msg);
  static void set_has_layout_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& pivot_data_model(const TableInfoArchive* msg);
  static void set_has_pivot_data_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_a_pivot_table(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& pivot_order(const TableInfoArchive* msg);
  static void set_has_pivot_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::DrawableArchive&
TableInfoArchive::_Internal::super(const TableInfoArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::tablemodel(const TableInfoArchive* msg) {
  return *msg->_impl_.tablemodel_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::editing_state(const TableInfoArchive* msg) {
  return *msg->_impl_.editing_state_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::summary_model(const TableInfoArchive* msg) {
  return *msg->_impl_.summary_model_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::category_order(const TableInfoArchive* msg) {
  return *msg->_impl_.category_order_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::view_column_row_uids(const TableInfoArchive* msg) {
  return *msg->_impl_.view_column_row_uids_;
}
const ::TSP::UUID&
TableInfoArchive::_Internal::group_by_uuid(const TableInfoArchive* msg) {
  return *msg->_impl_.group_by_uuid_;
}
const ::TSP::UUID&
TableInfoArchive::_Internal::hidden_states_uuid(const TableInfoArchive* msg) {
  return *msg->_impl_.hidden_states_uuid_;
}
const ::TSCE::CoordMapperArchive&
TableInfoArchive::_Internal::pasteboard_coord_mapper(const TableInfoArchive* msg) {
  return *msg->_impl_.pasteboard_coord_mapper_;
}
const ::TST::LayoutEngineArchive&
TableInfoArchive::_Internal::layout_engine(const TableInfoArchive* msg) {
  return *msg->_impl_.layout_engine_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::pivot_data_model(const TableInfoArchive* msg) {
  return *msg->_impl_.pivot_data_model_;
}
const ::TSP::Reference&
TableInfoArchive::_Internal::pivot_order(const TableInfoArchive* msg) {
  return *msg->_impl_.pivot_order_;
}
void TableInfoArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TableInfoArchive::clear_tablemodel() {
  if (_impl_.tablemodel_ != nullptr) _impl_.tablemodel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TableInfoArchive::clear_editing_state() {
  if (_impl_.editing_state_ != nullptr) _impl_.editing_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TableInfoArchive::clear_summary_model() {
  if (_impl_.summary_model_ != nullptr) _impl_.summary_model_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TableInfoArchive::clear_category_order() {
  if (_impl_.category_order_ != nullptr) _impl_.category_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void TableInfoArchive::clear_view_column_row_uids() {
  if (_impl_.view_column_row_uids_ != nullptr) _impl_.view_column_row_uids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void TableInfoArchive::clear_group_by_uuid() {
  if (_impl_.group_by_uuid_ != nullptr) _impl_.group_by_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void TableInfoArchive::clear_hidden_states_uuid() {
  if (_impl_.hidden_states_uuid_ != nullptr) _impl_.hidden_states_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void TableInfoArchive::clear_pasteboard_coord_mapper() {
  if (_impl_.pasteboard_coord_mapper_ != nullptr) _impl_.pasteboard_coord_mapper_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void TableInfoArchive::clear_pivot_data_model() {
  if (_impl_.pivot_data_model_ != nullptr) _impl_.pivot_data_model_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void TableInfoArchive::clear_pivot_order() {
  if (_impl_.pivot_order_ != nullptr) _impl_.pivot_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
TableInfoArchive::TableInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableInfoArchive)
}
TableInfoArchive::TableInfoArchive(const TableInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tablemodel_){nullptr}
    , decltype(_impl_.editing_state_){nullptr}
    , decltype(_impl_.summary_model_){nullptr}
    , decltype(_impl_.category_order_){nullptr}
    , decltype(_impl_.view_column_row_uids_){nullptr}
    , decltype(_impl_.group_by_uuid_){nullptr}
    , decltype(_impl_.hidden_states_uuid_){nullptr}
    , decltype(_impl_.pasteboard_coord_mapper_){nullptr}
    , decltype(_impl_.layout_engine_){nullptr}
    , decltype(_impl_.pivot_data_model_){nullptr}
    , decltype(_impl_.pivot_order_){nullptr}
    , decltype(_impl_.formula_coord_space_in_pre40_){}
    , decltype(_impl_.formula_coord_space_){}
    , decltype(_impl_.is_a_pivot_table_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::DrawableArchive(*from._impl_.super_);
  }
  if (from._internal_has_tablemodel()) {
    _this->_impl_.tablemodel_ = new ::TSP::Reference(*from._impl_.tablemodel_);
  }
  if (from._internal_has_editing_state()) {
    _this->_impl_.editing_state_ = new ::TSP::Reference(*from._impl_.editing_state_);
  }
  if (from._internal_has_summary_model()) {
    _this->_impl_.summary_model_ = new ::TSP::Reference(*from._impl_.summary_model_);
  }
  if (from._internal_has_category_order()) {
    _this->_impl_.category_order_ = new ::TSP::Reference(*from._impl_.category_order_);
  }
  if (from._internal_has_view_column_row_uids()) {
    _this->_impl_.view_column_row_uids_ = new ::TSP::Reference(*from._impl_.view_column_row_uids_);
  }
  if (from._internal_has_group_by_uuid()) {
    _this->_impl_.group_by_uuid_ = new ::TSP::UUID(*from._impl_.group_by_uuid_);
  }
  if (from._internal_has_hidden_states_uuid()) {
    _this->_impl_.hidden_states_uuid_ = new ::TSP::UUID(*from._impl_.hidden_states_uuid_);
  }
  if (from._internal_has_pasteboard_coord_mapper()) {
    _this->_impl_.pasteboard_coord_mapper_ = new ::TSCE::CoordMapperArchive(*from._impl_.pasteboard_coord_mapper_);
  }
  if (from._internal_has_layout_engine()) {
    _this->_impl_.layout_engine_ = new ::TST::LayoutEngineArchive(*from._impl_.layout_engine_);
  }
  if (from._internal_has_pivot_data_model()) {
    _this->_impl_.pivot_data_model_ = new ::TSP::Reference(*from._impl_.pivot_data_model_);
  }
  if (from._internal_has_pivot_order()) {
    _this->_impl_.pivot_order_ = new ::TSP::Reference(*from._impl_.pivot_order_);
  }
  ::memcpy(&_impl_.formula_coord_space_in_pre40_, &from._impl_.formula_coord_space_in_pre40_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_a_pivot_table_) -
    reinterpret_cast<char*>(&_impl_.formula_coord_space_in_pre40_)) + sizeof(_impl_.is_a_pivot_table_));
  // @@protoc_insertion_point(copy_constructor:TST.TableInfoArchive)
}

inline void TableInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tablemodel_){nullptr}
    , decltype(_impl_.editing_state_){nullptr}
    , decltype(_impl_.summary_model_){nullptr}
    , decltype(_impl_.category_order_){nullptr}
    , decltype(_impl_.view_column_row_uids_){nullptr}
    , decltype(_impl_.group_by_uuid_){nullptr}
    , decltype(_impl_.hidden_states_uuid_){nullptr}
    , decltype(_impl_.pasteboard_coord_mapper_){nullptr}
    , decltype(_impl_.layout_engine_){nullptr}
    , decltype(_impl_.pivot_data_model_){nullptr}
    , decltype(_impl_.pivot_order_){nullptr}
    , decltype(_impl_.formula_coord_space_in_pre40_){0u}
    , decltype(_impl_.formula_coord_space_){0u}
    , decltype(_impl_.is_a_pivot_table_){false}
  };
}

TableInfoArchive::~TableInfoArchive() {
  // @@protoc_insertion_point(destructor:TST.TableInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tablemodel_;
  if (this != internal_default_instance()) delete _impl_.editing_state_;
  if (this != internal_default_instance()) delete _impl_.summary_model_;
  if (this != internal_default_instance()) delete _impl_.category_order_;
  if (this != internal_default_instance()) delete _impl_.view_column_row_uids_;
  if (this != internal_default_instance()) delete _impl_.group_by_uuid_;
  if (this != internal_default_instance()) delete _impl_.hidden_states_uuid_;
  if (this != internal_default_instance()) delete _impl_.pasteboard_coord_mapper_;
  if (this != internal_default_instance()) delete _impl_.layout_engine_;
  if (this != internal_default_instance()) delete _impl_.pivot_data_model_;
  if (this != internal_default_instance()) delete _impl_.pivot_order_;
}

void TableInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tablemodel_ != nullptr);
      _impl_.tablemodel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.editing_state_ != nullptr);
      _impl_.editing_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.summary_model_ != nullptr);
      _impl_.summary_model_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.category_order_ != nullptr);
      _impl_.category_order_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.view_column_row_uids_ != nullptr);
      _impl_.view_column_row_uids_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.group_by_uuid_ != nullptr);
      _impl_.group_by_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.hidden_states_uuid_ != nullptr);
      _impl_.hidden_states_uuid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.pasteboard_coord_mapper_ != nullptr);
      _impl_.pasteboard_coord_mapper_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.layout_engine_ != nullptr);
      _impl_.layout_engine_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.pivot_data_model_ != nullptr);
      _impl_.pivot_data_model_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.pivot_order_ != nullptr);
      _impl_.pivot_order_->Clear();
    }
  }
  if (cached_has_bits & 0x00007000u) {
    ::memset(&_impl_.formula_coord_space_in_pre40_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_a_pivot_table_) -
        reinterpret_cast<char*>(&_impl_.formula_coord_space_in_pre40_)) + sizeof(_impl_.is_a_pivot_table_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference tableModel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tablemodel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference editing_state = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference summary_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference view_column_row_uids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_column_row_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID group_by_uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID hidden_states_uuid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_states_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 formula_coord_space_in_pre40 = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_formula_coord_space_in_pre40(&has_bits);
          _impl_.formula_coord_space_in_pre40_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 formula_coord_space = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_formula_coord_space(&has_bits);
          _impl_.formula_coord_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CoordMapperArchive pasteboard_coord_mapper = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_pasteboard_coord_mapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.LayoutEngineArchive layout_engine = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout_engine(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pivot_data_model = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_data_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_a_pivot_table = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_a_pivot_table(&has_bits);
          _impl_.is_a_pivot_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pivot_order = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference tableModel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tablemodel(this),
        _Internal::tablemodel(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference editing_state = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::editing_state(this),
        _Internal::editing_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference summary_model = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::summary_model(this),
        _Internal::summary_model(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_order = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::category_order(this),
        _Internal::category_order(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference view_column_row_uids = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::view_column_row_uids(this),
        _Internal::view_column_row_uids(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID group_by_uuid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::group_by_uuid(this),
        _Internal::group_by_uuid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID hidden_states_uuid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::hidden_states_uuid(this),
        _Internal::hidden_states_uuid(this).GetCachedSize(), target, stream);
  }

  // optional uint32 formula_coord_space_in_pre40 = 9 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_formula_coord_space_in_pre40(), target);
  }

  // optional uint32 formula_coord_space = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_formula_coord_space(), target);
  }

  // optional .TSCE.CoordMapperArchive pasteboard_coord_mapper = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::pasteboard_coord_mapper(this),
        _Internal::pasteboard_coord_mapper(this).GetCachedSize(), target, stream);
  }

  // optional .TST.LayoutEngineArchive layout_engine = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::layout_engine(this),
        _Internal::layout_engine(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pivot_data_model = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::pivot_data_model(this),
        _Internal::pivot_data_model(this).GetCachedSize(), target, stream);
  }

  // optional bool is_a_pivot_table = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_a_pivot_table(), target);
  }

  // optional .TSP.Reference pivot_order = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::pivot_order(this),
        _Internal::pivot_order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableInfoArchive)
  return target;
}

size_t TableInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableInfoArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_tablemodel()) {
    // required .TSP.Reference tableModel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tablemodel_);
  }

  return total_size;
}
size_t TableInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference tableModel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tablemodel_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .TSP.Reference editing_state = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.editing_state_);
    }

    // optional .TSP.Reference summary_model = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.summary_model_);
    }

    // optional .TSP.Reference category_order = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_order_);
    }

    // optional .TSP.Reference view_column_row_uids = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.view_column_row_uids_);
    }

    // optional .TSP.UUID group_by_uuid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_by_uuid_);
    }

    // optional .TSP.UUID hidden_states_uuid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hidden_states_uuid_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .TSCE.CoordMapperArchive pasteboard_coord_mapper = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pasteboard_coord_mapper_);
    }

    // optional .TST.LayoutEngineArchive layout_engine = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.layout_engine_);
    }

    // optional .TSP.Reference pivot_data_model = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_data_model_);
    }

    // optional .TSP.Reference pivot_order = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_order_);
    }

    // optional uint32 formula_coord_space_in_pre40 = 9 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_coord_space_in_pre40());
    }

    // optional uint32 formula_coord_space = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_coord_space());
    }

    // optional bool is_a_pivot_table = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableInfoArchive::GetClassData() const { return &_class_data_; }


void TableInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableInfoArchive*>(&to_msg);
  auto& from = static_cast<const TableInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tablemodel()->::TSP::Reference::MergeFrom(
          from._internal_tablemodel());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_editing_state()->::TSP::Reference::MergeFrom(
          from._internal_editing_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_summary_model()->::TSP::Reference::MergeFrom(
          from._internal_summary_model());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_category_order()->::TSP::Reference::MergeFrom(
          from._internal_category_order());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_view_column_row_uids()->::TSP::Reference::MergeFrom(
          from._internal_view_column_row_uids());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_group_by_uuid()->::TSP::UUID::MergeFrom(
          from._internal_group_by_uuid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_hidden_states_uuid()->::TSP::UUID::MergeFrom(
          from._internal_hidden_states_uuid());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_pasteboard_coord_mapper()->::TSCE::CoordMapperArchive::MergeFrom(
          from._internal_pasteboard_coord_mapper());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_layout_engine()->::TST::LayoutEngineArchive::MergeFrom(
          from._internal_layout_engine());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_pivot_data_model()->::TSP::Reference::MergeFrom(
          from._internal_pivot_data_model());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_pivot_order()->::TSP::Reference::MergeFrom(
          from._internal_pivot_order());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.formula_coord_space_in_pre40_ = from._impl_.formula_coord_space_in_pre40_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.formula_coord_space_ = from._impl_.formula_coord_space_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_a_pivot_table_ = from._impl_.is_a_pivot_table_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableInfoArchive::CopyFrom(const TableInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tablemodel()) {
    if (!_impl_.tablemodel_->IsInitialized()) return false;
  }
  if (_internal_has_editing_state()) {
    if (!_impl_.editing_state_->IsInitialized()) return false;
  }
  if (_internal_has_summary_model()) {
    if (!_impl_.summary_model_->IsInitialized()) return false;
  }
  if (_internal_has_category_order()) {
    if (!_impl_.category_order_->IsInitialized()) return false;
  }
  if (_internal_has_view_column_row_uids()) {
    if (!_impl_.view_column_row_uids_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_uuid()) {
    if (!_impl_.group_by_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_states_uuid()) {
    if (!_impl_.hidden_states_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_pasteboard_coord_mapper()) {
    if (!_impl_.pasteboard_coord_mapper_->IsInitialized()) return false;
  }
  if (_internal_has_pivot_data_model()) {
    if (!_impl_.pivot_data_model_->IsInitialized()) return false;
  }
  if (_internal_has_pivot_order()) {
    if (!_impl_.pivot_order_->IsInitialized()) return false;
  }
  return true;
}

void TableInfoArchive::InternalSwap(TableInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableInfoArchive, _impl_.is_a_pivot_table_)
      + sizeof(TableInfoArchive::_impl_.is_a_pivot_table_)
      - PROTOBUF_FIELD_OFFSET(TableInfoArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[27]);
}

// ===================================================================

class CategoryInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryInfoArchive>()._impl_._has_bits_);
  static const ::TSD::DrawableArchive& super(const CategoryInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tablemodel(const CategoryInfoArchive* msg);
  static void set_has_tablemodel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::DrawableArchive&
CategoryInfoArchive::_Internal::super(const CategoryInfoArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CategoryInfoArchive::_Internal::tablemodel(const CategoryInfoArchive* msg) {
  return *msg->_impl_.tablemodel_;
}
void CategoryInfoArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CategoryInfoArchive::clear_tablemodel() {
  if (_impl_.tablemodel_ != nullptr) _impl_.tablemodel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CategoryInfoArchive::CategoryInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CategoryInfoArchive)
}
CategoryInfoArchive::CategoryInfoArchive(const CategoryInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tablemodel_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::DrawableArchive(*from._impl_.super_);
  }
  if (from._internal_has_tablemodel()) {
    _this->_impl_.tablemodel_ = new ::TSP::Reference(*from._impl_.tablemodel_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryInfoArchive)
}

inline void CategoryInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tablemodel_){nullptr}
  };
}

CategoryInfoArchive::~CategoryInfoArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tablemodel_;
}

void CategoryInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tablemodel_ != nullptr);
      _impl_.tablemodel_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference tableModel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tablemodel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference tableModel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tablemodel(this),
        _Internal::tablemodel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryInfoArchive)
  return target;
}

size_t CategoryInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CategoryInfoArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_tablemodel()) {
    // required .TSP.Reference tableModel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tablemodel_);
  }

  return total_size;
}
size_t CategoryInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference tableModel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tablemodel_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryInfoArchive::GetClassData() const { return &_class_data_; }


void CategoryInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryInfoArchive*>(&to_msg);
  auto& from = static_cast<const CategoryInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tablemodel()->::TSP::Reference::MergeFrom(
          from._internal_tablemodel());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryInfoArchive::CopyFrom(const CategoryInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tablemodel()) {
    if (!_impl_.tablemodel_->IsInitialized()) return false;
  }
  return true;
}

void CategoryInfoArchive::InternalSwap(CategoryInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryInfoArchive, _impl_.tablemodel_)
      + sizeof(CategoryInfoArchive::_impl_.tablemodel_)
      - PROTOBUF_FIELD_OFFSET(CategoryInfoArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[28]);
}

// ===================================================================

class WPTableInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<WPTableInfoArchive>()._impl_._has_bits_);
  static const ::TST::TableInfoArchive& super(const WPTableInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& storage(const WPTableInfoArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableInfoArchive&
WPTableInfoArchive::_Internal::super(const WPTableInfoArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
WPTableInfoArchive::_Internal::storage(const WPTableInfoArchive* msg) {
  return *msg->_impl_.storage_;
}
void WPTableInfoArchive::clear_storage() {
  if (_impl_.storage_ != nullptr) _impl_.storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
WPTableInfoArchive::WPTableInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.WPTableInfoArchive)
}
WPTableInfoArchive::WPTableInfoArchive(const WPTableInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WPTableInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.storage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableInfoArchive(*from._impl_.super_);
  }
  if (from._internal_has_storage()) {
    _this->_impl_.storage_ = new ::TSP::Reference(*from._impl_.storage_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.WPTableInfoArchive)
}

inline void WPTableInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.storage_){nullptr}
  };
}

WPTableInfoArchive::~WPTableInfoArchive() {
  // @@protoc_insertion_point(destructor:TST.WPTableInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WPTableInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.storage_;
}

void WPTableInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WPTableInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.WPTableInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.storage_ != nullptr);
      _impl_.storage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WPTableInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WPTableInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.WPTableInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::storage(this),
        _Internal::storage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.WPTableInfoArchive)
  return target;
}

size_t WPTableInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.WPTableInfoArchive)
  size_t total_size = 0;

  // required .TST.TableInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference storage = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WPTableInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WPTableInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WPTableInfoArchive::GetClassData() const { return &_class_data_; }


void WPTableInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WPTableInfoArchive*>(&to_msg);
  auto& from = static_cast<const WPTableInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.WPTableInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableInfoArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_storage()->::TSP::Reference::MergeFrom(
          from._internal_storage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WPTableInfoArchive::CopyFrom(const WPTableInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.WPTableInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPTableInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!_impl_.storage_->IsInitialized()) return false;
  }
  return true;
}

void WPTableInfoArchive::InternalSwap(WPTableInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WPTableInfoArchive, _impl_.storage_)
      + sizeof(WPTableInfoArchive::_impl_.storage_)
      - PROTOBUF_FIELD_OFFSET(WPTableInfoArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WPTableInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[29]);
}

// ===================================================================

class TableStyleNetworkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableStyleNetworkArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& body_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_body_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& header_row_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_header_row_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& header_column_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_header_column_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& footer_row_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_footer_row_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& body_cell_style(const TableStyleNetworkArchive* msg);
  static void set_has_body_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& header_row_style(const TableStyleNetworkArchive* msg);
  static void set_has_header_row_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& header_column_style(const TableStyleNetworkArchive* msg);
  static void set_has_header_column_style(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& footer_row_style(const TableStyleNetworkArchive* msg);
  static void set_has_footer_row_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& table_style(const TableStyleNetworkArchive* msg);
  static void set_has_table_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& table_name_style(const TableStyleNetworkArchive* msg);
  static void set_has_table_name_style(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& table_name_shape_style(const TableStyleNetworkArchive* msg);
  static void set_has_table_name_shape_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_preset_id(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSP::Reference& category_level_1_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_1_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& category_level_2_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_2_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& category_level_3_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_3_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Reference& category_level_4_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_4_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& category_level_5_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_5_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& category_level_1_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_1_style(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Reference& category_level_2_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_2_style(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& category_level_3_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_3_style(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::Reference& category_level_4_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_4_style(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Reference& category_level_5_style(const TableStyleNetworkArchive* msg);
  static void set_has_category_level_5_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::Reference& label_level_1_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_1_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::Reference& label_level_2_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_2_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSP::Reference& label_level_3_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_3_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Reference& label_level_4_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_4_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSP::Reference& label_level_5_text_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_5_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSP::Reference& label_level_1_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_1_style(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSP::Reference& label_level_2_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_2_style(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSP::Reference& label_level_3_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_3_style(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSP::Reference& label_level_4_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_4_style(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSP::Reference& label_level_5_style(const TableStyleNetworkArchive* msg);
  static void set_has_label_level_5_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSP::Reference& pivot_body_summary_row_style(const TableStyleNetworkArchive* msg);
  static void set_has_pivot_body_summary_row_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSP::Reference& pivot_body_summary_column_style(const TableStyleNetworkArchive* msg);
  static void set_has_pivot_body_summary_column_style(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSP::Reference& pivot_header_column_summary_style(const TableStyleNetworkArchive* msg);
  static void set_has_pivot_header_column_summary_style(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::body_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.body_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::header_row_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.header_row_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::header_column_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.header_column_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::footer_row_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.footer_row_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::body_cell_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.body_cell_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::header_row_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.header_row_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::header_column_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.header_column_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::footer_row_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.footer_row_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::table_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.table_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::table_name_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.table_name_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::table_name_shape_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.table_name_shape_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_1_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_1_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_2_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_2_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_3_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_3_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_4_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_4_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_5_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_5_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_1_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_1_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_2_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_2_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_3_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_3_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_4_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_4_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::category_level_5_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.category_level_5_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_1_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_1_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_2_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_2_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_3_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_3_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_4_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_4_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_5_text_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_5_text_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_1_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_1_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_2_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_2_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_3_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_3_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_4_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_4_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::label_level_5_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.label_level_5_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::pivot_body_summary_row_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.pivot_body_summary_row_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::pivot_body_summary_column_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.pivot_body_summary_column_style_;
}
const ::TSP::Reference&
TableStyleNetworkArchive::_Internal::pivot_header_column_summary_style(const TableStyleNetworkArchive* msg) {
  return *msg->_impl_.pivot_header_column_summary_style_;
}
void TableStyleNetworkArchive::clear_body_text_style() {
  if (_impl_.body_text_style_ != nullptr) _impl_.body_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TableStyleNetworkArchive::clear_header_row_text_style() {
  if (_impl_.header_row_text_style_ != nullptr) _impl_.header_row_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TableStyleNetworkArchive::clear_header_column_text_style() {
  if (_impl_.header_column_text_style_ != nullptr) _impl_.header_column_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TableStyleNetworkArchive::clear_footer_row_text_style() {
  if (_impl_.footer_row_text_style_ != nullptr) _impl_.footer_row_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TableStyleNetworkArchive::clear_body_cell_style() {
  if (_impl_.body_cell_style_ != nullptr) _impl_.body_cell_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void TableStyleNetworkArchive::clear_header_row_style() {
  if (_impl_.header_row_style_ != nullptr) _impl_.header_row_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void TableStyleNetworkArchive::clear_header_column_style() {
  if (_impl_.header_column_style_ != nullptr) _impl_.header_column_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void TableStyleNetworkArchive::clear_footer_row_style() {
  if (_impl_.footer_row_style_ != nullptr) _impl_.footer_row_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void TableStyleNetworkArchive::clear_table_style() {
  if (_impl_.table_style_ != nullptr) _impl_.table_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void TableStyleNetworkArchive::clear_table_name_style() {
  if (_impl_.table_name_style_ != nullptr) _impl_.table_name_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void TableStyleNetworkArchive::clear_table_name_shape_style() {
  if (_impl_.table_name_shape_style_ != nullptr) _impl_.table_name_shape_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void TableStyleNetworkArchive::clear_category_level_1_text_style() {
  if (_impl_.category_level_1_text_style_ != nullptr) _impl_.category_level_1_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void TableStyleNetworkArchive::clear_category_level_2_text_style() {
  if (_impl_.category_level_2_text_style_ != nullptr) _impl_.category_level_2_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void TableStyleNetworkArchive::clear_category_level_3_text_style() {
  if (_impl_.category_level_3_text_style_ != nullptr) _impl_.category_level_3_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void TableStyleNetworkArchive::clear_category_level_4_text_style() {
  if (_impl_.category_level_4_text_style_ != nullptr) _impl_.category_level_4_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void TableStyleNetworkArchive::clear_category_level_5_text_style() {
  if (_impl_.category_level_5_text_style_ != nullptr) _impl_.category_level_5_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void TableStyleNetworkArchive::clear_category_level_1_style() {
  if (_impl_.category_level_1_style_ != nullptr) _impl_.category_level_1_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void TableStyleNetworkArchive::clear_category_level_2_style() {
  if (_impl_.category_level_2_style_ != nullptr) _impl_.category_level_2_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void TableStyleNetworkArchive::clear_category_level_3_style() {
  if (_impl_.category_level_3_style_ != nullptr) _impl_.category_level_3_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void TableStyleNetworkArchive::clear_category_level_4_style() {
  if (_impl_.category_level_4_style_ != nullptr) _impl_.category_level_4_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void TableStyleNetworkArchive::clear_category_level_5_style() {
  if (_impl_.category_level_5_style_ != nullptr) _impl_.category_level_5_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void TableStyleNetworkArchive::clear_label_level_1_text_style() {
  if (_impl_.label_level_1_text_style_ != nullptr) _impl_.label_level_1_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void TableStyleNetworkArchive::clear_label_level_2_text_style() {
  if (_impl_.label_level_2_text_style_ != nullptr) _impl_.label_level_2_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
void TableStyleNetworkArchive::clear_label_level_3_text_style() {
  if (_impl_.label_level_3_text_style_ != nullptr) _impl_.label_level_3_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
void TableStyleNetworkArchive::clear_label_level_4_text_style() {
  if (_impl_.label_level_4_text_style_ != nullptr) _impl_.label_level_4_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void TableStyleNetworkArchive::clear_label_level_5_text_style() {
  if (_impl_.label_level_5_text_style_ != nullptr) _impl_.label_level_5_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
void TableStyleNetworkArchive::clear_label_level_1_style() {
  if (_impl_.label_level_1_style_ != nullptr) _impl_.label_level_1_style_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
void TableStyleNetworkArchive::clear_label_level_2_style() {
  if (_impl_.label_level_2_style_ != nullptr) _impl_.label_level_2_style_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
void TableStyleNetworkArchive::clear_label_level_3_style() {
  if (_impl_.label_level_3_style_ != nullptr) _impl_.label_level_3_style_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
void TableStyleNetworkArchive::clear_label_level_4_style() {
  if (_impl_.label_level_4_style_ != nullptr) _impl_.label_level_4_style_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
void TableStyleNetworkArchive::clear_label_level_5_style() {
  if (_impl_.label_level_5_style_ != nullptr) _impl_.label_level_5_style_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
void TableStyleNetworkArchive::clear_pivot_body_summary_row_style() {
  if (_impl_.pivot_body_summary_row_style_ != nullptr) _impl_.pivot_body_summary_row_style_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
void TableStyleNetworkArchive::clear_pivot_body_summary_column_style() {
  if (_impl_.pivot_body_summary_column_style_ != nullptr) _impl_.pivot_body_summary_column_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
void TableStyleNetworkArchive::clear_pivot_header_column_summary_style() {
  if (_impl_.pivot_header_column_summary_style_ != nullptr) _impl_.pivot_header_column_summary_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
TableStyleNetworkArchive::TableStyleNetworkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableStyleNetworkArchive)
}
TableStyleNetworkArchive::TableStyleNetworkArchive(const TableStyleNetworkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableStyleNetworkArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_text_style_){nullptr}
    , decltype(_impl_.header_row_text_style_){nullptr}
    , decltype(_impl_.header_column_text_style_){nullptr}
    , decltype(_impl_.footer_row_text_style_){nullptr}
    , decltype(_impl_.body_cell_style_){nullptr}
    , decltype(_impl_.header_row_style_){nullptr}
    , decltype(_impl_.header_column_style_){nullptr}
    , decltype(_impl_.footer_row_style_){nullptr}
    , decltype(_impl_.table_style_){nullptr}
    , decltype(_impl_.table_name_style_){nullptr}
    , decltype(_impl_.table_name_shape_style_){nullptr}
    , decltype(_impl_.category_level_1_text_style_){nullptr}
    , decltype(_impl_.category_level_2_text_style_){nullptr}
    , decltype(_impl_.category_level_3_text_style_){nullptr}
    , decltype(_impl_.category_level_4_text_style_){nullptr}
    , decltype(_impl_.category_level_5_text_style_){nullptr}
    , decltype(_impl_.category_level_1_style_){nullptr}
    , decltype(_impl_.category_level_2_style_){nullptr}
    , decltype(_impl_.category_level_3_style_){nullptr}
    , decltype(_impl_.category_level_4_style_){nullptr}
    , decltype(_impl_.category_level_5_style_){nullptr}
    , decltype(_impl_.label_level_1_text_style_){nullptr}
    , decltype(_impl_.label_level_2_text_style_){nullptr}
    , decltype(_impl_.label_level_3_text_style_){nullptr}
    , decltype(_impl_.label_level_4_text_style_){nullptr}
    , decltype(_impl_.label_level_5_text_style_){nullptr}
    , decltype(_impl_.label_level_1_style_){nullptr}
    , decltype(_impl_.label_level_2_style_){nullptr}
    , decltype(_impl_.label_level_3_style_){nullptr}
    , decltype(_impl_.label_level_4_style_){nullptr}
    , decltype(_impl_.label_level_5_style_){nullptr}
    , decltype(_impl_.pivot_body_summary_row_style_){nullptr}
    , decltype(_impl_.pivot_body_summary_column_style_){nullptr}
    , decltype(_impl_.pivot_header_column_summary_style_){nullptr}
    , decltype(_impl_.preset_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body_text_style()) {
    _this->_impl_.body_text_style_ = new ::TSP::Reference(*from._impl_.body_text_style_);
  }
  if (from._internal_has_header_row_text_style()) {
    _this->_impl_.header_row_text_style_ = new ::TSP::Reference(*from._impl_.header_row_text_style_);
  }
  if (from._internal_has_header_column_text_style()) {
    _this->_impl_.header_column_text_style_ = new ::TSP::Reference(*from._impl_.header_column_text_style_);
  }
  if (from._internal_has_footer_row_text_style()) {
    _this->_impl_.footer_row_text_style_ = new ::TSP::Reference(*from._impl_.footer_row_text_style_);
  }
  if (from._internal_has_body_cell_style()) {
    _this->_impl_.body_cell_style_ = new ::TSP::Reference(*from._impl_.body_cell_style_);
  }
  if (from._internal_has_header_row_style()) {
    _this->_impl_.header_row_style_ = new ::TSP::Reference(*from._impl_.header_row_style_);
  }
  if (from._internal_has_header_column_style()) {
    _this->_impl_.header_column_style_ = new ::TSP::Reference(*from._impl_.header_column_style_);
  }
  if (from._internal_has_footer_row_style()) {
    _this->_impl_.footer_row_style_ = new ::TSP::Reference(*from._impl_.footer_row_style_);
  }
  if (from._internal_has_table_style()) {
    _this->_impl_.table_style_ = new ::TSP::Reference(*from._impl_.table_style_);
  }
  if (from._internal_has_table_name_style()) {
    _this->_impl_.table_name_style_ = new ::TSP::Reference(*from._impl_.table_name_style_);
  }
  if (from._internal_has_table_name_shape_style()) {
    _this->_impl_.table_name_shape_style_ = new ::TSP::Reference(*from._impl_.table_name_shape_style_);
  }
  if (from._internal_has_category_level_1_text_style()) {
    _this->_impl_.category_level_1_text_style_ = new ::TSP::Reference(*from._impl_.category_level_1_text_style_);
  }
  if (from._internal_has_category_level_2_text_style()) {
    _this->_impl_.category_level_2_text_style_ = new ::TSP::Reference(*from._impl_.category_level_2_text_style_);
  }
  if (from._internal_has_category_level_3_text_style()) {
    _this->_impl_.category_level_3_text_style_ = new ::TSP::Reference(*from._impl_.category_level_3_text_style_);
  }
  if (from._internal_has_category_level_4_text_style()) {
    _this->_impl_.category_level_4_text_style_ = new ::TSP::Reference(*from._impl_.category_level_4_text_style_);
  }
  if (from._internal_has_category_level_5_text_style()) {
    _this->_impl_.category_level_5_text_style_ = new ::TSP::Reference(*from._impl_.category_level_5_text_style_);
  }
  if (from._internal_has_category_level_1_style()) {
    _this->_impl_.category_level_1_style_ = new ::TSP::Reference(*from._impl_.category_level_1_style_);
  }
  if (from._internal_has_category_level_2_style()) {
    _this->_impl_.category_level_2_style_ = new ::TSP::Reference(*from._impl_.category_level_2_style_);
  }
  if (from._internal_has_category_level_3_style()) {
    _this->_impl_.category_level_3_style_ = new ::TSP::Reference(*from._impl_.category_level_3_style_);
  }
  if (from._internal_has_category_level_4_style()) {
    _this->_impl_.category_level_4_style_ = new ::TSP::Reference(*from._impl_.category_level_4_style_);
  }
  if (from._internal_has_category_level_5_style()) {
    _this->_impl_.category_level_5_style_ = new ::TSP::Reference(*from._impl_.category_level_5_style_);
  }
  if (from._internal_has_label_level_1_text_style()) {
    _this->_impl_.label_level_1_text_style_ = new ::TSP::Reference(*from._impl_.label_level_1_text_style_);
  }
  if (from._internal_has_label_level_2_text_style()) {
    _this->_impl_.label_level_2_text_style_ = new ::TSP::Reference(*from._impl_.label_level_2_text_style_);
  }
  if (from._internal_has_label_level_3_text_style()) {
    _this->_impl_.label_level_3_text_style_ = new ::TSP::Reference(*from._impl_.label_level_3_text_style_);
  }
  if (from._internal_has_label_level_4_text_style()) {
    _this->_impl_.label_level_4_text_style_ = new ::TSP::Reference(*from._impl_.label_level_4_text_style_);
  }
  if (from._internal_has_label_level_5_text_style()) {
    _this->_impl_.label_level_5_text_style_ = new ::TSP::Reference(*from._impl_.label_level_5_text_style_);
  }
  if (from._internal_has_label_level_1_style()) {
    _this->_impl_.label_level_1_style_ = new ::TSP::Reference(*from._impl_.label_level_1_style_);
  }
  if (from._internal_has_label_level_2_style()) {
    _this->_impl_.label_level_2_style_ = new ::TSP::Reference(*from._impl_.label_level_2_style_);
  }
  if (from._internal_has_label_level_3_style()) {
    _this->_impl_.label_level_3_style_ = new ::TSP::Reference(*from._impl_.label_level_3_style_);
  }
  if (from._internal_has_label_level_4_style()) {
    _this->_impl_.label_level_4_style_ = new ::TSP::Reference(*from._impl_.label_level_4_style_);
  }
  if (from._internal_has_label_level_5_style()) {
    _this->_impl_.label_level_5_style_ = new ::TSP::Reference(*from._impl_.label_level_5_style_);
  }
  if (from._internal_has_pivot_body_summary_row_style()) {
    _this->_impl_.pivot_body_summary_row_style_ = new ::TSP::Reference(*from._impl_.pivot_body_summary_row_style_);
  }
  if (from._internal_has_pivot_body_summary_column_style()) {
    _this->_impl_.pivot_body_summary_column_style_ = new ::TSP::Reference(*from._impl_.pivot_body_summary_column_style_);
  }
  if (from._internal_has_pivot_header_column_summary_style()) {
    _this->_impl_.pivot_header_column_summary_style_ = new ::TSP::Reference(*from._impl_.pivot_header_column_summary_style_);
  }
  _this->_impl_.preset_id_ = from._impl_.preset_id_;
  // @@protoc_insertion_point(copy_constructor:TST.TableStyleNetworkArchive)
}

inline void TableStyleNetworkArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_text_style_){nullptr}
    , decltype(_impl_.header_row_text_style_){nullptr}
    , decltype(_impl_.header_column_text_style_){nullptr}
    , decltype(_impl_.footer_row_text_style_){nullptr}
    , decltype(_impl_.body_cell_style_){nullptr}
    , decltype(_impl_.header_row_style_){nullptr}
    , decltype(_impl_.header_column_style_){nullptr}
    , decltype(_impl_.footer_row_style_){nullptr}
    , decltype(_impl_.table_style_){nullptr}
    , decltype(_impl_.table_name_style_){nullptr}
    , decltype(_impl_.table_name_shape_style_){nullptr}
    , decltype(_impl_.category_level_1_text_style_){nullptr}
    , decltype(_impl_.category_level_2_text_style_){nullptr}
    , decltype(_impl_.category_level_3_text_style_){nullptr}
    , decltype(_impl_.category_level_4_text_style_){nullptr}
    , decltype(_impl_.category_level_5_text_style_){nullptr}
    , decltype(_impl_.category_level_1_style_){nullptr}
    , decltype(_impl_.category_level_2_style_){nullptr}
    , decltype(_impl_.category_level_3_style_){nullptr}
    , decltype(_impl_.category_level_4_style_){nullptr}
    , decltype(_impl_.category_level_5_style_){nullptr}
    , decltype(_impl_.label_level_1_text_style_){nullptr}
    , decltype(_impl_.label_level_2_text_style_){nullptr}
    , decltype(_impl_.label_level_3_text_style_){nullptr}
    , decltype(_impl_.label_level_4_text_style_){nullptr}
    , decltype(_impl_.label_level_5_text_style_){nullptr}
    , decltype(_impl_.label_level_1_style_){nullptr}
    , decltype(_impl_.label_level_2_style_){nullptr}
    , decltype(_impl_.label_level_3_style_){nullptr}
    , decltype(_impl_.label_level_4_style_){nullptr}
    , decltype(_impl_.label_level_5_style_){nullptr}
    , decltype(_impl_.pivot_body_summary_row_style_){nullptr}
    , decltype(_impl_.pivot_body_summary_column_style_){nullptr}
    , decltype(_impl_.pivot_header_column_summary_style_){nullptr}
    , decltype(_impl_.preset_id_){0u}
  };
}

TableStyleNetworkArchive::~TableStyleNetworkArchive() {
  // @@protoc_insertion_point(destructor:TST.TableStyleNetworkArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableStyleNetworkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.body_text_style_;
  if (this != internal_default_instance()) delete _impl_.header_row_text_style_;
  if (this != internal_default_instance()) delete _impl_.header_column_text_style_;
  if (this != internal_default_instance()) delete _impl_.footer_row_text_style_;
  if (this != internal_default_instance()) delete _impl_.body_cell_style_;
  if (this != internal_default_instance()) delete _impl_.header_row_style_;
  if (this != internal_default_instance()) delete _impl_.header_column_style_;
  if (this != internal_default_instance()) delete _impl_.footer_row_style_;
  if (this != internal_default_instance()) delete _impl_.table_style_;
  if (this != internal_default_instance()) delete _impl_.table_name_style_;
  if (this != internal_default_instance()) delete _impl_.table_name_shape_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_1_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_2_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_3_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_4_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_5_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_1_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_2_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_3_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_4_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_5_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_1_text_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_2_text_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_3_text_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_4_text_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_5_text_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_1_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_2_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_3_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_4_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_5_style_;
  if (this != internal_default_instance()) delete _impl_.pivot_body_summary_row_style_;
  if (this != internal_default_instance()) delete _impl_.pivot_body_summary_column_style_;
  if (this != internal_default_instance()) delete _impl_.pivot_header_column_summary_style_;
}

void TableStyleNetworkArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableStyleNetworkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableStyleNetworkArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.body_text_style_ != nullptr);
      _impl_.body_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_row_text_style_ != nullptr);
      _impl_.header_row_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.header_column_text_style_ != nullptr);
      _impl_.header_column_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.footer_row_text_style_ != nullptr);
      _impl_.footer_row_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.body_cell_style_ != nullptr);
      _impl_.body_cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.header_row_style_ != nullptr);
      _impl_.header_row_style_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.header_column_style_ != nullptr);
      _impl_.header_column_style_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.footer_row_style_ != nullptr);
      _impl_.footer_row_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.table_style_ != nullptr);
      _impl_.table_style_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.table_name_style_ != nullptr);
      _impl_.table_name_style_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.table_name_shape_style_ != nullptr);
      _impl_.table_name_shape_style_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.category_level_1_text_style_ != nullptr);
      _impl_.category_level_1_text_style_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.category_level_2_text_style_ != nullptr);
      _impl_.category_level_2_text_style_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.category_level_3_text_style_ != nullptr);
      _impl_.category_level_3_text_style_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.category_level_4_text_style_ != nullptr);
      _impl_.category_level_4_text_style_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.category_level_5_text_style_ != nullptr);
      _impl_.category_level_5_text_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.category_level_1_style_ != nullptr);
      _impl_.category_level_1_style_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.category_level_2_style_ != nullptr);
      _impl_.category_level_2_style_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.category_level_3_style_ != nullptr);
      _impl_.category_level_3_style_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.category_level_4_style_ != nullptr);
      _impl_.category_level_4_style_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.category_level_5_style_ != nullptr);
      _impl_.category_level_5_style_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.label_level_1_text_style_ != nullptr);
      _impl_.label_level_1_text_style_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.label_level_2_text_style_ != nullptr);
      _impl_.label_level_2_text_style_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.label_level_3_text_style_ != nullptr);
      _impl_.label_level_3_text_style_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.label_level_4_text_style_ != nullptr);
      _impl_.label_level_4_text_style_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.label_level_5_text_style_ != nullptr);
      _impl_.label_level_5_text_style_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.label_level_1_style_ != nullptr);
      _impl_.label_level_1_style_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.label_level_2_style_ != nullptr);
      _impl_.label_level_2_style_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.label_level_3_style_ != nullptr);
      _impl_.label_level_3_style_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.label_level_4_style_ != nullptr);
      _impl_.label_level_4_style_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.label_level_5_style_ != nullptr);
      _impl_.label_level_5_style_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.pivot_body_summary_row_style_ != nullptr);
      _impl_.pivot_body_summary_row_style_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pivot_body_summary_column_style_ != nullptr);
      _impl_.pivot_body_summary_column_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pivot_header_column_summary_style_ != nullptr);
      _impl_.pivot_header_column_summary_style_->Clear();
    }
  }
  _impl_.preset_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableStyleNetworkArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference body_text_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference header_row_text_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference header_column_text_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference footer_row_text_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference body_cell_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_cell_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference header_row_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference header_column_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference footer_row_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference table_style = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_name_style = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_name_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_name_shape_style = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_name_shape_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 preset_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_preset_id(&_impl_._has_bits_);
          _impl_.preset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_1_text_style = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_1_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_2_text_style = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_2_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_3_text_style = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_3_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_4_text_style = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_4_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_5_text_style = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_5_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_1_style = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_1_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_2_style = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_2_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_3_style = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_3_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_4_style = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_4_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_5_style = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_5_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_1_text_style = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_1_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_2_text_style = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_2_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_3_text_style = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_3_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_4_text_style = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_4_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_5_text_style = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_5_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_1_style = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_1_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_2_style = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_2_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_3_style = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_3_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_4_style = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_4_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_5_style = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_5_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pivot_body_summary_row_style = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_body_summary_row_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pivot_body_summary_column_style = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_body_summary_column_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pivot_header_column_summary_style = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_header_column_summary_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableStyleNetworkArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableStyleNetworkArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference body_text_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::body_text_style(this),
        _Internal::body_text_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference header_row_text_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header_row_text_style(this),
        _Internal::header_row_text_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference header_column_text_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::header_column_text_style(this),
        _Internal::header_column_text_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference footer_row_text_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::footer_row_text_style(this),
        _Internal::footer_row_text_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference body_cell_style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::body_cell_style(this),
        _Internal::body_cell_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference header_row_style = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::header_row_style(this),
        _Internal::header_row_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference header_column_style = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::header_column_style(this),
        _Internal::header_column_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference footer_row_style = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::footer_row_style(this),
        _Internal::footer_row_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference table_style = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::table_style(this),
        _Internal::table_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_name_style = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::table_name_style(this),
        _Internal::table_name_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_name_shape_style = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::table_name_shape_style(this),
        _Internal::table_name_shape_style(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 preset_id = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_preset_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference category_level_1_text_style = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::category_level_1_text_style(this),
        _Internal::category_level_1_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_2_text_style = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::category_level_2_text_style(this),
        _Internal::category_level_2_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_3_text_style = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::category_level_3_text_style(this),
        _Internal::category_level_3_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_4_text_style = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::category_level_4_text_style(this),
        _Internal::category_level_4_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_5_text_style = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::category_level_5_text_style(this),
        _Internal::category_level_5_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_1_style = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::category_level_1_style(this),
        _Internal::category_level_1_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_2_style = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::category_level_2_style(this),
        _Internal::category_level_2_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_3_style = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::category_level_3_style(this),
        _Internal::category_level_3_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_4_style = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::category_level_4_style(this),
        _Internal::category_level_4_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_5_style = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::category_level_5_style(this),
        _Internal::category_level_5_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_1_text_style = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::label_level_1_text_style(this),
        _Internal::label_level_1_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_2_text_style = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::label_level_2_text_style(this),
        _Internal::label_level_2_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_3_text_style = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::label_level_3_text_style(this),
        _Internal::label_level_3_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_4_text_style = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::label_level_4_text_style(this),
        _Internal::label_level_4_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_5_text_style = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::label_level_5_text_style(this),
        _Internal::label_level_5_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_1_style = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::label_level_1_style(this),
        _Internal::label_level_1_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_2_style = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::label_level_2_style(this),
        _Internal::label_level_2_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_3_style = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::label_level_3_style(this),
        _Internal::label_level_3_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_4_style = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::label_level_4_style(this),
        _Internal::label_level_4_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_5_style = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::label_level_5_style(this),
        _Internal::label_level_5_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pivot_body_summary_row_style = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::pivot_body_summary_row_style(this),
        _Internal::pivot_body_summary_row_style(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSP.Reference pivot_body_summary_column_style = 34;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::pivot_body_summary_column_style(this),
        _Internal::pivot_body_summary_column_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pivot_header_column_summary_style = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::pivot_header_column_summary_style(this),
        _Internal::pivot_header_column_summary_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableStyleNetworkArchive)
  return target;
}

size_t TableStyleNetworkArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableStyleNetworkArchive)
  size_t total_size = 0;

  if (_internal_has_body_text_style()) {
    // required .TSP.Reference body_text_style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_text_style_);
  }

  if (_internal_has_header_row_text_style()) {
    // required .TSP.Reference header_row_text_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_row_text_style_);
  }

  if (_internal_has_header_column_text_style()) {
    // required .TSP.Reference header_column_text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_column_text_style_);
  }

  if (_internal_has_footer_row_text_style()) {
    // required .TSP.Reference footer_row_text_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footer_row_text_style_);
  }

  if (_internal_has_body_cell_style()) {
    // required .TSP.Reference body_cell_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_cell_style_);
  }

  if (_internal_has_header_row_style()) {
    // required .TSP.Reference header_row_style = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_row_style_);
  }

  if (_internal_has_header_column_style()) {
    // required .TSP.Reference header_column_style = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_column_style_);
  }

  if (_internal_has_footer_row_style()) {
    // required .TSP.Reference footer_row_style = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footer_row_style_);
  }

  if (_internal_has_table_style()) {
    // required .TSP.Reference table_style = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_style_);
  }

  return total_size;
}
size_t TableStyleNetworkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableStyleNetworkArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .TSP.Reference body_text_style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_text_style_);

    // required .TSP.Reference header_row_text_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_row_text_style_);

    // required .TSP.Reference header_column_text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_column_text_style_);

    // required .TSP.Reference footer_row_text_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footer_row_text_style_);

    // required .TSP.Reference body_cell_style = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_cell_style_);

    // required .TSP.Reference header_row_style = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_row_style_);

    // required .TSP.Reference header_column_style = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_column_style_);

    // required .TSP.Reference footer_row_style = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footer_row_style_);

    // required .TSP.Reference table_style = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000fe00u) {
    // optional .TSP.Reference table_name_style = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_name_style_);
    }

    // optional .TSP.Reference table_name_shape_style = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_name_shape_style_);
    }

    // optional .TSP.Reference category_level_1_text_style = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_1_text_style_);
    }

    // optional .TSP.Reference category_level_2_text_style = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_2_text_style_);
    }

    // optional .TSP.Reference category_level_3_text_style = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_3_text_style_);
    }

    // optional .TSP.Reference category_level_4_text_style = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_4_text_style_);
    }

    // optional .TSP.Reference category_level_5_text_style = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_5_text_style_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSP.Reference category_level_1_style = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_1_style_);
    }

    // optional .TSP.Reference category_level_2_style = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_2_style_);
    }

    // optional .TSP.Reference category_level_3_style = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_3_style_);
    }

    // optional .TSP.Reference category_level_4_style = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_4_style_);
    }

    // optional .TSP.Reference category_level_5_style = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_5_style_);
    }

    // optional .TSP.Reference label_level_1_text_style = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_1_text_style_);
    }

    // optional .TSP.Reference label_level_2_text_style = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_2_text_style_);
    }

    // optional .TSP.Reference label_level_3_text_style = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_3_text_style_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSP.Reference label_level_4_text_style = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_4_text_style_);
    }

    // optional .TSP.Reference label_level_5_text_style = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_5_text_style_);
    }

    // optional .TSP.Reference label_level_1_style = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_1_style_);
    }

    // optional .TSP.Reference label_level_2_style = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_2_style_);
    }

    // optional .TSP.Reference label_level_3_style = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_3_style_);
    }

    // optional .TSP.Reference label_level_4_style = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_4_style_);
    }

    // optional .TSP.Reference label_level_5_style = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_5_style_);
    }

    // optional .TSP.Reference pivot_body_summary_row_style = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_body_summary_row_style_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference pivot_body_summary_column_style = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_body_summary_column_style_);
    }

    // optional .TSP.Reference pivot_header_column_summary_style = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_header_column_summary_style_);
    }

    // optional uint32 preset_id = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_preset_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableStyleNetworkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableStyleNetworkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableStyleNetworkArchive::GetClassData() const { return &_class_data_; }


void TableStyleNetworkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableStyleNetworkArchive*>(&to_msg);
  auto& from = static_cast<const TableStyleNetworkArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableStyleNetworkArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_body_text_style()->::TSP::Reference::MergeFrom(
          from._internal_body_text_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_header_row_text_style()->::TSP::Reference::MergeFrom(
          from._internal_header_row_text_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_header_column_text_style()->::TSP::Reference::MergeFrom(
          from._internal_header_column_text_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_footer_row_text_style()->::TSP::Reference::MergeFrom(
          from._internal_footer_row_text_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_body_cell_style()->::TSP::Reference::MergeFrom(
          from._internal_body_cell_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_header_row_style()->::TSP::Reference::MergeFrom(
          from._internal_header_row_style());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_header_column_style()->::TSP::Reference::MergeFrom(
          from._internal_header_column_style());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_footer_row_style()->::TSP::Reference::MergeFrom(
          from._internal_footer_row_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_table_style()->::TSP::Reference::MergeFrom(
          from._internal_table_style());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_table_name_style()->::TSP::Reference::MergeFrom(
          from._internal_table_name_style());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_table_name_shape_style()->::TSP::Reference::MergeFrom(
          from._internal_table_name_shape_style());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_category_level_1_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_1_text_style());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_category_level_2_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_2_text_style());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_category_level_3_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_3_text_style());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_category_level_4_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_4_text_style());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_category_level_5_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_5_text_style());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_category_level_1_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_1_style());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_category_level_2_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_2_style());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_category_level_3_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_3_style());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_category_level_4_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_4_style());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_category_level_5_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_5_style());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_label_level_1_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_1_text_style());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_label_level_2_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_2_text_style());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_label_level_3_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_3_text_style());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_label_level_4_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_4_text_style());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_label_level_5_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_5_text_style());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_label_level_1_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_1_style());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_label_level_2_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_2_style());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_label_level_3_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_3_style());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_label_level_4_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_4_style());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_label_level_5_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_5_style());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_pivot_body_summary_row_style()->::TSP::Reference::MergeFrom(
          from._internal_pivot_body_summary_row_style());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pivot_body_summary_column_style()->::TSP::Reference::MergeFrom(
          from._internal_pivot_body_summary_column_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pivot_header_column_summary_style()->::TSP::Reference::MergeFrom(
          from._internal_pivot_header_column_summary_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.preset_id_ = from._impl_.preset_id_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableStyleNetworkArchive::CopyFrom(const TableStyleNetworkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableStyleNetworkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStyleNetworkArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_body_text_style()) {
    if (!_impl_.body_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_text_style()) {
    if (!_impl_.header_row_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_text_style()) {
    if (!_impl_.header_column_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_text_style()) {
    if (!_impl_.footer_row_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_body_cell_style()) {
    if (!_impl_.body_cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_style()) {
    if (!_impl_.header_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_style()) {
    if (!_impl_.header_column_style_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_style()) {
    if (!_impl_.footer_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_style()) {
    if (!_impl_.table_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_name_style()) {
    if (!_impl_.table_name_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_name_shape_style()) {
    if (!_impl_.table_name_shape_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_1_text_style()) {
    if (!_impl_.category_level_1_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_2_text_style()) {
    if (!_impl_.category_level_2_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_3_text_style()) {
    if (!_impl_.category_level_3_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_4_text_style()) {
    if (!_impl_.category_level_4_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_5_text_style()) {
    if (!_impl_.category_level_5_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_1_style()) {
    if (!_impl_.category_level_1_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_2_style()) {
    if (!_impl_.category_level_2_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_3_style()) {
    if (!_impl_.category_level_3_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_4_style()) {
    if (!_impl_.category_level_4_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_5_style()) {
    if (!_impl_.category_level_5_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_1_text_style()) {
    if (!_impl_.label_level_1_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_2_text_style()) {
    if (!_impl_.label_level_2_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_3_text_style()) {
    if (!_impl_.label_level_3_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_4_text_style()) {
    if (!_impl_.label_level_4_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_5_text_style()) {
    if (!_impl_.label_level_5_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_1_style()) {
    if (!_impl_.label_level_1_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_2_style()) {
    if (!_impl_.label_level_2_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_3_style()) {
    if (!_impl_.label_level_3_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_4_style()) {
    if (!_impl_.label_level_4_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_5_style()) {
    if (!_impl_.label_level_5_style_->IsInitialized()) return false;
  }
  if (_internal_has_pivot_body_summary_row_style()) {
    if (!_impl_.pivot_body_summary_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_pivot_body_summary_column_style()) {
    if (!_impl_.pivot_body_summary_column_style_->IsInitialized()) return false;
  }
  if (_internal_has_pivot_header_column_summary_style()) {
    if (!_impl_.pivot_header_column_summary_style_->IsInitialized()) return false;
  }
  return true;
}

void TableStyleNetworkArchive::InternalSwap(TableStyleNetworkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableStyleNetworkArchive, _impl_.preset_id_)
      + sizeof(TableStyleNetworkArchive::_impl_.preset_id_)
      - PROTOBUF_FIELD_OFFSET(TableStyleNetworkArchive, _impl_.body_text_style_)>(
          reinterpret_cast<char*>(&_impl_.body_text_style_),
          reinterpret_cast<char*>(&other->_impl_.body_text_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableStyleNetworkArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[30]);
}

// ===================================================================

class TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& grouping_column_uid(const TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive* msg);
  static void set_has_grouping_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& column_uid(const TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::UUID&
TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::_Internal::grouping_column_uid(const TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive* msg) {
  return *msg->_impl_.grouping_column_uid_;
}
const ::TSP::UUID&
TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::_Internal::column_uid(const TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive* msg) {
  return *msg->_impl_.column_uid_;
}
void TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::clear_grouping_column_uid() {
  if (_impl_.grouping_column_uid_ != nullptr) _impl_.grouping_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::clear_column_uid() {
  if (_impl_.column_uid_ != nullptr) _impl_.column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive)
}
TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive(const TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grouping_column_uid_){nullptr}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grouping_column_uid()) {
    _this->_impl_.grouping_column_uid_ = new ::TSP::UUID(*from._impl_.grouping_column_uid_);
  }
  if (from._internal_has_column_uid()) {
    _this->_impl_.column_uid_ = new ::TSP::UUID(*from._impl_.column_uid_);
  }
  _this->_impl_.direction_ = from._impl_.direction_;
  // @@protoc_insertion_point(copy_constructor:TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive)
}

inline void TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grouping_column_uid_){nullptr}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.direction_){0}
  };
}

TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::~TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive() {
  // @@protoc_insertion_point(destructor:TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.grouping_column_uid_;
  if (this != internal_default_instance()) delete _impl_.column_uid_;
}

void TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.grouping_column_uid_ != nullptr);
      _impl_.grouping_column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.column_uid_ != nullptr);
      _impl_.column_uid_->Clear();
    }
  }
  _impl_.direction_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID grouping_column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID column_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive.Direction direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID grouping_column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::grouping_column_uid(this),
        _Internal::grouping_column_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID column_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::column_uid(this),
        _Internal::column_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive.Direction direction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive)
  return target;
}

size_t TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.UUID grouping_column_uid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_column_uid_);
    }

    // optional .TSP.UUID column_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.column_uid_);
    }

    // optional .TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive.Direction direction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::GetClassData() const { return &_class_data_; }


void TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive*>(&to_msg);
  auto& from = static_cast<const TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_grouping_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_grouping_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::CopyFrom(const TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::IsInitialized() const {
  if (_internal_has_grouping_column_uid()) {
    if (!_impl_.grouping_column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_uid()) {
    if (!_impl_.column_uid_->IsInitialized()) return false;
  }
  return true;
}

void TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::InternalSwap(TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive, _impl_.direction_)
      + sizeof(TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive, _impl_.grouping_column_uid_)>(
          reinterpret_cast<char*>(&_impl_.grouping_column_uid_),
          reinterpret_cast<char*>(&other->_impl_.grouping_column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[31]);
}

// ===================================================================

class TableGroupSortOrderUIDArchive::_Internal {
 public:
};

TableGroupSortOrderUIDArchive::TableGroupSortOrderUIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableGroupSortOrderUIDArchive)
}
TableGroupSortOrderUIDArchive::TableGroupSortOrderUIDArchive(const TableGroupSortOrderUIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableGroupSortOrderUIDArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_sort_rules_){from._impl_.group_sort_rules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.TableGroupSortOrderUIDArchive)
}

inline void TableGroupSortOrderUIDArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_sort_rules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TableGroupSortOrderUIDArchive::~TableGroupSortOrderUIDArchive() {
  // @@protoc_insertion_point(destructor:TST.TableGroupSortOrderUIDArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableGroupSortOrderUIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_sort_rules_.~RepeatedPtrField();
}

void TableGroupSortOrderUIDArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableGroupSortOrderUIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableGroupSortOrderUIDArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_sort_rules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableGroupSortOrderUIDArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive group_sort_rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_sort_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableGroupSortOrderUIDArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableGroupSortOrderUIDArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive group_sort_rules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_sort_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_sort_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableGroupSortOrderUIDArchive)
  return target;
}

size_t TableGroupSortOrderUIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableGroupSortOrderUIDArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive group_sort_rules = 1;
  total_size += 1UL * this->_internal_group_sort_rules_size();
  for (const auto& msg : this->_impl_.group_sort_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableGroupSortOrderUIDArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableGroupSortOrderUIDArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableGroupSortOrderUIDArchive::GetClassData() const { return &_class_data_; }


void TableGroupSortOrderUIDArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableGroupSortOrderUIDArchive*>(&to_msg);
  auto& from = static_cast<const TableGroupSortOrderUIDArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableGroupSortOrderUIDArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_sort_rules_.MergeFrom(from._impl_.group_sort_rules_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableGroupSortOrderUIDArchive::CopyFrom(const TableGroupSortOrderUIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableGroupSortOrderUIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableGroupSortOrderUIDArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.group_sort_rules_))
    return false;
  return true;
}

void TableGroupSortOrderUIDArchive::InternalSwap(TableGroupSortOrderUIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.group_sort_rules_.InternalSwap(&other->_impl_.group_sort_rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableGroupSortOrderUIDArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[32]);
}

// ===================================================================

class TableSortOrderArchive_SortRuleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSortOrderArchive_SortRuleArchive>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TableSortOrderArchive_SortRuleArchive::TableSortOrderArchive_SortRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableSortOrderArchive.SortRuleArchive)
}
TableSortOrderArchive_SortRuleArchive::TableSortOrderArchive_SortRuleArchive(const TableSortOrderArchive_SortRuleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableSortOrderArchive_SortRuleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:TST.TableSortOrderArchive.SortRuleArchive)
}

inline void TableSortOrderArchive_SortRuleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.direction_){0}
  };
}

TableSortOrderArchive_SortRuleArchive::~TableSortOrderArchive_SortRuleArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSortOrderArchive.SortRuleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableSortOrderArchive_SortRuleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableSortOrderArchive_SortRuleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableSortOrderArchive_SortRuleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSortOrderArchive.SortRuleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.direction_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.direction_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSortOrderArchive_SortRuleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableSortOrderArchive_SortRuleArchive_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableSortOrderArchive_SortRuleArchive_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableSortOrderArchive_SortRuleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSortOrderArchive.SortRuleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSortOrderArchive.SortRuleArchive)
  return target;
}

size_t TableSortOrderArchive_SortRuleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableSortOrderArchive.SortRuleArchive)
  size_t total_size = 0;

  if (_internal_has_index()) {
    // required uint32 index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  if (_internal_has_direction()) {
    // required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return total_size;
}
size_t TableSortOrderArchive_SortRuleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSortOrderArchive.SortRuleArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

    // required .TST.TableSortOrderArchive.SortRuleArchive.Direction direction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSortOrderArchive_SortRuleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableSortOrderArchive_SortRuleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSortOrderArchive_SortRuleArchive::GetClassData() const { return &_class_data_; }


void TableSortOrderArchive_SortRuleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableSortOrderArchive_SortRuleArchive*>(&to_msg);
  auto& from = static_cast<const TableSortOrderArchive_SortRuleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSortOrderArchive.SortRuleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSortOrderArchive_SortRuleArchive::CopyFrom(const TableSortOrderArchive_SortRuleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSortOrderArchive.SortRuleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSortOrderArchive_SortRuleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TableSortOrderArchive_SortRuleArchive::InternalSwap(TableSortOrderArchive_SortRuleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableSortOrderArchive_SortRuleArchive, _impl_.direction_)
      + sizeof(TableSortOrderArchive_SortRuleArchive::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(TableSortOrderArchive_SortRuleArchive, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSortOrderArchive_SortRuleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[33]);
}

// ===================================================================

class TableSortOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSortOrderArchive>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TableSortOrderArchive::TableSortOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableSortOrderArchive)
}
TableSortOrderArchive::TableSortOrderArchive(const TableSortOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableSortOrderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rules_){from._impl_.rules_}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:TST.TableSortOrderArchive)
}

inline void TableSortOrderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rules_){arena}
    , decltype(_impl_.type_){0}
  };
}

TableSortOrderArchive::~TableSortOrderArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSortOrderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableSortOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rules_.~RepeatedPtrField();
}

void TableSortOrderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableSortOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSortOrderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSortOrderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSortOrderArchive.SortType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableSortOrderArchive_SortType_IsValid(val))) {
            _internal_set_type(static_cast<::TST::TableSortOrderArchive_SortType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.TableSortOrderArchive.SortRuleArchive rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableSortOrderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSortOrderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableSortOrderArchive.SortType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .TST.TableSortOrderArchive.SortRuleArchive rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSortOrderArchive)
  return target;
}

size_t TableSortOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSortOrderArchive)
  size_t total_size = 0;

  // required .TST.TableSortOrderArchive.SortType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableSortOrderArchive.SortRuleArchive rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_impl_.rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSortOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableSortOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSortOrderArchive::GetClassData() const { return &_class_data_; }


void TableSortOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableSortOrderArchive*>(&to_msg);
  auto& from = static_cast<const TableSortOrderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSortOrderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rules_.MergeFrom(from._impl_.rules_);
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSortOrderArchive::CopyFrom(const TableSortOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSortOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSortOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rules_))
    return false;
  return true;
}

void TableSortOrderArchive::InternalSwap(TableSortOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSortOrderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[34]);
}

// ===================================================================

class TableSortOrderUIDArchive_SortRuleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSortOrderUIDArchive_SortRuleArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& column_uid(const TableSortOrderUIDArchive_SortRuleArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
TableSortOrderUIDArchive_SortRuleArchive::_Internal::column_uid(const TableSortOrderUIDArchive_SortRuleArchive* msg) {
  return *msg->_impl_.column_uid_;
}
void TableSortOrderUIDArchive_SortRuleArchive::clear_column_uid() {
  if (_impl_.column_uid_ != nullptr) _impl_.column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TableSortOrderUIDArchive_SortRuleArchive::TableSortOrderUIDArchive_SortRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableSortOrderUIDArchive.SortRuleArchive)
}
TableSortOrderUIDArchive_SortRuleArchive::TableSortOrderUIDArchive_SortRuleArchive(const TableSortOrderUIDArchive_SortRuleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableSortOrderUIDArchive_SortRuleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    _this->_impl_.column_uid_ = new ::TSP::UUID(*from._impl_.column_uid_);
  }
  _this->_impl_.direction_ = from._impl_.direction_;
  // @@protoc_insertion_point(copy_constructor:TST.TableSortOrderUIDArchive.SortRuleArchive)
}

inline void TableSortOrderUIDArchive_SortRuleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.direction_){0}
  };
}

TableSortOrderUIDArchive_SortRuleArchive::~TableSortOrderUIDArchive_SortRuleArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSortOrderUIDArchive.SortRuleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableSortOrderUIDArchive_SortRuleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.column_uid_;
}

void TableSortOrderUIDArchive_SortRuleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableSortOrderUIDArchive_SortRuleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.column_uid_ != nullptr);
    _impl_.column_uid_->Clear();
  }
  _impl_.direction_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSortOrderUIDArchive_SortRuleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableSortOrderUIDArchive_SortRuleArchive_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableSortOrderUIDArchive_SortRuleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column_uid(this),
        _Internal::column_uid(this).GetCachedSize(), target, stream);
  }

  // required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSortOrderUIDArchive.SortRuleArchive)
  return target;
}

size_t TableSortOrderUIDArchive_SortRuleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  size_t total_size = 0;

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);
  }

  if (_internal_has_direction()) {
    // required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return total_size;
}
size_t TableSortOrderUIDArchive_SortRuleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);

    // required .TST.TableSortOrderUIDArchive.SortRuleArchive.Direction direction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSortOrderUIDArchive_SortRuleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableSortOrderUIDArchive_SortRuleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSortOrderUIDArchive_SortRuleArchive::GetClassData() const { return &_class_data_; }


void TableSortOrderUIDArchive_SortRuleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableSortOrderUIDArchive_SortRuleArchive*>(&to_msg);
  auto& from = static_cast<const TableSortOrderUIDArchive_SortRuleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSortOrderUIDArchive_SortRuleArchive::CopyFrom(const TableSortOrderUIDArchive_SortRuleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSortOrderUIDArchive.SortRuleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSortOrderUIDArchive_SortRuleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!_impl_.column_uid_->IsInitialized()) return false;
  }
  return true;
}

void TableSortOrderUIDArchive_SortRuleArchive::InternalSwap(TableSortOrderUIDArchive_SortRuleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableSortOrderUIDArchive_SortRuleArchive, _impl_.direction_)
      + sizeof(TableSortOrderUIDArchive_SortRuleArchive::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(TableSortOrderUIDArchive_SortRuleArchive, _impl_.column_uid_)>(
          reinterpret_cast<char*>(&_impl_.column_uid_),
          reinterpret_cast<char*>(&other->_impl_.column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSortOrderUIDArchive_SortRuleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[35]);
}

// ===================================================================

class TableSortOrderUIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSortOrderUIDArchive>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TableSortOrderUIDArchive::TableSortOrderUIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableSortOrderUIDArchive)
}
TableSortOrderUIDArchive::TableSortOrderUIDArchive(const TableSortOrderUIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableSortOrderUIDArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rules_){from._impl_.rules_}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:TST.TableSortOrderUIDArchive)
}

inline void TableSortOrderUIDArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rules_){arena}
    , decltype(_impl_.type_){0}
  };
}

TableSortOrderUIDArchive::~TableSortOrderUIDArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSortOrderUIDArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableSortOrderUIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rules_.~RepeatedPtrField();
}

void TableSortOrderUIDArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableSortOrderUIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSortOrderUIDArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_.Clear();
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSortOrderUIDArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSortOrderUIDArchive.SortType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableSortOrderUIDArchive_SortType_IsValid(val))) {
            _internal_set_type(static_cast<::TST::TableSortOrderUIDArchive_SortType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.TableSortOrderUIDArchive.SortRuleArchive rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableSortOrderUIDArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSortOrderUIDArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableSortOrderUIDArchive.SortType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .TST.TableSortOrderUIDArchive.SortRuleArchive rules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSortOrderUIDArchive)
  return target;
}

size_t TableSortOrderUIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSortOrderUIDArchive)
  size_t total_size = 0;

  // required .TST.TableSortOrderUIDArchive.SortType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.TableSortOrderUIDArchive.SortRuleArchive rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->_impl_.rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSortOrderUIDArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableSortOrderUIDArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSortOrderUIDArchive::GetClassData() const { return &_class_data_; }


void TableSortOrderUIDArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableSortOrderUIDArchive*>(&to_msg);
  auto& from = static_cast<const TableSortOrderUIDArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSortOrderUIDArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rules_.MergeFrom(from._impl_.rules_);
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSortOrderUIDArchive::CopyFrom(const TableSortOrderUIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSortOrderUIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSortOrderUIDArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rules_))
    return false;
  return true;
}

void TableSortOrderUIDArchive::InternalSwap(TableSortOrderUIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rules_.InternalSwap(&other->_impl_.rules_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSortOrderUIDArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[36]);
}

// ===================================================================

class SortRuleReferenceTrackerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SortRuleReferenceTrackerArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& reference_tracker(const SortRuleReferenceTrackerArchive* msg);
  static void set_has_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
SortRuleReferenceTrackerArchive::_Internal::reference_tracker(const SortRuleReferenceTrackerArchive* msg) {
  return *msg->_impl_.reference_tracker_;
}
void SortRuleReferenceTrackerArchive::clear_reference_tracker() {
  if (_impl_.reference_tracker_ != nullptr) _impl_.reference_tracker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SortRuleReferenceTrackerArchive::SortRuleReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.SortRuleReferenceTrackerArchive)
}
SortRuleReferenceTrackerArchive::SortRuleReferenceTrackerArchive(const SortRuleReferenceTrackerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SortRuleReferenceTrackerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_tracker_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference_tracker()) {
    _this->_impl_.reference_tracker_ = new ::TSP::Reference(*from._impl_.reference_tracker_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.SortRuleReferenceTrackerArchive)
}

inline void SortRuleReferenceTrackerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_tracker_){nullptr}
  };
}

SortRuleReferenceTrackerArchive::~SortRuleReferenceTrackerArchive() {
  // @@protoc_insertion_point(destructor:TST.SortRuleReferenceTrackerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SortRuleReferenceTrackerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reference_tracker_;
}

void SortRuleReferenceTrackerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SortRuleReferenceTrackerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SortRuleReferenceTrackerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.reference_tracker_ != nullptr);
    _impl_.reference_tracker_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortRuleReferenceTrackerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference reference_tracker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_tracker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortRuleReferenceTrackerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SortRuleReferenceTrackerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference reference_tracker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reference_tracker(this),
        _Internal::reference_tracker(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SortRuleReferenceTrackerArchive)
  return target;
}

size_t SortRuleReferenceTrackerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SortRuleReferenceTrackerArchive)
  size_t total_size = 0;

  // required .TSP.Reference reference_tracker = 1;
  if (_internal_has_reference_tracker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_tracker_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortRuleReferenceTrackerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SortRuleReferenceTrackerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortRuleReferenceTrackerArchive::GetClassData() const { return &_class_data_; }


void SortRuleReferenceTrackerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SortRuleReferenceTrackerArchive*>(&to_msg);
  auto& from = static_cast<const SortRuleReferenceTrackerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.SortRuleReferenceTrackerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reference_tracker()) {
    _this->_internal_mutable_reference_tracker()->::TSP::Reference::MergeFrom(
        from._internal_reference_tracker());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortRuleReferenceTrackerArchive::CopyFrom(const SortRuleReferenceTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SortRuleReferenceTrackerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortRuleReferenceTrackerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_reference_tracker()) {
    if (!_impl_.reference_tracker_->IsInitialized()) return false;
  }
  return true;
}

void SortRuleReferenceTrackerArchive::InternalSwap(SortRuleReferenceTrackerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.reference_tracker_, other->_impl_.reference_tracker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortRuleReferenceTrackerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[37]);
}

// ===================================================================

class CellRegion::_Internal {
 public:
};

CellRegion::CellRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellRegion)
}
CellRegion::CellRegion(const CellRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRegion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_ranges_){from._impl_.cell_ranges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.CellRegion)
}

inline void CellRegion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_ranges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellRegion::~CellRegion() {
  // @@protoc_insertion_point(destructor:TST.CellRegion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_ranges_.~RepeatedPtrField();
}

void CellRegion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellRegion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRegion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.CellRange cell_ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRegion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellRegion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_ranges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellRegion)
  return target;
}

size_t CellRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellRegion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_ranges = 1;
  total_size += 1UL * this->_internal_cell_ranges_size();
  for (const auto& msg : this->_impl_.cell_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRegion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRegion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRegion::GetClassData() const { return &_class_data_; }


void CellRegion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRegion*>(&to_msg);
  auto& from = static_cast<const CellRegion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellRegion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_ranges_.MergeFrom(from._impl_.cell_ranges_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRegion::CopyFrom(const CellRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRegion::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_ranges_))
    return false;
  return true;
}

void CellRegion::InternalSwap(CellRegion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_ranges_.InternalSwap(&other->_impl_.cell_ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRegion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[38]);
}

// ===================================================================

class CellUIDRegionArchive::_Internal {
 public:
};

void CellUIDRegionArchive::clear_cell_uid_ranges() {
  _impl_.cell_uid_ranges_.Clear();
}
CellUIDRegionArchive::CellUIDRegionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellUIDRegionArchive)
}
CellUIDRegionArchive::CellUIDRegionArchive(const CellUIDRegionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellUIDRegionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_uid_ranges_){from._impl_.cell_uid_ranges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.CellUIDRegionArchive)
}

inline void CellUIDRegionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_uid_ranges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellUIDRegionArchive::~CellUIDRegionArchive() {
  // @@protoc_insertion_point(destructor:TST.CellUIDRegionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellUIDRegionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_uid_ranges_.~RepeatedPtrField();
}

void CellUIDRegionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellUIDRegionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellUIDRegionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_uid_ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellUIDRegionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUIDRectArchive cell_uid_ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_uid_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellUIDRegionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellUIDRegionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUIDRectArchive cell_uid_ranges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_uid_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_uid_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellUIDRegionArchive)
  return target;
}

size_t CellUIDRegionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellUIDRegionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDRectArchive cell_uid_ranges = 1;
  total_size += 1UL * this->_internal_cell_uid_ranges_size();
  for (const auto& msg : this->_impl_.cell_uid_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellUIDRegionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellUIDRegionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellUIDRegionArchive::GetClassData() const { return &_class_data_; }


void CellUIDRegionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellUIDRegionArchive*>(&to_msg);
  auto& from = static_cast<const CellUIDRegionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellUIDRegionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_uid_ranges_.MergeFrom(from._impl_.cell_uid_ranges_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellUIDRegionArchive::CopyFrom(const CellUIDRegionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellUIDRegionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellUIDRegionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_uid_ranges_))
    return false;
  return true;
}

void CellUIDRegionArchive::InternalSwap(CellUIDRegionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_uid_ranges_.InternalSwap(&other->_impl_.cell_uid_ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellUIDRegionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[39]);
}

// ===================================================================

class StructuredTextImportRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredTextImportRecord>()._impl_._has_bits_);
  static const ::TSK::StructuredTextImportSettings& import_settings(const StructuredTextImportRecord* msg);
  static void set_has_import_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_import_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_import_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TST::CellRegion& imported_region(const StructuredTextImportRecord* msg);
  static void set_has_imported_region(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_source_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSK::StructuredTextImportSettings&
StructuredTextImportRecord::_Internal::import_settings(const StructuredTextImportRecord* msg) {
  return *msg->_impl_.import_settings_;
}
const ::TST::CellRegion&
StructuredTextImportRecord::_Internal::imported_region(const StructuredTextImportRecord* msg) {
  return *msg->_impl_.imported_region_;
}
void StructuredTextImportRecord::clear_import_settings() {
  if (_impl_.import_settings_ != nullptr) _impl_.import_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
StructuredTextImportRecord::StructuredTextImportRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StructuredTextImportRecord)
}
StructuredTextImportRecord::StructuredTextImportRecord(const StructuredTextImportRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StructuredTextImportRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.import_source_){}
    , decltype(_impl_.source_data_){}
    , decltype(_impl_.import_settings_){nullptr}
    , decltype(_impl_.imported_region_){nullptr}
    , decltype(_impl_.import_date_){}
    , decltype(_impl_.source_encoding_){}
    , decltype(_impl_.source_row_count_){}
    , decltype(_impl_.source_column_count_){}
    , decltype(_impl_.confidence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.import_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.import_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_import_source()) {
    _this->_impl_.import_source_.Set(from._internal_import_source(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_data()) {
    _this->_impl_.source_data_.Set(from._internal_source_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_import_settings()) {
    _this->_impl_.import_settings_ = new ::TSK::StructuredTextImportSettings(*from._impl_.import_settings_);
  }
  if (from._internal_has_imported_region()) {
    _this->_impl_.imported_region_ = new ::TST::CellRegion(*from._impl_.imported_region_);
  }
  ::memcpy(&_impl_.import_date_, &from._impl_.import_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.import_date_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:TST.StructuredTextImportRecord)
}

inline void StructuredTextImportRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.import_source_){}
    , decltype(_impl_.source_data_){}
    , decltype(_impl_.import_settings_){nullptr}
    , decltype(_impl_.imported_region_){nullptr}
    , decltype(_impl_.import_date_){0}
    , decltype(_impl_.source_encoding_){uint64_t{0u}}
    , decltype(_impl_.source_row_count_){uint64_t{0u}}
    , decltype(_impl_.source_column_count_){uint64_t{0u}}
    , decltype(_impl_.confidence_){0}
  };
  _impl_.import_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.import_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StructuredTextImportRecord::~StructuredTextImportRecord() {
  // @@protoc_insertion_point(destructor:TST.StructuredTextImportRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredTextImportRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.import_source_.Destroy();
  _impl_.source_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.import_settings_;
  if (this != internal_default_instance()) delete _impl_.imported_region_;
}

void StructuredTextImportRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructuredTextImportRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StructuredTextImportRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.import_source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.source_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.import_settings_ != nullptr);
      _impl_.import_settings_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.imported_region_ != nullptr);
      _impl_.imported_region_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.import_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.source_column_count_) -
        reinterpret_cast<char*>(&_impl_.import_date_)) + sizeof(_impl_.source_column_count_));
  }
  _impl_.confidence_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructuredTextImportRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.StructuredTextImportSettings import_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string import_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_import_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.StructuredTextImportRecord.import_source");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double import_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_import_date(&has_bits);
          _impl_.import_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bytes source_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_source_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 source_encoding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_source_encoding(&has_bits);
          _impl_.source_encoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellRegion imported_region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_imported_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 source_row_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_source_row_count(&has_bits);
          _impl_.source_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 source_column_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_source_column_count(&has_bits);
          _impl_.source_column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredTextImportRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StructuredTextImportRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.StructuredTextImportSettings import_settings = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::import_settings(this),
        _Internal::import_settings(this).GetCachedSize(), target, stream);
  }

  // optional string import_source = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_import_source().data(), static_cast<int>(this->_internal_import_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.StructuredTextImportRecord.import_source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_import_source(), target);
  }

  // optional double import_date = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_import_date(), target);
  }

  // optional bytes source_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_source_data(), target);
  }

  // optional uint64 source_encoding = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_source_encoding(), target);
  }

  // optional float confidence = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_confidence(), target);
  }

  // optional .TST.CellRegion imported_region = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::imported_region(this),
        _Internal::imported_region(this).GetCachedSize(), target, stream);
  }

  // optional uint64 source_row_count = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_source_row_count(), target);
  }

  // optional uint64 source_column_count = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_source_column_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StructuredTextImportRecord)
  return target;
}

size_t StructuredTextImportRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StructuredTextImportRecord)
  size_t total_size = 0;

  // required .TSK.StructuredTextImportSettings import_settings = 1;
  if (_internal_has_import_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.import_settings_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string import_source = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_import_source());
    }

    // optional bytes source_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_source_data());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .TST.CellRegion imported_region = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.imported_region_);
    }

    // optional double import_date = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 source_encoding = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_encoding());
    }

    // optional uint64 source_row_count = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_row_count());
    }

    // optional uint64 source_column_count = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_source_column_count());
    }

  }
  // optional float confidence = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructuredTextImportRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StructuredTextImportRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructuredTextImportRecord::GetClassData() const { return &_class_data_; }


void StructuredTextImportRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StructuredTextImportRecord*>(&to_msg);
  auto& from = static_cast<const StructuredTextImportRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StructuredTextImportRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_import_source(from._internal_import_source());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_source_data(from._internal_source_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_import_settings()->::TSK::StructuredTextImportSettings::MergeFrom(
          from._internal_import_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_imported_region()->::TST::CellRegion::MergeFrom(
          from._internal_imported_region());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.import_date_ = from._impl_.import_date_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.source_encoding_ = from._impl_.source_encoding_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.source_row_count_ = from._impl_.source_row_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.source_column_count_ = from._impl_.source_column_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructuredTextImportRecord::CopyFrom(const StructuredTextImportRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StructuredTextImportRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredTextImportRecord::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_import_settings()) {
    if (!_impl_.import_settings_->IsInitialized()) return false;
  }
  if (_internal_has_imported_region()) {
    if (!_impl_.imported_region_->IsInitialized()) return false;
  }
  return true;
}

void StructuredTextImportRecord::InternalSwap(StructuredTextImportRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.import_source_, lhs_arena,
      &other->_impl_.import_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_data_, lhs_arena,
      &other->_impl_.source_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StructuredTextImportRecord, _impl_.confidence_)
      + sizeof(StructuredTextImportRecord::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(StructuredTextImportRecord, _impl_.import_settings_)>(
          reinterpret_cast<char*>(&_impl_.import_settings_),
          reinterpret_cast<char*>(&other->_impl_.import_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredTextImportRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[40]);
}

// ===================================================================

class TableModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableModelArchive>()._impl_._has_bits_);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_from_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_was_cut(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static const ::TSP::Reference& table_style(const TableModelArchive* msg);
  static void set_has_table_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& body_text_style(const TableModelArchive* msg);
  static void set_has_body_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& header_row_text_style(const TableModelArchive* msg);
  static void set_has_header_row_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Reference& header_column_text_style(const TableModelArchive* msg);
  static void set_has_header_column_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& footer_row_text_style(const TableModelArchive* msg);
  static void set_has_footer_row_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& body_cell_style(const TableModelArchive* msg);
  static void set_has_body_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& header_row_style(const TableModelArchive* msg);
  static void set_has_header_row_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& header_column_style(const TableModelArchive* msg);
  static void set_has_header_column_style(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& footer_row_style(const TableModelArchive* msg);
  static void set_has_footer_row_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& table_name_style(const TableModelArchive* msg);
  static void set_has_table_name_style(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Reference& table_name_shape_style(const TableModelArchive* msg);
  static void set_has_table_name_shape_style(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Reference& table_style_preset(const TableModelArchive* msg);
  static void set_has_table_style_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_preset_index(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static const ::TST::DataStore& base_data_store(const TableModelArchive* msg);
  static void set_has_base_data_store(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& provider(const TableModelArchive* msg);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_number_of_rows(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_number_of_columns(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_table_name_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_table_name_height(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_table_name_border_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_number_of_header_rows(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_number_of_header_columns(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_number_of_footer_rows(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_header_rows_frozen(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_header_columns_frozen(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_number_of_hidden_rows(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_number_of_hidden_columns(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_number_of_user_hidden_rows(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_number_of_user_hidden_columns(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_number_of_filtered_rows(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_default_row_height(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_default_column_width(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::TST::CellID& origin_offset(const TableModelArchive* msg);
  static void set_has_origin_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_repeating_header_rows_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_style_apply_clears_all(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_repeating_header_columns_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static const ::TSP::Reference& hidden_state_formula_owner_for_columns(const TableModelArchive* msg);
  static void set_has_hidden_state_formula_owner_for_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& hidden_state_formula_owner_for_rows(const TableModelArchive* msg);
  static void set_has_hidden_state_formula_owner_for_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::Reference& row_filter_set_pre_pivot(const TableModelArchive* msg);
  static void set_has_row_filter_set_pre_pivot(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::CFUUIDArchive& conditional_style_formula_owner_id(const TableModelArchive* msg);
  static void set_has_conditional_style_formula_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TST::TableSortOrderArchive& sort_order(const TableModelArchive* msg);
  static void set_has_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TST::SortRuleReferenceTrackerArchive& sort_rule_reference_tracker(const TableModelArchive* msg);
  static void set_has_sort_rule_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Reference& base_column_row_uids(const TableModelArchive* msg);
  static void set_has_base_column_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TST::MergeOwnerArchive& merge_owner(const TableModelArchive* msg);
  static void set_has_merge_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSP::Reference& stroke_sidecar(const TableModelArchive* msg);
  static void set_has_stroke_sidecar(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_preset_needs_strong_ownership(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static const ::TST::StructuredTextImportRecord& text_import_record(const TableModelArchive* msg);
  static void set_has_text_import_record(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSP::Reference& category_level_1_style(const TableModelArchive* msg);
  static void set_has_category_level_1_style(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSP::Reference& category_level_2_style(const TableModelArchive* msg);
  static void set_has_category_level_2_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSP::Reference& category_level_3_style(const TableModelArchive* msg);
  static void set_has_category_level_3_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSP::Reference& category_level_4_style(const TableModelArchive* msg);
  static void set_has_category_level_4_style(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSP::Reference& category_level_5_style(const TableModelArchive* msg);
  static void set_has_category_level_5_style(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::TSP::Reference& category_level_1_text_style(const TableModelArchive* msg);
  static void set_has_category_level_1_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSP::Reference& category_level_2_text_style(const TableModelArchive* msg);
  static void set_has_category_level_2_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSP::Reference& category_level_3_text_style(const TableModelArchive* msg);
  static void set_has_category_level_3_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSP::Reference& category_level_4_text_style(const TableModelArchive* msg);
  static void set_has_category_level_4_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSP::Reference& category_level_5_text_style(const TableModelArchive* msg);
  static void set_has_category_level_5_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TST::HiddenStatesOwnerArchive& hidden_states_owner(const TableModelArchive* msg);
  static void set_has_hidden_states_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSP::Reference& label_level_1_style(const TableModelArchive* msg);
  static void set_has_label_level_1_style(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSP::Reference& label_level_2_style(const TableModelArchive* msg);
  static void set_has_label_level_2_style(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::TSP::Reference& label_level_3_style(const TableModelArchive* msg);
  static void set_has_label_level_3_style(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSP::Reference& label_level_4_style(const TableModelArchive* msg);
  static void set_has_label_level_4_style(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSP::Reference& label_level_5_style(const TableModelArchive* msg);
  static void set_has_label_level_5_style(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::TSP::Reference& label_level_1_text_style(const TableModelArchive* msg);
  static void set_has_label_level_1_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::TSP::Reference& label_level_2_text_style(const TableModelArchive* msg);
  static void set_has_label_level_2_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::TSP::Reference& label_level_3_text_style(const TableModelArchive* msg);
  static void set_has_label_level_3_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSP::Reference& label_level_4_text_style(const TableModelArchive* msg);
  static void set_has_label_level_4_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::TSP::Reference& label_level_5_text_style(const TableModelArchive* msg);
  static void set_has_label_level_5_text_style(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::TST::CategoryOwnerArchive& category_owner_deprecated(const TableModelArchive* msg);
  static void set_has_category_owner_deprecated(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::TST::PencilAnnotationOwnerArchive& pencil_annotation_owner(const TableModelArchive* msg);
  static void set_has_pencil_annotation_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_from_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::HauntedOwnerArchive& haunted_owner(const TableModelArchive* msg);
  static void set_has_haunted_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::TSP::Reference& pivot_owner(const TableModelArchive* msg);
  static void set_has_pivot_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::TSP::Reference& category_owner(const TableModelArchive* msg);
  static void set_has_category_owner(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::TSP::Reference& pivot_body_summary_row_style(const TableModelArchive* msg);
  static void set_has_pivot_body_summary_row_style(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::TSP::Reference& pivot_body_summary_column_style(const TableModelArchive* msg);
  static void set_has_pivot_body_summary_column_style(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::TSP::Reference& pivot_header_column_summary_style(const TableModelArchive* msg);
  static void set_has_pivot_header_column_summary_style(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0x0000f7b3) ^ 0x0000f7b3)
       | ((has_bits[1] & 0x0c000000) ^ 0x0c000000)
       | ((has_bits[2] & 0x00000003) ^ 0x00000003)) != 0;
  }
};

const ::TSP::Reference&
TableModelArchive::_Internal::table_style(const TableModelArchive* msg) {
  return *msg->_impl_.table_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::body_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.body_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::header_row_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.header_row_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::header_column_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.header_column_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::footer_row_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.footer_row_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::body_cell_style(const TableModelArchive* msg) {
  return *msg->_impl_.body_cell_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::header_row_style(const TableModelArchive* msg) {
  return *msg->_impl_.header_row_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::header_column_style(const TableModelArchive* msg) {
  return *msg->_impl_.header_column_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::footer_row_style(const TableModelArchive* msg) {
  return *msg->_impl_.footer_row_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::table_name_style(const TableModelArchive* msg) {
  return *msg->_impl_.table_name_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::table_name_shape_style(const TableModelArchive* msg) {
  return *msg->_impl_.table_name_shape_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::table_style_preset(const TableModelArchive* msg) {
  return *msg->_impl_.table_style_preset_;
}
const ::TST::DataStore&
TableModelArchive::_Internal::base_data_store(const TableModelArchive* msg) {
  return *msg->_impl_.base_data_store_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::provider(const TableModelArchive* msg) {
  return *msg->_impl_.provider_;
}
const ::TST::CellID&
TableModelArchive::_Internal::origin_offset(const TableModelArchive* msg) {
  return *msg->_impl_.origin_offset_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::hidden_state_formula_owner_for_columns(const TableModelArchive* msg) {
  return *msg->_impl_.hidden_state_formula_owner_for_columns_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::hidden_state_formula_owner_for_rows(const TableModelArchive* msg) {
  return *msg->_impl_.hidden_state_formula_owner_for_rows_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::row_filter_set_pre_pivot(const TableModelArchive* msg) {
  return *msg->_impl_.row_filter_set_pre_pivot_;
}
const ::TSP::CFUUIDArchive&
TableModelArchive::_Internal::conditional_style_formula_owner_id(const TableModelArchive* msg) {
  return *msg->_impl_.conditional_style_formula_owner_id_;
}
const ::TST::TableSortOrderArchive&
TableModelArchive::_Internal::sort_order(const TableModelArchive* msg) {
  return *msg->_impl_.sort_order_;
}
const ::TST::SortRuleReferenceTrackerArchive&
TableModelArchive::_Internal::sort_rule_reference_tracker(const TableModelArchive* msg) {
  return *msg->_impl_.sort_rule_reference_tracker_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::base_column_row_uids(const TableModelArchive* msg) {
  return *msg->_impl_.base_column_row_uids_;
}
const ::TST::MergeOwnerArchive&
TableModelArchive::_Internal::merge_owner(const TableModelArchive* msg) {
  return *msg->_impl_.merge_owner_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::stroke_sidecar(const TableModelArchive* msg) {
  return *msg->_impl_.stroke_sidecar_;
}
const ::TST::StructuredTextImportRecord&
TableModelArchive::_Internal::text_import_record(const TableModelArchive* msg) {
  return *msg->_impl_.text_import_record_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_1_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_1_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_2_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_2_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_3_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_3_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_4_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_4_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_5_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_5_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_1_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_1_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_2_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_2_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_3_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_3_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_4_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_4_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_level_5_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.category_level_5_text_style_;
}
const ::TST::HiddenStatesOwnerArchive&
TableModelArchive::_Internal::hidden_states_owner(const TableModelArchive* msg) {
  return *msg->_impl_.hidden_states_owner_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_1_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_1_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_2_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_2_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_3_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_3_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_4_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_4_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_5_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_5_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_1_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_1_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_2_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_2_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_3_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_3_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_4_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_4_text_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::label_level_5_text_style(const TableModelArchive* msg) {
  return *msg->_impl_.label_level_5_text_style_;
}
const ::TST::CategoryOwnerArchive&
TableModelArchive::_Internal::category_owner_deprecated(const TableModelArchive* msg) {
  return *msg->_impl_.category_owner_deprecated_;
}
const ::TST::PencilAnnotationOwnerArchive&
TableModelArchive::_Internal::pencil_annotation_owner(const TableModelArchive* msg) {
  return *msg->_impl_.pencil_annotation_owner_;
}
const ::TSCE::HauntedOwnerArchive&
TableModelArchive::_Internal::haunted_owner(const TableModelArchive* msg) {
  return *msg->_impl_.haunted_owner_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::pivot_owner(const TableModelArchive* msg) {
  return *msg->_impl_.pivot_owner_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::category_owner(const TableModelArchive* msg) {
  return *msg->_impl_.category_owner_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::pivot_body_summary_row_style(const TableModelArchive* msg) {
  return *msg->_impl_.pivot_body_summary_row_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::pivot_body_summary_column_style(const TableModelArchive* msg) {
  return *msg->_impl_.pivot_body_summary_column_style_;
}
const ::TSP::Reference&
TableModelArchive::_Internal::pivot_header_column_summary_style(const TableModelArchive* msg) {
  return *msg->_impl_.pivot_header_column_summary_style_;
}
void TableModelArchive::clear_table_style() {
  if (_impl_.table_style_ != nullptr) _impl_.table_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void TableModelArchive::clear_body_text_style() {
  if (_impl_.body_text_style_ != nullptr) _impl_.body_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void TableModelArchive::clear_header_row_text_style() {
  if (_impl_.header_row_text_style_ != nullptr) _impl_.header_row_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void TableModelArchive::clear_header_column_text_style() {
  if (_impl_.header_column_text_style_ != nullptr) _impl_.header_column_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void TableModelArchive::clear_footer_row_text_style() {
  if (_impl_.footer_row_text_style_ != nullptr) _impl_.footer_row_text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void TableModelArchive::clear_body_cell_style() {
  if (_impl_.body_cell_style_ != nullptr) _impl_.body_cell_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void TableModelArchive::clear_header_row_style() {
  if (_impl_.header_row_style_ != nullptr) _impl_.header_row_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void TableModelArchive::clear_header_column_style() {
  if (_impl_.header_column_style_ != nullptr) _impl_.header_column_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void TableModelArchive::clear_footer_row_style() {
  if (_impl_.footer_row_style_ != nullptr) _impl_.footer_row_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void TableModelArchive::clear_table_name_style() {
  if (_impl_.table_name_style_ != nullptr) _impl_.table_name_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void TableModelArchive::clear_table_name_shape_style() {
  if (_impl_.table_name_shape_style_ != nullptr) _impl_.table_name_shape_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void TableModelArchive::clear_table_style_preset() {
  if (_impl_.table_style_preset_ != nullptr) _impl_.table_style_preset_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
void TableModelArchive::clear_provider() {
  if (_impl_.provider_ != nullptr) _impl_.provider_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void TableModelArchive::clear_hidden_state_formula_owner_for_columns() {
  if (_impl_.hidden_state_formula_owner_for_columns_ != nullptr) _impl_.hidden_state_formula_owner_for_columns_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void TableModelArchive::clear_hidden_state_formula_owner_for_rows() {
  if (_impl_.hidden_state_formula_owner_for_rows_ != nullptr) _impl_.hidden_state_formula_owner_for_rows_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void TableModelArchive::clear_row_filter_set_pre_pivot() {
  if (_impl_.row_filter_set_pre_pivot_ != nullptr) _impl_.row_filter_set_pre_pivot_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void TableModelArchive::clear_conditional_style_formula_owner_id() {
  if (_impl_.conditional_style_formula_owner_id_ != nullptr) _impl_.conditional_style_formula_owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void TableModelArchive::clear_base_column_row_uids() {
  if (_impl_.base_column_row_uids_ != nullptr) _impl_.base_column_row_uids_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void TableModelArchive::clear_stroke_sidecar() {
  if (_impl_.stroke_sidecar_ != nullptr) _impl_.stroke_sidecar_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
void TableModelArchive::clear_category_level_1_style() {
  if (_impl_.category_level_1_style_ != nullptr) _impl_.category_level_1_style_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
void TableModelArchive::clear_category_level_2_style() {
  if (_impl_.category_level_2_style_ != nullptr) _impl_.category_level_2_style_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
void TableModelArchive::clear_category_level_3_style() {
  if (_impl_.category_level_3_style_ != nullptr) _impl_.category_level_3_style_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
void TableModelArchive::clear_category_level_4_style() {
  if (_impl_.category_level_4_style_ != nullptr) _impl_.category_level_4_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
void TableModelArchive::clear_category_level_5_style() {
  if (_impl_.category_level_5_style_ != nullptr) _impl_.category_level_5_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
void TableModelArchive::clear_category_level_1_text_style() {
  if (_impl_.category_level_1_text_style_ != nullptr) _impl_.category_level_1_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
void TableModelArchive::clear_category_level_2_text_style() {
  if (_impl_.category_level_2_text_style_ != nullptr) _impl_.category_level_2_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
void TableModelArchive::clear_category_level_3_text_style() {
  if (_impl_.category_level_3_text_style_ != nullptr) _impl_.category_level_3_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
void TableModelArchive::clear_category_level_4_text_style() {
  if (_impl_.category_level_4_text_style_ != nullptr) _impl_.category_level_4_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
void TableModelArchive::clear_category_level_5_text_style() {
  if (_impl_.category_level_5_text_style_ != nullptr) _impl_.category_level_5_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
void TableModelArchive::clear_label_level_1_style() {
  if (_impl_.label_level_1_style_ != nullptr) _impl_.label_level_1_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
void TableModelArchive::clear_label_level_2_style() {
  if (_impl_.label_level_2_style_ != nullptr) _impl_.label_level_2_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
void TableModelArchive::clear_label_level_3_style() {
  if (_impl_.label_level_3_style_ != nullptr) _impl_.label_level_3_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
void TableModelArchive::clear_label_level_4_style() {
  if (_impl_.label_level_4_style_ != nullptr) _impl_.label_level_4_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
void TableModelArchive::clear_label_level_5_style() {
  if (_impl_.label_level_5_style_ != nullptr) _impl_.label_level_5_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00001000u;
}
void TableModelArchive::clear_label_level_1_text_style() {
  if (_impl_.label_level_1_text_style_ != nullptr) _impl_.label_level_1_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00002000u;
}
void TableModelArchive::clear_label_level_2_text_style() {
  if (_impl_.label_level_2_text_style_ != nullptr) _impl_.label_level_2_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00004000u;
}
void TableModelArchive::clear_label_level_3_text_style() {
  if (_impl_.label_level_3_text_style_ != nullptr) _impl_.label_level_3_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00008000u;
}
void TableModelArchive::clear_label_level_4_text_style() {
  if (_impl_.label_level_4_text_style_ != nullptr) _impl_.label_level_4_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00010000u;
}
void TableModelArchive::clear_label_level_5_text_style() {
  if (_impl_.label_level_5_text_style_ != nullptr) _impl_.label_level_5_text_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00020000u;
}
void TableModelArchive::clear_haunted_owner() {
  if (_impl_.haunted_owner_ != nullptr) _impl_.haunted_owner_->Clear();
  _impl_._has_bits_[1] &= ~0x00100000u;
}
void TableModelArchive::clear_pivot_owner() {
  if (_impl_.pivot_owner_ != nullptr) _impl_.pivot_owner_->Clear();
  _impl_._has_bits_[1] &= ~0x00200000u;
}
void TableModelArchive::clear_category_owner() {
  if (_impl_.category_owner_ != nullptr) _impl_.category_owner_->Clear();
  _impl_._has_bits_[1] &= ~0x00400000u;
}
void TableModelArchive::clear_pivot_body_summary_row_style() {
  if (_impl_.pivot_body_summary_row_style_ != nullptr) _impl_.pivot_body_summary_row_style_->Clear();
  _impl_._has_bits_[1] &= ~0x00800000u;
}
void TableModelArchive::clear_pivot_body_summary_column_style() {
  if (_impl_.pivot_body_summary_column_style_ != nullptr) _impl_.pivot_body_summary_column_style_->Clear();
  _impl_._has_bits_[1] &= ~0x01000000u;
}
void TableModelArchive::clear_pivot_header_column_summary_style() {
  if (_impl_.pivot_header_column_summary_style_ != nullptr) _impl_.pivot_header_column_summary_style_->Clear();
  _impl_._has_bits_[1] &= ~0x02000000u;
}
TableModelArchive::TableModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableModelArchive)
}
TableModelArchive::TableModelArchive(const TableModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableModelArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pivot_value_types_by_col_){from._impl_.pivot_value_types_by_col_}
    , decltype(_impl_.pivot_date_grouping_columns_){from._impl_.pivot_date_grouping_columns_}
    , decltype(_impl_.pivot_date_grouping_types_){from._impl_.pivot_date_grouping_types_}
    , decltype(_impl_.table_id_){}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.from_table_id_){}
    , decltype(_impl_.from_group_by_uid_){}
    , decltype(_impl_.table_style_){nullptr}
    , decltype(_impl_.base_data_store_){nullptr}
    , decltype(_impl_.provider_){nullptr}
    , decltype(_impl_.body_cell_style_){nullptr}
    , decltype(_impl_.header_row_style_){nullptr}
    , decltype(_impl_.header_column_style_){nullptr}
    , decltype(_impl_.footer_row_style_){nullptr}
    , decltype(_impl_.origin_offset_){nullptr}
    , decltype(_impl_.body_text_style_){nullptr}
    , decltype(_impl_.header_row_text_style_){nullptr}
    , decltype(_impl_.header_column_text_style_){nullptr}
    , decltype(_impl_.footer_row_text_style_){nullptr}
    , decltype(_impl_.table_name_style_){nullptr}
    , decltype(_impl_.hidden_state_formula_owner_for_columns_){nullptr}
    , decltype(_impl_.hidden_state_formula_owner_for_rows_){nullptr}
    , decltype(_impl_.table_name_shape_style_){nullptr}
    , decltype(_impl_.row_filter_set_pre_pivot_){nullptr}
    , decltype(_impl_.conditional_style_formula_owner_id_){nullptr}
    , decltype(_impl_.sort_order_){nullptr}
    , decltype(_impl_.sort_rule_reference_tracker_){nullptr}
    , decltype(_impl_.base_column_row_uids_){nullptr}
    , decltype(_impl_.merge_owner_){nullptr}
    , decltype(_impl_.table_style_preset_){nullptr}
    , decltype(_impl_.stroke_sidecar_){nullptr}
    , decltype(_impl_.text_import_record_){nullptr}
    , decltype(_impl_.category_level_1_style_){nullptr}
    , decltype(_impl_.category_level_2_style_){nullptr}
    , decltype(_impl_.category_level_3_style_){nullptr}
    , decltype(_impl_.category_level_4_style_){nullptr}
    , decltype(_impl_.category_level_5_style_){nullptr}
    , decltype(_impl_.category_level_1_text_style_){nullptr}
    , decltype(_impl_.category_level_2_text_style_){nullptr}
    , decltype(_impl_.category_level_3_text_style_){nullptr}
    , decltype(_impl_.category_level_4_text_style_){nullptr}
    , decltype(_impl_.category_level_5_text_style_){nullptr}
    , decltype(_impl_.hidden_states_owner_){nullptr}
    , decltype(_impl_.label_level_1_style_){nullptr}
    , decltype(_impl_.label_level_2_style_){nullptr}
    , decltype(_impl_.label_level_3_style_){nullptr}
    , decltype(_impl_.label_level_4_style_){nullptr}
    , decltype(_impl_.label_level_5_style_){nullptr}
    , decltype(_impl_.label_level_1_text_style_){nullptr}
    , decltype(_impl_.label_level_2_text_style_){nullptr}
    , decltype(_impl_.label_level_3_text_style_){nullptr}
    , decltype(_impl_.label_level_4_text_style_){nullptr}
    , decltype(_impl_.label_level_5_text_style_){nullptr}
    , decltype(_impl_.category_owner_deprecated_){nullptr}
    , decltype(_impl_.pencil_annotation_owner_){nullptr}
    , decltype(_impl_.haunted_owner_){nullptr}
    , decltype(_impl_.pivot_owner_){nullptr}
    , decltype(_impl_.category_owner_){nullptr}
    , decltype(_impl_.pivot_body_summary_row_style_){nullptr}
    , decltype(_impl_.pivot_body_summary_column_style_){nullptr}
    , decltype(_impl_.pivot_header_column_summary_style_){nullptr}
    , decltype(_impl_.number_of_rows_){}
    , decltype(_impl_.number_of_columns_){}
    , decltype(_impl_.number_of_header_rows_){}
    , decltype(_impl_.number_of_header_columns_){}
    , decltype(_impl_.number_of_footer_rows_){}
    , decltype(_impl_.number_of_hidden_rows_){}
    , decltype(_impl_.default_row_height_){}
    , decltype(_impl_.default_column_width_){}
    , decltype(_impl_.number_of_hidden_columns_){}
    , decltype(_impl_.header_columns_frozen_){}
    , decltype(_impl_.repeating_header_rows_enabled_){}
    , decltype(_impl_.style_apply_clears_all_){}
    , decltype(_impl_.repeating_header_columns_enabled_){}
    , decltype(_impl_.preset_index_){}
    , decltype(_impl_.was_cut_){}
    , decltype(_impl_.table_name_enabled_){}
    , decltype(_impl_.table_name_border_enabled_){}
    , decltype(_impl_.header_rows_frozen_){}
    , decltype(_impl_.table_name_height_){}
    , decltype(_impl_.number_of_filtered_rows_){}
    , decltype(_impl_.number_of_user_hidden_rows_){}
    , decltype(_impl_.number_of_user_hidden_columns_){}
    , decltype(_impl_.preset_needs_strong_ownership_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.table_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_.Set(from._internal_table_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_table_name()) {
    _this->_impl_.table_name_.Set(from._internal_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_table_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_table_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from_table_id()) {
    _this->_impl_.from_table_id_.Set(from._internal_from_table_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_group_by_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_group_by_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_from_group_by_uid()) {
    _this->_impl_.from_group_by_uid_.Set(from._internal_from_group_by_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_table_style()) {
    _this->_impl_.table_style_ = new ::TSP::Reference(*from._impl_.table_style_);
  }
  if (from._internal_has_base_data_store()) {
    _this->_impl_.base_data_store_ = new ::TST::DataStore(*from._impl_.base_data_store_);
  }
  if (from._internal_has_provider()) {
    _this->_impl_.provider_ = new ::TSP::Reference(*from._impl_.provider_);
  }
  if (from._internal_has_body_cell_style()) {
    _this->_impl_.body_cell_style_ = new ::TSP::Reference(*from._impl_.body_cell_style_);
  }
  if (from._internal_has_header_row_style()) {
    _this->_impl_.header_row_style_ = new ::TSP::Reference(*from._impl_.header_row_style_);
  }
  if (from._internal_has_header_column_style()) {
    _this->_impl_.header_column_style_ = new ::TSP::Reference(*from._impl_.header_column_style_);
  }
  if (from._internal_has_footer_row_style()) {
    _this->_impl_.footer_row_style_ = new ::TSP::Reference(*from._impl_.footer_row_style_);
  }
  if (from._internal_has_origin_offset()) {
    _this->_impl_.origin_offset_ = new ::TST::CellID(*from._impl_.origin_offset_);
  }
  if (from._internal_has_body_text_style()) {
    _this->_impl_.body_text_style_ = new ::TSP::Reference(*from._impl_.body_text_style_);
  }
  if (from._internal_has_header_row_text_style()) {
    _this->_impl_.header_row_text_style_ = new ::TSP::Reference(*from._impl_.header_row_text_style_);
  }
  if (from._internal_has_header_column_text_style()) {
    _this->_impl_.header_column_text_style_ = new ::TSP::Reference(*from._impl_.header_column_text_style_);
  }
  if (from._internal_has_footer_row_text_style()) {
    _this->_impl_.footer_row_text_style_ = new ::TSP::Reference(*from._impl_.footer_row_text_style_);
  }
  if (from._internal_has_table_name_style()) {
    _this->_impl_.table_name_style_ = new ::TSP::Reference(*from._impl_.table_name_style_);
  }
  if (from._internal_has_hidden_state_formula_owner_for_columns()) {
    _this->_impl_.hidden_state_formula_owner_for_columns_ = new ::TSP::Reference(*from._impl_.hidden_state_formula_owner_for_columns_);
  }
  if (from._internal_has_hidden_state_formula_owner_for_rows()) {
    _this->_impl_.hidden_state_formula_owner_for_rows_ = new ::TSP::Reference(*from._impl_.hidden_state_formula_owner_for_rows_);
  }
  if (from._internal_has_table_name_shape_style()) {
    _this->_impl_.table_name_shape_style_ = new ::TSP::Reference(*from._impl_.table_name_shape_style_);
  }
  if (from._internal_has_row_filter_set_pre_pivot()) {
    _this->_impl_.row_filter_set_pre_pivot_ = new ::TSP::Reference(*from._impl_.row_filter_set_pre_pivot_);
  }
  if (from._internal_has_conditional_style_formula_owner_id()) {
    _this->_impl_.conditional_style_formula_owner_id_ = new ::TSP::CFUUIDArchive(*from._impl_.conditional_style_formula_owner_id_);
  }
  if (from._internal_has_sort_order()) {
    _this->_impl_.sort_order_ = new ::TST::TableSortOrderArchive(*from._impl_.sort_order_);
  }
  if (from._internal_has_sort_rule_reference_tracker()) {
    _this->_impl_.sort_rule_reference_tracker_ = new ::TST::SortRuleReferenceTrackerArchive(*from._impl_.sort_rule_reference_tracker_);
  }
  if (from._internal_has_base_column_row_uids()) {
    _this->_impl_.base_column_row_uids_ = new ::TSP::Reference(*from._impl_.base_column_row_uids_);
  }
  if (from._internal_has_merge_owner()) {
    _this->_impl_.merge_owner_ = new ::TST::MergeOwnerArchive(*from._impl_.merge_owner_);
  }
  if (from._internal_has_table_style_preset()) {
    _this->_impl_.table_style_preset_ = new ::TSP::Reference(*from._impl_.table_style_preset_);
  }
  if (from._internal_has_stroke_sidecar()) {
    _this->_impl_.stroke_sidecar_ = new ::TSP::Reference(*from._impl_.stroke_sidecar_);
  }
  if (from._internal_has_text_import_record()) {
    _this->_impl_.text_import_record_ = new ::TST::StructuredTextImportRecord(*from._impl_.text_import_record_);
  }
  if (from._internal_has_category_level_1_style()) {
    _this->_impl_.category_level_1_style_ = new ::TSP::Reference(*from._impl_.category_level_1_style_);
  }
  if (from._internal_has_category_level_2_style()) {
    _this->_impl_.category_level_2_style_ = new ::TSP::Reference(*from._impl_.category_level_2_style_);
  }
  if (from._internal_has_category_level_3_style()) {
    _this->_impl_.category_level_3_style_ = new ::TSP::Reference(*from._impl_.category_level_3_style_);
  }
  if (from._internal_has_category_level_4_style()) {
    _this->_impl_.category_level_4_style_ = new ::TSP::Reference(*from._impl_.category_level_4_style_);
  }
  if (from._internal_has_category_level_5_style()) {
    _this->_impl_.category_level_5_style_ = new ::TSP::Reference(*from._impl_.category_level_5_style_);
  }
  if (from._internal_has_category_level_1_text_style()) {
    _this->_impl_.category_level_1_text_style_ = new ::TSP::Reference(*from._impl_.category_level_1_text_style_);
  }
  if (from._internal_has_category_level_2_text_style()) {
    _this->_impl_.category_level_2_text_style_ = new ::TSP::Reference(*from._impl_.category_level_2_text_style_);
  }
  if (from._internal_has_category_level_3_text_style()) {
    _this->_impl_.category_level_3_text_style_ = new ::TSP::Reference(*from._impl_.category_level_3_text_style_);
  }
  if (from._internal_has_category_level_4_text_style()) {
    _this->_impl_.category_level_4_text_style_ = new ::TSP::Reference(*from._impl_.category_level_4_text_style_);
  }
  if (from._internal_has_category_level_5_text_style()) {
    _this->_impl_.category_level_5_text_style_ = new ::TSP::Reference(*from._impl_.category_level_5_text_style_);
  }
  if (from._internal_has_hidden_states_owner()) {
    _this->_impl_.hidden_states_owner_ = new ::TST::HiddenStatesOwnerArchive(*from._impl_.hidden_states_owner_);
  }
  if (from._internal_has_label_level_1_style()) {
    _this->_impl_.label_level_1_style_ = new ::TSP::Reference(*from._impl_.label_level_1_style_);
  }
  if (from._internal_has_label_level_2_style()) {
    _this->_impl_.label_level_2_style_ = new ::TSP::Reference(*from._impl_.label_level_2_style_);
  }
  if (from._internal_has_label_level_3_style()) {
    _this->_impl_.label_level_3_style_ = new ::TSP::Reference(*from._impl_.label_level_3_style_);
  }
  if (from._internal_has_label_level_4_style()) {
    _this->_impl_.label_level_4_style_ = new ::TSP::Reference(*from._impl_.label_level_4_style_);
  }
  if (from._internal_has_label_level_5_style()) {
    _this->_impl_.label_level_5_style_ = new ::TSP::Reference(*from._impl_.label_level_5_style_);
  }
  if (from._internal_has_label_level_1_text_style()) {
    _this->_impl_.label_level_1_text_style_ = new ::TSP::Reference(*from._impl_.label_level_1_text_style_);
  }
  if (from._internal_has_label_level_2_text_style()) {
    _this->_impl_.label_level_2_text_style_ = new ::TSP::Reference(*from._impl_.label_level_2_text_style_);
  }
  if (from._internal_has_label_level_3_text_style()) {
    _this->_impl_.label_level_3_text_style_ = new ::TSP::Reference(*from._impl_.label_level_3_text_style_);
  }
  if (from._internal_has_label_level_4_text_style()) {
    _this->_impl_.label_level_4_text_style_ = new ::TSP::Reference(*from._impl_.label_level_4_text_style_);
  }
  if (from._internal_has_label_level_5_text_style()) {
    _this->_impl_.label_level_5_text_style_ = new ::TSP::Reference(*from._impl_.label_level_5_text_style_);
  }
  if (from._internal_has_category_owner_deprecated()) {
    _this->_impl_.category_owner_deprecated_ = new ::TST::CategoryOwnerArchive(*from._impl_.category_owner_deprecated_);
  }
  if (from._internal_has_pencil_annotation_owner()) {
    _this->_impl_.pencil_annotation_owner_ = new ::TST::PencilAnnotationOwnerArchive(*from._impl_.pencil_annotation_owner_);
  }
  if (from._internal_has_haunted_owner()) {
    _this->_impl_.haunted_owner_ = new ::TSCE::HauntedOwnerArchive(*from._impl_.haunted_owner_);
  }
  if (from._internal_has_pivot_owner()) {
    _this->_impl_.pivot_owner_ = new ::TSP::Reference(*from._impl_.pivot_owner_);
  }
  if (from._internal_has_category_owner()) {
    _this->_impl_.category_owner_ = new ::TSP::Reference(*from._impl_.category_owner_);
  }
  if (from._internal_has_pivot_body_summary_row_style()) {
    _this->_impl_.pivot_body_summary_row_style_ = new ::TSP::Reference(*from._impl_.pivot_body_summary_row_style_);
  }
  if (from._internal_has_pivot_body_summary_column_style()) {
    _this->_impl_.pivot_body_summary_column_style_ = new ::TSP::Reference(*from._impl_.pivot_body_summary_column_style_);
  }
  if (from._internal_has_pivot_header_column_summary_style()) {
    _this->_impl_.pivot_header_column_summary_style_ = new ::TSP::Reference(*from._impl_.pivot_header_column_summary_style_);
  }
  ::memcpy(&_impl_.number_of_rows_, &from._impl_.number_of_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preset_needs_strong_ownership_) -
    reinterpret_cast<char*>(&_impl_.number_of_rows_)) + sizeof(_impl_.preset_needs_strong_ownership_));
  // @@protoc_insertion_point(copy_constructor:TST.TableModelArchive)
}

inline void TableModelArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pivot_value_types_by_col_){arena}
    , decltype(_impl_.pivot_date_grouping_columns_){arena}
    , decltype(_impl_.pivot_date_grouping_types_){arena}
    , decltype(_impl_.table_id_){}
    , decltype(_impl_.table_name_){}
    , decltype(_impl_.from_table_id_){}
    , decltype(_impl_.from_group_by_uid_){}
    , decltype(_impl_.table_style_){nullptr}
    , decltype(_impl_.base_data_store_){nullptr}
    , decltype(_impl_.provider_){nullptr}
    , decltype(_impl_.body_cell_style_){nullptr}
    , decltype(_impl_.header_row_style_){nullptr}
    , decltype(_impl_.header_column_style_){nullptr}
    , decltype(_impl_.footer_row_style_){nullptr}
    , decltype(_impl_.origin_offset_){nullptr}
    , decltype(_impl_.body_text_style_){nullptr}
    , decltype(_impl_.header_row_text_style_){nullptr}
    , decltype(_impl_.header_column_text_style_){nullptr}
    , decltype(_impl_.footer_row_text_style_){nullptr}
    , decltype(_impl_.table_name_style_){nullptr}
    , decltype(_impl_.hidden_state_formula_owner_for_columns_){nullptr}
    , decltype(_impl_.hidden_state_formula_owner_for_rows_){nullptr}
    , decltype(_impl_.table_name_shape_style_){nullptr}
    , decltype(_impl_.row_filter_set_pre_pivot_){nullptr}
    , decltype(_impl_.conditional_style_formula_owner_id_){nullptr}
    , decltype(_impl_.sort_order_){nullptr}
    , decltype(_impl_.sort_rule_reference_tracker_){nullptr}
    , decltype(_impl_.base_column_row_uids_){nullptr}
    , decltype(_impl_.merge_owner_){nullptr}
    , decltype(_impl_.table_style_preset_){nullptr}
    , decltype(_impl_.stroke_sidecar_){nullptr}
    , decltype(_impl_.text_import_record_){nullptr}
    , decltype(_impl_.category_level_1_style_){nullptr}
    , decltype(_impl_.category_level_2_style_){nullptr}
    , decltype(_impl_.category_level_3_style_){nullptr}
    , decltype(_impl_.category_level_4_style_){nullptr}
    , decltype(_impl_.category_level_5_style_){nullptr}
    , decltype(_impl_.category_level_1_text_style_){nullptr}
    , decltype(_impl_.category_level_2_text_style_){nullptr}
    , decltype(_impl_.category_level_3_text_style_){nullptr}
    , decltype(_impl_.category_level_4_text_style_){nullptr}
    , decltype(_impl_.category_level_5_text_style_){nullptr}
    , decltype(_impl_.hidden_states_owner_){nullptr}
    , decltype(_impl_.label_level_1_style_){nullptr}
    , decltype(_impl_.label_level_2_style_){nullptr}
    , decltype(_impl_.label_level_3_style_){nullptr}
    , decltype(_impl_.label_level_4_style_){nullptr}
    , decltype(_impl_.label_level_5_style_){nullptr}
    , decltype(_impl_.label_level_1_text_style_){nullptr}
    , decltype(_impl_.label_level_2_text_style_){nullptr}
    , decltype(_impl_.label_level_3_text_style_){nullptr}
    , decltype(_impl_.label_level_4_text_style_){nullptr}
    , decltype(_impl_.label_level_5_text_style_){nullptr}
    , decltype(_impl_.category_owner_deprecated_){nullptr}
    , decltype(_impl_.pencil_annotation_owner_){nullptr}
    , decltype(_impl_.haunted_owner_){nullptr}
    , decltype(_impl_.pivot_owner_){nullptr}
    , decltype(_impl_.category_owner_){nullptr}
    , decltype(_impl_.pivot_body_summary_row_style_){nullptr}
    , decltype(_impl_.pivot_body_summary_column_style_){nullptr}
    , decltype(_impl_.pivot_header_column_summary_style_){nullptr}
    , decltype(_impl_.number_of_rows_){0u}
    , decltype(_impl_.number_of_columns_){0u}
    , decltype(_impl_.number_of_header_rows_){0u}
    , decltype(_impl_.number_of_header_columns_){0u}
    , decltype(_impl_.number_of_footer_rows_){0u}
    , decltype(_impl_.number_of_hidden_rows_){0u}
    , decltype(_impl_.default_row_height_){0}
    , decltype(_impl_.default_column_width_){0}
    , decltype(_impl_.number_of_hidden_columns_){0u}
    , decltype(_impl_.header_columns_frozen_){false}
    , decltype(_impl_.repeating_header_rows_enabled_){false}
    , decltype(_impl_.style_apply_clears_all_){false}
    , decltype(_impl_.repeating_header_columns_enabled_){false}
    , decltype(_impl_.preset_index_){0u}
    , decltype(_impl_.was_cut_){false}
    , decltype(_impl_.table_name_enabled_){false}
    , decltype(_impl_.table_name_border_enabled_){false}
    , decltype(_impl_.header_rows_frozen_){false}
    , decltype(_impl_.table_name_height_){0}
    , decltype(_impl_.number_of_filtered_rows_){0u}
    , decltype(_impl_.number_of_user_hidden_rows_){0u}
    , decltype(_impl_.number_of_user_hidden_columns_){0u}
    , decltype(_impl_.preset_needs_strong_ownership_){false}
  };
  _impl_.table_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_table_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_table_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_group_by_uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_group_by_uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableModelArchive::~TableModelArchive() {
  // @@protoc_insertion_point(destructor:TST.TableModelArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pivot_value_types_by_col_.~RepeatedField();
  _impl_.pivot_date_grouping_columns_.~RepeatedField();
  _impl_.pivot_date_grouping_types_.~RepeatedField();
  _impl_.table_id_.Destroy();
  _impl_.table_name_.Destroy();
  _impl_.from_table_id_.Destroy();
  _impl_.from_group_by_uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_style_;
  if (this != internal_default_instance()) delete _impl_.base_data_store_;
  if (this != internal_default_instance()) delete _impl_.provider_;
  if (this != internal_default_instance()) delete _impl_.body_cell_style_;
  if (this != internal_default_instance()) delete _impl_.header_row_style_;
  if (this != internal_default_instance()) delete _impl_.header_column_style_;
  if (this != internal_default_instance()) delete _impl_.footer_row_style_;
  if (this != internal_default_instance()) delete _impl_.origin_offset_;
  if (this != internal_default_instance()) delete _impl_.body_text_style_;
  if (this != internal_default_instance()) delete _impl_.header_row_text_style_;
  if (this != internal_default_instance()) delete _impl_.header_column_text_style_;
  if (this != internal_default_instance()) delete _impl_.footer_row_text_style_;
  if (this != internal_default_instance()) delete _impl_.table_name_style_;
  if (this != internal_default_instance()) delete _impl_.hidden_state_formula_owner_for_columns_;
  if (this != internal_default_instance()) delete _impl_.hidden_state_formula_owner_for_rows_;
  if (this != internal_default_instance()) delete _impl_.table_name_shape_style_;
  if (this != internal_default_instance()) delete _impl_.row_filter_set_pre_pivot_;
  if (this != internal_default_instance()) delete _impl_.conditional_style_formula_owner_id_;
  if (this != internal_default_instance()) delete _impl_.sort_order_;
  if (this != internal_default_instance()) delete _impl_.sort_rule_reference_tracker_;
  if (this != internal_default_instance()) delete _impl_.base_column_row_uids_;
  if (this != internal_default_instance()) delete _impl_.merge_owner_;
  if (this != internal_default_instance()) delete _impl_.table_style_preset_;
  if (this != internal_default_instance()) delete _impl_.stroke_sidecar_;
  if (this != internal_default_instance()) delete _impl_.text_import_record_;
  if (this != internal_default_instance()) delete _impl_.category_level_1_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_2_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_3_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_4_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_5_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_1_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_2_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_3_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_4_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_level_5_text_style_;
  if (this != internal_default_instance()) delete _impl_.hidden_states_owner_;
  if (this != internal_default_instance()) delete _impl_.label_level_1_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_2_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_3_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_4_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_5_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_1_text_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_2_text_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_3_text_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_4_text_style_;
  if (this != internal_default_instance()) delete _impl_.label_level_5_text_style_;
  if (this != internal_default_instance()) delete _impl_.category_owner_deprecated_;
  if (this != internal_default_instance()) delete _impl_.pencil_annotation_owner_;
  if (this != internal_default_instance()) delete _impl_.haunted_owner_;
  if (this != internal_default_instance()) delete _impl_.pivot_owner_;
  if (this != internal_default_instance()) delete _impl_.category_owner_;
  if (this != internal_default_instance()) delete _impl_.pivot_body_summary_row_style_;
  if (this != internal_default_instance()) delete _impl_.pivot_body_summary_column_style_;
  if (this != internal_default_instance()) delete _impl_.pivot_header_column_summary_style_;
}

void TableModelArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableModelArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pivot_value_types_by_col_.Clear();
  _impl_.pivot_date_grouping_columns_.Clear();
  _impl_.pivot_date_grouping_types_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.table_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.from_table_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.from_group_by_uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.table_style_ != nullptr);
      _impl_.table_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.base_data_store_ != nullptr);
      _impl_.base_data_store_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.provider_ != nullptr);
      _impl_.provider_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.body_cell_style_ != nullptr);
      _impl_.body_cell_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.header_row_style_ != nullptr);
      _impl_.header_row_style_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.header_column_style_ != nullptr);
      _impl_.header_column_style_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.footer_row_style_ != nullptr);
      _impl_.footer_row_style_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.origin_offset_ != nullptr);
      _impl_.origin_offset_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.body_text_style_ != nullptr);
      _impl_.body_text_style_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.header_row_text_style_ != nullptr);
      _impl_.header_row_text_style_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.header_column_text_style_ != nullptr);
      _impl_.header_column_text_style_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.footer_row_text_style_ != nullptr);
      _impl_.footer_row_text_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.table_name_style_ != nullptr);
      _impl_.table_name_style_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.hidden_state_formula_owner_for_columns_ != nullptr);
      _impl_.hidden_state_formula_owner_for_columns_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.hidden_state_formula_owner_for_rows_ != nullptr);
      _impl_.hidden_state_formula_owner_for_rows_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.table_name_shape_style_ != nullptr);
      _impl_.table_name_shape_style_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.row_filter_set_pre_pivot_ != nullptr);
      _impl_.row_filter_set_pre_pivot_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.conditional_style_formula_owner_id_ != nullptr);
      _impl_.conditional_style_formula_owner_id_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.sort_order_ != nullptr);
      _impl_.sort_order_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.sort_rule_reference_tracker_ != nullptr);
      _impl_.sort_rule_reference_tracker_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.base_column_row_uids_ != nullptr);
      _impl_.base_column_row_uids_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.merge_owner_ != nullptr);
      _impl_.merge_owner_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.table_style_preset_ != nullptr);
      _impl_.table_style_preset_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.stroke_sidecar_ != nullptr);
      _impl_.stroke_sidecar_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.text_import_record_ != nullptr);
      _impl_.text_import_record_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.category_level_1_style_ != nullptr);
      _impl_.category_level_1_style_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.category_level_2_style_ != nullptr);
      _impl_.category_level_2_style_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.category_level_3_style_ != nullptr);
      _impl_.category_level_3_style_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.category_level_4_style_ != nullptr);
      _impl_.category_level_4_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.category_level_5_style_ != nullptr);
      _impl_.category_level_5_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.category_level_1_text_style_ != nullptr);
      _impl_.category_level_1_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.category_level_2_text_style_ != nullptr);
      _impl_.category_level_2_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.category_level_3_text_style_ != nullptr);
      _impl_.category_level_3_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.category_level_4_text_style_ != nullptr);
      _impl_.category_level_4_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.category_level_5_text_style_ != nullptr);
      _impl_.category_level_5_text_style_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.hidden_states_owner_ != nullptr);
      _impl_.hidden_states_owner_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.label_level_1_style_ != nullptr);
      _impl_.label_level_1_style_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.label_level_2_style_ != nullptr);
      _impl_.label_level_2_style_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.label_level_3_style_ != nullptr);
      _impl_.label_level_3_style_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.label_level_4_style_ != nullptr);
      _impl_.label_level_4_style_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.label_level_5_style_ != nullptr);
      _impl_.label_level_5_style_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.label_level_1_text_style_ != nullptr);
      _impl_.label_level_1_text_style_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.label_level_2_text_style_ != nullptr);
      _impl_.label_level_2_text_style_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.label_level_3_text_style_ != nullptr);
      _impl_.label_level_3_text_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.label_level_4_text_style_ != nullptr);
      _impl_.label_level_4_text_style_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.label_level_5_text_style_ != nullptr);
      _impl_.label_level_5_text_style_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.category_owner_deprecated_ != nullptr);
      _impl_.category_owner_deprecated_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.pencil_annotation_owner_ != nullptr);
      _impl_.pencil_annotation_owner_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.haunted_owner_ != nullptr);
      _impl_.haunted_owner_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.pivot_owner_ != nullptr);
      _impl_.pivot_owner_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.category_owner_ != nullptr);
      _impl_.category_owner_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.pivot_body_summary_row_style_ != nullptr);
      _impl_.pivot_body_summary_row_style_->Clear();
    }
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.pivot_body_summary_column_style_ != nullptr);
      _impl_.pivot_body_summary_column_style_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.pivot_header_column_summary_style_ != nullptr);
      _impl_.pivot_header_column_summary_style_->Clear();
    }
  }
  if (cached_has_bits & 0xfc000000u) {
    ::memset(&_impl_.number_of_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_hidden_rows_) -
        reinterpret_cast<char*>(&_impl_.number_of_rows_)) + sizeof(_impl_.number_of_hidden_rows_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.default_row_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.preset_index_) -
        reinterpret_cast<char*>(&_impl_.default_row_height_)) + sizeof(_impl_.preset_index_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.was_cut_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_user_hidden_columns_) -
        reinterpret_cast<char*>(&_impl_.was_cut_)) + sizeof(_impl_.number_of_user_hidden_columns_));
  }
  _impl_.preset_needs_strong_ownership_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableModelArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.TableModelArchive.table_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference table_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.DataStore base_data_store = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_data_store(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference provider = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 number_of_rows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_number_of_rows(&_impl_._has_bits_);
          _impl_.number_of_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 number_of_columns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_number_of_columns(&_impl_._has_bits_);
          _impl_.number_of_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string table_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.TableModelArchive.table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_header_rows = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_number_of_header_rows(&_impl_._has_bits_);
          _impl_.number_of_header_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_header_columns = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_number_of_header_columns(&_impl_._has_bits_);
          _impl_.number_of_header_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_footer_rows = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_number_of_footer_rows(&_impl_._has_bits_);
          _impl_.number_of_footer_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool header_rows_frozen = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_header_rows_frozen(&_impl_._has_bits_);
          _impl_.header_rows_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool header_columns_frozen = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_header_columns_frozen(&_impl_._has_bits_);
          _impl_.header_columns_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_hidden_rows = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_number_of_hidden_rows(&_impl_._has_bits_);
          _impl_.number_of_hidden_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_hidden_columns = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_number_of_hidden_columns(&_impl_._has_bits_);
          _impl_.number_of_hidden_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double default_row_height = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_default_row_height(&_impl_._has_bits_);
          _impl_.default_row_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double default_column_width = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_default_column_width(&_impl_._has_bits_);
          _impl_.default_column_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference body_cell_style = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_cell_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference header_row_style = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference header_column_style = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference footer_row_style = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool table_name_enabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_table_name_enabled(&_impl_._has_bits_);
          _impl_.table_name_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellID origin_offset = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference body_text_style = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference header_row_text_style = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference header_column_text_style = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference footer_row_text_style = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 preset_index = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_preset_index(&_impl_._has_bits_);
          _impl_.preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool repeating_header_rows_enabled = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_repeating_header_rows_enabled(&_impl_._has_bits_);
          _impl_.repeating_header_rows_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_name_style = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_name_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool style_apply_clears_all = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_style_apply_clears_all(&_impl_._has_bits_);
          _impl_.style_apply_clears_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool repeating_header_columns_enabled = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_repeating_header_columns_enabled(&_impl_._has_bits_);
          _impl_.repeating_header_columns_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double table_name_height = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_table_name_height(&_impl_._has_bits_);
          _impl_.table_name_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_formula_owner_for_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_formula_owner_for_rows(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_name_shape_style = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_name_shape_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool table_name_border_enabled = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_table_name_border_enabled(&_impl_._has_bits_);
          _impl_.table_name_border_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference row_filter_set_pre_pivot = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_filter_set_pre_pivot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.CFUUIDArchive conditional_style_formula_owner_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_style_formula_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_filtered_rows = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_number_of_filtered_rows(&_impl_._has_bits_);
          _impl_.number_of_filtered_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_user_hidden_rows = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_number_of_user_hidden_rows(&_impl_._has_bits_);
          _impl_.number_of_user_hidden_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_user_hidden_columns = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_number_of_user_hidden_columns(&_impl_._has_bits_);
          _impl_.number_of_user_hidden_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string from_table_id = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_from_table_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.TableModelArchive.from_table_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive sort_order = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.SortRuleReferenceTrackerArchive sort_rule_reference_tracker = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_rule_reference_tracker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference base_column_row_uids = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_column_row_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.MergeOwnerArchive merge_owner = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_style_preset = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_style_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference stroke_sidecar = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke_sidecar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_cut = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_was_cut(&_impl_._has_bits_);
          _impl_.was_cut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preset_needs_strong_ownership = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_preset_needs_strong_ownership(&_impl_._has_bits_);
          _impl_.preset_needs_strong_ownership_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.StructuredTextImportRecord text_import_record = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_import_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_1_style = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_1_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_2_style = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_2_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_3_style = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_3_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_4_style = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_4_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_5_style = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_5_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_1_text_style = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_1_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_2_text_style = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_2_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_3_text_style = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_3_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_4_text_style = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_4_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_level_5_text_style = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level_5_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.HiddenStatesOwnerArchive hidden_states_owner = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_states_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_1_style = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_1_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_2_style = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_2_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_3_style = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_3_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_4_style = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_4_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_5_style = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_5_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_1_text_style = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_1_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_2_text_style = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_2_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_3_text_style = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_3_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_4_text_style = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_4_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference label_level_5_text_style = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_level_5_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CategoryOwnerArchive category_owner_deprecated = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_owner_deprecated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.PencilAnnotationOwnerArchive pencil_annotation_owner = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string from_group_by_uid = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_from_group_by_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.TableModelArchive.from_group_by_uid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.HauntedOwnerArchive haunted_owner = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_haunted_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pivot_owner = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference category_owner = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pivot_body_summary_row_style = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_body_summary_row_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pivot_body_summary_column_style = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_body_summary_column_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pivot_header_column_summary_style = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_header_column_summary_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 pivot_value_types_by_col = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_pivot_value_types_by_col(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<720>(ptr));
        } else if (static_cast<uint8_t>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pivot_value_types_by_col(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 pivot_date_grouping_columns = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_pivot_date_grouping_columns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<728>(ptr));
        } else if (static_cast<uint8_t>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pivot_date_grouping_columns(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 pivot_date_grouping_types = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_pivot_date_grouping_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<736>(ptr));
        } else if (static_cast<uint8_t>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pivot_date_grouping_types(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableModelArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableModelArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_table_id().data(), static_cast<int>(this->_internal_table_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableModelArchive.table_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_id(), target);
  }

  // required .TSP.Reference table_style = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table_style(this),
        _Internal::table_style(this).GetCachedSize(), target, stream);
  }

  // required .TST.DataStore base_data_store = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::base_data_store(this),
        _Internal::base_data_store(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference provider = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::provider(this),
        _Internal::provider(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // required uint32 number_of_rows = 6;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_number_of_rows(), target);
  }

  // required uint32 number_of_columns = 7;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_number_of_columns(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required string table_name = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableModelArchive.table_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_table_name(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 number_of_header_rows = 9;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_number_of_header_rows(), target);
  }

  // optional uint32 number_of_header_columns = 10;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_number_of_header_columns(), target);
  }

  // optional uint32 number_of_footer_rows = 11;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_number_of_footer_rows(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool header_rows_frozen = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_header_rows_frozen(), target);
  }

  // optional bool header_columns_frozen = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_header_columns_frozen(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 number_of_hidden_rows = 14;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_number_of_hidden_rows(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional uint32 number_of_hidden_columns = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_number_of_hidden_columns(), target);
  }

  // required double default_row_height = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_default_row_height(), target);
  }

  // required double default_column_width = 17;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_default_column_width(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference body_cell_style = 18;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::body_cell_style(this),
        _Internal::body_cell_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference header_row_style = 19;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::header_row_style(this),
        _Internal::header_row_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference header_column_style = 20;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::header_column_style(this),
        _Internal::header_column_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference footer_row_style = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::footer_row_style(this),
        _Internal::footer_row_style(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool table_name_enabled = 22;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_table_name_enabled(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.CellID origin_offset = 23 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::origin_offset(this),
        _Internal::origin_offset(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference body_text_style = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::body_text_style(this),
        _Internal::body_text_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference header_row_text_style = 25;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::header_row_text_style(this),
        _Internal::header_row_text_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference header_column_text_style = 26;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::header_column_text_style(this),
        _Internal::header_column_text_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference footer_row_text_style = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::footer_row_text_style(this),
        _Internal::footer_row_text_style(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional uint32 preset_index = 28;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_preset_index(), target);
  }

  // optional bool repeating_header_rows_enabled = 29;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_repeating_header_rows_enabled(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference table_name_style = 30;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::table_name_style(this),
        _Internal::table_name_style(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool style_apply_clears_all = 31;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_style_apply_clears_all(), target);
  }

  // optional bool repeating_header_columns_enabled = 32;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_repeating_header_columns_enabled(), target);
  }

  // optional double table_name_height = 33;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_table_name_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::hidden_state_formula_owner_for_columns(this),
        _Internal::hidden_state_formula_owner_for_columns(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::hidden_state_formula_owner_for_rows(this),
        _Internal::hidden_state_formula_owner_for_rows(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_name_shape_style = 36;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::table_name_shape_style(this),
        _Internal::table_name_shape_style(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool table_name_border_enabled = 37;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_table_name_border_enabled(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference row_filter_set_pre_pivot = 38;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::row_filter_set_pre_pivot(this),
        _Internal::row_filter_set_pre_pivot(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.CFUUIDArchive conditional_style_formula_owner_id = 39;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::conditional_style_formula_owner_id(this),
        _Internal::conditional_style_formula_owner_id(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional uint32 number_of_filtered_rows = 40;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(40, this->_internal_number_of_filtered_rows(), target);
  }

  // optional uint32 number_of_user_hidden_rows = 41;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(41, this->_internal_number_of_user_hidden_rows(), target);
  }

  // optional uint32 number_of_user_hidden_columns = 42;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_number_of_user_hidden_columns(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string from_table_id = 43;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_table_id().data(), static_cast<int>(this->_internal_from_table_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableModelArchive.from_table_id");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_from_table_id(), target);
  }

  // optional .TST.TableSortOrderArchive sort_order = 44;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::sort_order(this),
        _Internal::sort_order(this).GetCachedSize(), target, stream);
  }

  // optional .TST.SortRuleReferenceTrackerArchive sort_rule_reference_tracker = 45;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::sort_rule_reference_tracker(this),
        _Internal::sort_rule_reference_tracker(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference base_column_row_uids = 46;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::base_column_row_uids(this),
        _Internal::base_column_row_uids(this).GetCachedSize(), target, stream);
  }

  // optional .TST.MergeOwnerArchive merge_owner = 47;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::merge_owner(this),
        _Internal::merge_owner(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_style_preset = 48;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::table_style_preset(this),
        _Internal::table_style_preset(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference stroke_sidecar = 49;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::stroke_sidecar(this),
        _Internal::stroke_sidecar(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool was_cut = 50;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(50, this->_internal_was_cut(), target);
  }

  // optional bool preset_needs_strong_ownership = 51;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_preset_needs_strong_ownership(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.StructuredTextImportRecord text_import_record = 52;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::text_import_record(this),
        _Internal::text_import_record(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_1_style = 60;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::category_level_1_style(this),
        _Internal::category_level_1_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_2_style = 61;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::category_level_2_style(this),
        _Internal::category_level_2_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_3_style = 62;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::category_level_3_style(this),
        _Internal::category_level_3_style(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSP.Reference category_level_4_style = 63;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, _Internal::category_level_4_style(this),
        _Internal::category_level_4_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_5_style = 64;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::category_level_5_style(this),
        _Internal::category_level_5_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_1_text_style = 65;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(65, _Internal::category_level_1_text_style(this),
        _Internal::category_level_1_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_2_text_style = 66;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(66, _Internal::category_level_2_text_style(this),
        _Internal::category_level_2_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_3_text_style = 67;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, _Internal::category_level_3_text_style(this),
        _Internal::category_level_3_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_4_text_style = 68;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(68, _Internal::category_level_4_text_style(this),
        _Internal::category_level_4_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_level_5_text_style = 69;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(69, _Internal::category_level_5_text_style(this),
        _Internal::category_level_5_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TST.HiddenStatesOwnerArchive hidden_states_owner = 70;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, _Internal::hidden_states_owner(this),
        _Internal::hidden_states_owner(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_1_style = 71;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(71, _Internal::label_level_1_style(this),
        _Internal::label_level_1_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_2_style = 72;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(72, _Internal::label_level_2_style(this),
        _Internal::label_level_2_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_3_style = 73;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(73, _Internal::label_level_3_style(this),
        _Internal::label_level_3_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_4_style = 74;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(74, _Internal::label_level_4_style(this),
        _Internal::label_level_4_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_5_style = 75;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, _Internal::label_level_5_style(this),
        _Internal::label_level_5_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_1_text_style = 76;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, _Internal::label_level_1_text_style(this),
        _Internal::label_level_1_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_2_text_style = 77;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, _Internal::label_level_2_text_style(this),
        _Internal::label_level_2_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_3_text_style = 78;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, _Internal::label_level_3_text_style(this),
        _Internal::label_level_3_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_4_text_style = 79;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, _Internal::label_level_4_text_style(this),
        _Internal::label_level_4_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference label_level_5_text_style = 80;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, _Internal::label_level_5_text_style(this),
        _Internal::label_level_5_text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CategoryOwnerArchive category_owner_deprecated = 81;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(81, _Internal::category_owner_deprecated(this),
        _Internal::category_owner_deprecated(this).GetCachedSize(), target, stream);
  }

  // optional .TST.PencilAnnotationOwnerArchive pencil_annotation_owner = 82;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(82, _Internal::pencil_annotation_owner(this),
        _Internal::pencil_annotation_owner(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string from_group_by_uid = 83;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_from_group_by_uid().data(), static_cast<int>(this->_internal_from_group_by_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableModelArchive.from_group_by_uid");
    target = stream->WriteStringMaybeAliased(
        83, this->_internal_from_group_by_uid(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSCE.HauntedOwnerArchive haunted_owner = 84;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(84, _Internal::haunted_owner(this),
        _Internal::haunted_owner(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pivot_owner = 85;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::pivot_owner(this),
        _Internal::pivot_owner(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference category_owner = 86;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(86, _Internal::category_owner(this),
        _Internal::category_owner(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pivot_body_summary_row_style = 87;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(87, _Internal::pivot_body_summary_row_style(this),
        _Internal::pivot_body_summary_row_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pivot_body_summary_column_style = 88;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(88, _Internal::pivot_body_summary_column_style(this),
        _Internal::pivot_body_summary_column_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pivot_header_column_summary_style = 89;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(89, _Internal::pivot_header_column_summary_style(this),
        _Internal::pivot_header_column_summary_style(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 pivot_value_types_by_col = 90;
  for (int i = 0, n = this->_internal_pivot_value_types_by_col_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(90, this->_internal_pivot_value_types_by_col(i), target);
  }

  // repeated uint32 pivot_date_grouping_columns = 91;
  for (int i = 0, n = this->_internal_pivot_date_grouping_columns_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(91, this->_internal_pivot_date_grouping_columns(i), target);
  }

  // repeated uint32 pivot_date_grouping_types = 92;
  for (int i = 0, n = this->_internal_pivot_date_grouping_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(92, this->_internal_pivot_date_grouping_types(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableModelArchive)
  return target;
}

size_t TableModelArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableModelArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required string table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_id());
  }

  if (_internal_has_table_name()) {
    // required string table_name = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  if (_internal_has_table_style()) {
    // required .TSP.Reference table_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_style_);
  }

  if (_internal_has_base_data_store()) {
    // required .TST.DataStore base_data_store = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_data_store_);
  }

  if (_internal_has_body_cell_style()) {
    // required .TSP.Reference body_cell_style = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_cell_style_);
  }

  if (_internal_has_header_row_style()) {
    // required .TSP.Reference header_row_style = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_row_style_);
  }

  if (_internal_has_header_column_style()) {
    // required .TSP.Reference header_column_style = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_column_style_);
  }

  if (_internal_has_footer_row_style()) {
    // required .TSP.Reference footer_row_style = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footer_row_style_);
  }

  if (_internal_has_body_text_style()) {
    // required .TSP.Reference body_text_style = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_text_style_);
  }

  if (_internal_has_header_row_text_style()) {
    // required .TSP.Reference header_row_text_style = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_row_text_style_);
  }

  if (_internal_has_header_column_text_style()) {
    // required .TSP.Reference header_column_text_style = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_column_text_style_);
  }

  if (_internal_has_footer_row_text_style()) {
    // required .TSP.Reference footer_row_text_style = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footer_row_text_style_);
  }

  if (_internal_has_number_of_rows()) {
    // required uint32 number_of_rows = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_rows());
  }

  if (_internal_has_number_of_columns()) {
    // required uint32 number_of_columns = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_columns());
  }

  if (_internal_has_default_row_height()) {
    // required double default_row_height = 16;
    total_size += 2 + 8;
  }

  if (_internal_has_default_column_width()) {
    // required double default_column_width = 17;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t TableModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableModelArchive)
  size_t total_size = 0;

  if ((((_impl_._has_bits_[0] & 0x0000f7b3) ^ 0x0000f7b3)
       | ((_impl_._has_bits_[1] & 0x0c000000) ^ 0x0c000000)
       | ((_impl_._has_bits_[2] & 0x00000003) ^ 0x00000003)) == 0) {  // All required fields are present.
    // required string table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_id());

    // required string table_name = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());

    // required .TSP.Reference table_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_style_);

    // required .TST.DataStore base_data_store = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_data_store_);

    // required .TSP.Reference body_cell_style = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_cell_style_);

    // required .TSP.Reference header_row_style = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_row_style_);

    // required .TSP.Reference header_column_style = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_column_style_);

    // required .TSP.Reference footer_row_style = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footer_row_style_);

    // required .TSP.Reference body_text_style = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_text_style_);

    // required .TSP.Reference header_row_text_style = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_row_text_style_);

    // required .TSP.Reference header_column_text_style = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_column_text_style_);

    // required .TSP.Reference footer_row_text_style = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.footer_row_text_style_);

    // required uint32 number_of_rows = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_rows());

    // required uint32 number_of_columns = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_columns());

    // required double default_row_height = 16;
    total_size += 2 + 8;

    // required double default_column_width = 17;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 pivot_value_types_by_col = 90;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.pivot_value_types_by_col_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_pivot_value_types_by_col_size());
    total_size += data_size;
  }

  // repeated uint32 pivot_date_grouping_columns = 91;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.pivot_date_grouping_columns_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_pivot_date_grouping_columns_size());
    total_size += data_size;
  }

  // repeated uint32 pivot_date_grouping_types = 92;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.pivot_date_grouping_types_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_pivot_date_grouping_types_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional string from_table_id = 43;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_table_id());
    }

    // optional string from_group_by_uid = 83;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_from_group_by_uid());
    }

  }
  // optional .TSP.Reference provider = 5;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.provider_);
  }

  // optional .TST.CellID origin_offset = 23 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_offset_);
  }

  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSP.Reference table_name_style = 30;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_name_style_);
    }

    // optional .TSP.Reference hidden_state_formula_owner_for_columns = 34;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hidden_state_formula_owner_for_columns_);
    }

    // optional .TSP.Reference hidden_state_formula_owner_for_rows = 35;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hidden_state_formula_owner_for_rows_);
    }

    // optional .TSP.Reference table_name_shape_style = 36;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_name_shape_style_);
    }

    // optional .TSP.Reference row_filter_set_pre_pivot = 38;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.row_filter_set_pre_pivot_);
    }

    // optional .TSP.CFUUIDArchive conditional_style_formula_owner_id = 39;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.conditional_style_formula_owner_id_);
    }

    // optional .TST.TableSortOrderArchive sort_order = 44;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sort_order_);
    }

    // optional .TST.SortRuleReferenceTrackerArchive sort_rule_reference_tracker = 45;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sort_rule_reference_tracker_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSP.Reference base_column_row_uids = 46;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_column_row_uids_);
    }

    // optional .TST.MergeOwnerArchive merge_owner = 47;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.merge_owner_);
    }

    // optional .TSP.Reference table_style_preset = 48;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_style_preset_);
    }

    // optional .TSP.Reference stroke_sidecar = 49;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stroke_sidecar_);
    }

    // optional .TST.StructuredTextImportRecord text_import_record = 52;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.text_import_record_);
    }

    // optional .TSP.Reference category_level_1_style = 60;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_1_style_);
    }

    // optional .TSP.Reference category_level_2_style = 61;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_2_style_);
    }

    // optional .TSP.Reference category_level_3_style = 62;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_3_style_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference category_level_4_style = 63;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_4_style_);
    }

    // optional .TSP.Reference category_level_5_style = 64;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_5_style_);
    }

    // optional .TSP.Reference category_level_1_text_style = 65;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_1_text_style_);
    }

    // optional .TSP.Reference category_level_2_text_style = 66;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_2_text_style_);
    }

    // optional .TSP.Reference category_level_3_text_style = 67;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_3_text_style_);
    }

    // optional .TSP.Reference category_level_4_text_style = 68;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_4_text_style_);
    }

    // optional .TSP.Reference category_level_5_text_style = 69;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level_5_text_style_);
    }

    // optional .TST.HiddenStatesOwnerArchive hidden_states_owner = 70;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hidden_states_owner_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Reference label_level_1_style = 71;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_1_style_);
    }

    // optional .TSP.Reference label_level_2_style = 72;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_2_style_);
    }

    // optional .TSP.Reference label_level_3_style = 73;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_3_style_);
    }

    // optional .TSP.Reference label_level_4_style = 74;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_4_style_);
    }

    // optional .TSP.Reference label_level_5_style = 75;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_5_style_);
    }

    // optional .TSP.Reference label_level_1_text_style = 76;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_1_text_style_);
    }

    // optional .TSP.Reference label_level_2_text_style = 77;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_2_text_style_);
    }

    // optional .TSP.Reference label_level_3_text_style = 78;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_3_text_style_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSP.Reference label_level_4_text_style = 79;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_4_text_style_);
    }

    // optional .TSP.Reference label_level_5_text_style = 80;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_level_5_text_style_);
    }

    // optional .TST.CategoryOwnerArchive category_owner_deprecated = 81;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_owner_deprecated_);
    }

    // optional .TST.PencilAnnotationOwnerArchive pencil_annotation_owner = 82;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pencil_annotation_owner_);
    }

    // optional .TSCE.HauntedOwnerArchive haunted_owner = 84;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.haunted_owner_);
    }

    // optional .TSP.Reference pivot_owner = 85;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_owner_);
    }

    // optional .TSP.Reference category_owner = 86;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_owner_);
    }

    // optional .TSP.Reference pivot_body_summary_row_style = 87;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_body_summary_row_style_);
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional .TSP.Reference pivot_body_summary_column_style = 88;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_body_summary_column_style_);
    }

    // optional .TSP.Reference pivot_header_column_summary_style = 89;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_header_column_summary_style_);
    }

  }
  if (cached_has_bits & 0xf0000000u) {
    // optional uint32 number_of_header_rows = 9;
    if (cached_has_bits & 0x10000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_header_rows());
    }

    // optional uint32 number_of_header_columns = 10;
    if (cached_has_bits & 0x20000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_header_columns());
    }

    // optional uint32 number_of_footer_rows = 11;
    if (cached_has_bits & 0x40000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_footer_rows());
    }

    // optional uint32 number_of_hidden_rows = 14;
    if (cached_has_bits & 0x80000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_hidden_rows());
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000fcu) {
    // optional uint32 number_of_hidden_columns = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_hidden_columns());
    }

    // optional bool header_columns_frozen = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool repeating_header_rows_enabled = 29;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool style_apply_clears_all = 31;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool repeating_header_columns_enabled = 32;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional uint32 preset_index = 28;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_preset_index());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool was_cut = 50;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool table_name_enabled = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool table_name_border_enabled = 37;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool header_rows_frozen = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional double table_name_height = 33;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional uint32 number_of_filtered_rows = 40;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_number_of_filtered_rows());
    }

    // optional uint32 number_of_user_hidden_rows = 41;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_number_of_user_hidden_rows());
    }

    // optional uint32 number_of_user_hidden_columns = 42;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_number_of_user_hidden_columns());
    }

  }
  // optional bool preset_needs_strong_ownership = 51;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableModelArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableModelArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableModelArchive::GetClassData() const { return &_class_data_; }


void TableModelArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableModelArchive*>(&to_msg);
  auto& from = static_cast<const TableModelArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableModelArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pivot_value_types_by_col_.MergeFrom(from._impl_.pivot_value_types_by_col_);
  _this->_impl_.pivot_date_grouping_columns_.MergeFrom(from._impl_.pivot_date_grouping_columns_);
  _this->_impl_.pivot_date_grouping_types_.MergeFrom(from._impl_.pivot_date_grouping_types_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_table_id(from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_table_name(from._internal_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_from_table_id(from._internal_from_table_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_from_group_by_uid(from._internal_from_group_by_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_table_style()->::TSP::Reference::MergeFrom(
          from._internal_table_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_base_data_store()->::TST::DataStore::MergeFrom(
          from._internal_base_data_store());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_provider()->::TSP::Reference::MergeFrom(
          from._internal_provider());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_body_cell_style()->::TSP::Reference::MergeFrom(
          from._internal_body_cell_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_header_row_style()->::TSP::Reference::MergeFrom(
          from._internal_header_row_style());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_header_column_style()->::TSP::Reference::MergeFrom(
          from._internal_header_column_style());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_footer_row_style()->::TSP::Reference::MergeFrom(
          from._internal_footer_row_style());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_origin_offset()->::TST::CellID::MergeFrom(
          from._internal_origin_offset());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_body_text_style()->::TSP::Reference::MergeFrom(
          from._internal_body_text_style());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_header_row_text_style()->::TSP::Reference::MergeFrom(
          from._internal_header_row_text_style());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_header_column_text_style()->::TSP::Reference::MergeFrom(
          from._internal_header_column_text_style());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_footer_row_text_style()->::TSP::Reference::MergeFrom(
          from._internal_footer_row_text_style());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_table_name_style()->::TSP::Reference::MergeFrom(
          from._internal_table_name_style());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_hidden_state_formula_owner_for_columns()->::TSP::Reference::MergeFrom(
          from._internal_hidden_state_formula_owner_for_columns());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_hidden_state_formula_owner_for_rows()->::TSP::Reference::MergeFrom(
          from._internal_hidden_state_formula_owner_for_rows());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_table_name_shape_style()->::TSP::Reference::MergeFrom(
          from._internal_table_name_shape_style());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_row_filter_set_pre_pivot()->::TSP::Reference::MergeFrom(
          from._internal_row_filter_set_pre_pivot());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_conditional_style_formula_owner_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_conditional_style_formula_owner_id());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_sort_order()->::TST::TableSortOrderArchive::MergeFrom(
          from._internal_sort_order());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_sort_rule_reference_tracker()->::TST::SortRuleReferenceTrackerArchive::MergeFrom(
          from._internal_sort_rule_reference_tracker());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_base_column_row_uids()->::TSP::Reference::MergeFrom(
          from._internal_base_column_row_uids());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_merge_owner()->::TST::MergeOwnerArchive::MergeFrom(
          from._internal_merge_owner());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_table_style_preset()->::TSP::Reference::MergeFrom(
          from._internal_table_style_preset());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_stroke_sidecar()->::TSP::Reference::MergeFrom(
          from._internal_stroke_sidecar());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_text_import_record()->::TST::StructuredTextImportRecord::MergeFrom(
          from._internal_text_import_record());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_category_level_1_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_1_style());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_category_level_2_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_2_style());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_category_level_3_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_3_style());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_category_level_4_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_4_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_category_level_5_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_5_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_category_level_1_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_1_text_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_category_level_2_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_2_text_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_category_level_3_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_3_text_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_category_level_4_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_4_text_style());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_category_level_5_text_style()->::TSP::Reference::MergeFrom(
          from._internal_category_level_5_text_style());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_hidden_states_owner()->::TST::HiddenStatesOwnerArchive::MergeFrom(
          from._internal_hidden_states_owner());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_label_level_1_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_1_style());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_label_level_2_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_2_style());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_label_level_3_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_3_style());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_label_level_4_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_4_style());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_label_level_5_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_5_style());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_label_level_1_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_1_text_style());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_label_level_2_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_2_text_style());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_label_level_3_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_3_text_style());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_label_level_4_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_4_text_style());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_label_level_5_text_style()->::TSP::Reference::MergeFrom(
          from._internal_label_level_5_text_style());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_category_owner_deprecated()->::TST::CategoryOwnerArchive::MergeFrom(
          from._internal_category_owner_deprecated());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_pencil_annotation_owner()->::TST::PencilAnnotationOwnerArchive::MergeFrom(
          from._internal_pencil_annotation_owner());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_haunted_owner()->::TSCE::HauntedOwnerArchive::MergeFrom(
          from._internal_haunted_owner());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_pivot_owner()->::TSP::Reference::MergeFrom(
          from._internal_pivot_owner());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_category_owner()->::TSP::Reference::MergeFrom(
          from._internal_category_owner());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_pivot_body_summary_row_style()->::TSP::Reference::MergeFrom(
          from._internal_pivot_body_summary_row_style());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_pivot_body_summary_column_style()->::TSP::Reference::MergeFrom(
          from._internal_pivot_body_summary_column_style());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_pivot_header_column_summary_style()->::TSP::Reference::MergeFrom(
          from._internal_pivot_header_column_summary_style());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.number_of_rows_ = from._impl_.number_of_rows_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.number_of_columns_ = from._impl_.number_of_columns_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.number_of_header_rows_ = from._impl_.number_of_header_rows_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.number_of_header_columns_ = from._impl_.number_of_header_columns_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.number_of_footer_rows_ = from._impl_.number_of_footer_rows_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.number_of_hidden_rows_ = from._impl_.number_of_hidden_rows_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.default_row_height_ = from._impl_.default_row_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.default_column_width_ = from._impl_.default_column_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.number_of_hidden_columns_ = from._impl_.number_of_hidden_columns_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.header_columns_frozen_ = from._impl_.header_columns_frozen_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.repeating_header_rows_enabled_ = from._impl_.repeating_header_rows_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.style_apply_clears_all_ = from._impl_.style_apply_clears_all_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.repeating_header_columns_enabled_ = from._impl_.repeating_header_columns_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.preset_index_ = from._impl_.preset_index_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.was_cut_ = from._impl_.was_cut_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.table_name_enabled_ = from._impl_.table_name_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.table_name_border_enabled_ = from._impl_.table_name_border_enabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.header_rows_frozen_ = from._impl_.header_rows_frozen_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.table_name_height_ = from._impl_.table_name_height_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.number_of_filtered_rows_ = from._impl_.number_of_filtered_rows_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.number_of_user_hidden_rows_ = from._impl_.number_of_user_hidden_rows_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.number_of_user_hidden_columns_ = from._impl_.number_of_user_hidden_columns_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_preset_needs_strong_ownership(from._internal_preset_needs_strong_ownership());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableModelArchive::CopyFrom(const TableModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_table_style()) {
    if (!_impl_.table_style_->IsInitialized()) return false;
  }
  if (_internal_has_base_data_store()) {
    if (!_impl_.base_data_store_->IsInitialized()) return false;
  }
  if (_internal_has_provider()) {
    if (!_impl_.provider_->IsInitialized()) return false;
  }
  if (_internal_has_body_cell_style()) {
    if (!_impl_.body_cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_style()) {
    if (!_impl_.header_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_style()) {
    if (!_impl_.header_column_style_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_style()) {
    if (!_impl_.footer_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_origin_offset()) {
    if (!_impl_.origin_offset_->IsInitialized()) return false;
  }
  if (_internal_has_body_text_style()) {
    if (!_impl_.body_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_text_style()) {
    if (!_impl_.header_row_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_text_style()) {
    if (!_impl_.header_column_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_text_style()) {
    if (!_impl_.footer_row_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_table_name_style()) {
    if (!_impl_.table_name_style_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_state_formula_owner_for_columns()) {
    if (!_impl_.hidden_state_formula_owner_for_columns_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_state_formula_owner_for_rows()) {
    if (!_impl_.hidden_state_formula_owner_for_rows_->IsInitialized()) return false;
  }
  if (_internal_has_table_name_shape_style()) {
    if (!_impl_.table_name_shape_style_->IsInitialized()) return false;
  }
  if (_internal_has_row_filter_set_pre_pivot()) {
    if (!_impl_.row_filter_set_pre_pivot_->IsInitialized()) return false;
  }
  if (_internal_has_sort_order()) {
    if (!_impl_.sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_sort_rule_reference_tracker()) {
    if (!_impl_.sort_rule_reference_tracker_->IsInitialized()) return false;
  }
  if (_internal_has_base_column_row_uids()) {
    if (!_impl_.base_column_row_uids_->IsInitialized()) return false;
  }
  if (_internal_has_merge_owner()) {
    if (!_impl_.merge_owner_->IsInitialized()) return false;
  }
  if (_internal_has_table_style_preset()) {
    if (!_impl_.table_style_preset_->IsInitialized()) return false;
  }
  if (_internal_has_stroke_sidecar()) {
    if (!_impl_.stroke_sidecar_->IsInitialized()) return false;
  }
  if (_internal_has_text_import_record()) {
    if (!_impl_.text_import_record_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_1_style()) {
    if (!_impl_.category_level_1_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_2_style()) {
    if (!_impl_.category_level_2_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_3_style()) {
    if (!_impl_.category_level_3_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_4_style()) {
    if (!_impl_.category_level_4_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_5_style()) {
    if (!_impl_.category_level_5_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_1_text_style()) {
    if (!_impl_.category_level_1_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_2_text_style()) {
    if (!_impl_.category_level_2_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_3_text_style()) {
    if (!_impl_.category_level_3_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_4_text_style()) {
    if (!_impl_.category_level_4_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_level_5_text_style()) {
    if (!_impl_.category_level_5_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_states_owner()) {
    if (!_impl_.hidden_states_owner_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_1_style()) {
    if (!_impl_.label_level_1_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_2_style()) {
    if (!_impl_.label_level_2_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_3_style()) {
    if (!_impl_.label_level_3_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_4_style()) {
    if (!_impl_.label_level_4_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_5_style()) {
    if (!_impl_.label_level_5_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_1_text_style()) {
    if (!_impl_.label_level_1_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_2_text_style()) {
    if (!_impl_.label_level_2_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_3_text_style()) {
    if (!_impl_.label_level_3_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_4_text_style()) {
    if (!_impl_.label_level_4_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_label_level_5_text_style()) {
    if (!_impl_.label_level_5_text_style_->IsInitialized()) return false;
  }
  if (_internal_has_category_owner_deprecated()) {
    if (!_impl_.category_owner_deprecated_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_owner()) {
    if (!_impl_.pencil_annotation_owner_->IsInitialized()) return false;
  }
  if (_internal_has_haunted_owner()) {
    if (!_impl_.haunted_owner_->IsInitialized()) return false;
  }
  if (_internal_has_pivot_owner()) {
    if (!_impl_.pivot_owner_->IsInitialized()) return false;
  }
  if (_internal_has_category_owner()) {
    if (!_impl_.category_owner_->IsInitialized()) return false;
  }
  if (_internal_has_pivot_body_summary_row_style()) {
    if (!_impl_.pivot_body_summary_row_style_->IsInitialized()) return false;
  }
  if (_internal_has_pivot_body_summary_column_style()) {
    if (!_impl_.pivot_body_summary_column_style_->IsInitialized()) return false;
  }
  if (_internal_has_pivot_header_column_summary_style()) {
    if (!_impl_.pivot_header_column_summary_style_->IsInitialized()) return false;
  }
  return true;
}

void TableModelArchive::InternalSwap(TableModelArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  _impl_.pivot_value_types_by_col_.InternalSwap(&other->_impl_.pivot_value_types_by_col_);
  _impl_.pivot_date_grouping_columns_.InternalSwap(&other->_impl_.pivot_date_grouping_columns_);
  _impl_.pivot_date_grouping_types_.InternalSwap(&other->_impl_.pivot_date_grouping_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_id_, lhs_arena,
      &other->_impl_.table_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.table_name_, lhs_arena,
      &other->_impl_.table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_table_id_, lhs_arena,
      &other->_impl_.from_table_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_group_by_uid_, lhs_arena,
      &other->_impl_.from_group_by_uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableModelArchive, _impl_.preset_needs_strong_ownership_)
      + sizeof(TableModelArchive::_impl_.preset_needs_strong_ownership_)
      - PROTOBUF_FIELD_OFFSET(TableModelArchive, _impl_.table_style_)>(
          reinterpret_cast<char*>(&_impl_.table_style_),
          reinterpret_cast<char*>(&other->_impl_.table_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableModelArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[41]);
}

// ===================================================================

class SummaryModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryModelArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& table_info(const SummaryModelArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::DataStore& data_store(const SummaryModelArchive* msg);
  static void set_has_data_store(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& column_row_uids(const SummaryModelArchive* msg);
  static void set_has_column_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& aggregate_formula_owner_uuid(const SummaryModelArchive* msg);
  static void set_has_aggregate_formula_owner_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& summary_cell_vendor(const SummaryModelArchive* msg);
  static void set_has_summary_cell_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_category_column_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_summary_row_level_1_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_summary_row_level_2_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_summary_row_level_3_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_summary_row_level_4_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_summary_row_level_5_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_summary_label_row_level_1_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_summary_label_row_level_2_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_summary_label_row_level_3_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_summary_label_row_level_4_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_summary_label_row_level_5_height(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_label_row_visibility_1(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_label_row_visibility_2(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_label_row_visibility_3(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_label_row_visibility_4(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_label_row_visibility_5(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TST::TableGroupSortOrderUIDArchive& group_sort_order(const SummaryModelArchive* msg);
  static void set_has_group_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
SummaryModelArchive::_Internal::table_info(const SummaryModelArchive* msg) {
  return *msg->_impl_.table_info_;
}
const ::TST::DataStore&
SummaryModelArchive::_Internal::data_store(const SummaryModelArchive* msg) {
  return *msg->_impl_.data_store_;
}
const ::TSP::Reference&
SummaryModelArchive::_Internal::column_row_uids(const SummaryModelArchive* msg) {
  return *msg->_impl_.column_row_uids_;
}
const ::TSP::UUID&
SummaryModelArchive::_Internal::aggregate_formula_owner_uuid(const SummaryModelArchive* msg) {
  return *msg->_impl_.aggregate_formula_owner_uuid_;
}
const ::TSP::Reference&
SummaryModelArchive::_Internal::summary_cell_vendor(const SummaryModelArchive* msg) {
  return *msg->_impl_.summary_cell_vendor_;
}
const ::TST::TableGroupSortOrderUIDArchive&
SummaryModelArchive::_Internal::group_sort_order(const SummaryModelArchive* msg) {
  return *msg->_impl_.group_sort_order_;
}
void SummaryModelArchive::clear_table_info() {
  if (_impl_.table_info_ != nullptr) _impl_.table_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SummaryModelArchive::clear_column_row_uids() {
  if (_impl_.column_row_uids_ != nullptr) _impl_.column_row_uids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SummaryModelArchive::clear_aggregate_formula_owner_uuid() {
  if (_impl_.aggregate_formula_owner_uuid_ != nullptr) _impl_.aggregate_formula_owner_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SummaryModelArchive::clear_summary_cell_vendor() {
  if (_impl_.summary_cell_vendor_ != nullptr) _impl_.summary_cell_vendor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
SummaryModelArchive::SummaryModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.SummaryModelArchive)
}
SummaryModelArchive::SummaryModelArchive(const SummaryModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryModelArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.summary_row_height_list_){from._impl_.summary_row_height_list_}
    , decltype(_impl_.label_row_height_list_){from._impl_.label_row_height_list_}
    , decltype(_impl_.label_row_visibility_list_){from._impl_.label_row_visibility_list_}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.data_store_){nullptr}
    , decltype(_impl_.column_row_uids_){nullptr}
    , decltype(_impl_.aggregate_formula_owner_uuid_){nullptr}
    , decltype(_impl_.summary_cell_vendor_){nullptr}
    , decltype(_impl_.group_sort_order_){nullptr}
    , decltype(_impl_.category_column_width_){}
    , decltype(_impl_.summary_row_level_1_height_){}
    , decltype(_impl_.summary_row_level_2_height_){}
    , decltype(_impl_.summary_row_level_3_height_){}
    , decltype(_impl_.summary_row_level_4_height_){}
    , decltype(_impl_.summary_row_level_5_height_){}
    , decltype(_impl_.summary_label_row_level_1_height_){}
    , decltype(_impl_.summary_label_row_level_2_height_){}
    , decltype(_impl_.summary_label_row_level_3_height_){}
    , decltype(_impl_.summary_label_row_level_4_height_){}
    , decltype(_impl_.summary_label_row_level_5_height_){}
    , decltype(_impl_.label_row_visibility_1_){}
    , decltype(_impl_.label_row_visibility_2_){}
    , decltype(_impl_.label_row_visibility_3_){}
    , decltype(_impl_.label_row_visibility_4_){}
    , decltype(_impl_.label_row_visibility_5_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    _this->_impl_.table_info_ = new ::TSP::Reference(*from._impl_.table_info_);
  }
  if (from._internal_has_data_store()) {
    _this->_impl_.data_store_ = new ::TST::DataStore(*from._impl_.data_store_);
  }
  if (from._internal_has_column_row_uids()) {
    _this->_impl_.column_row_uids_ = new ::TSP::Reference(*from._impl_.column_row_uids_);
  }
  if (from._internal_has_aggregate_formula_owner_uuid()) {
    _this->_impl_.aggregate_formula_owner_uuid_ = new ::TSP::UUID(*from._impl_.aggregate_formula_owner_uuid_);
  }
  if (from._internal_has_summary_cell_vendor()) {
    _this->_impl_.summary_cell_vendor_ = new ::TSP::Reference(*from._impl_.summary_cell_vendor_);
  }
  if (from._internal_has_group_sort_order()) {
    _this->_impl_.group_sort_order_ = new ::TST::TableGroupSortOrderUIDArchive(*from._impl_.group_sort_order_);
  }
  ::memcpy(&_impl_.category_column_width_, &from._impl_.category_column_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.label_row_visibility_5_) -
    reinterpret_cast<char*>(&_impl_.category_column_width_)) + sizeof(_impl_.label_row_visibility_5_));
  // @@protoc_insertion_point(copy_constructor:TST.SummaryModelArchive)
}

inline void SummaryModelArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.summary_row_height_list_){arena}
    , decltype(_impl_.label_row_height_list_){arena}
    , decltype(_impl_.label_row_visibility_list_){arena}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.data_store_){nullptr}
    , decltype(_impl_.column_row_uids_){nullptr}
    , decltype(_impl_.aggregate_formula_owner_uuid_){nullptr}
    , decltype(_impl_.summary_cell_vendor_){nullptr}
    , decltype(_impl_.group_sort_order_){nullptr}
    , decltype(_impl_.category_column_width_){0}
    , decltype(_impl_.summary_row_level_1_height_){0}
    , decltype(_impl_.summary_row_level_2_height_){0}
    , decltype(_impl_.summary_row_level_3_height_){0}
    , decltype(_impl_.summary_row_level_4_height_){0}
    , decltype(_impl_.summary_row_level_5_height_){0}
    , decltype(_impl_.summary_label_row_level_1_height_){0}
    , decltype(_impl_.summary_label_row_level_2_height_){0}
    , decltype(_impl_.summary_label_row_level_3_height_){0}
    , decltype(_impl_.summary_label_row_level_4_height_){0}
    , decltype(_impl_.summary_label_row_level_5_height_){0}
    , decltype(_impl_.label_row_visibility_1_){0u}
    , decltype(_impl_.label_row_visibility_2_){0u}
    , decltype(_impl_.label_row_visibility_3_){0u}
    , decltype(_impl_.label_row_visibility_4_){0u}
    , decltype(_impl_.label_row_visibility_5_){0u}
  };
}

SummaryModelArchive::~SummaryModelArchive() {
  // @@protoc_insertion_point(destructor:TST.SummaryModelArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummaryModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.summary_row_height_list_.~RepeatedField();
  _impl_.label_row_height_list_.~RepeatedField();
  _impl_.label_row_visibility_list_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.table_info_;
  if (this != internal_default_instance()) delete _impl_.data_store_;
  if (this != internal_default_instance()) delete _impl_.column_row_uids_;
  if (this != internal_default_instance()) delete _impl_.aggregate_formula_owner_uuid_;
  if (this != internal_default_instance()) delete _impl_.summary_cell_vendor_;
  if (this != internal_default_instance()) delete _impl_.group_sort_order_;
}

void SummaryModelArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SummaryModelArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.summary_row_height_list_.Clear();
  _impl_.label_row_height_list_.Clear();
  _impl_.label_row_visibility_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_info_ != nullptr);
      _impl_.table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.data_store_ != nullptr);
      _impl_.data_store_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.column_row_uids_ != nullptr);
      _impl_.column_row_uids_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.aggregate_formula_owner_uuid_ != nullptr);
      _impl_.aggregate_formula_owner_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.summary_cell_vendor_ != nullptr);
      _impl_.summary_cell_vendor_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.group_sort_order_ != nullptr);
      _impl_.group_sort_order_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.category_column_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.summary_row_level_1_height_) -
        reinterpret_cast<char*>(&_impl_.category_column_width_)) + sizeof(_impl_.summary_row_level_1_height_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.summary_row_level_2_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.summary_label_row_level_4_height_) -
        reinterpret_cast<char*>(&_impl_.summary_row_level_2_height_)) + sizeof(_impl_.summary_label_row_level_4_height_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.summary_label_row_level_5_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.label_row_visibility_5_) -
        reinterpret_cast<char*>(&_impl_.summary_label_row_level_5_height_)) + sizeof(_impl_.label_row_visibility_5_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryModelArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.DataStore data_store = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_store(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference column_row_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_row_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID aggregate_formula_owner_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate_formula_owner_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference summary_cell_vendor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_cell_vendor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double category_column_width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_category_column_width(&has_bits);
          _impl_.category_column_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_row_level_1_height = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_summary_row_level_1_height(&has_bits);
          _impl_.summary_row_level_1_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_row_level_2_height = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_summary_row_level_2_height(&has_bits);
          _impl_.summary_row_level_2_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_row_level_3_height = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_summary_row_level_3_height(&has_bits);
          _impl_.summary_row_level_3_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_row_level_4_height = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_summary_row_level_4_height(&has_bits);
          _impl_.summary_row_level_4_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_row_level_5_height = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_summary_row_level_5_height(&has_bits);
          _impl_.summary_row_level_5_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_label_row_level_1_height = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_summary_label_row_level_1_height(&has_bits);
          _impl_.summary_label_row_level_1_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_label_row_level_2_height = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_summary_label_row_level_2_height(&has_bits);
          _impl_.summary_label_row_level_2_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_label_row_level_3_height = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_summary_label_row_level_3_height(&has_bits);
          _impl_.summary_label_row_level_3_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_label_row_level_4_height = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_summary_label_row_level_4_height(&has_bits);
          _impl_.summary_label_row_level_4_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double summary_label_row_level_5_height = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_summary_label_row_level_5_height(&has_bits);
          _impl_.summary_label_row_level_5_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_1 = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_label_row_visibility_1(&has_bits);
          _impl_.label_row_visibility_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_2 = 22 [deprecated = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_label_row_visibility_2(&has_bits);
          _impl_.label_row_visibility_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_3 = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_label_row_visibility_3(&has_bits);
          _impl_.label_row_visibility_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_4 = 24 [deprecated = true];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_label_row_visibility_4(&has_bits);
          _impl_.label_row_visibility_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 label_row_visibility_5 = 25 [deprecated = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_label_row_visibility_5(&has_bits);
          _impl_.label_row_visibility_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double summary_row_height_list = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_summary_row_height_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<209>(ptr));
        } else if (static_cast<uint8_t>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_summary_row_height_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double label_row_height_list = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_label_row_height_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<217>(ptr));
        } else if (static_cast<uint8_t>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_label_row_height_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 label_row_visibility_list = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<224>(ptr));
        } else if (static_cast<uint8_t>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_label_row_visibility_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableGroupSortOrderUIDArchive group_sort_order = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryModelArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SummaryModelArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_info(this),
        _Internal::table_info(this).GetCachedSize(), target, stream);
  }

  // optional .TST.DataStore data_store = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data_store(this),
        _Internal::data_store(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference column_row_uids = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::column_row_uids(this),
        _Internal::column_row_uids(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID aggregate_formula_owner_uuid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::aggregate_formula_owner_uuid(this),
        _Internal::aggregate_formula_owner_uuid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference summary_cell_vendor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::summary_cell_vendor(this),
        _Internal::summary_cell_vendor(this).GetCachedSize(), target, stream);
  }

  // optional double category_column_width = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_category_column_width(), target);
  }

  // optional double summary_row_level_1_height = 11 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_summary_row_level_1_height(), target);
  }

  // optional double summary_row_level_2_height = 12 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_summary_row_level_2_height(), target);
  }

  // optional double summary_row_level_3_height = 13 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_summary_row_level_3_height(), target);
  }

  // optional double summary_row_level_4_height = 14 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_summary_row_level_4_height(), target);
  }

  // optional double summary_row_level_5_height = 15 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_summary_row_level_5_height(), target);
  }

  // optional double summary_label_row_level_1_height = 16 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_summary_label_row_level_1_height(), target);
  }

  // optional double summary_label_row_level_2_height = 17 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_summary_label_row_level_2_height(), target);
  }

  // optional double summary_label_row_level_3_height = 18 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_summary_label_row_level_3_height(), target);
  }

  // optional double summary_label_row_level_4_height = 19 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_summary_label_row_level_4_height(), target);
  }

  // optional double summary_label_row_level_5_height = 20 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_summary_label_row_level_5_height(), target);
  }

  // optional uint32 label_row_visibility_1 = 21 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_label_row_visibility_1(), target);
  }

  // optional uint32 label_row_visibility_2 = 22 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_label_row_visibility_2(), target);
  }

  // optional uint32 label_row_visibility_3 = 23 [deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_label_row_visibility_3(), target);
  }

  // optional uint32 label_row_visibility_4 = 24 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_label_row_visibility_4(), target);
  }

  // optional uint32 label_row_visibility_5 = 25 [deprecated = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_label_row_visibility_5(), target);
  }

  // repeated double summary_row_height_list = 26;
  for (int i = 0, n = this->_internal_summary_row_height_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_summary_row_height_list(i), target);
  }

  // repeated double label_row_height_list = 27;
  for (int i = 0, n = this->_internal_label_row_height_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_label_row_height_list(i), target);
  }

  // repeated uint32 label_row_visibility_list = 28;
  for (int i = 0, n = this->_internal_label_row_visibility_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_label_row_visibility_list(i), target);
  }

  // optional .TST.TableGroupSortOrderUIDArchive group_sort_order = 29;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::group_sort_order(this),
        _Internal::group_sort_order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SummaryModelArchive)
  return target;
}

size_t SummaryModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SummaryModelArchive)
  size_t total_size = 0;

  // required .TSP.Reference table_info = 1;
  if (_internal_has_table_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_info_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double summary_row_height_list = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_summary_row_height_list_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_summary_row_height_list_size());
    total_size += data_size;
  }

  // repeated double label_row_height_list = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_label_row_height_list_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_label_row_height_list_size());
    total_size += data_size;
  }

  // repeated uint32 label_row_visibility_list = 28;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.label_row_visibility_list_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_label_row_visibility_list_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TST.DataStore data_store = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_store_);
    }

    // optional .TSP.Reference column_row_uids = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.column_row_uids_);
    }

    // optional .TSP.UUID aggregate_formula_owner_uuid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aggregate_formula_owner_uuid_);
    }

    // optional .TSP.Reference summary_cell_vendor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.summary_cell_vendor_);
    }

    // optional .TST.TableGroupSortOrderUIDArchive group_sort_order = 29;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_sort_order_);
    }

    // optional double category_column_width = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double summary_row_level_1_height = 11 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double summary_row_level_2_height = 12 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double summary_row_level_3_height = 13 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double summary_row_level_4_height = 14 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double summary_row_level_5_height = 15 [deprecated = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double summary_label_row_level_1_height = 16 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double summary_label_row_level_2_height = 17 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double summary_label_row_level_3_height = 18 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double summary_label_row_level_4_height = 19 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional double summary_label_row_level_5_height = 20 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional uint32 label_row_visibility_1 = 21 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_1());
    }

    // optional uint32 label_row_visibility_2 = 22 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_2());
    }

    // optional uint32 label_row_visibility_3 = 23 [deprecated = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_3());
    }

    // optional uint32 label_row_visibility_4 = 24 [deprecated = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_4());
    }

    // optional uint32 label_row_visibility_5 = 25 [deprecated = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_label_row_visibility_5());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryModelArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryModelArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryModelArchive::GetClassData() const { return &_class_data_; }


void SummaryModelArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryModelArchive*>(&to_msg);
  auto& from = static_cast<const SummaryModelArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.SummaryModelArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.summary_row_height_list_.MergeFrom(from._impl_.summary_row_height_list_);
  _this->_impl_.label_row_height_list_.MergeFrom(from._impl_.label_row_height_list_);
  _this->_impl_.label_row_visibility_list_.MergeFrom(from._impl_.label_row_visibility_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_info()->::TSP::Reference::MergeFrom(
          from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data_store()->::TST::DataStore::MergeFrom(
          from._internal_data_store());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_column_row_uids()->::TSP::Reference::MergeFrom(
          from._internal_column_row_uids());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_aggregate_formula_owner_uuid()->::TSP::UUID::MergeFrom(
          from._internal_aggregate_formula_owner_uuid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_summary_cell_vendor()->::TSP::Reference::MergeFrom(
          from._internal_summary_cell_vendor());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_group_sort_order()->::TST::TableGroupSortOrderUIDArchive::MergeFrom(
          from._internal_group_sort_order());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.category_column_width_ = from._impl_.category_column_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.summary_row_level_1_height_ = from._impl_.summary_row_level_1_height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.summary_row_level_2_height_ = from._impl_.summary_row_level_2_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.summary_row_level_3_height_ = from._impl_.summary_row_level_3_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.summary_row_level_4_height_ = from._impl_.summary_row_level_4_height_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.summary_row_level_5_height_ = from._impl_.summary_row_level_5_height_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.summary_label_row_level_1_height_ = from._impl_.summary_label_row_level_1_height_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.summary_label_row_level_2_height_ = from._impl_.summary_label_row_level_2_height_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.summary_label_row_level_3_height_ = from._impl_.summary_label_row_level_3_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.summary_label_row_level_4_height_ = from._impl_.summary_label_row_level_4_height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.summary_label_row_level_5_height_ = from._impl_.summary_label_row_level_5_height_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.label_row_visibility_1_ = from._impl_.label_row_visibility_1_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.label_row_visibility_2_ = from._impl_.label_row_visibility_2_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.label_row_visibility_3_ = from._impl_.label_row_visibility_3_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.label_row_visibility_4_ = from._impl_.label_row_visibility_4_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.label_row_visibility_5_ = from._impl_.label_row_visibility_5_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryModelArchive::CopyFrom(const SummaryModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SummaryModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_table_info()) {
    if (!_impl_.table_info_->IsInitialized()) return false;
  }
  if (_internal_has_data_store()) {
    if (!_impl_.data_store_->IsInitialized()) return false;
  }
  if (_internal_has_column_row_uids()) {
    if (!_impl_.column_row_uids_->IsInitialized()) return false;
  }
  if (_internal_has_aggregate_formula_owner_uuid()) {
    if (!_impl_.aggregate_formula_owner_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_summary_cell_vendor()) {
    if (!_impl_.summary_cell_vendor_->IsInitialized()) return false;
  }
  if (_internal_has_group_sort_order()) {
    if (!_impl_.group_sort_order_->IsInitialized()) return false;
  }
  return true;
}

void SummaryModelArchive::InternalSwap(SummaryModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.summary_row_height_list_.InternalSwap(&other->_impl_.summary_row_height_list_);
  _impl_.label_row_height_list_.InternalSwap(&other->_impl_.label_row_height_list_);
  _impl_.label_row_visibility_list_.InternalSwap(&other->_impl_.label_row_visibility_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryModelArchive, _impl_.label_row_visibility_5_)
      + sizeof(SummaryModelArchive::_impl_.label_row_visibility_5_)
      - PROTOBUF_FIELD_OFFSET(SummaryModelArchive, _impl_.table_info_)>(
          reinterpret_cast<char*>(&_impl_.table_info_),
          reinterpret_cast<char*>(&other->_impl_.table_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryModelArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[42]);
}

// ===================================================================

class SummaryModelGroupByChangeStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryModelGroupByChangeStateArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& cell_map(const SummaryModelGroupByChangeStateArchive* msg);
  static void set_has_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
SummaryModelGroupByChangeStateArchive::_Internal::cell_map(const SummaryModelGroupByChangeStateArchive* msg) {
  return *msg->_impl_.cell_map_;
}
void SummaryModelGroupByChangeStateArchive::clear_cell_map() {
  if (_impl_.cell_map_ != nullptr) _impl_.cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SummaryModelGroupByChangeStateArchive::SummaryModelGroupByChangeStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.SummaryModelGroupByChangeStateArchive)
}
SummaryModelGroupByChangeStateArchive::SummaryModelGroupByChangeStateArchive(const SummaryModelGroupByChangeStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryModelGroupByChangeStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.summary_row_height_list_){from._impl_.summary_row_height_list_}
    , decltype(_impl_.label_row_height_list_){from._impl_.label_row_height_list_}
    , decltype(_impl_.label_row_visibility_list_){from._impl_.label_row_visibility_list_}
    , decltype(_impl_.cell_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_map()) {
    _this->_impl_.cell_map_ = new ::TSP::Reference(*from._impl_.cell_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.SummaryModelGroupByChangeStateArchive)
}

inline void SummaryModelGroupByChangeStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.summary_row_height_list_){arena}
    , decltype(_impl_.label_row_height_list_){arena}
    , decltype(_impl_.label_row_visibility_list_){arena}
    , decltype(_impl_.cell_map_){nullptr}
  };
}

SummaryModelGroupByChangeStateArchive::~SummaryModelGroupByChangeStateArchive() {
  // @@protoc_insertion_point(destructor:TST.SummaryModelGroupByChangeStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummaryModelGroupByChangeStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.summary_row_height_list_.~RepeatedField();
  _impl_.label_row_height_list_.~RepeatedField();
  _impl_.label_row_visibility_list_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.cell_map_;
}

void SummaryModelGroupByChangeStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryModelGroupByChangeStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SummaryModelGroupByChangeStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.summary_row_height_list_.Clear();
  _impl_.label_row_height_list_.Clear();
  _impl_.label_row_visibility_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cell_map_ != nullptr);
    _impl_.cell_map_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryModelGroupByChangeStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference cell_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double summary_row_height_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_summary_row_height_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_summary_row_height_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double label_row_height_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_label_row_height_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_label_row_height_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 label_row_visibility_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_label_row_visibility_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_label_row_visibility_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryModelGroupByChangeStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SummaryModelGroupByChangeStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference cell_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell_map(this),
        _Internal::cell_map(this).GetCachedSize(), target, stream);
  }

  // repeated double summary_row_height_list = 2;
  for (int i = 0, n = this->_internal_summary_row_height_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_summary_row_height_list(i), target);
  }

  // repeated double label_row_height_list = 3;
  for (int i = 0, n = this->_internal_label_row_height_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_label_row_height_list(i), target);
  }

  // repeated uint32 label_row_visibility_list = 4;
  for (int i = 0, n = this->_internal_label_row_visibility_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_label_row_visibility_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SummaryModelGroupByChangeStateArchive)
  return target;
}

size_t SummaryModelGroupByChangeStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SummaryModelGroupByChangeStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double summary_row_height_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_summary_row_height_list_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_summary_row_height_list_size());
    total_size += data_size;
  }

  // repeated double label_row_height_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_label_row_height_list_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_label_row_height_list_size());
    total_size += data_size;
  }

  // repeated uint32 label_row_visibility_list = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.label_row_visibility_list_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_label_row_visibility_list_size());
    total_size += data_size;
  }

  // optional .TSP.Reference cell_map = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryModelGroupByChangeStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryModelGroupByChangeStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryModelGroupByChangeStateArchive::GetClassData() const { return &_class_data_; }


void SummaryModelGroupByChangeStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryModelGroupByChangeStateArchive*>(&to_msg);
  auto& from = static_cast<const SummaryModelGroupByChangeStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.SummaryModelGroupByChangeStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.summary_row_height_list_.MergeFrom(from._impl_.summary_row_height_list_);
  _this->_impl_.label_row_height_list_.MergeFrom(from._impl_.label_row_height_list_);
  _this->_impl_.label_row_visibility_list_.MergeFrom(from._impl_.label_row_visibility_list_);
  if (from._internal_has_cell_map()) {
    _this->_internal_mutable_cell_map()->::TSP::Reference::MergeFrom(
        from._internal_cell_map());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryModelGroupByChangeStateArchive::CopyFrom(const SummaryModelGroupByChangeStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SummaryModelGroupByChangeStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryModelGroupByChangeStateArchive::IsInitialized() const {
  if (_internal_has_cell_map()) {
    if (!_impl_.cell_map_->IsInitialized()) return false;
  }
  return true;
}

void SummaryModelGroupByChangeStateArchive::InternalSwap(SummaryModelGroupByChangeStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.summary_row_height_list_.InternalSwap(&other->_impl_.summary_row_height_list_);
  _impl_.label_row_height_list_.InternalSwap(&other->_impl_.label_row_height_list_);
  _impl_.label_row_visibility_list_.InternalSwap(&other->_impl_.label_row_visibility_list_);
  swap(_impl_.cell_map_, other->_impl_.cell_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryModelGroupByChangeStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[43]);
}

// ===================================================================

class ColumnRowUIDMapArchive::_Internal {
 public:
};

void ColumnRowUIDMapArchive::clear_sorted_column_uids() {
  _impl_.sorted_column_uids_.Clear();
}
void ColumnRowUIDMapArchive::clear_sorted_row_uids() {
  _impl_.sorted_row_uids_.Clear();
}
ColumnRowUIDMapArchive::ColumnRowUIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ColumnRowUIDMapArchive)
}
ColumnRowUIDMapArchive::ColumnRowUIDMapArchive(const ColumnRowUIDMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnRowUIDMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sorted_column_uids_){from._impl_.sorted_column_uids_}
    , decltype(_impl_.column_index_for_uid_){from._impl_.column_index_for_uid_}
    , decltype(_impl_.column_uid_for_index_){from._impl_.column_uid_for_index_}
    , decltype(_impl_.sorted_row_uids_){from._impl_.sorted_row_uids_}
    , decltype(_impl_.row_index_for_uid_){from._impl_.row_index_for_uid_}
    , decltype(_impl_.row_uid_for_index_){from._impl_.row_uid_for_index_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ColumnRowUIDMapArchive)
}

inline void ColumnRowUIDMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sorted_column_uids_){arena}
    , decltype(_impl_.column_index_for_uid_){arena}
    , decltype(_impl_.column_uid_for_index_){arena}
    , decltype(_impl_.sorted_row_uids_){arena}
    , decltype(_impl_.row_index_for_uid_){arena}
    , decltype(_impl_.row_uid_for_index_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ColumnRowUIDMapArchive::~ColumnRowUIDMapArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnRowUIDMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnRowUIDMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sorted_column_uids_.~RepeatedPtrField();
  _impl_.column_index_for_uid_.~RepeatedField();
  _impl_.column_uid_for_index_.~RepeatedField();
  _impl_.sorted_row_uids_.~RepeatedPtrField();
  _impl_.row_index_for_uid_.~RepeatedField();
  _impl_.row_uid_for_index_.~RepeatedField();
}

void ColumnRowUIDMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnRowUIDMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnRowUIDMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sorted_column_uids_.Clear();
  _impl_.column_index_for_uid_.Clear();
  _impl_.column_uid_for_index_.Clear();
  _impl_.sorted_row_uids_.Clear();
  _impl_.row_index_for_uid_.Clear();
  _impl_.row_uid_for_index_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowUIDMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID sorted_column_uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorted_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 column_index_for_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column_index_for_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_column_index_for_uid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 column_uid_for_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column_uid_for_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_column_uid_for_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID sorted_row_uids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sorted_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 row_index_for_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_row_index_for_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_row_index_for_uid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 row_uid_for_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_row_uid_for_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_row_uid_for_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnRowUIDMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnRowUIDMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID sorted_column_uids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorted_column_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorted_column_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 column_index_for_uid = 2;
  for (int i = 0, n = this->_internal_column_index_for_uid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_index_for_uid(i), target);
  }

  // repeated uint32 column_uid_for_index = 3;
  for (int i = 0, n = this->_internal_column_uid_for_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_column_uid_for_index(i), target);
  }

  // repeated .TSP.UUID sorted_row_uids = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sorted_row_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_sorted_row_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 row_index_for_uid = 5;
  for (int i = 0, n = this->_internal_row_index_for_uid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_row_index_for_uid(i), target);
  }

  // repeated uint32 row_uid_for_index = 6;
  for (int i = 0, n = this->_internal_row_uid_for_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_row_uid_for_index(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnRowUIDMapArchive)
  return target;
}

size_t ColumnRowUIDMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnRowUIDMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID sorted_column_uids = 1;
  total_size += 1UL * this->_internal_sorted_column_uids_size();
  for (const auto& msg : this->_impl_.sorted_column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 column_index_for_uid = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.column_index_for_uid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_column_index_for_uid_size());
    total_size += data_size;
  }

  // repeated uint32 column_uid_for_index = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.column_uid_for_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_column_uid_for_index_size());
    total_size += data_size;
  }

  // repeated .TSP.UUID sorted_row_uids = 4;
  total_size += 1UL * this->_internal_sorted_row_uids_size();
  for (const auto& msg : this->_impl_.sorted_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 row_index_for_uid = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.row_index_for_uid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_row_index_for_uid_size());
    total_size += data_size;
  }

  // repeated uint32 row_uid_for_index = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.row_uid_for_index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_row_uid_for_index_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnRowUIDMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnRowUIDMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnRowUIDMapArchive::GetClassData() const { return &_class_data_; }


void ColumnRowUIDMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnRowUIDMapArchive*>(&to_msg);
  auto& from = static_cast<const ColumnRowUIDMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnRowUIDMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sorted_column_uids_.MergeFrom(from._impl_.sorted_column_uids_);
  _this->_impl_.column_index_for_uid_.MergeFrom(from._impl_.column_index_for_uid_);
  _this->_impl_.column_uid_for_index_.MergeFrom(from._impl_.column_uid_for_index_);
  _this->_impl_.sorted_row_uids_.MergeFrom(from._impl_.sorted_row_uids_);
  _this->_impl_.row_index_for_uid_.MergeFrom(from._impl_.row_index_for_uid_);
  _this->_impl_.row_uid_for_index_.MergeFrom(from._impl_.row_uid_for_index_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnRowUIDMapArchive::CopyFrom(const ColumnRowUIDMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnRowUIDMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowUIDMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sorted_column_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sorted_row_uids_))
    return false;
  return true;
}

void ColumnRowUIDMapArchive::InternalSwap(ColumnRowUIDMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sorted_column_uids_.InternalSwap(&other->_impl_.sorted_column_uids_);
  _impl_.column_index_for_uid_.InternalSwap(&other->_impl_.column_index_for_uid_);
  _impl_.column_uid_for_index_.InternalSwap(&other->_impl_.column_uid_for_index_);
  _impl_.sorted_row_uids_.InternalSwap(&other->_impl_.sorted_row_uids_);
  _impl_.row_index_for_uid_.InternalSwap(&other->_impl_.row_index_for_uid_);
  _impl_.row_uid_for_index_.InternalSwap(&other->_impl_.row_uid_for_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowUIDMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[44]);
}

// ===================================================================

class StrokeLayerArchive_StrokeRunArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeLayerArchive_StrokeRunArchive>()._impl_._has_bits_);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::StrokeArchive& stroke(const StrokeLayerArchive_StrokeRunArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSD::StrokeArchive&
StrokeLayerArchive_StrokeRunArchive::_Internal::stroke(const StrokeLayerArchive_StrokeRunArchive* msg) {
  return *msg->_impl_.stroke_;
}
void StrokeLayerArchive_StrokeRunArchive::clear_stroke() {
  if (_impl_.stroke_ != nullptr) _impl_.stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StrokeLayerArchive_StrokeRunArchive::StrokeLayerArchive_StrokeRunArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StrokeLayerArchive.StrokeRunArchive)
}
StrokeLayerArchive_StrokeRunArchive::StrokeLayerArchive_StrokeRunArchive(const StrokeLayerArchive_StrokeRunArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrokeLayerArchive_StrokeRunArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.origin_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.order_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    _this->_impl_.stroke_ = new ::TSD::StrokeArchive(*from._impl_.stroke_);
  }
  ::memcpy(&_impl_.origin_, &from._impl_.origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.order_) -
    reinterpret_cast<char*>(&_impl_.origin_)) + sizeof(_impl_.order_));
  // @@protoc_insertion_point(copy_constructor:TST.StrokeLayerArchive.StrokeRunArchive)
}

inline void StrokeLayerArchive_StrokeRunArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.origin_){0}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.order_){0u}
  };
}

StrokeLayerArchive_StrokeRunArchive::~StrokeLayerArchive_StrokeRunArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeLayerArchive.StrokeRunArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrokeLayerArchive_StrokeRunArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stroke_;
}

void StrokeLayerArchive_StrokeRunArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrokeLayerArchive_StrokeRunArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeLayerArchive.StrokeRunArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stroke_ != nullptr);
    _impl_.stroke_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.origin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.order_) -
        reinterpret_cast<char*>(&_impl_.origin_)) + sizeof(_impl_.order_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeLayerArchive_StrokeRunArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_origin(&has_bits);
          _impl_.origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_order(&has_bits);
          _impl_.order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrokeLayerArchive_StrokeRunArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeLayerArchive.StrokeRunArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 origin = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_origin(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  // optional .TSD.StrokeArchive stroke = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stroke(this),
        _Internal::stroke(this).GetCachedSize(), target, stream);
  }

  // optional uint32 order = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeLayerArchive.StrokeRunArchive)
  return target;
}

size_t StrokeLayerArchive_StrokeRunArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeLayerArchive.StrokeRunArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSD.StrokeArchive stroke = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stroke_);
    }

    // optional int32 origin = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_origin());
    }

    // optional uint32 length = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
    }

    // optional uint32 order = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_order());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeLayerArchive_StrokeRunArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrokeLayerArchive_StrokeRunArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeLayerArchive_StrokeRunArchive::GetClassData() const { return &_class_data_; }


void StrokeLayerArchive_StrokeRunArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrokeLayerArchive_StrokeRunArchive*>(&to_msg);
  auto& from = static_cast<const StrokeLayerArchive_StrokeRunArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeLayerArchive.StrokeRunArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.origin_ = from._impl_.origin_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.order_ = from._impl_.order_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeLayerArchive_StrokeRunArchive::CopyFrom(const StrokeLayerArchive_StrokeRunArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeLayerArchive.StrokeRunArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeLayerArchive_StrokeRunArchive::IsInitialized() const {
  if (_internal_has_stroke()) {
    if (!_impl_.stroke_->IsInitialized()) return false;
  }
  return true;
}

void StrokeLayerArchive_StrokeRunArchive::InternalSwap(StrokeLayerArchive_StrokeRunArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokeLayerArchive_StrokeRunArchive, _impl_.order_)
      + sizeof(StrokeLayerArchive_StrokeRunArchive::_impl_.order_)
      - PROTOBUF_FIELD_OFFSET(StrokeLayerArchive_StrokeRunArchive, _impl_.stroke_)>(
          reinterpret_cast<char*>(&_impl_.stroke_),
          reinterpret_cast<char*>(&other->_impl_.stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeLayerArchive_StrokeRunArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[45]);
}

// ===================================================================

class StrokeLayerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeLayerArchive>()._impl_._has_bits_);
  static void set_has_row_column_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StrokeLayerArchive::StrokeLayerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StrokeLayerArchive)
}
StrokeLayerArchive::StrokeLayerArchive(const StrokeLayerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrokeLayerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_runs_){from._impl_.stroke_runs_}
    , decltype(_impl_.row_column_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.row_column_index_ = from._impl_.row_column_index_;
  // @@protoc_insertion_point(copy_constructor:TST.StrokeLayerArchive)
}

inline void StrokeLayerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_runs_){arena}
    , decltype(_impl_.row_column_index_){0u}
  };
}

StrokeLayerArchive::~StrokeLayerArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeLayerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrokeLayerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stroke_runs_.~RepeatedPtrField();
}

void StrokeLayerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrokeLayerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeLayerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stroke_runs_.Clear();
  _impl_.row_column_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeLayerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 row_column_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row_column_index(&has_bits);
          _impl_.row_column_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.StrokeLayerArchive.StrokeRunArchive stroke_runs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stroke_runs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrokeLayerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeLayerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 row_column_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_column_index(), target);
  }

  // repeated .TST.StrokeLayerArchive.StrokeRunArchive stroke_runs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stroke_runs_size()); i < n; i++) {
    const auto& repfield = this->_internal_stroke_runs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeLayerArchive)
  return target;
}

size_t StrokeLayerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeLayerArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.StrokeLayerArchive.StrokeRunArchive stroke_runs = 2;
  total_size += 1UL * this->_internal_stroke_runs_size();
  for (const auto& msg : this->_impl_.stroke_runs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 row_column_index = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_column_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeLayerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrokeLayerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeLayerArchive::GetClassData() const { return &_class_data_; }


void StrokeLayerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrokeLayerArchive*>(&to_msg);
  auto& from = static_cast<const StrokeLayerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeLayerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stroke_runs_.MergeFrom(from._impl_.stroke_runs_);
  if (from._internal_has_row_column_index()) {
    _this->_internal_set_row_column_index(from._internal_row_column_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeLayerArchive::CopyFrom(const StrokeLayerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeLayerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeLayerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.stroke_runs_))
    return false;
  return true;
}

void StrokeLayerArchive::InternalSwap(StrokeLayerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stroke_runs_.InternalSwap(&other->_impl_.stroke_runs_);
  swap(_impl_.row_column_index_, other->_impl_.row_column_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeLayerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[46]);
}

// ===================================================================

class StrokeSidecarArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeSidecarArchive>()._impl_._has_bits_);
  static void set_has_max_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void StrokeSidecarArchive::clear_left_column_stroke_layers() {
  _impl_.left_column_stroke_layers_.Clear();
}
void StrokeSidecarArchive::clear_right_column_stroke_layers() {
  _impl_.right_column_stroke_layers_.Clear();
}
void StrokeSidecarArchive::clear_top_row_stroke_layers() {
  _impl_.top_row_stroke_layers_.Clear();
}
void StrokeSidecarArchive::clear_bottom_row_stroke_layers() {
  _impl_.bottom_row_stroke_layers_.Clear();
}
StrokeSidecarArchive::StrokeSidecarArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StrokeSidecarArchive)
}
StrokeSidecarArchive::StrokeSidecarArchive(const StrokeSidecarArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrokeSidecarArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_column_stroke_layers_){from._impl_.left_column_stroke_layers_}
    , decltype(_impl_.right_column_stroke_layers_){from._impl_.right_column_stroke_layers_}
    , decltype(_impl_.top_row_stroke_layers_){from._impl_.top_row_stroke_layers_}
    , decltype(_impl_.bottom_row_stroke_layers_){from._impl_.bottom_row_stroke_layers_}
    , decltype(_impl_.max_order_){}
    , decltype(_impl_.column_count_){}
    , decltype(_impl_.row_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_order_, &from._impl_.max_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_count_) -
    reinterpret_cast<char*>(&_impl_.max_order_)) + sizeof(_impl_.row_count_));
  // @@protoc_insertion_point(copy_constructor:TST.StrokeSidecarArchive)
}

inline void StrokeSidecarArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_column_stroke_layers_){arena}
    , decltype(_impl_.right_column_stroke_layers_){arena}
    , decltype(_impl_.top_row_stroke_layers_){arena}
    , decltype(_impl_.bottom_row_stroke_layers_){arena}
    , decltype(_impl_.max_order_){0u}
    , decltype(_impl_.column_count_){0u}
    , decltype(_impl_.row_count_){0u}
  };
}

StrokeSidecarArchive::~StrokeSidecarArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeSidecarArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrokeSidecarArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.left_column_stroke_layers_.~RepeatedPtrField();
  _impl_.right_column_stroke_layers_.~RepeatedPtrField();
  _impl_.top_row_stroke_layers_.~RepeatedPtrField();
  _impl_.bottom_row_stroke_layers_.~RepeatedPtrField();
}

void StrokeSidecarArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrokeSidecarArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeSidecarArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.left_column_stroke_layers_.Clear();
  _impl_.right_column_stroke_layers_.Clear();
  _impl_.top_row_stroke_layers_.Clear();
  _impl_.bottom_row_stroke_layers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.max_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_count_) -
        reinterpret_cast<char*>(&_impl_.max_order_)) + sizeof(_impl_.row_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeSidecarArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 max_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_order(&has_bits);
          _impl_.max_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 column_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_column_count(&has_bits);
          _impl_.column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 row_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_row_count(&has_bits);
          _impl_.row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference left_column_stroke_layers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_column_stroke_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference right_column_stroke_layers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_column_stroke_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference top_row_stroke_layers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top_row_stroke_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference bottom_row_stroke_layers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bottom_row_stroke_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrokeSidecarArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeSidecarArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 max_order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_order(), target);
  }

  // optional uint32 column_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_count(), target);
  }

  // optional uint32 row_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_count(), target);
  }

  // repeated .TSP.Reference left_column_stroke_layers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_column_stroke_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_column_stroke_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference right_column_stroke_layers = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_column_stroke_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_column_stroke_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference top_row_stroke_layers = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_top_row_stroke_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_top_row_stroke_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference bottom_row_stroke_layers = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bottom_row_stroke_layers_size()); i < n; i++) {
    const auto& repfield = this->_internal_bottom_row_stroke_layers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeSidecarArchive)
  return target;
}

size_t StrokeSidecarArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeSidecarArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference left_column_stroke_layers = 4;
  total_size += 1UL * this->_internal_left_column_stroke_layers_size();
  for (const auto& msg : this->_impl_.left_column_stroke_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference right_column_stroke_layers = 5;
  total_size += 1UL * this->_internal_right_column_stroke_layers_size();
  for (const auto& msg : this->_impl_.right_column_stroke_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference top_row_stroke_layers = 6;
  total_size += 1UL * this->_internal_top_row_stroke_layers_size();
  for (const auto& msg : this->_impl_.top_row_stroke_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference bottom_row_stroke_layers = 7;
  total_size += 1UL * this->_internal_bottom_row_stroke_layers_size();
  for (const auto& msg : this->_impl_.bottom_row_stroke_layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 max_order = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_order());
    }

    // optional uint32 column_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_count());
    }

    // optional uint32 row_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeSidecarArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrokeSidecarArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeSidecarArchive::GetClassData() const { return &_class_data_; }


void StrokeSidecarArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrokeSidecarArchive*>(&to_msg);
  auto& from = static_cast<const StrokeSidecarArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeSidecarArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.left_column_stroke_layers_.MergeFrom(from._impl_.left_column_stroke_layers_);
  _this->_impl_.right_column_stroke_layers_.MergeFrom(from._impl_.right_column_stroke_layers_);
  _this->_impl_.top_row_stroke_layers_.MergeFrom(from._impl_.top_row_stroke_layers_);
  _this->_impl_.bottom_row_stroke_layers_.MergeFrom(from._impl_.bottom_row_stroke_layers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_order_ = from._impl_.max_order_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_count_ = from._impl_.column_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_count_ = from._impl_.row_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeSidecarArchive::CopyFrom(const StrokeSidecarArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeSidecarArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeSidecarArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.left_column_stroke_layers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.right_column_stroke_layers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.top_row_stroke_layers_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.bottom_row_stroke_layers_))
    return false;
  return true;
}

void StrokeSidecarArchive::InternalSwap(StrokeSidecarArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.left_column_stroke_layers_.InternalSwap(&other->_impl_.left_column_stroke_layers_);
  _impl_.right_column_stroke_layers_.InternalSwap(&other->_impl_.right_column_stroke_layers_);
  _impl_.top_row_stroke_layers_.InternalSwap(&other->_impl_.top_row_stroke_layers_);
  _impl_.bottom_row_stroke_layers_.InternalSwap(&other->_impl_.bottom_row_stroke_layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokeSidecarArchive, _impl_.row_count_)
      + sizeof(StrokeSidecarArchive::_impl_.row_count_)
      - PROTOBUF_FIELD_OFFSET(StrokeSidecarArchive, _impl_.max_order_)>(
          reinterpret_cast<char*>(&_impl_.max_order_),
          reinterpret_cast<char*>(&other->_impl_.max_order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeSidecarArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[47]);
}

// ===================================================================

class DurationWrapperArchive::_Internal {
 public:
};

DurationWrapperArchive::DurationWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TST.DurationWrapperArchive)
}
DurationWrapperArchive::DurationWrapperArchive(const DurationWrapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DurationWrapperArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.DurationWrapperArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DurationWrapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DurationWrapperArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DurationWrapperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[48]);
}

// ===================================================================

class Cell::_Internal {
 public:
  using HasBits = decltype(std::declval<Cell>()._impl_._has_bits_);
  static void set_has_valuetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::Reference& cell_style(const Cell* msg);
  static void set_has_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& text_style(const Cell* msg);
  static void set_has_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_numbervalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_stringvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_boolvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSK::FormatStructArchive& current_format(const Cell* msg);
  static void set_has_current_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& formulaerror(const Cell* msg);
  static void set_has_formulaerror(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::FormatStructArchive& number_format(const Cell* msg);
  static void set_has_number_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& currency_format(const Cell* msg);
  static void set_has_currency_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::FormatStructArchive& duration_format(const Cell* msg);
  static void set_has_duration_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSK::FormatStructArchive& date_format(const Cell* msg);
  static void set_has_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSK::FormatStructArchive& custom_format(const Cell* msg);
  static void set_has_custom_format(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSK::FormatStructArchive& base_format(const Cell* msg);
  static void set_has_base_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_explicit_format_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Reference& richtext(const Cell* msg);
  static void set_has_richtext(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& conditional_style(const Cell* msg);
  static void set_has_conditional_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& comment_storage(const Cell* msg);
  static void set_has_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_conditional_style_applied_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TST::ImportWarningSetArchive& import_warning_set(const Cell* msg);
  static void set_has_import_warning_set(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSK::CustomFormatArchive& custom_format_object(const Cell* msg);
  static void set_has_custom_format_object(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TST::CellBorderArchive& cell_border(const Cell* msg);
  static void set_has_cell_border(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TST::CellSpecArchive& cell_spec(const Cell* msg);
  static void set_has_cell_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_cell_format_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSK::FormatStructArchive& text_format(const Cell* msg);
  static void set_has_text_format(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSK::FormatStructArchive& boolean_format(const Cell* msg);
  static void set_has_boolean_format(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_decimal_value_low(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_decimal_value_high(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00100000) ^ 0x00100000) != 0;
  }
};

const ::TSP::Reference&
Cell::_Internal::cell_style(const Cell* msg) {
  return *msg->_impl_.cell_style_;
}
const ::TSP::Reference&
Cell::_Internal::text_style(const Cell* msg) {
  return *msg->_impl_.text_style_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::current_format(const Cell* msg) {
  return *msg->_impl_.current_format_;
}
const ::TSP::Reference&
Cell::_Internal::formulaerror(const Cell* msg) {
  return *msg->_impl_.formulaerror_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::number_format(const Cell* msg) {
  return *msg->_impl_.number_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::currency_format(const Cell* msg) {
  return *msg->_impl_.currency_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::duration_format(const Cell* msg) {
  return *msg->_impl_.duration_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::date_format(const Cell* msg) {
  return *msg->_impl_.date_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::custom_format(const Cell* msg) {
  return *msg->_impl_.custom_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::base_format(const Cell* msg) {
  return *msg->_impl_.base_format_;
}
const ::TSP::Reference&
Cell::_Internal::richtext(const Cell* msg) {
  return *msg->_impl_.richtext_;
}
const ::TSP::Reference&
Cell::_Internal::conditional_style(const Cell* msg) {
  return *msg->_impl_.conditional_style_;
}
const ::TSP::Reference&
Cell::_Internal::comment_storage(const Cell* msg) {
  return *msg->_impl_.comment_storage_;
}
const ::TST::ImportWarningSetArchive&
Cell::_Internal::import_warning_set(const Cell* msg) {
  return *msg->_impl_.import_warning_set_;
}
const ::TSK::CustomFormatArchive&
Cell::_Internal::custom_format_object(const Cell* msg) {
  return *msg->_impl_.custom_format_object_;
}
const ::TST::CellBorderArchive&
Cell::_Internal::cell_border(const Cell* msg) {
  return *msg->_impl_.cell_border_;
}
const ::TST::CellSpecArchive&
Cell::_Internal::cell_spec(const Cell* msg) {
  return *msg->_impl_.cell_spec_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::text_format(const Cell* msg) {
  return *msg->_impl_.text_format_;
}
const ::TSK::FormatStructArchive&
Cell::_Internal::boolean_format(const Cell* msg) {
  return *msg->_impl_.boolean_format_;
}
void Cell::clear_cell_style() {
  if (_impl_.cell_style_ != nullptr) _impl_.cell_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Cell::clear_text_style() {
  if (_impl_.text_style_ != nullptr) _impl_.text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Cell::clear_current_format() {
  if (_impl_.current_format_ != nullptr) _impl_.current_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Cell::clear_formulaerror() {
  if (_impl_.formulaerror_ != nullptr) _impl_.formulaerror_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Cell::clear_number_format() {
  if (_impl_.number_format_ != nullptr) _impl_.number_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Cell::clear_currency_format() {
  if (_impl_.currency_format_ != nullptr) _impl_.currency_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Cell::clear_duration_format() {
  if (_impl_.duration_format_ != nullptr) _impl_.duration_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Cell::clear_date_format() {
  if (_impl_.date_format_ != nullptr) _impl_.date_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Cell::clear_custom_format() {
  if (_impl_.custom_format_ != nullptr) _impl_.custom_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Cell::clear_base_format() {
  if (_impl_.base_format_ != nullptr) _impl_.base_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Cell::clear_richtext() {
  if (_impl_.richtext_ != nullptr) _impl_.richtext_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Cell::clear_conditional_style() {
  if (_impl_.conditional_style_ != nullptr) _impl_.conditional_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Cell::clear_comment_storage() {
  if (_impl_.comment_storage_ != nullptr) _impl_.comment_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void Cell::clear_custom_format_object() {
  if (_impl_.custom_format_object_ != nullptr) _impl_.custom_format_object_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void Cell::clear_text_format() {
  if (_impl_.text_format_ != nullptr) _impl_.text_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void Cell::clear_boolean_format() {
  if (_impl_.boolean_format_ != nullptr) _impl_.boolean_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
Cell::Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.Cell)
}
Cell::Cell(const Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stringvalue_){}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}
    , decltype(_impl_.current_format_){nullptr}
    , decltype(_impl_.formulaerror_){nullptr}
    , decltype(_impl_.number_format_){nullptr}
    , decltype(_impl_.currency_format_){nullptr}
    , decltype(_impl_.duration_format_){nullptr}
    , decltype(_impl_.date_format_){nullptr}
    , decltype(_impl_.custom_format_){nullptr}
    , decltype(_impl_.base_format_){nullptr}
    , decltype(_impl_.richtext_){nullptr}
    , decltype(_impl_.conditional_style_){nullptr}
    , decltype(_impl_.comment_storage_){nullptr}
    , decltype(_impl_.import_warning_set_){nullptr}
    , decltype(_impl_.custom_format_object_){nullptr}
    , decltype(_impl_.cell_border_){nullptr}
    , decltype(_impl_.cell_spec_){nullptr}
    , decltype(_impl_.text_format_){nullptr}
    , decltype(_impl_.boolean_format_){nullptr}
    , decltype(_impl_.valuetype_){}
    , decltype(_impl_.boolvalue_){}
    , decltype(_impl_.numbervalue_){}
    , decltype(_impl_.explicit_format_flags_){}
    , decltype(_impl_.conditional_style_applied_rule_){}
    , decltype(_impl_.decimal_value_low_){}
    , decltype(_impl_.decimal_value_high_){}
    , decltype(_impl_.cell_format_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stringvalue()) {
    _this->_impl_.stringvalue_.Set(from._internal_stringvalue(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cell_style()) {
    _this->_impl_.cell_style_ = new ::TSP::Reference(*from._impl_.cell_style_);
  }
  if (from._internal_has_text_style()) {
    _this->_impl_.text_style_ = new ::TSP::Reference(*from._impl_.text_style_);
  }
  if (from._internal_has_current_format()) {
    _this->_impl_.current_format_ = new ::TSK::FormatStructArchive(*from._impl_.current_format_);
  }
  if (from._internal_has_formulaerror()) {
    _this->_impl_.formulaerror_ = new ::TSP::Reference(*from._impl_.formulaerror_);
  }
  if (from._internal_has_number_format()) {
    _this->_impl_.number_format_ = new ::TSK::FormatStructArchive(*from._impl_.number_format_);
  }
  if (from._internal_has_currency_format()) {
    _this->_impl_.currency_format_ = new ::TSK::FormatStructArchive(*from._impl_.currency_format_);
  }
  if (from._internal_has_duration_format()) {
    _this->_impl_.duration_format_ = new ::TSK::FormatStructArchive(*from._impl_.duration_format_);
  }
  if (from._internal_has_date_format()) {
    _this->_impl_.date_format_ = new ::TSK::FormatStructArchive(*from._impl_.date_format_);
  }
  if (from._internal_has_custom_format()) {
    _this->_impl_.custom_format_ = new ::TSK::FormatStructArchive(*from._impl_.custom_format_);
  }
  if (from._internal_has_base_format()) {
    _this->_impl_.base_format_ = new ::TSK::FormatStructArchive(*from._impl_.base_format_);
  }
  if (from._internal_has_richtext()) {
    _this->_impl_.richtext_ = new ::TSP::Reference(*from._impl_.richtext_);
  }
  if (from._internal_has_conditional_style()) {
    _this->_impl_.conditional_style_ = new ::TSP::Reference(*from._impl_.conditional_style_);
  }
  if (from._internal_has_comment_storage()) {
    _this->_impl_.comment_storage_ = new ::TSP::Reference(*from._impl_.comment_storage_);
  }
  if (from._internal_has_import_warning_set()) {
    _this->_impl_.import_warning_set_ = new ::TST::ImportWarningSetArchive(*from._impl_.import_warning_set_);
  }
  if (from._internal_has_custom_format_object()) {
    _this->_impl_.custom_format_object_ = new ::TSK::CustomFormatArchive(*from._impl_.custom_format_object_);
  }
  if (from._internal_has_cell_border()) {
    _this->_impl_.cell_border_ = new ::TST::CellBorderArchive(*from._impl_.cell_border_);
  }
  if (from._internal_has_cell_spec()) {
    _this->_impl_.cell_spec_ = new ::TST::CellSpecArchive(*from._impl_.cell_spec_);
  }
  if (from._internal_has_text_format()) {
    _this->_impl_.text_format_ = new ::TSK::FormatStructArchive(*from._impl_.text_format_);
  }
  if (from._internal_has_boolean_format()) {
    _this->_impl_.boolean_format_ = new ::TSK::FormatStructArchive(*from._impl_.boolean_format_);
  }
  ::memcpy(&_impl_.valuetype_, &from._impl_.valuetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cell_format_kind_) -
    reinterpret_cast<char*>(&_impl_.valuetype_)) + sizeof(_impl_.cell_format_kind_));
  // @@protoc_insertion_point(copy_constructor:TST.Cell)
}

inline void Cell::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stringvalue_){}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}
    , decltype(_impl_.current_format_){nullptr}
    , decltype(_impl_.formulaerror_){nullptr}
    , decltype(_impl_.number_format_){nullptr}
    , decltype(_impl_.currency_format_){nullptr}
    , decltype(_impl_.duration_format_){nullptr}
    , decltype(_impl_.date_format_){nullptr}
    , decltype(_impl_.custom_format_){nullptr}
    , decltype(_impl_.base_format_){nullptr}
    , decltype(_impl_.richtext_){nullptr}
    , decltype(_impl_.conditional_style_){nullptr}
    , decltype(_impl_.comment_storage_){nullptr}
    , decltype(_impl_.import_warning_set_){nullptr}
    , decltype(_impl_.custom_format_object_){nullptr}
    , decltype(_impl_.cell_border_){nullptr}
    , decltype(_impl_.cell_spec_){nullptr}
    , decltype(_impl_.text_format_){nullptr}
    , decltype(_impl_.boolean_format_){nullptr}
    , decltype(_impl_.valuetype_){0}
    , decltype(_impl_.boolvalue_){false}
    , decltype(_impl_.numbervalue_){0}
    , decltype(_impl_.explicit_format_flags_){0u}
    , decltype(_impl_.conditional_style_applied_rule_){0u}
    , decltype(_impl_.decimal_value_low_){uint64_t{0u}}
    , decltype(_impl_.decimal_value_high_){uint64_t{0u}}
    , decltype(_impl_.cell_format_kind_){0u}
  };
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:TST.Cell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stringvalue_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cell_style_;
  if (this != internal_default_instance()) delete _impl_.text_style_;
  if (this != internal_default_instance()) delete _impl_.current_format_;
  if (this != internal_default_instance()) delete _impl_.formulaerror_;
  if (this != internal_default_instance()) delete _impl_.number_format_;
  if (this != internal_default_instance()) delete _impl_.currency_format_;
  if (this != internal_default_instance()) delete _impl_.duration_format_;
  if (this != internal_default_instance()) delete _impl_.date_format_;
  if (this != internal_default_instance()) delete _impl_.custom_format_;
  if (this != internal_default_instance()) delete _impl_.base_format_;
  if (this != internal_default_instance()) delete _impl_.richtext_;
  if (this != internal_default_instance()) delete _impl_.conditional_style_;
  if (this != internal_default_instance()) delete _impl_.comment_storage_;
  if (this != internal_default_instance()) delete _impl_.import_warning_set_;
  if (this != internal_default_instance()) delete _impl_.custom_format_object_;
  if (this != internal_default_instance()) delete _impl_.cell_border_;
  if (this != internal_default_instance()) delete _impl_.cell_spec_;
  if (this != internal_default_instance()) delete _impl_.text_format_;
  if (this != internal_default_instance()) delete _impl_.boolean_format_;
}

void Cell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.Cell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stringvalue_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_style_ != nullptr);
      _impl_.cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.text_style_ != nullptr);
      _impl_.text_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.current_format_ != nullptr);
      _impl_.current_format_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.formulaerror_ != nullptr);
      _impl_.formulaerror_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.number_format_ != nullptr);
      _impl_.number_format_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.currency_format_ != nullptr);
      _impl_.currency_format_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.duration_format_ != nullptr);
      _impl_.duration_format_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.date_format_ != nullptr);
      _impl_.date_format_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.custom_format_ != nullptr);
      _impl_.custom_format_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.base_format_ != nullptr);
      _impl_.base_format_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.richtext_ != nullptr);
      _impl_.richtext_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.conditional_style_ != nullptr);
      _impl_.conditional_style_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.comment_storage_ != nullptr);
      _impl_.comment_storage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.import_warning_set_ != nullptr);
      _impl_.import_warning_set_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.custom_format_object_ != nullptr);
      _impl_.custom_format_object_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.cell_border_ != nullptr);
      _impl_.cell_border_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.cell_spec_ != nullptr);
      _impl_.cell_spec_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.text_format_ != nullptr);
      _impl_.text_format_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.boolean_format_ != nullptr);
      _impl_.boolean_format_->Clear();
    }
  }
  if (cached_has_bits & 0x00f00000u) {
    ::memset(&_impl_.valuetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.explicit_format_flags_) -
        reinterpret_cast<char*>(&_impl_.valuetype_)) + sizeof(_impl_.explicit_format_flags_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&_impl_.conditional_style_applied_rule_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cell_format_kind_) -
        reinterpret_cast<char*>(&_impl_.conditional_style_applied_rule_)) + sizeof(_impl_.cell_format_kind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellValueType valueType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::CellValueType_IsValid(val))) {
            _internal_set_valuetype(static_cast<::TST::CellValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference text_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double numberValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_numbervalue(&has_bits);
          _impl_.numbervalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string stringValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.Cell.stringValue");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool boolValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_boolvalue(&has_bits);
          _impl_.boolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive current_format = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formulaError = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulaerror(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive number_format = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive currency_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive duration_format = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive date_format = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive custom_format = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive base_format = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 explicit_format_flags = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_explicit_format_flags(&has_bits);
          _impl_.explicit_format_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference richText = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_richtext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference conditional_style = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference comment_storage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 conditional_style_applied_rule = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_conditional_style_applied_rule(&has_bits);
          _impl_.conditional_style_applied_rule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ImportWarningSetArchive import_warning_set = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_warning_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CustomFormatArchive custom_format_object = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_format_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellBorderArchive cell_border = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_border(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellSpecArchive cell_spec = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cell_format_kind = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_cell_format_kind(&has_bits);
          _impl_.cell_format_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive text_format = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive boolean_format = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_value_low = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_decimal_value_low(&has_bits);
          _impl_.decimal_value_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_value_high = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_decimal_value_high(&has_bits);
          _impl_.decimal_value_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.Cell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CellValueType valueType = 2;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_valuetype(), target);
  }

  // optional .TSP.Reference cell_style = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_style(this),
        _Internal::cell_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference text_style = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::text_style(this),
        _Internal::text_style(this).GetCachedSize(), target, stream);
  }

  // optional double numberValue = 5;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_numbervalue(), target);
  }

  // optional string stringValue = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.Cell.stringValue");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_stringvalue(), target);
  }

  // optional bool boolValue = 7;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_boolvalue(), target);
  }

  // optional .TSK.FormatStructArchive current_format = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::current_format(this),
        _Internal::current_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formulaError = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::formulaerror(this),
        _Internal::formulaerror(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive number_format = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::number_format(this),
        _Internal::number_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive currency_format = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::currency_format(this),
        _Internal::currency_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive duration_format = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::duration_format(this),
        _Internal::duration_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive date_format = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::date_format(this),
        _Internal::date_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive custom_format = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::custom_format(this),
        _Internal::custom_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive base_format = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::base_format(this),
        _Internal::base_format(this).GetCachedSize(), target, stream);
  }

  // optional uint32 explicit_format_flags = 19;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_explicit_format_flags(), target);
  }

  // optional .TSP.Reference richText = 20;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::richtext(this),
        _Internal::richtext(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference conditional_style = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::conditional_style(this),
        _Internal::conditional_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference comment_storage = 23;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::comment_storage(this),
        _Internal::comment_storage(this).GetCachedSize(), target, stream);
  }

  // optional uint32 conditional_style_applied_rule = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_conditional_style_applied_rule(), target);
  }

  // optional .TST.ImportWarningSetArchive import_warning_set = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::import_warning_set(this),
        _Internal::import_warning_set(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CustomFormatArchive custom_format_object = 26;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::custom_format_object(this),
        _Internal::custom_format_object(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellBorderArchive cell_border = 27;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::cell_border(this),
        _Internal::cell_border(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellSpecArchive cell_spec = 28;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::cell_spec(this),
        _Internal::cell_spec(this).GetCachedSize(), target, stream);
  }

  // optional uint32 cell_format_kind = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_cell_format_kind(), target);
  }

  // optional .TSK.FormatStructArchive text_format = 30;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::text_format(this),
        _Internal::text_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive boolean_format = 31;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::boolean_format(this),
        _Internal::boolean_format(this).GetCachedSize(), target, stream);
  }

  // optional uint64 decimal_value_low = 32;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(32, this->_internal_decimal_value_low(), target);
  }

  // optional uint64 decimal_value_high = 33;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_decimal_value_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.Cell)
  size_t total_size = 0;

  // required .TST.CellValueType valueType = 2;
  if (_internal_has_valuetype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_valuetype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stringValue = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
    }

    // optional .TSP.Reference cell_style = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_style_);
    }

    // optional .TSP.Reference text_style = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.text_style_);
    }

    // optional .TSK.FormatStructArchive current_format = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.current_format_);
    }

    // optional .TSP.Reference formulaError = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formulaerror_);
    }

    // optional .TSK.FormatStructArchive number_format = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.number_format_);
    }

    // optional .TSK.FormatStructArchive currency_format = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.currency_format_);
    }

    // optional .TSK.FormatStructArchive duration_format = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.duration_format_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSK.FormatStructArchive date_format = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_format_);
    }

    // optional .TSK.FormatStructArchive custom_format = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_format_);
    }

    // optional .TSK.FormatStructArchive base_format = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_format_);
    }

    // optional .TSP.Reference richText = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.richtext_);
    }

    // optional .TSP.Reference conditional_style = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.conditional_style_);
    }

    // optional .TSP.Reference comment_storage = 23;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.comment_storage_);
    }

    // optional .TST.ImportWarningSetArchive import_warning_set = 25;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.import_warning_set_);
    }

    // optional .TSK.CustomFormatArchive custom_format_object = 26;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_format_object_);
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional .TST.CellBorderArchive cell_border = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_border_);
    }

    // optional .TST.CellSpecArchive cell_spec = 28;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_spec_);
    }

    // optional .TSK.FormatStructArchive text_format = 30;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.text_format_);
    }

    // optional .TSK.FormatStructArchive boolean_format = 31;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.boolean_format_);
    }

  }
  if (cached_has_bits & 0x00e00000u) {
    // optional bool boolValue = 7;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional double numberValue = 5;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional uint32 explicit_format_flags = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_explicit_format_flags());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional uint32 conditional_style_applied_rule = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_conditional_style_applied_rule());
    }

    // optional uint64 decimal_value_low = 32;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_decimal_value_low());
    }

    // optional uint64 decimal_value_high = 33;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_decimal_value_high());
    }

    // optional uint32 cell_format_kind = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_cell_format_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cell::GetClassData() const { return &_class_data_; }


void Cell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cell*>(&to_msg);
  auto& from = static_cast<const Cell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.Cell)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stringvalue(from._internal_stringvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_style()->::TSP::Reference::MergeFrom(
          from._internal_cell_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_text_style()->::TSP::Reference::MergeFrom(
          from._internal_text_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_current_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_current_format());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_formulaerror()->::TSP::Reference::MergeFrom(
          from._internal_formulaerror());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_number_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_number_format());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_currency_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_currency_format());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_duration_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_duration_format());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_date_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_date_format());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_custom_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_custom_format());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_base_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_base_format());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_richtext()->::TSP::Reference::MergeFrom(
          from._internal_richtext());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_conditional_style()->::TSP::Reference::MergeFrom(
          from._internal_conditional_style());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_comment_storage()->::TSP::Reference::MergeFrom(
          from._internal_comment_storage());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_import_warning_set()->::TST::ImportWarningSetArchive::MergeFrom(
          from._internal_import_warning_set());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_custom_format_object()->::TSK::CustomFormatArchive::MergeFrom(
          from._internal_custom_format_object());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_cell_border()->::TST::CellBorderArchive::MergeFrom(
          from._internal_cell_border());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_cell_spec()->::TST::CellSpecArchive::MergeFrom(
          from._internal_cell_spec());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_text_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_text_format());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_boolean_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_boolean_format());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.valuetype_ = from._impl_.valuetype_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.boolvalue_ = from._impl_.boolvalue_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.numbervalue_ = from._impl_.numbervalue_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.explicit_format_flags_ = from._impl_.explicit_format_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.conditional_style_applied_rule_ = from._impl_.conditional_style_applied_rule_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.decimal_value_low_ = from._impl_.decimal_value_low_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.decimal_value_high_ = from._impl_.decimal_value_high_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.cell_format_kind_ = from._impl_.cell_format_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_style()) {
    if (!_impl_.cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_text_style()) {
    if (!_impl_.text_style_->IsInitialized()) return false;
  }
  if (_internal_has_current_format()) {
    if (!_impl_.current_format_->IsInitialized()) return false;
  }
  if (_internal_has_formulaerror()) {
    if (!_impl_.formulaerror_->IsInitialized()) return false;
  }
  if (_internal_has_number_format()) {
    if (!_impl_.number_format_->IsInitialized()) return false;
  }
  if (_internal_has_currency_format()) {
    if (!_impl_.currency_format_->IsInitialized()) return false;
  }
  if (_internal_has_duration_format()) {
    if (!_impl_.duration_format_->IsInitialized()) return false;
  }
  if (_internal_has_date_format()) {
    if (!_impl_.date_format_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format()) {
    if (!_impl_.custom_format_->IsInitialized()) return false;
  }
  if (_internal_has_base_format()) {
    if (!_impl_.base_format_->IsInitialized()) return false;
  }
  if (_internal_has_richtext()) {
    if (!_impl_.richtext_->IsInitialized()) return false;
  }
  if (_internal_has_conditional_style()) {
    if (!_impl_.conditional_style_->IsInitialized()) return false;
  }
  if (_internal_has_comment_storage()) {
    if (!_impl_.comment_storage_->IsInitialized()) return false;
  }
  if (_internal_has_import_warning_set()) {
    if (!_impl_.import_warning_set_->IsInitialized()) return false;
  }
  if (_internal_has_custom_format_object()) {
    if (!_impl_.custom_format_object_->IsInitialized()) return false;
  }
  if (_internal_has_cell_border()) {
    if (!_impl_.cell_border_->IsInitialized()) return false;
  }
  if (_internal_has_cell_spec()) {
    if (!_impl_.cell_spec_->IsInitialized()) return false;
  }
  if (_internal_has_text_format()) {
    if (!_impl_.text_format_->IsInitialized()) return false;
  }
  if (_internal_has_boolean_format()) {
    if (!_impl_.boolean_format_->IsInitialized()) return false;
  }
  return true;
}

void Cell::InternalSwap(Cell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stringvalue_, lhs_arena,
      &other->_impl_.stringvalue_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cell, _impl_.cell_format_kind_)
      + sizeof(Cell::_impl_.cell_format_kind_)
      - PROTOBUF_FIELD_OFFSET(Cell, _impl_.cell_style_)>(
          reinterpret_cast<char*>(&_impl_.cell_style_),
          reinterpret_cast<char*>(&other->_impl_.cell_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[49]);
}

// ===================================================================

class MergeRegionMapArchive::_Internal {
 public:
};

MergeRegionMapArchive::MergeRegionMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.MergeRegionMapArchive)
}
MergeRegionMapArchive::MergeRegionMapArchive(const MergeRegionMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MergeRegionMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_range_){from._impl_.cell_range_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.MergeRegionMapArchive)
}

inline void MergeRegionMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_range_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MergeRegionMapArchive::~MergeRegionMapArchive() {
  // @@protoc_insertion_point(destructor:TST.MergeRegionMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MergeRegionMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_range_.~RepeatedPtrField();
}

void MergeRegionMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MergeRegionMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.MergeRegionMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_range_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeRegionMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.CellRange cell_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MergeRegionMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.MergeRegionMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_range = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_range_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_range(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.MergeRegionMapArchive)
  return target;
}

size_t MergeRegionMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.MergeRegionMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_range = 1;
  total_size += 1UL * this->_internal_cell_range_size();
  for (const auto& msg : this->_impl_.cell_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeRegionMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MergeRegionMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeRegionMapArchive::GetClassData() const { return &_class_data_; }


void MergeRegionMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MergeRegionMapArchive*>(&to_msg);
  auto& from = static_cast<const MergeRegionMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.MergeRegionMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_range_.MergeFrom(from._impl_.cell_range_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeRegionMapArchive::CopyFrom(const MergeRegionMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.MergeRegionMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRegionMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_range_))
    return false;
  return true;
}

void MergeRegionMapArchive::InternalSwap(MergeRegionMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_range_.InternalSwap(&other->_impl_.cell_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeRegionMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[50]);
}

// ===================================================================

class CellMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellMapArchive>()._impl_._has_bits_);
  static void set_has_uid_based(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CellMapArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_may_modify_formulas_in_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_may_modify_values_referenced_by_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TST::CellUIDListArchive&
CellMapArchive::_Internal::cell_uid_list(const CellMapArchive* msg) {
  return *msg->_impl_.cell_uid_list_;
}
void CellMapArchive::clear_cell_tiles() {
  _impl_.cell_tiles_.Clear();
}
void CellMapArchive::clear_expanded_cell_ids() {
  _impl_.expanded_cell_ids_.Clear();
}
void CellMapArchive::clear_merge_uid_ranges() {
  _impl_.merge_uid_ranges_.Clear();
}
void CellMapArchive::clear_unmerge_uid_ranges() {
  _impl_.unmerge_uid_ranges_.Clear();
}
CellMapArchive::CellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellMapArchive)
}
CellMapArchive::CellMapArchive(const CellMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_tiles_){from._impl_.cell_tiles_}
    , decltype(_impl_.merge_uid_ranges_){from._impl_.merge_uid_ranges_}
    , decltype(_impl_.unmerge_uid_ranges_){from._impl_.unmerge_uid_ranges_}
    , decltype(_impl_.merge_actions_){from._impl_.merge_actions_}
    , decltype(_impl_.expanded_cell_ids_){from._impl_.expanded_cell_ids_}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.uid_based_){}
    , decltype(_impl_.may_modify_formulas_in_cells_){}
    , decltype(_impl_.may_modify_values_referenced_by_formulas_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_uid_list()) {
    _this->_impl_.cell_uid_list_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uid_list_);
  }
  ::memcpy(&_impl_.uid_based_, &from._impl_.uid_based_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.may_modify_values_referenced_by_formulas_) -
    reinterpret_cast<char*>(&_impl_.uid_based_)) + sizeof(_impl_.may_modify_values_referenced_by_formulas_));
  // @@protoc_insertion_point(copy_constructor:TST.CellMapArchive)
}

inline void CellMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_tiles_){arena}
    , decltype(_impl_.merge_uid_ranges_){arena}
    , decltype(_impl_.unmerge_uid_ranges_){arena}
    , decltype(_impl_.merge_actions_){arena}
    , decltype(_impl_.expanded_cell_ids_){arena}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.uid_based_){false}
    , decltype(_impl_.may_modify_formulas_in_cells_){true}
    , decltype(_impl_.may_modify_values_referenced_by_formulas_){true}
  };
}

CellMapArchive::~CellMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CellMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_tiles_.~RepeatedPtrField();
  _impl_.merge_uid_ranges_.~RepeatedPtrField();
  _impl_.unmerge_uid_ranges_.~RepeatedPtrField();
  _impl_.merge_actions_.~RepeatedPtrField();
  _impl_.expanded_cell_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cell_uid_list_;
}

void CellMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_tiles_.Clear();
  _impl_.merge_uid_ranges_.Clear();
  _impl_.unmerge_uid_ranges_.Clear();
  _impl_.merge_actions_.Clear();
  _impl_.expanded_cell_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cell_uid_list_ != nullptr);
    _impl_.cell_uid_list_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    _impl_.uid_based_ = false;
    _impl_.may_modify_formulas_in_cells_ = true;
    _impl_.may_modify_values_referenced_by_formulas_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference cell_tiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool uid_based = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_uid_based(&has_bits);
          _impl_.uid_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uid_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUIDRectArchive merge_uid_ranges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_uid_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unmerge_uid_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool may_modify_formulas_in_cells = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_may_modify_formulas_in_cells(&has_bits);
          _impl_.may_modify_formulas_in_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool may_modify_values_referenced_by_formulas = 11 [default = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_may_modify_values_referenced_by_formulas(&has_bits);
          _impl_.may_modify_values_referenced_by_formulas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.MergeOperationArchive merge_actions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expanded_cell_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_tiles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_tiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_tiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required bool uid_based = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_uid_based(), target);
  }

  // optional .TST.CellUIDListArchive cell_uid_list = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cell_uid_list(this),
        _Internal::cell_uid_list(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUIDRectArchive merge_uid_ranges = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_merge_uid_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_merge_uid_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unmerge_uid_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_unmerge_uid_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool may_modify_formulas_in_cells = 10 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_may_modify_formulas_in_cells(), target);
  }

  // optional bool may_modify_values_referenced_by_formulas = 11 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_may_modify_values_referenced_by_formulas(), target);
  }

  // repeated .TST.MergeOperationArchive merge_actions = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_merge_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_merge_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_expanded_cell_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_expanded_cell_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellMapArchive)
  return target;
}

size_t CellMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellMapArchive)
  size_t total_size = 0;

  // required bool uid_based = 3;
  if (_internal_has_uid_based()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_tiles = 2;
  total_size += 1UL * this->_internal_cell_tiles_size();
  for (const auto& msg : this->_impl_.cell_tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUIDRectArchive merge_uid_ranges = 7;
  total_size += 1UL * this->_internal_merge_uid_ranges_size();
  for (const auto& msg : this->_impl_.merge_uid_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 9;
  total_size += 1UL * this->_internal_unmerge_uid_ranges_size();
  for (const auto& msg : this->_impl_.unmerge_uid_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.MergeOperationArchive merge_actions = 13;
  total_size += 1UL * this->_internal_merge_actions_size();
  for (const auto& msg : this->_impl_.merge_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 14;
  total_size += 1UL * this->_internal_expanded_cell_ids_size();
  for (const auto& msg : this->_impl_.expanded_cell_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.CellUIDListArchive cell_uid_list = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_list_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional bool may_modify_formulas_in_cells = 10 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool may_modify_values_referenced_by_formulas = 11 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellMapArchive::GetClassData() const { return &_class_data_; }


void CellMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellMapArchive*>(&to_msg);
  auto& from = static_cast<const CellMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_tiles_.MergeFrom(from._impl_.cell_tiles_);
  _this->_impl_.merge_uid_ranges_.MergeFrom(from._impl_.merge_uid_ranges_);
  _this->_impl_.unmerge_uid_ranges_.MergeFrom(from._impl_.unmerge_uid_ranges_);
  _this->_impl_.merge_actions_.MergeFrom(from._impl_.merge_actions_);
  _this->_impl_.expanded_cell_ids_.MergeFrom(from._impl_.expanded_cell_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.uid_based_ = from._impl_.uid_based_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.may_modify_formulas_in_cells_ = from._impl_.may_modify_formulas_in_cells_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.may_modify_values_referenced_by_formulas_ = from._impl_.may_modify_values_referenced_by_formulas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellMapArchive::CopyFrom(const CellMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_tiles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.merge_uid_ranges_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.unmerge_uid_ranges_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.merge_actions_))
    return false;
  if (_internal_has_cell_uid_list()) {
    if (!_impl_.cell_uid_list_->IsInitialized()) return false;
  }
  return true;
}

void CellMapArchive::InternalSwap(CellMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_tiles_.InternalSwap(&other->_impl_.cell_tiles_);
  _impl_.merge_uid_ranges_.InternalSwap(&other->_impl_.merge_uid_ranges_);
  _impl_.unmerge_uid_ranges_.InternalSwap(&other->_impl_.unmerge_uid_ranges_);
  _impl_.merge_actions_.InternalSwap(&other->_impl_.merge_actions_);
  _impl_.expanded_cell_ids_.InternalSwap(&other->_impl_.expanded_cell_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellMapArchive, _impl_.uid_based_)
      + sizeof(CellMapArchive::_impl_.uid_based_)
      - PROTOBUF_FIELD_OFFSET(CellMapArchive, _impl_.cell_uid_list_)>(
          reinterpret_cast<char*>(&_impl_.cell_uid_list_),
          reinterpret_cast<char*>(&other->_impl_.cell_uid_list_));
  swap(_impl_.may_modify_formulas_in_cells_, other->_impl_.may_modify_formulas_in_cells_);
  swap(_impl_.may_modify_values_referenced_by_formulas_, other->_impl_.may_modify_values_referenced_by_formulas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[51]);
}

// ===================================================================

class CellListArchive_OptionalCell::_Internal {
 public:
  using HasBits = decltype(std::declval<CellListArchive_OptionalCell>()._impl_._has_bits_);
  static const ::TST::Cell& cell(const CellListArchive_OptionalCell* msg);
  static void set_has_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TST::Cell&
CellListArchive_OptionalCell::_Internal::cell(const CellListArchive_OptionalCell* msg) {
  return *msg->_impl_.cell_;
}
CellListArchive_OptionalCell::CellListArchive_OptionalCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellListArchive.OptionalCell)
}
CellListArchive_OptionalCell::CellListArchive_OptionalCell(const CellListArchive_OptionalCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellListArchive_OptionalCell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::TST::Cell(*from._impl_.cell_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellListArchive.OptionalCell)
}

inline void CellListArchive_OptionalCell::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_){nullptr}
  };
}

CellListArchive_OptionalCell::~CellListArchive_OptionalCell() {
  // @@protoc_insertion_point(destructor:TST.CellListArchive.OptionalCell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellListArchive_OptionalCell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void CellListArchive_OptionalCell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellListArchive_OptionalCell::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellListArchive.OptionalCell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cell_ != nullptr);
    _impl_.cell_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellListArchive_OptionalCell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.Cell cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellListArchive_OptionalCell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellListArchive.OptionalCell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.Cell cell = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellListArchive.OptionalCell)
  return target;
}

size_t CellListArchive_OptionalCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellListArchive.OptionalCell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.Cell cell = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellListArchive_OptionalCell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellListArchive_OptionalCell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellListArchive_OptionalCell::GetClassData() const { return &_class_data_; }


void CellListArchive_OptionalCell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellListArchive_OptionalCell*>(&to_msg);
  auto& from = static_cast<const CellListArchive_OptionalCell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellListArchive.OptionalCell)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::TST::Cell::MergeFrom(
        from._internal_cell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellListArchive_OptionalCell::CopyFrom(const CellListArchive_OptionalCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellListArchive.OptionalCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellListArchive_OptionalCell::IsInitialized() const {
  if (_internal_has_cell()) {
    if (!_impl_.cell_->IsInitialized()) return false;
  }
  return true;
}

void CellListArchive_OptionalCell::InternalSwap(CellListArchive_OptionalCell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cell_, other->_impl_.cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellListArchive_OptionalCell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[52]);
}

// ===================================================================

class CellListArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellListArchive>()._impl_._has_bits_);
  static void set_has_trailing_empty_cell_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CellListArchive::CellListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellListArchive)
}
CellListArchive::CellListArchive(const CellListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellListArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cells_){from._impl_.cells_}
    , decltype(_impl_.trailing_empty_cell_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.trailing_empty_cell_count_ = from._impl_.trailing_empty_cell_count_;
  // @@protoc_insertion_point(copy_constructor:TST.CellListArchive)
}

inline void CellListArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cells_){arena}
    , decltype(_impl_.trailing_empty_cell_count_){0u}
  };
}

CellListArchive::~CellListArchive() {
  // @@protoc_insertion_point(destructor:TST.CellListArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cells_.~RepeatedPtrField();
}

void CellListArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellListArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cells_.Clear();
  _impl_.trailing_empty_cell_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellListArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.CellListArchive.OptionalCell cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trailing_empty_cell_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trailing_empty_cell_count(&has_bits);
          _impl_.trailing_empty_cell_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellListArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellListArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.CellListArchive.OptionalCell cells = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 trailing_empty_cell_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trailing_empty_cell_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellListArchive)
  return target;
}

size_t CellListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellListArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellListArchive.OptionalCell cells = 1;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->_impl_.cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 trailing_empty_cell_count = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trailing_empty_cell_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellListArchive::GetClassData() const { return &_class_data_; }


void CellListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellListArchive*>(&to_msg);
  auto& from = static_cast<const CellListArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellListArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cells_.MergeFrom(from._impl_.cells_);
  if (from._internal_has_trailing_empty_cell_count()) {
    _this->_internal_set_trailing_empty_cell_count(from._internal_trailing_empty_cell_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellListArchive::CopyFrom(const CellListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cells_))
    return false;
  return true;
}

void CellListArchive::InternalSwap(CellListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cells_.InternalSwap(&other->_impl_.cells_);
  swap(_impl_.trailing_empty_cell_count_, other->_impl_.trailing_empty_cell_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellListArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[53]);
}

// ===================================================================

class ConcurrentCellMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcurrentCellMapArchive>()._impl_._has_bits_);
  static void set_has_uid_based(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_may_modify_formulas_in_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_may_modify_values_referenced_by_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_affects_cell_borders(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void ConcurrentCellMapArchive::clear_cell_lists() {
  _impl_.cell_lists_.Clear();
}
ConcurrentCellMapArchive::ConcurrentCellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ConcurrentCellMapArchive)
}
ConcurrentCellMapArchive::ConcurrentCellMapArchive(const ConcurrentCellMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConcurrentCellMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_lists_){from._impl_.cell_lists_}
    , decltype(_impl_.merge_actions_){from._impl_.merge_actions_}
    , decltype(_impl_.uid_based_){}
    , decltype(_impl_.may_modify_formulas_in_cells_){}
    , decltype(_impl_.may_modify_values_referenced_by_formulas_){}
    , decltype(_impl_.affects_cell_borders_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.uid_based_, &from._impl_.uid_based_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.affects_cell_borders_) -
    reinterpret_cast<char*>(&_impl_.uid_based_)) + sizeof(_impl_.affects_cell_borders_));
  // @@protoc_insertion_point(copy_constructor:TST.ConcurrentCellMapArchive)
}

inline void ConcurrentCellMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_lists_){arena}
    , decltype(_impl_.merge_actions_){arena}
    , decltype(_impl_.uid_based_){false}
    , decltype(_impl_.may_modify_formulas_in_cells_){true}
    , decltype(_impl_.may_modify_values_referenced_by_formulas_){true}
    , decltype(_impl_.affects_cell_borders_){true}
  };
}

ConcurrentCellMapArchive::~ConcurrentCellMapArchive() {
  // @@protoc_insertion_point(destructor:TST.ConcurrentCellMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConcurrentCellMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_lists_.~RepeatedPtrField();
  _impl_.merge_actions_.~RepeatedPtrField();
}

void ConcurrentCellMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConcurrentCellMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConcurrentCellMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_lists_.Clear();
  _impl_.merge_actions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.uid_based_ = false;
    _impl_.may_modify_formulas_in_cells_ = true;
    _impl_.may_modify_values_referenced_by_formulas_ = true;
    _impl_.affects_cell_borders_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConcurrentCellMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference cell_lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool uid_based = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_uid_based(&has_bits);
          _impl_.uid_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.MergeOperationArchive merge_actions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool may_modify_formulas_in_cells = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_may_modify_formulas_in_cells(&has_bits);
          _impl_.may_modify_formulas_in_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_may_modify_values_referenced_by_formulas(&has_bits);
          _impl_.may_modify_values_referenced_by_formulas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool affects_cell_borders = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_affects_cell_borders(&has_bits);
          _impl_.affects_cell_borders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConcurrentCellMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConcurrentCellMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_lists = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_lists_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_lists(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required bool uid_based = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_uid_based(), target);
  }

  // repeated .TST.MergeOperationArchive merge_actions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_merge_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_merge_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool may_modify_formulas_in_cells = 4 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_may_modify_formulas_in_cells(), target);
  }

  // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_may_modify_values_referenced_by_formulas(), target);
  }

  // optional bool affects_cell_borders = 6 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_affects_cell_borders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConcurrentCellMapArchive)
  return target;
}

size_t ConcurrentCellMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConcurrentCellMapArchive)
  size_t total_size = 0;

  // required bool uid_based = 2;
  if (_internal_has_uid_based()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_lists = 1;
  total_size += 1UL * this->_internal_cell_lists_size();
  for (const auto& msg : this->_impl_.cell_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.MergeOperationArchive merge_actions = 3;
  total_size += 1UL * this->_internal_merge_actions_size();
  for (const auto& msg : this->_impl_.merge_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bool may_modify_formulas_in_cells = 4 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool may_modify_values_referenced_by_formulas = 5 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool affects_cell_borders = 6 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConcurrentCellMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConcurrentCellMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConcurrentCellMapArchive::GetClassData() const { return &_class_data_; }


void ConcurrentCellMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConcurrentCellMapArchive*>(&to_msg);
  auto& from = static_cast<const ConcurrentCellMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ConcurrentCellMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_lists_.MergeFrom(from._impl_.cell_lists_);
  _this->_impl_.merge_actions_.MergeFrom(from._impl_.merge_actions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.uid_based_ = from._impl_.uid_based_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.may_modify_formulas_in_cells_ = from._impl_.may_modify_formulas_in_cells_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.may_modify_values_referenced_by_formulas_ = from._impl_.may_modify_values_referenced_by_formulas_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.affects_cell_borders_ = from._impl_.affects_cell_borders_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConcurrentCellMapArchive::CopyFrom(const ConcurrentCellMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConcurrentCellMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcurrentCellMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_lists_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.merge_actions_))
    return false;
  return true;
}

void ConcurrentCellMapArchive::InternalSwap(ConcurrentCellMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_lists_.InternalSwap(&other->_impl_.cell_lists_);
  _impl_.merge_actions_.InternalSwap(&other->_impl_.merge_actions_);
  swap(_impl_.uid_based_, other->_impl_.uid_based_);
  swap(_impl_.may_modify_formulas_in_cells_, other->_impl_.may_modify_formulas_in_cells_);
  swap(_impl_.may_modify_values_referenced_by_formulas_, other->_impl_.may_modify_values_referenced_by_formulas_);
  swap(_impl_.affects_cell_borders_, other->_impl_.affects_cell_borders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcurrentCellMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[54]);
}

// ===================================================================

class ConcurrentCellListArchive_OptionalCell::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcurrentCellListArchive_OptionalCell>()._impl_._has_bits_);
  static const ::TST::Cell& cell(const ConcurrentCellListArchive_OptionalCell* msg);
  static void set_has_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TST::Cell&
ConcurrentCellListArchive_OptionalCell::_Internal::cell(const ConcurrentCellListArchive_OptionalCell* msg) {
  return *msg->_impl_.cell_;
}
ConcurrentCellListArchive_OptionalCell::ConcurrentCellListArchive_OptionalCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ConcurrentCellListArchive.OptionalCell)
}
ConcurrentCellListArchive_OptionalCell::ConcurrentCellListArchive_OptionalCell(const ConcurrentCellListArchive_OptionalCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConcurrentCellListArchive_OptionalCell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::TST::Cell(*from._impl_.cell_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.ConcurrentCellListArchive.OptionalCell)
}

inline void ConcurrentCellListArchive_OptionalCell::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_){nullptr}
  };
}

ConcurrentCellListArchive_OptionalCell::~ConcurrentCellListArchive_OptionalCell() {
  // @@protoc_insertion_point(destructor:TST.ConcurrentCellListArchive.OptionalCell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConcurrentCellListArchive_OptionalCell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void ConcurrentCellListArchive_OptionalCell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConcurrentCellListArchive_OptionalCell::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConcurrentCellListArchive.OptionalCell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cell_ != nullptr);
    _impl_.cell_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConcurrentCellListArchive_OptionalCell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.Cell cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConcurrentCellListArchive_OptionalCell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConcurrentCellListArchive.OptionalCell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.Cell cell = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConcurrentCellListArchive.OptionalCell)
  return target;
}

size_t ConcurrentCellListArchive_OptionalCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConcurrentCellListArchive.OptionalCell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.Cell cell = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConcurrentCellListArchive_OptionalCell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConcurrentCellListArchive_OptionalCell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConcurrentCellListArchive_OptionalCell::GetClassData() const { return &_class_data_; }


void ConcurrentCellListArchive_OptionalCell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConcurrentCellListArchive_OptionalCell*>(&to_msg);
  auto& from = static_cast<const ConcurrentCellListArchive_OptionalCell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ConcurrentCellListArchive.OptionalCell)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _this->_internal_mutable_cell()->::TST::Cell::MergeFrom(
        from._internal_cell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConcurrentCellListArchive_OptionalCell::CopyFrom(const ConcurrentCellListArchive_OptionalCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConcurrentCellListArchive.OptionalCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcurrentCellListArchive_OptionalCell::IsInitialized() const {
  if (_internal_has_cell()) {
    if (!_impl_.cell_->IsInitialized()) return false;
  }
  return true;
}

void ConcurrentCellListArchive_OptionalCell::InternalSwap(ConcurrentCellListArchive_OptionalCell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cell_, other->_impl_.cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcurrentCellListArchive_OptionalCell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[55]);
}

// ===================================================================

class ConcurrentCellListArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConcurrentCellListArchive>()._impl_._has_bits_);
  static const ::TSP::UUIDRectArchive& cell_uid_range(const ConcurrentCellListArchive* msg);
  static void set_has_cell_uid_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellRange& cell_range(const ConcurrentCellListArchive* msg);
  static void set_has_cell_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::UUIDRectArchive&
ConcurrentCellListArchive::_Internal::cell_uid_range(const ConcurrentCellListArchive* msg) {
  return *msg->_impl_.cell_uid_range_;
}
const ::TST::CellRange&
ConcurrentCellListArchive::_Internal::cell_range(const ConcurrentCellListArchive* msg) {
  return *msg->_impl_.cell_range_;
}
void ConcurrentCellListArchive::clear_cell_uid_range() {
  if (_impl_.cell_uid_range_ != nullptr) _impl_.cell_uid_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ConcurrentCellListArchive::ConcurrentCellListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ConcurrentCellListArchive)
}
ConcurrentCellListArchive::ConcurrentCellListArchive(const ConcurrentCellListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConcurrentCellListArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cells_){from._impl_.cells_}
    , decltype(_impl_.cell_uid_range_){nullptr}
    , decltype(_impl_.cell_range_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_uid_range()) {
    _this->_impl_.cell_uid_range_ = new ::TSP::UUIDRectArchive(*from._impl_.cell_uid_range_);
  }
  if (from._internal_has_cell_range()) {
    _this->_impl_.cell_range_ = new ::TST::CellRange(*from._impl_.cell_range_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.ConcurrentCellListArchive)
}

inline void ConcurrentCellListArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cells_){arena}
    , decltype(_impl_.cell_uid_range_){nullptr}
    , decltype(_impl_.cell_range_){nullptr}
  };
}

ConcurrentCellListArchive::~ConcurrentCellListArchive() {
  // @@protoc_insertion_point(destructor:TST.ConcurrentCellListArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConcurrentCellListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cells_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cell_uid_range_;
  if (this != internal_default_instance()) delete _impl_.cell_range_;
}

void ConcurrentCellListArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConcurrentCellListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConcurrentCellListArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cells_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_uid_range_ != nullptr);
      _impl_.cell_uid_range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_range_ != nullptr);
      _impl_.cell_range_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConcurrentCellListArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.ConcurrentCellListArchive.OptionalCell cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDRectArchive cell_uid_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellRange cell_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConcurrentCellListArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConcurrentCellListArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.ConcurrentCellListArchive.OptionalCell cells = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUIDRectArchive cell_uid_range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_uid_range(this),
        _Internal::cell_uid_range(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellRange cell_range = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_range(this),
        _Internal::cell_range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConcurrentCellListArchive)
  return target;
}

size_t ConcurrentCellListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConcurrentCellListArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.ConcurrentCellListArchive.OptionalCell cells = 1;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->_impl_.cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.UUIDRectArchive cell_uid_range = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uid_range_);
    }

    // optional .TST.CellRange cell_range = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_range_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConcurrentCellListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConcurrentCellListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConcurrentCellListArchive::GetClassData() const { return &_class_data_; }


void ConcurrentCellListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConcurrentCellListArchive*>(&to_msg);
  auto& from = static_cast<const ConcurrentCellListArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ConcurrentCellListArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cells_.MergeFrom(from._impl_.cells_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_uid_range()->::TSP::UUIDRectArchive::MergeFrom(
          from._internal_cell_uid_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_range()->::TST::CellRange::MergeFrom(
          from._internal_cell_range());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConcurrentCellListArchive::CopyFrom(const ConcurrentCellListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConcurrentCellListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcurrentCellListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cells_))
    return false;
  if (_internal_has_cell_uid_range()) {
    if (!_impl_.cell_uid_range_->IsInitialized()) return false;
  }
  if (_internal_has_cell_range()) {
    if (!_impl_.cell_range_->IsInitialized()) return false;
  }
  return true;
}

void ConcurrentCellListArchive::InternalSwap(ConcurrentCellListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cells_.InternalSwap(&other->_impl_.cells_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConcurrentCellListArchive, _impl_.cell_range_)
      + sizeof(ConcurrentCellListArchive::_impl_.cell_range_)
      - PROTOBUF_FIELD_OFFSET(ConcurrentCellListArchive, _impl_.cell_uid_range_)>(
          reinterpret_cast<char*>(&_impl_.cell_uid_range_),
          reinterpret_cast<char*>(&other->_impl_.cell_uid_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcurrentCellListArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[56]);
}

// ===================================================================

class CellFormatAndValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellFormatAndValueArchive>()._impl_._has_bits_);
  static void set_has_valuetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_numbervalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stringvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_boolvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& richtextstorage(const CellFormatAndValueArchive* msg);
  static void set_has_richtextstorage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_all_spare_formats(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_explicit_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cell_format_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSK::FormatStructArchive& number_format(const CellFormatAndValueArchive* msg);
  static void set_has_number_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSK::FormatStructArchive& currency_format(const CellFormatAndValueArchive* msg);
  static void set_has_currency_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::FormatStructArchive& date_format(const CellFormatAndValueArchive* msg);
  static void set_has_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& duration_format(const CellFormatAndValueArchive* msg);
  static void set_has_duration_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::FormatStructArchive& text_format(const CellFormatAndValueArchive* msg);
  static void set_has_text_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSK::FormatStructArchive& boolean_format(const CellFormatAndValueArchive* msg);
  static void set_has_boolean_format(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_formatted_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& formatted_rich_text_value(const CellFormatAndValueArchive* msg);
  static void set_has_formatted_rich_text_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_apply_spare_format_only(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_spare_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_decimal_low(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_decimal_high(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_suppress_apply_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0003b800) ^ 0x0003b800) != 0;
  }
};

const ::TSP::Reference&
CellFormatAndValueArchive::_Internal::richtextstorage(const CellFormatAndValueArchive* msg) {
  return *msg->_impl_.richtextstorage_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::number_format(const CellFormatAndValueArchive* msg) {
  return *msg->_impl_.number_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::currency_format(const CellFormatAndValueArchive* msg) {
  return *msg->_impl_.currency_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::date_format(const CellFormatAndValueArchive* msg) {
  return *msg->_impl_.date_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::duration_format(const CellFormatAndValueArchive* msg) {
  return *msg->_impl_.duration_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::text_format(const CellFormatAndValueArchive* msg) {
  return *msg->_impl_.text_format_;
}
const ::TSK::FormatStructArchive&
CellFormatAndValueArchive::_Internal::boolean_format(const CellFormatAndValueArchive* msg) {
  return *msg->_impl_.boolean_format_;
}
const ::TSP::Reference&
CellFormatAndValueArchive::_Internal::formatted_rich_text_value(const CellFormatAndValueArchive* msg) {
  return *msg->_impl_.formatted_rich_text_value_;
}
void CellFormatAndValueArchive::clear_richtextstorage() {
  if (_impl_.richtextstorage_ != nullptr) _impl_.richtextstorage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CellFormatAndValueArchive::clear_number_format() {
  if (_impl_.number_format_ != nullptr) _impl_.number_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CellFormatAndValueArchive::clear_currency_format() {
  if (_impl_.currency_format_ != nullptr) _impl_.currency_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CellFormatAndValueArchive::clear_date_format() {
  if (_impl_.date_format_ != nullptr) _impl_.date_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CellFormatAndValueArchive::clear_duration_format() {
  if (_impl_.duration_format_ != nullptr) _impl_.duration_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CellFormatAndValueArchive::clear_text_format() {
  if (_impl_.text_format_ != nullptr) _impl_.text_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CellFormatAndValueArchive::clear_boolean_format() {
  if (_impl_.boolean_format_ != nullptr) _impl_.boolean_format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CellFormatAndValueArchive::clear_formatted_rich_text_value() {
  if (_impl_.formatted_rich_text_value_ != nullptr) _impl_.formatted_rich_text_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
CellFormatAndValueArchive::CellFormatAndValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellFormatAndValueArchive)
}
CellFormatAndValueArchive::CellFormatAndValueArchive(const CellFormatAndValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellFormatAndValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stringvalue_){}
    , decltype(_impl_.formatted_value_){}
    , decltype(_impl_.richtextstorage_){nullptr}
    , decltype(_impl_.number_format_){nullptr}
    , decltype(_impl_.currency_format_){nullptr}
    , decltype(_impl_.date_format_){nullptr}
    , decltype(_impl_.duration_format_){nullptr}
    , decltype(_impl_.text_format_){nullptr}
    , decltype(_impl_.boolean_format_){nullptr}
    , decltype(_impl_.formatted_rich_text_value_){nullptr}
    , decltype(_impl_.numbervalue_){}
    , decltype(_impl_.valuetype_){}
    , decltype(_impl_.explicit_flags_){}
    , decltype(_impl_.cell_format_kind_){}
    , decltype(_impl_.boolvalue_){}
    , decltype(_impl_.use_all_spare_formats_){}
    , decltype(_impl_.apply_spare_format_only_){}
    , decltype(_impl_.spare_format_type_){}
    , decltype(_impl_.decimal_low_){}
    , decltype(_impl_.decimal_high_){}
    , decltype(_impl_.suppress_apply_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stringvalue()) {
    _this->_impl_.stringvalue_.Set(from._internal_stringvalue(), 
      _this->GetArenaForAllocation());
  }
  _impl_.formatted_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formatted_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_formatted_value()) {
    _this->_impl_.formatted_value_.Set(from._internal_formatted_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_richtextstorage()) {
    _this->_impl_.richtextstorage_ = new ::TSP::Reference(*from._impl_.richtextstorage_);
  }
  if (from._internal_has_number_format()) {
    _this->_impl_.number_format_ = new ::TSK::FormatStructArchive(*from._impl_.number_format_);
  }
  if (from._internal_has_currency_format()) {
    _this->_impl_.currency_format_ = new ::TSK::FormatStructArchive(*from._impl_.currency_format_);
  }
  if (from._internal_has_date_format()) {
    _this->_impl_.date_format_ = new ::TSK::FormatStructArchive(*from._impl_.date_format_);
  }
  if (from._internal_has_duration_format()) {
    _this->_impl_.duration_format_ = new ::TSK::FormatStructArchive(*from._impl_.duration_format_);
  }
  if (from._internal_has_text_format()) {
    _this->_impl_.text_format_ = new ::TSK::FormatStructArchive(*from._impl_.text_format_);
  }
  if (from._internal_has_boolean_format()) {
    _this->_impl_.boolean_format_ = new ::TSK::FormatStructArchive(*from._impl_.boolean_format_);
  }
  if (from._internal_has_formatted_rich_text_value()) {
    _this->_impl_.formatted_rich_text_value_ = new ::TSP::Reference(*from._impl_.formatted_rich_text_value_);
  }
  ::memcpy(&_impl_.numbervalue_, &from._impl_.numbervalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.suppress_apply_value_) -
    reinterpret_cast<char*>(&_impl_.numbervalue_)) + sizeof(_impl_.suppress_apply_value_));
  // @@protoc_insertion_point(copy_constructor:TST.CellFormatAndValueArchive)
}

inline void CellFormatAndValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stringvalue_){}
    , decltype(_impl_.formatted_value_){}
    , decltype(_impl_.richtextstorage_){nullptr}
    , decltype(_impl_.number_format_){nullptr}
    , decltype(_impl_.currency_format_){nullptr}
    , decltype(_impl_.date_format_){nullptr}
    , decltype(_impl_.duration_format_){nullptr}
    , decltype(_impl_.text_format_){nullptr}
    , decltype(_impl_.boolean_format_){nullptr}
    , decltype(_impl_.formatted_rich_text_value_){nullptr}
    , decltype(_impl_.numbervalue_){0}
    , decltype(_impl_.valuetype_){0}
    , decltype(_impl_.explicit_flags_){0u}
    , decltype(_impl_.cell_format_kind_){0u}
    , decltype(_impl_.boolvalue_){false}
    , decltype(_impl_.use_all_spare_formats_){false}
    , decltype(_impl_.apply_spare_format_only_){false}
    , decltype(_impl_.spare_format_type_){false}
    , decltype(_impl_.decimal_low_){uint64_t{0u}}
    , decltype(_impl_.decimal_high_){uint64_t{0u}}
    , decltype(_impl_.suppress_apply_value_){false}
  };
  _impl_.stringvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stringvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.formatted_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.formatted_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CellFormatAndValueArchive::~CellFormatAndValueArchive() {
  // @@protoc_insertion_point(destructor:TST.CellFormatAndValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellFormatAndValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stringvalue_.Destroy();
  _impl_.formatted_value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.richtextstorage_;
  if (this != internal_default_instance()) delete _impl_.number_format_;
  if (this != internal_default_instance()) delete _impl_.currency_format_;
  if (this != internal_default_instance()) delete _impl_.date_format_;
  if (this != internal_default_instance()) delete _impl_.duration_format_;
  if (this != internal_default_instance()) delete _impl_.text_format_;
  if (this != internal_default_instance()) delete _impl_.boolean_format_;
  if (this != internal_default_instance()) delete _impl_.formatted_rich_text_value_;
}

void CellFormatAndValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellFormatAndValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellFormatAndValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stringvalue_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.formatted_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.richtextstorage_ != nullptr);
      _impl_.richtextstorage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.number_format_ != nullptr);
      _impl_.number_format_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.currency_format_ != nullptr);
      _impl_.currency_format_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.date_format_ != nullptr);
      _impl_.date_format_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.duration_format_ != nullptr);
      _impl_.duration_format_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.text_format_ != nullptr);
      _impl_.text_format_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.boolean_format_ != nullptr);
      _impl_.boolean_format_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.formatted_rich_text_value_ != nullptr);
      _impl_.formatted_rich_text_value_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.numbervalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_all_spare_formats_) -
        reinterpret_cast<char*>(&_impl_.numbervalue_)) + sizeof(_impl_.use_all_spare_formats_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.apply_spare_format_only_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.suppress_apply_value_) -
        reinterpret_cast<char*>(&_impl_.apply_spare_format_only_)) + sizeof(_impl_.suppress_apply_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellFormatAndValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellValueType valueType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::CellValueType_IsValid(val))) {
            _internal_set_valuetype(static_cast<::TST::CellValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double numberValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_numbervalue(&has_bits);
          _impl_.numbervalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string stringValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stringvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CellFormatAndValueArchive.stringValue");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool boolValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_boolvalue(&has_bits);
          _impl_.boolvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference richTextStorage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_richtextstorage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool use_all_spare_formats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_all_spare_formats(&has_bits);
          _impl_.use_all_spare_formats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 explicit_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_explicit_flags(&has_bits);
          _impl_.explicit_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 cell_format_kind = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_cell_format_kind(&has_bits);
          _impl_.cell_format_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive number_format = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive currency_format = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive date_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive duration_format = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive text_format = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive boolean_format = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string formatted_value = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_formatted_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CellFormatAndValueArchive.formatted_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formatted_rich_text_value = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_formatted_rich_text_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool apply_spare_format_only = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_apply_spare_format_only(&has_bits);
          _impl_.apply_spare_format_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool spare_format_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_spare_format_type(&has_bits);
          _impl_.spare_format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_low = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_decimal_low(&has_bits);
          _impl_.decimal_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_high = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_decimal_high(&has_bits);
          _impl_.decimal_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suppress_apply_value = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_suppress_apply_value(&has_bits);
          _impl_.suppress_apply_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellFormatAndValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellFormatAndValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CellValueType valueType = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_valuetype(), target);
  }

  // optional double numberValue = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_numbervalue(), target);
  }

  // optional string stringValue = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringvalue().data(), static_cast<int>(this->_internal_stringvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CellFormatAndValueArchive.stringValue");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stringvalue(), target);
  }

  // optional bool boolValue = 4;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_boolvalue(), target);
  }

  // optional .TSP.Reference richTextStorage = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::richtextstorage(this),
        _Internal::richtextstorage(this).GetCachedSize(), target, stream);
  }

  // required bool use_all_spare_formats = 6;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_all_spare_formats(), target);
  }

  // required uint32 explicit_flags = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_explicit_flags(), target);
  }

  // required uint32 cell_format_kind = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cell_format_kind(), target);
  }

  // optional .TSK.FormatStructArchive number_format = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::number_format(this),
        _Internal::number_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive currency_format = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::currency_format(this),
        _Internal::currency_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive date_format = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::date_format(this),
        _Internal::date_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive duration_format = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::duration_format(this),
        _Internal::duration_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive text_format = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::text_format(this),
        _Internal::text_format(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive boolean_format = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::boolean_format(this),
        _Internal::boolean_format(this).GetCachedSize(), target, stream);
  }

  // optional string formatted_value = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_formatted_value().data(), static_cast<int>(this->_internal_formatted_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CellFormatAndValueArchive.formatted_value");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_formatted_value(), target);
  }

  // optional .TSP.Reference formatted_rich_text_value = 17;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::formatted_rich_text_value(this),
        _Internal::formatted_rich_text_value(this).GetCachedSize(), target, stream);
  }

  // required bool apply_spare_format_only = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_apply_spare_format_only(), target);
  }

  // required bool spare_format_type = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_spare_format_type(), target);
  }

  // optional uint64 decimal_low = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_decimal_low(), target);
  }

  // optional uint64 decimal_high = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_decimal_high(), target);
  }

  // optional bool suppress_apply_value = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_suppress_apply_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellFormatAndValueArchive)
  return target;
}

size_t CellFormatAndValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CellFormatAndValueArchive)
  size_t total_size = 0;

  if (_internal_has_valuetype()) {
    // required .TST.CellValueType valueType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_valuetype());
  }

  if (_internal_has_explicit_flags()) {
    // required uint32 explicit_flags = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_explicit_flags());
  }

  if (_internal_has_cell_format_kind()) {
    // required uint32 cell_format_kind = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_format_kind());
  }

  if (_internal_has_use_all_spare_formats()) {
    // required bool use_all_spare_formats = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_apply_spare_format_only()) {
    // required bool apply_spare_format_only = 18;
    total_size += 2 + 1;
  }

  if (_internal_has_spare_format_type()) {
    // required bool spare_format_type = 19;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t CellFormatAndValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellFormatAndValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0003b800) ^ 0x0003b800) == 0) {  // All required fields are present.
    // required .TST.CellValueType valueType = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_valuetype());

    // required uint32 explicit_flags = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_explicit_flags());

    // required uint32 cell_format_kind = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_format_kind());

    // required bool use_all_spare_formats = 6;
    total_size += 1 + 1;

    // required bool apply_spare_format_only = 18;
    total_size += 2 + 1;

    // required bool spare_format_type = 19;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stringValue = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringvalue());
    }

    // optional string formatted_value = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_formatted_value());
    }

    // optional .TSP.Reference richTextStorage = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.richtextstorage_);
    }

    // optional .TSK.FormatStructArchive number_format = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.number_format_);
    }

    // optional .TSK.FormatStructArchive currency_format = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.currency_format_);
    }

    // optional .TSK.FormatStructArchive date_format = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_format_);
    }

    // optional .TSK.FormatStructArchive duration_format = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.duration_format_);
    }

    // optional .TSK.FormatStructArchive text_format = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.text_format_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSK.FormatStructArchive boolean_format = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.boolean_format_);
    }

    // optional .TSP.Reference formatted_rich_text_value = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formatted_rich_text_value_);
    }

    // optional double numberValue = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  // optional bool boolValue = 4;
  if (cached_has_bits & 0x00004000u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x001c0000u) {
    // optional uint64 decimal_low = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_decimal_low());
    }

    // optional uint64 decimal_high = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_decimal_high());
    }

    // optional bool suppress_apply_value = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellFormatAndValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellFormatAndValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellFormatAndValueArchive::GetClassData() const { return &_class_data_; }


void CellFormatAndValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellFormatAndValueArchive*>(&to_msg);
  auto& from = static_cast<const CellFormatAndValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellFormatAndValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stringvalue(from._internal_stringvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_formatted_value(from._internal_formatted_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_richtextstorage()->::TSP::Reference::MergeFrom(
          from._internal_richtextstorage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_number_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_number_format());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_currency_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_currency_format());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_date_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_date_format());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_duration_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_duration_format());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_text_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_text_format());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_boolean_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_boolean_format());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_formatted_rich_text_value()->::TSP::Reference::MergeFrom(
          from._internal_formatted_rich_text_value());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.numbervalue_ = from._impl_.numbervalue_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.valuetype_ = from._impl_.valuetype_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.explicit_flags_ = from._impl_.explicit_flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.cell_format_kind_ = from._impl_.cell_format_kind_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.boolvalue_ = from._impl_.boolvalue_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.use_all_spare_formats_ = from._impl_.use_all_spare_formats_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.apply_spare_format_only_ = from._impl_.apply_spare_format_only_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.spare_format_type_ = from._impl_.spare_format_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.decimal_low_ = from._impl_.decimal_low_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.decimal_high_ = from._impl_.decimal_high_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.suppress_apply_value_ = from._impl_.suppress_apply_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellFormatAndValueArchive::CopyFrom(const CellFormatAndValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellFormatAndValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellFormatAndValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_richtextstorage()) {
    if (!_impl_.richtextstorage_->IsInitialized()) return false;
  }
  if (_internal_has_number_format()) {
    if (!_impl_.number_format_->IsInitialized()) return false;
  }
  if (_internal_has_currency_format()) {
    if (!_impl_.currency_format_->IsInitialized()) return false;
  }
  if (_internal_has_date_format()) {
    if (!_impl_.date_format_->IsInitialized()) return false;
  }
  if (_internal_has_duration_format()) {
    if (!_impl_.duration_format_->IsInitialized()) return false;
  }
  if (_internal_has_text_format()) {
    if (!_impl_.text_format_->IsInitialized()) return false;
  }
  if (_internal_has_boolean_format()) {
    if (!_impl_.boolean_format_->IsInitialized()) return false;
  }
  if (_internal_has_formatted_rich_text_value()) {
    if (!_impl_.formatted_rich_text_value_->IsInitialized()) return false;
  }
  return true;
}

void CellFormatAndValueArchive::InternalSwap(CellFormatAndValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stringvalue_, lhs_arena,
      &other->_impl_.stringvalue_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.formatted_value_, lhs_arena,
      &other->_impl_.formatted_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellFormatAndValueArchive, _impl_.suppress_apply_value_)
      + sizeof(CellFormatAndValueArchive::_impl_.suppress_apply_value_)
      - PROTOBUF_FIELD_OFFSET(CellFormatAndValueArchive, _impl_.richtextstorage_)>(
          reinterpret_cast<char*>(&_impl_.richtextstorage_),
          reinterpret_cast<char*>(&other->_impl_.richtextstorage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellFormatAndValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[57]);
}

// ===================================================================

class CellSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellSpecArchive>()._impl_._has_bits_);
  static void set_has_interaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::FormulaArchive& formula(const CellSpecArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_control_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_range_control_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_range_control_inc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& chooser_control_popup_model(const CellSpecArchive* msg);
  static void set_has_chooser_control_popup_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chooser_control_start_w_first(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_category_summary_should_display_label(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::TSCE::FormulaArchive&
CellSpecArchive::_Internal::formula(const CellSpecArchive* msg) {
  return *msg->_impl_.formula_;
}
const ::TSP::Reference&
CellSpecArchive::_Internal::chooser_control_popup_model(const CellSpecArchive* msg) {
  return *msg->_impl_.chooser_control_popup_model_;
}
void CellSpecArchive::clear_formula() {
  if (_impl_.formula_ != nullptr) _impl_.formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CellSpecArchive::clear_chooser_control_popup_model() {
  if (_impl_.chooser_control_popup_model_ != nullptr) _impl_.chooser_control_popup_model_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CellSpecArchive::CellSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellSpecArchive)
}
CellSpecArchive::CellSpecArchive(const CellSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellSpecArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.chooser_control_popup_model_){nullptr}
    , decltype(_impl_.range_control_min_){}
    , decltype(_impl_.range_control_max_){}
    , decltype(_impl_.range_control_inc_){}
    , decltype(_impl_.interaction_type_){}
    , decltype(_impl_.chooser_control_start_w_first_){}
    , decltype(_impl_.category_summary_should_display_label_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    _this->_impl_.formula_ = new ::TSCE::FormulaArchive(*from._impl_.formula_);
  }
  if (from._internal_has_chooser_control_popup_model()) {
    _this->_impl_.chooser_control_popup_model_ = new ::TSP::Reference(*from._impl_.chooser_control_popup_model_);
  }
  ::memcpy(&_impl_.range_control_min_, &from._impl_.range_control_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.category_summary_should_display_label_) -
    reinterpret_cast<char*>(&_impl_.range_control_min_)) + sizeof(_impl_.category_summary_should_display_label_));
  // @@protoc_insertion_point(copy_constructor:TST.CellSpecArchive)
}

inline void CellSpecArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.chooser_control_popup_model_){nullptr}
    , decltype(_impl_.range_control_min_){0}
    , decltype(_impl_.range_control_max_){0}
    , decltype(_impl_.range_control_inc_){0}
    , decltype(_impl_.interaction_type_){0u}
    , decltype(_impl_.chooser_control_start_w_first_){false}
    , decltype(_impl_.category_summary_should_display_label_){false}
  };
}

CellSpecArchive::~CellSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CellSpecArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.formula_;
  if (this != internal_default_instance()) delete _impl_.chooser_control_popup_model_;
}

void CellSpecArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellSpecArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.formula_ != nullptr);
      _impl_.formula_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chooser_control_popup_model_ != nullptr);
      _impl_.chooser_control_popup_model_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.range_control_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.category_summary_should_display_label_) -
        reinterpret_cast<char*>(&_impl_.range_control_min_)) + sizeof(_impl_.category_summary_should_display_label_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellSpecArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 interaction_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_interaction_type(&has_bits);
          _impl_.interaction_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive formula = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double range_control_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_range_control_min(&has_bits);
          _impl_.range_control_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double range_control_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_range_control_max(&has_bits);
          _impl_.range_control_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double range_control_inc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_range_control_inc(&has_bits);
          _impl_.range_control_inc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference chooser_control_popup_model = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_chooser_control_popup_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool chooser_control_start_w_first = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_chooser_control_start_w_first(&has_bits);
          _impl_.chooser_control_start_w_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool category_summary_should_display_label = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_category_summary_should_display_label(&has_bits);
          _impl_.category_summary_should_display_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellSpecArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellSpecArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 interaction_type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_interaction_type(), target);
  }

  // optional .TSCE.FormulaArchive formula = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::formula(this),
        _Internal::formula(this).GetCachedSize(), target, stream);
  }

  // optional double range_control_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_range_control_min(), target);
  }

  // optional double range_control_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_range_control_max(), target);
  }

  // optional double range_control_inc = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_range_control_inc(), target);
  }

  // optional .TSP.Reference chooser_control_popup_model = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::chooser_control_popup_model(this),
        _Internal::chooser_control_popup_model(this).GetCachedSize(), target, stream);
  }

  // optional bool chooser_control_start_w_first = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_chooser_control_start_w_first(), target);
  }

  // optional bool category_summary_should_display_label = 8 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_category_summary_should_display_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellSpecArchive)
  return target;
}

size_t CellSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellSpecArchive)
  size_t total_size = 0;

  // required uint32 interaction_type = 1;
  if (_internal_has_interaction_type()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_interaction_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSCE.FormulaArchive formula = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_);
    }

    // optional .TSP.Reference chooser_control_popup_model = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chooser_control_popup_model_);
    }

    // optional double range_control_min = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double range_control_max = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double range_control_inc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional bool chooser_control_start_w_first = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool category_summary_should_display_label = 8 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellSpecArchive::GetClassData() const { return &_class_data_; }


void CellSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellSpecArchive*>(&to_msg);
  auto& from = static_cast<const CellSpecArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellSpecArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chooser_control_popup_model()->::TSP::Reference::MergeFrom(
          from._internal_chooser_control_popup_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.range_control_min_ = from._impl_.range_control_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.range_control_max_ = from._impl_.range_control_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.range_control_inc_ = from._impl_.range_control_inc_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.interaction_type_ = from._impl_.interaction_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.chooser_control_start_w_first_ = from._impl_.chooser_control_start_w_first_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.category_summary_should_display_label_ = from._impl_.category_summary_should_display_label_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellSpecArchive::CopyFrom(const CellSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!_impl_.formula_->IsInitialized()) return false;
  }
  if (_internal_has_chooser_control_popup_model()) {
    if (!_impl_.chooser_control_popup_model_->IsInitialized()) return false;
  }
  return true;
}

void CellSpecArchive::InternalSwap(CellSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellSpecArchive, _impl_.category_summary_should_display_label_)
      + sizeof(CellSpecArchive::_impl_.category_summary_should_display_label_)
      - PROTOBUF_FIELD_OFFSET(CellSpecArchive, _impl_.formula_)>(
          reinterpret_cast<char*>(&_impl_.formula_),
          reinterpret_cast<char*>(&other->_impl_.formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellSpecArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[58]);
}

// ===================================================================

class CommentStorageWrapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentStorageWrapperArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& comment_storage(const CommentStorageWrapperArchive* msg);
  static void set_has_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
CommentStorageWrapperArchive::_Internal::comment_storage(const CommentStorageWrapperArchive* msg) {
  return *msg->_impl_.comment_storage_;
}
void CommentStorageWrapperArchive::clear_comment_storage() {
  if (_impl_.comment_storage_ != nullptr) _impl_.comment_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommentStorageWrapperArchive::CommentStorageWrapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommentStorageWrapperArchive)
}
CommentStorageWrapperArchive::CommentStorageWrapperArchive(const CommentStorageWrapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommentStorageWrapperArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comment_storage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_comment_storage()) {
    _this->_impl_.comment_storage_ = new ::TSP::Reference(*from._impl_.comment_storage_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommentStorageWrapperArchive)
}

inline void CommentStorageWrapperArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.comment_storage_){nullptr}
  };
}

CommentStorageWrapperArchive::~CommentStorageWrapperArchive() {
  // @@protoc_insertion_point(destructor:TST.CommentStorageWrapperArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommentStorageWrapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.comment_storage_;
}

void CommentStorageWrapperArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommentStorageWrapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommentStorageWrapperArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.comment_storage_ != nullptr);
    _impl_.comment_storage_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentStorageWrapperArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference comment_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommentStorageWrapperArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommentStorageWrapperArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference comment_storage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::comment_storage(this),
        _Internal::comment_storage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommentStorageWrapperArchive)
  return target;
}

size_t CommentStorageWrapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommentStorageWrapperArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference comment_storage = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.comment_storage_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommentStorageWrapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommentStorageWrapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommentStorageWrapperArchive::GetClassData() const { return &_class_data_; }


void CommentStorageWrapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommentStorageWrapperArchive*>(&to_msg);
  auto& from = static_cast<const CommentStorageWrapperArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommentStorageWrapperArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_comment_storage()) {
    _this->_internal_mutable_comment_storage()->::TSP::Reference::MergeFrom(
        from._internal_comment_storage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommentStorageWrapperArchive::CopyFrom(const CommentStorageWrapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommentStorageWrapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentStorageWrapperArchive::IsInitialized() const {
  if (_internal_has_comment_storage()) {
    if (!_impl_.comment_storage_->IsInitialized()) return false;
  }
  return true;
}

void CommentStorageWrapperArchive::InternalSwap(CommentStorageWrapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.comment_storage_, other->_impl_.comment_storage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentStorageWrapperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[59]);
}

// ===================================================================

class CellDiffArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDiffArchive>()._impl_._has_bits_);
  static const ::TSS::CommandPropertyMapArchive& property_map_to_set(const CellDiffArchive* msg);
  static void set_has_property_map_to_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSS::CommandPropertyMapArchive& property_map_to_reset(const CellDiffArchive* msg);
  static void set_has_property_map_to_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSS::CommandPropertyMapArchive&
CellDiffArchive::_Internal::property_map_to_set(const CellDiffArchive* msg) {
  return *msg->_impl_.property_map_to_set_;
}
const ::TSS::CommandPropertyMapArchive&
CellDiffArchive::_Internal::property_map_to_reset(const CellDiffArchive* msg) {
  return *msg->_impl_.property_map_to_reset_;
}
void CellDiffArchive::clear_property_map_to_set() {
  if (_impl_.property_map_to_set_ != nullptr) _impl_.property_map_to_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CellDiffArchive::clear_property_map_to_reset() {
  if (_impl_.property_map_to_reset_ != nullptr) _impl_.property_map_to_reset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CellDiffArchive::CellDiffArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellDiffArchive)
}
CellDiffArchive::CellDiffArchive(const CellDiffArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellDiffArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_map_to_set_){nullptr}
    , decltype(_impl_.property_map_to_reset_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_property_map_to_set()) {
    _this->_impl_.property_map_to_set_ = new ::TSS::CommandPropertyMapArchive(*from._impl_.property_map_to_set_);
  }
  if (from._internal_has_property_map_to_reset()) {
    _this->_impl_.property_map_to_reset_ = new ::TSS::CommandPropertyMapArchive(*from._impl_.property_map_to_reset_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellDiffArchive)
}

inline void CellDiffArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_map_to_set_){nullptr}
    , decltype(_impl_.property_map_to_reset_){nullptr}
  };
}

CellDiffArchive::~CellDiffArchive() {
  // @@protoc_insertion_point(destructor:TST.CellDiffArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellDiffArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.property_map_to_set_;
  if (this != internal_default_instance()) delete _impl_.property_map_to_reset_;
}

void CellDiffArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellDiffArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellDiffArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.property_map_to_set_ != nullptr);
      _impl_.property_map_to_set_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.property_map_to_reset_ != nullptr);
      _impl_.property_map_to_reset_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDiffArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_property_map_to_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property_map_to_reset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellDiffArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellDiffArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::property_map_to_set(this),
        _Internal::property_map_to_set(this).GetCachedSize(), target, stream);
  }

  // required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::property_map_to_reset(this),
        _Internal::property_map_to_reset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellDiffArchive)
  return target;
}

size_t CellDiffArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CellDiffArchive)
  size_t total_size = 0;

  if (_internal_has_property_map_to_set()) {
    // required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.property_map_to_set_);
  }

  if (_internal_has_property_map_to_reset()) {
    // required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.property_map_to_reset_);
  }

  return total_size;
}
size_t CellDiffArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellDiffArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSS.CommandPropertyMapArchive property_map_to_set = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.property_map_to_set_);

    // required .TSS.CommandPropertyMapArchive property_map_to_reset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.property_map_to_reset_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDiffArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellDiffArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDiffArchive::GetClassData() const { return &_class_data_; }


void CellDiffArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellDiffArchive*>(&to_msg);
  auto& from = static_cast<const CellDiffArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellDiffArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_property_map_to_set()->::TSS::CommandPropertyMapArchive::MergeFrom(
          from._internal_property_map_to_set());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_property_map_to_reset()->::TSS::CommandPropertyMapArchive::MergeFrom(
          from._internal_property_map_to_reset());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDiffArchive::CopyFrom(const CellDiffArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellDiffArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDiffArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_property_map_to_set()) {
    if (!_impl_.property_map_to_set_->IsInitialized()) return false;
  }
  if (_internal_has_property_map_to_reset()) {
    if (!_impl_.property_map_to_reset_->IsInitialized()) return false;
  }
  return true;
}

void CellDiffArchive::InternalSwap(CellDiffArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellDiffArchive, _impl_.property_map_to_reset_)
      + sizeof(CellDiffArchive::_impl_.property_map_to_reset_)
      - PROTOBUF_FIELD_OFFSET(CellDiffArchive, _impl_.property_map_to_set_)>(
          reinterpret_cast<char*>(&_impl_.property_map_to_set_),
          reinterpret_cast<char*>(&other->_impl_.property_map_to_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDiffArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[60]);
}

// ===================================================================

class CellDiffArray::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDiffArray>()._impl_._has_bits_);
  static const ::TSP::LargeArray& large_array(const CellDiffArray* msg);
  static void set_has_large_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArray&
CellDiffArray::_Internal::large_array(const CellDiffArray* msg) {
  return *msg->_impl_.large_array_;
}
void CellDiffArray::clear_large_array() {
  if (_impl_.large_array_ != nullptr) _impl_.large_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CellDiffArray::CellDiffArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellDiffArray)
}
CellDiffArray::CellDiffArray(const CellDiffArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellDiffArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array()) {
    _this->_impl_.large_array_ = new ::TSP::LargeArray(*from._impl_.large_array_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellDiffArray)
}

inline void CellDiffArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.large_array_){nullptr}
  };
}

CellDiffArray::~CellDiffArray() {
  // @@protoc_insertion_point(destructor:TST.CellDiffArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellDiffArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.large_array_;
}

void CellDiffArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellDiffArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellDiffArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_array_ != nullptr);
    _impl_.large_array_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDiffArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArray large_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellDiffArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellDiffArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.LargeArray large_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_array(this),
        _Internal::large_array(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellDiffArray)
  return target;
}

size_t CellDiffArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellDiffArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.LargeArray large_array = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_array_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDiffArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellDiffArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDiffArray::GetClassData() const { return &_class_data_; }


void CellDiffArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellDiffArray*>(&to_msg);
  auto& from = static_cast<const CellDiffArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellDiffArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_large_array()) {
    _this->_internal_mutable_large_array()->::TSP::LargeArray::MergeFrom(
        from._internal_large_array());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDiffArray::CopyFrom(const CellDiffArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellDiffArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDiffArray::IsInitialized() const {
  if (_internal_has_large_array()) {
    if (!_impl_.large_array_->IsInitialized()) return false;
  }
  return true;
}

void CellDiffArray::InternalSwap(CellDiffArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.large_array_, other->_impl_.large_array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDiffArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[61]);
}

// ===================================================================

class CellDiffArraySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDiffArraySegment>()._impl_._has_bits_);
  static const ::TSP::LargeArraySegment& large_array_segment(const CellDiffArraySegment* msg);
  static void set_has_large_array_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::LargeArraySegment&
CellDiffArraySegment::_Internal::large_array_segment(const CellDiffArraySegment* msg) {
  return *msg->_impl_.large_array_segment_;
}
void CellDiffArraySegment::clear_large_array_segment() {
  if (_impl_.large_array_segment_ != nullptr) _impl_.large_array_segment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CellDiffArraySegment::CellDiffArraySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellDiffArraySegment)
}
CellDiffArraySegment::CellDiffArraySegment(const CellDiffArraySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellDiffArraySegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elements_){from._impl_.elements_}
    , decltype(_impl_.large_array_segment_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_large_array_segment()) {
    _this->_impl_.large_array_segment_ = new ::TSP::LargeArraySegment(*from._impl_.large_array_segment_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CellDiffArraySegment)
}

inline void CellDiffArraySegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.elements_){arena}
    , decltype(_impl_.large_array_segment_){nullptr}
  };
}

CellDiffArraySegment::~CellDiffArraySegment() {
  // @@protoc_insertion_point(destructor:TST.CellDiffArraySegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellDiffArraySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elements_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.large_array_segment_;
}

void CellDiffArraySegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellDiffArraySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellDiffArraySegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elements_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.large_array_segment_ != nullptr);
    _impl_.large_array_segment_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDiffArraySegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.LargeArraySegment large_array_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_array_segment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.CellDiffArchive elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellDiffArraySegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellDiffArraySegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.LargeArraySegment large_array_segment = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::large_array_segment(this),
        _Internal::large_array_segment(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.CellDiffArchive elements = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elements_size()); i < n; i++) {
    const auto& repfield = this->_internal_elements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellDiffArraySegment)
  return target;
}

size_t CellDiffArraySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellDiffArraySegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellDiffArchive elements = 2;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->_impl_.elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.LargeArraySegment large_array_segment = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.large_array_segment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDiffArraySegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellDiffArraySegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDiffArraySegment::GetClassData() const { return &_class_data_; }


void CellDiffArraySegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellDiffArraySegment*>(&to_msg);
  auto& from = static_cast<const CellDiffArraySegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellDiffArraySegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elements_.MergeFrom(from._impl_.elements_);
  if (from._internal_has_large_array_segment()) {
    _this->_internal_mutable_large_array_segment()->::TSP::LargeArraySegment::MergeFrom(
        from._internal_large_array_segment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDiffArraySegment::CopyFrom(const CellDiffArraySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellDiffArraySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDiffArraySegment::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.elements_))
    return false;
  return true;
}

void CellDiffArraySegment::InternalSwap(CellDiffArraySegment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.elements_.InternalSwap(&other->_impl_.elements_);
  swap(_impl_.large_array_segment_, other->_impl_.large_array_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDiffArraySegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[62]);
}

// ===================================================================

class CellDiffMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDiffMapArchive>()._impl_._has_bits_);
  static void set_has_uid_based(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::CellUIDListArchive& cell_uids(const CellDiffMapArchive* msg);
  static void set_has_cell_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_diff_array(const CellDiffMapArchive* msg);
  static void set_has_cell_diff_array(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TST::CellUIDListArchive&
CellDiffMapArchive::_Internal::cell_uids(const CellDiffMapArchive* msg) {
  return *msg->_impl_.cell_uids_;
}
const ::TSP::Reference&
CellDiffMapArchive::_Internal::cell_diff_array(const CellDiffMapArchive* msg) {
  return *msg->_impl_.cell_diff_array_;
}
void CellDiffMapArchive::clear_expanded_cell_ids() {
  _impl_.expanded_cell_ids_.Clear();
}
void CellDiffMapArchive::clear_cell_diff_array() {
  if (_impl_.cell_diff_array_ != nullptr) _impl_.cell_diff_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CellDiffMapArchive::CellDiffMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellDiffMapArchive)
}
CellDiffMapArchive::CellDiffMapArchive(const CellDiffMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellDiffMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expanded_cell_ids_){from._impl_.expanded_cell_ids_}
    , decltype(_impl_.cell_uids_){nullptr}
    , decltype(_impl_.cell_diff_array_){nullptr}
    , decltype(_impl_.uid_based_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_uids()) {
    _this->_impl_.cell_uids_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uids_);
  }
  if (from._internal_has_cell_diff_array()) {
    _this->_impl_.cell_diff_array_ = new ::TSP::Reference(*from._impl_.cell_diff_array_);
  }
  _this->_impl_.uid_based_ = from._impl_.uid_based_;
  // @@protoc_insertion_point(copy_constructor:TST.CellDiffMapArchive)
}

inline void CellDiffMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expanded_cell_ids_){arena}
    , decltype(_impl_.cell_uids_){nullptr}
    , decltype(_impl_.cell_diff_array_){nullptr}
    , decltype(_impl_.uid_based_){false}
  };
}

CellDiffMapArchive::~CellDiffMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CellDiffMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellDiffMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.expanded_cell_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cell_uids_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_array_;
}

void CellDiffMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellDiffMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellDiffMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.expanded_cell_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_uids_ != nullptr);
      _impl_.cell_uids_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_diff_array_ != nullptr);
      _impl_.cell_diff_array_->Clear();
    }
  }
  _impl_.uid_based_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDiffMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool uid_based = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uid_based(&has_bits);
          _impl_.uid_based_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expanded_cell_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TST.CellUIDListArchive cell_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellDiffMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellDiffMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool uid_based = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_uid_based(), target);
  }

  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_expanded_cell_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_expanded_cell_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TST.CellUIDListArchive cell_uids = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_uids(this),
        _Internal::cell_uids(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference cell_diff_array = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cell_diff_array(this),
        _Internal::cell_diff_array(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellDiffMapArchive)
  return target;
}

size_t CellDiffMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CellDiffMapArchive)
  size_t total_size = 0;

  if (_internal_has_cell_uids()) {
    // required .TST.CellUIDListArchive cell_uids = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uids_);
  }

  if (_internal_has_uid_based()) {
    // required bool uid_based = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CellDiffMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellDiffMapArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TST.CellUIDListArchive cell_uids = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uids_);

    // required bool uid_based = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive expanded_cell_ids = 2;
  total_size += 1UL * this->_internal_expanded_cell_ids_size();
  for (const auto& msg : this->_impl_.expanded_cell_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference cell_diff_array = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_array_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDiffMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellDiffMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDiffMapArchive::GetClassData() const { return &_class_data_; }


void CellDiffMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellDiffMapArchive*>(&to_msg);
  auto& from = static_cast<const CellDiffMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellDiffMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.expanded_cell_ids_.MergeFrom(from._impl_.expanded_cell_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_uids()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uids());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_diff_array()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_array());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.uid_based_ = from._impl_.uid_based_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDiffMapArchive::CopyFrom(const CellDiffMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellDiffMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDiffMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_uids()) {
    if (!_impl_.cell_uids_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_array()) {
    if (!_impl_.cell_diff_array_->IsInitialized()) return false;
  }
  return true;
}

void CellDiffMapArchive::InternalSwap(CellDiffMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.expanded_cell_ids_.InternalSwap(&other->_impl_.expanded_cell_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellDiffMapArchive, _impl_.uid_based_)
      + sizeof(CellDiffMapArchive::_impl_.uid_based_)
      - PROTOBUF_FIELD_OFFSET(CellDiffMapArchive, _impl_.cell_uids_)>(
          reinterpret_cast<char*>(&_impl_.cell_uids_),
          reinterpret_cast<char*>(&other->_impl_.cell_uids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDiffMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[63]);
}

// ===================================================================

class HierarchicalCellDiffMapArchive_BoxedRow::_Internal {
 public:
  using HasBits = decltype(std::declval<HierarchicalCellDiffMapArchive_BoxedRow>()._impl_._has_bits_);
  static const ::TSP::IndexSet& column_index_set(const HierarchicalCellDiffMapArchive_BoxedRow* msg);
  static void set_has_column_index_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::IndexSet&
HierarchicalCellDiffMapArchive_BoxedRow::_Internal::column_index_set(const HierarchicalCellDiffMapArchive_BoxedRow* msg) {
  return *msg->_impl_.column_index_set_;
}
void HierarchicalCellDiffMapArchive_BoxedRow::clear_column_index_set() {
  if (_impl_.column_index_set_ != nullptr) _impl_.column_index_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HierarchicalCellDiffMapArchive_BoxedRow::HierarchicalCellDiffMapArchive_BoxedRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HierarchicalCellDiffMapArchive.BoxedRow)
}
HierarchicalCellDiffMapArchive_BoxedRow::HierarchicalCellDiffMapArchive_BoxedRow(const HierarchicalCellDiffMapArchive_BoxedRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HierarchicalCellDiffMapArchive_BoxedRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_diff_list_){from._impl_.cell_diff_list_}
    , decltype(_impl_.column_index_set_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_index_set()) {
    _this->_impl_.column_index_set_ = new ::TSP::IndexSet(*from._impl_.column_index_set_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.HierarchicalCellDiffMapArchive.BoxedRow)
}

inline void HierarchicalCellDiffMapArchive_BoxedRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_diff_list_){arena}
    , decltype(_impl_.column_index_set_){nullptr}
  };
}

HierarchicalCellDiffMapArchive_BoxedRow::~HierarchicalCellDiffMapArchive_BoxedRow() {
  // @@protoc_insertion_point(destructor:TST.HierarchicalCellDiffMapArchive.BoxedRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HierarchicalCellDiffMapArchive_BoxedRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_diff_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.column_index_set_;
}

void HierarchicalCellDiffMapArchive_BoxedRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HierarchicalCellDiffMapArchive_BoxedRow::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HierarchicalCellDiffMapArchive.BoxedRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_diff_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.column_index_set_ != nullptr);
    _impl_.column_index_set_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HierarchicalCellDiffMapArchive_BoxedRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.IndexSet column_index_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_index_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.CellDiffArchive cell_diff_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_diff_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HierarchicalCellDiffMapArchive_BoxedRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HierarchicalCellDiffMapArchive.BoxedRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.IndexSet column_index_set = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column_index_set(this),
        _Internal::column_index_set(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.CellDiffArchive cell_diff_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_diff_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_diff_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HierarchicalCellDiffMapArchive.BoxedRow)
  return target;
}

size_t HierarchicalCellDiffMapArchive_BoxedRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HierarchicalCellDiffMapArchive.BoxedRow)
  size_t total_size = 0;

  // required .TSP.IndexSet column_index_set = 1;
  if (_internal_has_column_index_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_index_set_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellDiffArchive cell_diff_list = 2;
  total_size += 1UL * this->_internal_cell_diff_list_size();
  for (const auto& msg : this->_impl_.cell_diff_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalCellDiffMapArchive_BoxedRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HierarchicalCellDiffMapArchive_BoxedRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalCellDiffMapArchive_BoxedRow::GetClassData() const { return &_class_data_; }


void HierarchicalCellDiffMapArchive_BoxedRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HierarchicalCellDiffMapArchive_BoxedRow*>(&to_msg);
  auto& from = static_cast<const HierarchicalCellDiffMapArchive_BoxedRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HierarchicalCellDiffMapArchive.BoxedRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_diff_list_.MergeFrom(from._impl_.cell_diff_list_);
  if (from._internal_has_column_index_set()) {
    _this->_internal_mutable_column_index_set()->::TSP::IndexSet::MergeFrom(
        from._internal_column_index_set());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalCellDiffMapArchive_BoxedRow::CopyFrom(const HierarchicalCellDiffMapArchive_BoxedRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HierarchicalCellDiffMapArchive.BoxedRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalCellDiffMapArchive_BoxedRow::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_diff_list_))
    return false;
  if (_internal_has_column_index_set()) {
    if (!_impl_.column_index_set_->IsInitialized()) return false;
  }
  return true;
}

void HierarchicalCellDiffMapArchive_BoxedRow::InternalSwap(HierarchicalCellDiffMapArchive_BoxedRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_diff_list_.InternalSwap(&other->_impl_.cell_diff_list_);
  swap(_impl_.column_index_set_, other->_impl_.column_index_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalCellDiffMapArchive_BoxedRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[64]);
}

// ===================================================================

class HierarchicalCellDiffMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HierarchicalCellDiffMapArchive>()._impl_._has_bits_);
  static void set_has_num_row_rules(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_column_rules(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active_flattening_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

void HierarchicalCellDiffMapArchive::clear_row_header_uids() {
  _impl_.row_header_uids_.Clear();
}
void HierarchicalCellDiffMapArchive::clear_column_header_uids() {
  _impl_.column_header_uids_.Clear();
}
void HierarchicalCellDiffMapArchive::clear_aggregate_rule_uids() {
  _impl_.aggregate_rule_uids_.Clear();
}
void HierarchicalCellDiffMapArchive::clear_row_value_uids() {
  _impl_.row_value_uids_.Clear();
}
void HierarchicalCellDiffMapArchive::clear_column_value_uids() {
  _impl_.column_value_uids_.Clear();
}
HierarchicalCellDiffMapArchive::HierarchicalCellDiffMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HierarchicalCellDiffMapArchive)
}
HierarchicalCellDiffMapArchive::HierarchicalCellDiffMapArchive(const HierarchicalCellDiffMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HierarchicalCellDiffMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_header_uids_){from._impl_.row_header_uids_}
    , decltype(_impl_.column_header_uids_){from._impl_.column_header_uids_}
    , decltype(_impl_.aggregate_rule_uids_){from._impl_.aggregate_rule_uids_}
    , decltype(_impl_.row_value_uids_){from._impl_.row_value_uids_}
    , decltype(_impl_.row_level_preorder_){from._impl_.row_level_preorder_}
    , decltype(_impl_.column_value_uids_){from._impl_.column_value_uids_}
    , decltype(_impl_.column_level_preorder_){from._impl_.column_level_preorder_}
    , decltype(_impl_.cell_diff_storage_){from._impl_.cell_diff_storage_}
    , decltype(_impl_.row_sizes_){from._impl_.row_sizes_}
    , decltype(_impl_.column_sizes_){from._impl_.column_sizes_}
    , decltype(_impl_.num_row_rules_){}
    , decltype(_impl_.num_column_rules_){}
    , decltype(_impl_.active_flattening_dimension_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_row_rules_, &from._impl_.num_row_rules_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.active_flattening_dimension_) -
    reinterpret_cast<char*>(&_impl_.num_row_rules_)) + sizeof(_impl_.active_flattening_dimension_));
  // @@protoc_insertion_point(copy_constructor:TST.HierarchicalCellDiffMapArchive)
}

inline void HierarchicalCellDiffMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_header_uids_){arena}
    , decltype(_impl_.column_header_uids_){arena}
    , decltype(_impl_.aggregate_rule_uids_){arena}
    , decltype(_impl_.row_value_uids_){arena}
    , decltype(_impl_.row_level_preorder_){arena}
    , decltype(_impl_.column_value_uids_){arena}
    , decltype(_impl_.column_level_preorder_){arena}
    , decltype(_impl_.cell_diff_storage_){arena}
    , decltype(_impl_.row_sizes_){arena}
    , decltype(_impl_.column_sizes_){arena}
    , decltype(_impl_.num_row_rules_){0}
    , decltype(_impl_.num_column_rules_){0}
    , decltype(_impl_.active_flattening_dimension_){-1}
  };
}

HierarchicalCellDiffMapArchive::~HierarchicalCellDiffMapArchive() {
  // @@protoc_insertion_point(destructor:TST.HierarchicalCellDiffMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HierarchicalCellDiffMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_header_uids_.~RepeatedPtrField();
  _impl_.column_header_uids_.~RepeatedPtrField();
  _impl_.aggregate_rule_uids_.~RepeatedPtrField();
  _impl_.row_value_uids_.~RepeatedPtrField();
  _impl_.row_level_preorder_.~RepeatedField();
  _impl_.column_value_uids_.~RepeatedPtrField();
  _impl_.column_level_preorder_.~RepeatedField();
  _impl_.cell_diff_storage_.~RepeatedPtrField();
  _impl_.row_sizes_.~RepeatedField();
  _impl_.column_sizes_.~RepeatedField();
}

void HierarchicalCellDiffMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HierarchicalCellDiffMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HierarchicalCellDiffMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_header_uids_.Clear();
  _impl_.column_header_uids_.Clear();
  _impl_.aggregate_rule_uids_.Clear();
  _impl_.row_value_uids_.Clear();
  _impl_.row_level_preorder_.Clear();
  _impl_.column_value_uids_.Clear();
  _impl_.column_level_preorder_.Clear();
  _impl_.cell_diff_storage_.Clear();
  _impl_.row_sizes_.Clear();
  _impl_.column_sizes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.num_row_rules_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_column_rules_) -
        reinterpret_cast<char*>(&_impl_.num_row_rules_)) + sizeof(_impl_.num_column_rules_));
    _impl_.active_flattening_dimension_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HierarchicalCellDiffMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 num_row_rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_row_rules(&has_bits);
          _impl_.num_row_rules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 num_column_rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_column_rules(&has_bits);
          _impl_.num_column_rules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_header_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_header_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID column_header_uids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_header_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID aggregate_rule_uids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregate_rule_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableDimensionArchive active_flattening_dimension = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_active_flattening_dimension(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_value_uids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_value_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 row_level_preorder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_row_level_preorder(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_row_level_preorder(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID column_value_uids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_value_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 column_level_preorder = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column_level_preorder(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_column_level_preorder(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.HierarchicalCellDiffMapArchive.BoxedRow cell_diff_storage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_diff_storage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double row_sizes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_row_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<97>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_row_sizes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double column_sizes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<105>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_column_sizes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HierarchicalCellDiffMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HierarchicalCellDiffMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 num_row_rules = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_row_rules(), target);
  }

  // required int32 num_column_rules = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_column_rules(), target);
  }

  // repeated .TSP.UUID row_header_uids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_header_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_header_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID column_header_uids = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_header_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_header_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID aggregate_rule_uids = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregate_rule_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregate_rule_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TST.TableDimensionArchive active_flattening_dimension = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_active_flattening_dimension(), target);
  }

  // repeated .TSP.UUID row_value_uids = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_value_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_value_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 row_level_preorder = 8;
  for (int i = 0, n = this->_internal_row_level_preorder_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_row_level_preorder(i), target);
  }

  // repeated .TSP.UUID column_value_uids = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_value_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_value_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 column_level_preorder = 10;
  for (int i = 0, n = this->_internal_column_level_preorder_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_column_level_preorder(i), target);
  }

  // repeated .TST.HierarchicalCellDiffMapArchive.BoxedRow cell_diff_storage = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_diff_storage_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_diff_storage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double row_sizes = 12;
  for (int i = 0, n = this->_internal_row_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_row_sizes(i), target);
  }

  // repeated double column_sizes = 13;
  for (int i = 0, n = this->_internal_column_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_column_sizes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HierarchicalCellDiffMapArchive)
  return target;
}

size_t HierarchicalCellDiffMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HierarchicalCellDiffMapArchive)
  size_t total_size = 0;

  if (_internal_has_num_row_rules()) {
    // required int32 num_row_rules = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_row_rules());
  }

  if (_internal_has_num_column_rules()) {
    // required int32 num_column_rules = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_column_rules());
  }

  if (_internal_has_active_flattening_dimension()) {
    // required .TST.TableDimensionArchive active_flattening_dimension = 6;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_active_flattening_dimension());
  }

  return total_size;
}
size_t HierarchicalCellDiffMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HierarchicalCellDiffMapArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 num_row_rules = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_row_rules());

    // required int32 num_column_rules = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_column_rules());

    // required .TST.TableDimensionArchive active_flattening_dimension = 6;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_active_flattening_dimension());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_header_uids = 3;
  total_size += 1UL * this->_internal_row_header_uids_size();
  for (const auto& msg : this->_impl_.row_header_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID column_header_uids = 4;
  total_size += 1UL * this->_internal_column_header_uids_size();
  for (const auto& msg : this->_impl_.column_header_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID aggregate_rule_uids = 5;
  total_size += 1UL * this->_internal_aggregate_rule_uids_size();
  for (const auto& msg : this->_impl_.aggregate_rule_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID row_value_uids = 7;
  total_size += 1UL * this->_internal_row_value_uids_size();
  for (const auto& msg : this->_impl_.row_value_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 row_level_preorder = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.row_level_preorder_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_row_level_preorder_size());
    total_size += data_size;
  }

  // repeated .TSP.UUID column_value_uids = 9;
  total_size += 1UL * this->_internal_column_value_uids_size();
  for (const auto& msg : this->_impl_.column_value_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 column_level_preorder = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.column_level_preorder_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_column_level_preorder_size());
    total_size += data_size;
  }

  // repeated .TST.HierarchicalCellDiffMapArchive.BoxedRow cell_diff_storage = 11;
  total_size += 1UL * this->_internal_cell_diff_storage_size();
  for (const auto& msg : this->_impl_.cell_diff_storage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double row_sizes = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_row_sizes_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_row_sizes_size());
    total_size += data_size;
  }

  // repeated double column_sizes = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_column_sizes_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_column_sizes_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HierarchicalCellDiffMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HierarchicalCellDiffMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HierarchicalCellDiffMapArchive::GetClassData() const { return &_class_data_; }


void HierarchicalCellDiffMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HierarchicalCellDiffMapArchive*>(&to_msg);
  auto& from = static_cast<const HierarchicalCellDiffMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HierarchicalCellDiffMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_header_uids_.MergeFrom(from._impl_.row_header_uids_);
  _this->_impl_.column_header_uids_.MergeFrom(from._impl_.column_header_uids_);
  _this->_impl_.aggregate_rule_uids_.MergeFrom(from._impl_.aggregate_rule_uids_);
  _this->_impl_.row_value_uids_.MergeFrom(from._impl_.row_value_uids_);
  _this->_impl_.row_level_preorder_.MergeFrom(from._impl_.row_level_preorder_);
  _this->_impl_.column_value_uids_.MergeFrom(from._impl_.column_value_uids_);
  _this->_impl_.column_level_preorder_.MergeFrom(from._impl_.column_level_preorder_);
  _this->_impl_.cell_diff_storage_.MergeFrom(from._impl_.cell_diff_storage_);
  _this->_impl_.row_sizes_.MergeFrom(from._impl_.row_sizes_);
  _this->_impl_.column_sizes_.MergeFrom(from._impl_.column_sizes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_row_rules_ = from._impl_.num_row_rules_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_column_rules_ = from._impl_.num_column_rules_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.active_flattening_dimension_ = from._impl_.active_flattening_dimension_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HierarchicalCellDiffMapArchive::CopyFrom(const HierarchicalCellDiffMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HierarchicalCellDiffMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchicalCellDiffMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_header_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_header_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.aggregate_rule_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_value_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_value_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_diff_storage_))
    return false;
  return true;
}

void HierarchicalCellDiffMapArchive::InternalSwap(HierarchicalCellDiffMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_header_uids_.InternalSwap(&other->_impl_.row_header_uids_);
  _impl_.column_header_uids_.InternalSwap(&other->_impl_.column_header_uids_);
  _impl_.aggregate_rule_uids_.InternalSwap(&other->_impl_.aggregate_rule_uids_);
  _impl_.row_value_uids_.InternalSwap(&other->_impl_.row_value_uids_);
  _impl_.row_level_preorder_.InternalSwap(&other->_impl_.row_level_preorder_);
  _impl_.column_value_uids_.InternalSwap(&other->_impl_.column_value_uids_);
  _impl_.column_level_preorder_.InternalSwap(&other->_impl_.column_level_preorder_);
  _impl_.cell_diff_storage_.InternalSwap(&other->_impl_.cell_diff_storage_);
  _impl_.row_sizes_.InternalSwap(&other->_impl_.row_sizes_);
  _impl_.column_sizes_.InternalSwap(&other->_impl_.column_sizes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HierarchicalCellDiffMapArchive, _impl_.num_column_rules_)
      + sizeof(HierarchicalCellDiffMapArchive::_impl_.num_column_rules_)
      - PROTOBUF_FIELD_OFFSET(HierarchicalCellDiffMapArchive, _impl_.num_row_rules_)>(
          reinterpret_cast<char*>(&_impl_.num_row_rules_),
          reinterpret_cast<char*>(&other->_impl_.num_row_rules_));
  swap(_impl_.active_flattening_dimension_, other->_impl_.active_flattening_dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HierarchicalCellDiffMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[65]);
}

// ===================================================================

class DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DoubleStyleMapArchive_DoubleStyleMapEntryArchive>()._impl_._has_bits_);
  static const ::TST::CellID& cell_id(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg);
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& old_style(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_style(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::CellID&
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_Internal::cell_id(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg) {
  return *msg->_impl_.cell_id_;
}
const ::TSP::Reference&
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_Internal::old_style(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg) {
  return *msg->_impl_.old_style_;
}
const ::TSP::Reference&
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_Internal::new_style(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive* msg) {
  return *msg->_impl_.new_style_;
}
void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::clear_old_style() {
  if (_impl_.old_style_ != nullptr) _impl_.old_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::clear_new_style() {
  if (_impl_.new_style_ != nullptr) _impl_.new_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::DoubleStyleMapArchive_DoubleStyleMapEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
}
DoubleStyleMapArchive_DoubleStyleMapEntryArchive::DoubleStyleMapArchive_DoubleStyleMapEntryArchive(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DoubleStyleMapArchive_DoubleStyleMapEntryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_id_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.new_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_id()) {
    _this->_impl_.cell_id_ = new ::TST::CellID(*from._impl_.cell_id_);
  }
  if (from._internal_has_old_style()) {
    _this->_impl_.old_style_ = new ::TSP::Reference(*from._impl_.old_style_);
  }
  if (from._internal_has_new_style()) {
    _this->_impl_.new_style_ = new ::TSP::Reference(*from._impl_.new_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
}

inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_id_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
  };
}

DoubleStyleMapArchive_DoubleStyleMapEntryArchive::~DoubleStyleMapArchive_DoubleStyleMapEntryArchive() {
  // @@protoc_insertion_point(destructor:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_id_;
  if (this != internal_default_instance()) delete _impl_.old_style_;
  if (this != internal_default_instance()) delete _impl_.new_style_;
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_id_ != nullptr);
      _impl_.cell_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_style_ != nullptr);
      _impl_.old_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_style_ != nullptr);
      _impl_.new_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CellID cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference old_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference new_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CellID cell_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell_id(this),
        _Internal::cell_id(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference old_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_style(this),
        _Internal::old_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference new_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_style(this),
        _Internal::new_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  return target;
}

size_t DoubleStyleMapArchive_DoubleStyleMapEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  size_t total_size = 0;

  if (_internal_has_cell_id()) {
    // required .TST.CellID cell_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_id_);
  }

  if (_internal_has_old_style()) {
    // required .TSP.Reference old_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_style_);
  }

  if (_internal_has_new_style()) {
    // required .TSP.Reference new_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_style_);
  }

  return total_size;
}
size_t DoubleStyleMapArchive_DoubleStyleMapEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.CellID cell_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_id_);

    // required .TSP.Reference old_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_style_);

    // required .TSP.Reference new_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DoubleStyleMapArchive_DoubleStyleMapEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleStyleMapArchive_DoubleStyleMapEntryArchive::GetClassData() const { return &_class_data_; }


void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DoubleStyleMapArchive_DoubleStyleMapEntryArchive*>(&to_msg);
  auto& from = static_cast<const DoubleStyleMapArchive_DoubleStyleMapEntryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_id()->::TST::CellID::MergeFrom(
          from._internal_cell_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_style()->::TSP::Reference::MergeFrom(
          from._internal_old_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_style()->::TSP::Reference::MergeFrom(
          from._internal_new_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::CopyFrom(const DoubleStyleMapArchive_DoubleStyleMapEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleStyleMapArchive_DoubleStyleMapEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_id()) {
    if (!_impl_.cell_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_style()) {
    if (!_impl_.old_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!_impl_.new_style_->IsInitialized()) return false;
  }
  return true;
}

void DoubleStyleMapArchive_DoubleStyleMapEntryArchive::InternalSwap(DoubleStyleMapArchive_DoubleStyleMapEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _impl_.new_style_)
      + sizeof(DoubleStyleMapArchive_DoubleStyleMapEntryArchive::_impl_.new_style_)
      - PROTOBUF_FIELD_OFFSET(DoubleStyleMapArchive_DoubleStyleMapEntryArchive, _impl_.cell_id_)>(
          reinterpret_cast<char*>(&_impl_.cell_id_),
          reinterpret_cast<char*>(&other->_impl_.cell_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleStyleMapArchive_DoubleStyleMapEntryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[66]);
}

// ===================================================================

class DoubleStyleMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DoubleStyleMapArchive>()._impl_._has_bits_);
  static void set_has_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DoubleStyleMapArchive::DoubleStyleMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.DoubleStyleMapArchive)
}
DoubleStyleMapArchive::DoubleStyleMapArchive(const DoubleStyleMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DoubleStyleMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_map_entry_){from._impl_.cell_map_entry_}
    , decltype(_impl_.capacity_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.capacity_, &from._impl_.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:TST.DoubleStyleMapArchive)
}

inline void DoubleStyleMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_map_entry_){arena}
    , decltype(_impl_.capacity_){0u}
    , decltype(_impl_.count_){0u}
  };
}

DoubleStyleMapArchive::~DoubleStyleMapArchive() {
  // @@protoc_insertion_point(destructor:TST.DoubleStyleMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleStyleMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_map_entry_.~RepeatedPtrField();
}

void DoubleStyleMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoubleStyleMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DoubleStyleMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_map_entry_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.capacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleStyleMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_capacity(&has_bits);
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleStyleMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DoubleStyleMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 capacity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_capacity(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_map_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_map_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DoubleStyleMapArchive)
  return target;
}

size_t DoubleStyleMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DoubleStyleMapArchive)
  size_t total_size = 0;

  if (_internal_has_capacity()) {
    // required uint32 capacity = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_capacity());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return total_size;
}
size_t DoubleStyleMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DoubleStyleMapArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 capacity = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_capacity());

    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive cell_map_entry = 3;
  total_size += 1UL * this->_internal_cell_map_entry_size();
  for (const auto& msg : this->_impl_.cell_map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleStyleMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DoubleStyleMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleStyleMapArchive::GetClassData() const { return &_class_data_; }


void DoubleStyleMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DoubleStyleMapArchive*>(&to_msg);
  auto& from = static_cast<const DoubleStyleMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.DoubleStyleMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_map_entry_.MergeFrom(from._impl_.cell_map_entry_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.capacity_ = from._impl_.capacity_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleStyleMapArchive::CopyFrom(const DoubleStyleMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DoubleStyleMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleStyleMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_map_entry_))
    return false;
  return true;
}

void DoubleStyleMapArchive::InternalSwap(DoubleStyleMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_map_entry_.InternalSwap(&other->_impl_.cell_map_entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleStyleMapArchive, _impl_.count_)
      + sizeof(DoubleStyleMapArchive::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(DoubleStyleMapArchive, _impl_.capacity_)>(
          reinterpret_cast<char*>(&_impl_.capacity_),
          reinterpret_cast<char*>(&other->_impl_.capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleStyleMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[67]);
}

// ===================================================================

class StyleTableMapArchive_StyleTableMapEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleTableMapArchive_StyleTableMapEntryArchive>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& old_style(const StyleTableMapArchive_StyleTableMapEntryArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& new_style(const StyleTableMapArchive_StyleTableMapEntryArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::Reference&
StyleTableMapArchive_StyleTableMapEntryArchive::_Internal::old_style(const StyleTableMapArchive_StyleTableMapEntryArchive* msg) {
  return *msg->_impl_.old_style_;
}
const ::TSP::Reference&
StyleTableMapArchive_StyleTableMapEntryArchive::_Internal::new_style(const StyleTableMapArchive_StyleTableMapEntryArchive* msg) {
  return *msg->_impl_.new_style_;
}
void StyleTableMapArchive_StyleTableMapEntryArchive::clear_old_style() {
  if (_impl_.old_style_ != nullptr) _impl_.old_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StyleTableMapArchive_StyleTableMapEntryArchive::clear_new_style() {
  if (_impl_.new_style_ != nullptr) _impl_.new_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StyleTableMapArchive_StyleTableMapEntryArchive::StyleTableMapArchive_StyleTableMapEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
}
StyleTableMapArchive_StyleTableMapEntryArchive::StyleTableMapArchive_StyleTableMapEntryArchive(const StyleTableMapArchive_StyleTableMapEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StyleTableMapArchive_StyleTableMapEntryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
    , decltype(_impl_.key_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_old_style()) {
    _this->_impl_.old_style_ = new ::TSP::Reference(*from._impl_.old_style_);
  }
  if (from._internal_has_new_style()) {
    _this->_impl_.new_style_ = new ::TSP::Reference(*from._impl_.new_style_);
  }
  _this->_impl_.key_ = from._impl_.key_;
  // @@protoc_insertion_point(copy_constructor:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
}

inline void StyleTableMapArchive_StyleTableMapEntryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
    , decltype(_impl_.key_){0u}
  };
}

StyleTableMapArchive_StyleTableMapEntryArchive::~StyleTableMapArchive_StyleTableMapEntryArchive() {
  // @@protoc_insertion_point(destructor:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StyleTableMapArchive_StyleTableMapEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.old_style_;
  if (this != internal_default_instance()) delete _impl_.new_style_;
}

void StyleTableMapArchive_StyleTableMapEntryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StyleTableMapArchive_StyleTableMapEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.old_style_ != nullptr);
      _impl_.old_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_style_ != nullptr);
      _impl_.new_style_->Clear();
    }
  }
  _impl_.key_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleTableMapArchive_StyleTableMapEntryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference old_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference new_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyleTableMapArchive_StyleTableMapEntryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 key = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // required .TSP.Reference old_style = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_style(this),
        _Internal::old_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference new_style = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_style(this),
        _Internal::new_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  return target;
}

size_t StyleTableMapArchive_StyleTableMapEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  size_t total_size = 0;

  if (_internal_has_old_style()) {
    // required .TSP.Reference old_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_style_);
  }

  if (_internal_has_new_style()) {
    // required .TSP.Reference new_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_style_);
  }

  if (_internal_has_key()) {
    // required uint32 key = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key());
  }

  return total_size;
}
size_t StyleTableMapArchive_StyleTableMapEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.Reference old_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_style_);

    // required .TSP.Reference new_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_style_);

    // required uint32 key = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleTableMapArchive_StyleTableMapEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StyleTableMapArchive_StyleTableMapEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleTableMapArchive_StyleTableMapEntryArchive::GetClassData() const { return &_class_data_; }


void StyleTableMapArchive_StyleTableMapEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StyleTableMapArchive_StyleTableMapEntryArchive*>(&to_msg);
  auto& from = static_cast<const StyleTableMapArchive_StyleTableMapEntryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_old_style()->::TSP::Reference::MergeFrom(
          from._internal_old_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_style()->::TSP::Reference::MergeFrom(
          from._internal_new_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleTableMapArchive_StyleTableMapEntryArchive::CopyFrom(const StyleTableMapArchive_StyleTableMapEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StyleTableMapArchive.StyleTableMapEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleTableMapArchive_StyleTableMapEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_old_style()) {
    if (!_impl_.old_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!_impl_.new_style_->IsInitialized()) return false;
  }
  return true;
}

void StyleTableMapArchive_StyleTableMapEntryArchive::InternalSwap(StyleTableMapArchive_StyleTableMapEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleTableMapArchive_StyleTableMapEntryArchive, _impl_.key_)
      + sizeof(StyleTableMapArchive_StyleTableMapEntryArchive::_impl_.key_)
      - PROTOBUF_FIELD_OFFSET(StyleTableMapArchive_StyleTableMapEntryArchive, _impl_.old_style_)>(
          reinterpret_cast<char*>(&_impl_.old_style_),
          reinterpret_cast<char*>(&other->_impl_.old_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleTableMapArchive_StyleTableMapEntryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[68]);
}

// ===================================================================

class StyleTableMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleTableMapArchive>()._impl_._has_bits_);
  static void set_has_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StyleTableMapArchive::StyleTableMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StyleTableMapArchive)
}
StyleTableMapArchive::StyleTableMapArchive(const StyleTableMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StyleTableMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_entry_){from._impl_.map_entry_}
    , decltype(_impl_.capacity_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.capacity_, &from._impl_.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:TST.StyleTableMapArchive)
}

inline void StyleTableMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_entry_){arena}
    , decltype(_impl_.capacity_){0u}
    , decltype(_impl_.count_){0u}
  };
}

StyleTableMapArchive::~StyleTableMapArchive() {
  // @@protoc_insertion_point(destructor:TST.StyleTableMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StyleTableMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_entry_.~RepeatedPtrField();
}

void StyleTableMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StyleTableMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StyleTableMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_entry_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.capacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleTableMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_capacity(&has_bits);
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyleTableMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StyleTableMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 capacity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_capacity(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_map_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StyleTableMapArchive)
  return target;
}

size_t StyleTableMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StyleTableMapArchive)
  size_t total_size = 0;

  if (_internal_has_capacity()) {
    // required uint32 capacity = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_capacity());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return total_size;
}
size_t StyleTableMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StyleTableMapArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 capacity = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_capacity());

    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.StyleTableMapArchive.StyleTableMapEntryArchive map_entry = 3;
  total_size += 1UL * this->_internal_map_entry_size();
  for (const auto& msg : this->_impl_.map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleTableMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StyleTableMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleTableMapArchive::GetClassData() const { return &_class_data_; }


void StyleTableMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StyleTableMapArchive*>(&to_msg);
  auto& from = static_cast<const StyleTableMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StyleTableMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_entry_.MergeFrom(from._impl_.map_entry_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.capacity_ = from._impl_.capacity_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleTableMapArchive::CopyFrom(const StyleTableMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StyleTableMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleTableMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.map_entry_))
    return false;
  return true;
}

void StyleTableMapArchive::InternalSwap(StyleTableMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.map_entry_.InternalSwap(&other->_impl_.map_entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleTableMapArchive, _impl_.count_)
      + sizeof(StyleTableMapArchive::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(StyleTableMapArchive, _impl_.capacity_)>(
          reinterpret_cast<char*>(&_impl_.capacity_),
          reinterpret_cast<char*>(&other->_impl_.capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleTableMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[69]);
}

// ===================================================================

class SelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectionArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& tablemodel(const SelectionArchive* msg);
  static void set_has_tablemodel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TST::CellID& anchor_cell(const SelectionArchive* msg);
  static void set_has_anchor_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellID& cursor_cell(const SelectionArchive* msg);
  static void set_has_cursor_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& table_info(const SelectionArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::CellUIDRegionArchive& cell_uid_region(const SelectionArchive* msg);
  static void set_has_cell_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::CellUIDRegionArchive& base_uid_region(const SelectionArchive* msg);
  static void set_has_base_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUIDCoordArchive& anchor_cell_uid(const SelectionArchive* msg);
  static void set_has_anchor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUIDCoordArchive& cursor_cell_uid(const SelectionArchive* msg);
  static void set_has_cursor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000100) ^ 0x00000100) != 0;
  }
};

const ::TSP::Reference&
SelectionArchive::_Internal::tablemodel(const SelectionArchive* msg) {
  return *msg->_impl_.tablemodel_;
}
const ::TST::CellID&
SelectionArchive::_Internal::anchor_cell(const SelectionArchive* msg) {
  return *msg->_impl_.anchor_cell_;
}
const ::TST::CellID&
SelectionArchive::_Internal::cursor_cell(const SelectionArchive* msg) {
  return *msg->_impl_.cursor_cell_;
}
const ::TSP::Reference&
SelectionArchive::_Internal::table_info(const SelectionArchive* msg) {
  return *msg->_impl_.table_info_;
}
const ::TST::CellUIDRegionArchive&
SelectionArchive::_Internal::cell_uid_region(const SelectionArchive* msg) {
  return *msg->_impl_.cell_uid_region_;
}
const ::TST::CellUIDRegionArchive&
SelectionArchive::_Internal::base_uid_region(const SelectionArchive* msg) {
  return *msg->_impl_.base_uid_region_;
}
const ::TSP::UUIDCoordArchive&
SelectionArchive::_Internal::anchor_cell_uid(const SelectionArchive* msg) {
  return *msg->_impl_.anchor_cell_uid_;
}
const ::TSP::UUIDCoordArchive&
SelectionArchive::_Internal::cursor_cell_uid(const SelectionArchive* msg) {
  return *msg->_impl_.cursor_cell_uid_;
}
void SelectionArchive::clear_tablemodel() {
  if (_impl_.tablemodel_ != nullptr) _impl_.tablemodel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SelectionArchive::clear_table_info() {
  if (_impl_.table_info_ != nullptr) _impl_.table_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SelectionArchive::clear_anchor_cell_uid() {
  if (_impl_.anchor_cell_uid_ != nullptr) _impl_.anchor_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void SelectionArchive::clear_cursor_cell_uid() {
  if (_impl_.cursor_cell_uid_ != nullptr) _impl_.cursor_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
SelectionArchive::SelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.SelectionArchive)
}
SelectionArchive::SelectionArchive(const SelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_ranges_){from._impl_.cell_ranges_}
    , decltype(_impl_.base_ranges_){from._impl_.base_ranges_}
    , decltype(_impl_.tablemodel_){nullptr}
    , decltype(_impl_.anchor_cell_){nullptr}
    , decltype(_impl_.cursor_cell_){nullptr}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.cell_uid_region_){nullptr}
    , decltype(_impl_.base_uid_region_){nullptr}
    , decltype(_impl_.anchor_cell_uid_){nullptr}
    , decltype(_impl_.cursor_cell_uid_){nullptr}
    , decltype(_impl_.selection_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tablemodel()) {
    _this->_impl_.tablemodel_ = new ::TSP::Reference(*from._impl_.tablemodel_);
  }
  if (from._internal_has_anchor_cell()) {
    _this->_impl_.anchor_cell_ = new ::TST::CellID(*from._impl_.anchor_cell_);
  }
  if (from._internal_has_cursor_cell()) {
    _this->_impl_.cursor_cell_ = new ::TST::CellID(*from._impl_.cursor_cell_);
  }
  if (from._internal_has_table_info()) {
    _this->_impl_.table_info_ = new ::TSP::Reference(*from._impl_.table_info_);
  }
  if (from._internal_has_cell_uid_region()) {
    _this->_impl_.cell_uid_region_ = new ::TST::CellUIDRegionArchive(*from._impl_.cell_uid_region_);
  }
  if (from._internal_has_base_uid_region()) {
    _this->_impl_.base_uid_region_ = new ::TST::CellUIDRegionArchive(*from._impl_.base_uid_region_);
  }
  if (from._internal_has_anchor_cell_uid()) {
    _this->_impl_.anchor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.anchor_cell_uid_);
  }
  if (from._internal_has_cursor_cell_uid()) {
    _this->_impl_.cursor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.cursor_cell_uid_);
  }
  _this->_impl_.selection_type_ = from._impl_.selection_type_;
  // @@protoc_insertion_point(copy_constructor:TST.SelectionArchive)
}

inline void SelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_ranges_){arena}
    , decltype(_impl_.base_ranges_){arena}
    , decltype(_impl_.tablemodel_){nullptr}
    , decltype(_impl_.anchor_cell_){nullptr}
    , decltype(_impl_.cursor_cell_){nullptr}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.cell_uid_region_){nullptr}
    , decltype(_impl_.base_uid_region_){nullptr}
    , decltype(_impl_.anchor_cell_uid_){nullptr}
    , decltype(_impl_.cursor_cell_uid_){nullptr}
    , decltype(_impl_.selection_type_){0}
  };
}

SelectionArchive::~SelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.SelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_ranges_.~RepeatedPtrField();
  _impl_.base_ranges_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.tablemodel_;
  if (this != internal_default_instance()) delete _impl_.anchor_cell_;
  if (this != internal_default_instance()) delete _impl_.cursor_cell_;
  if (this != internal_default_instance()) delete _impl_.table_info_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_region_;
  if (this != internal_default_instance()) delete _impl_.base_uid_region_;
  if (this != internal_default_instance()) delete _impl_.anchor_cell_uid_;
  if (this != internal_default_instance()) delete _impl_.cursor_cell_uid_;
}

void SelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_ranges_.Clear();
  _impl_.base_ranges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tablemodel_ != nullptr);
      _impl_.tablemodel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.anchor_cell_ != nullptr);
      _impl_.anchor_cell_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cursor_cell_ != nullptr);
      _impl_.cursor_cell_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.table_info_ != nullptr);
      _impl_.table_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.cell_uid_region_ != nullptr);
      _impl_.cell_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.base_uid_region_ != nullptr);
      _impl_.base_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.anchor_cell_uid_ != nullptr);
      _impl_.anchor_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.cursor_cell_uid_ != nullptr);
      _impl_.cursor_cell_uid_->Clear();
    }
  }
  _impl_.selection_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference tableModel = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tablemodel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.SelectionTypeArchive selection_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::SelectionTypeArchive_IsValid(val))) {
            _internal_set_selection_type(static_cast<::TST::SelectionTypeArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellID anchor_cell = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.CellRange cell_ranges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.CellRange base_ranges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellID cursor_cell = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive cell_uid_region = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive base_uid_region = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_uid_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive anchor_cell_uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive cursor_cell_uid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference tableModel = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tablemodel(this),
        _Internal::tablemodel(this).GetCachedSize(), target, stream);
  }

  // required .TST.SelectionTypeArchive selection_type = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_selection_type(), target);
  }

  // optional .TST.CellID anchor_cell = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::anchor_cell(this),
        _Internal::anchor_cell(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.CellRange cell_ranges = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.CellRange base_ranges = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_base_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_base_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TST.CellID cursor_cell = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::cursor_cell(this),
        _Internal::cursor_cell(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_info = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::table_info(this),
        _Internal::table_info(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDRegionArchive cell_uid_region = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cell_uid_region(this),
        _Internal::cell_uid_region(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDRegionArchive base_uid_region = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::base_uid_region(this),
        _Internal::base_uid_region(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive anchor_cell_uid = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::anchor_cell_uid(this),
        _Internal::anchor_cell_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive cursor_cell_uid = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::cursor_cell_uid(this),
        _Internal::cursor_cell_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SelectionArchive)
  return target;
}

size_t SelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SelectionArchive)
  size_t total_size = 0;

  // required .TST.SelectionTypeArchive selection_type = 4;
  if (_internal_has_selection_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CellRange cell_ranges = 6;
  total_size += 1UL * this->_internal_cell_ranges_size();
  for (const auto& msg : this->_impl_.cell_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.CellRange base_ranges = 7;
  total_size += 1UL * this->_internal_base_ranges_size();
  for (const auto& msg : this->_impl_.base_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference tableModel = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tablemodel_);
    }

    // optional .TST.CellID anchor_cell = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.anchor_cell_);
    }

    // optional .TST.CellID cursor_cell = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cursor_cell_);
    }

    // optional .TSP.Reference table_info = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_info_);
    }

    // optional .TST.CellUIDRegionArchive cell_uid_region = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uid_region_);
    }

    // optional .TST.CellUIDRegionArchive base_uid_region = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_uid_region_);
    }

    // optional .TSP.UUIDCoordArchive anchor_cell_uid = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.anchor_cell_uid_);
    }

    // optional .TSP.UUIDCoordArchive cursor_cell_uid = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cursor_cell_uid_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionArchive::GetClassData() const { return &_class_data_; }


void SelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectionArchive*>(&to_msg);
  auto& from = static_cast<const SelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.SelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_ranges_.MergeFrom(from._impl_.cell_ranges_);
  _this->_impl_.base_ranges_.MergeFrom(from._impl_.base_ranges_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tablemodel()->::TSP::Reference::MergeFrom(
          from._internal_tablemodel());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_anchor_cell()->::TST::CellID::MergeFrom(
          from._internal_anchor_cell());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cursor_cell()->::TST::CellID::MergeFrom(
          from._internal_cursor_cell());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_table_info()->::TSP::Reference::MergeFrom(
          from._internal_table_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_cell_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(
          from._internal_cell_uid_region());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_base_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(
          from._internal_base_uid_region());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_anchor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_anchor_cell_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_cursor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_cursor_cell_uid());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_selection_type(from._internal_selection_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionArchive::CopyFrom(const SelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_ranges_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.base_ranges_))
    return false;
  if (_internal_has_tablemodel()) {
    if (!_impl_.tablemodel_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_cell()) {
    if (!_impl_.anchor_cell_->IsInitialized()) return false;
  }
  if (_internal_has_cursor_cell()) {
    if (!_impl_.cursor_cell_->IsInitialized()) return false;
  }
  if (_internal_has_table_info()) {
    if (!_impl_.table_info_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_region()) {
    if (!_impl_.cell_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_base_uid_region()) {
    if (!_impl_.base_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_cell_uid()) {
    if (!_impl_.anchor_cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cursor_cell_uid()) {
    if (!_impl_.cursor_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void SelectionArchive::InternalSwap(SelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_ranges_.InternalSwap(&other->_impl_.cell_ranges_);
  _impl_.base_ranges_.InternalSwap(&other->_impl_.base_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectionArchive, _impl_.selection_type_)
      + sizeof(SelectionArchive::_impl_.selection_type_)
      - PROTOBUF_FIELD_OFFSET(SelectionArchive, _impl_.tablemodel_)>(
          reinterpret_cast<char*>(&_impl_.tablemodel_),
          reinterpret_cast<char*>(&other->_impl_.tablemodel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[70]);
}

// ===================================================================

class DeathhawkRdar39989167CellSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DeathhawkRdar39989167CellSelectionArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& table_info(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TST::CellUIDRegionArchive& cell_uid_region(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_cell_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellUIDRegionArchive& base_uid_region(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_base_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUIDCoordArchive& anchor_cell_uid(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_anchor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDCoordArchive& cursor_cell_uid(const DeathhawkRdar39989167CellSelectionArchive* msg);
  static void set_has_cursor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Reference&
DeathhawkRdar39989167CellSelectionArchive::_Internal::table_info(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->_impl_.table_info_;
}
const ::TST::CellUIDRegionArchive&
DeathhawkRdar39989167CellSelectionArchive::_Internal::cell_uid_region(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->_impl_.cell_uid_region_;
}
const ::TST::CellUIDRegionArchive&
DeathhawkRdar39989167CellSelectionArchive::_Internal::base_uid_region(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->_impl_.base_uid_region_;
}
const ::TSP::UUIDCoordArchive&
DeathhawkRdar39989167CellSelectionArchive::_Internal::anchor_cell_uid(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->_impl_.anchor_cell_uid_;
}
const ::TSP::UUIDCoordArchive&
DeathhawkRdar39989167CellSelectionArchive::_Internal::cursor_cell_uid(const DeathhawkRdar39989167CellSelectionArchive* msg) {
  return *msg->_impl_.cursor_cell_uid_;
}
void DeathhawkRdar39989167CellSelectionArchive::clear_table_info() {
  if (_impl_.table_info_ != nullptr) _impl_.table_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DeathhawkRdar39989167CellSelectionArchive::clear_anchor_cell_uid() {
  if (_impl_.anchor_cell_uid_ != nullptr) _impl_.anchor_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void DeathhawkRdar39989167CellSelectionArchive::clear_cursor_cell_uid() {
  if (_impl_.cursor_cell_uid_ != nullptr) _impl_.cursor_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
DeathhawkRdar39989167CellSelectionArchive::DeathhawkRdar39989167CellSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.DeathhawkRdar39989167CellSelectionArchive)
}
DeathhawkRdar39989167CellSelectionArchive::DeathhawkRdar39989167CellSelectionArchive(const DeathhawkRdar39989167CellSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeathhawkRdar39989167CellSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.cell_uid_region_){nullptr}
    , decltype(_impl_.base_uid_region_){nullptr}
    , decltype(_impl_.anchor_cell_uid_){nullptr}
    , decltype(_impl_.cursor_cell_uid_){nullptr}
    , decltype(_impl_.selection_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    _this->_impl_.table_info_ = new ::TSP::Reference(*from._impl_.table_info_);
  }
  if (from._internal_has_cell_uid_region()) {
    _this->_impl_.cell_uid_region_ = new ::TST::CellUIDRegionArchive(*from._impl_.cell_uid_region_);
  }
  if (from._internal_has_base_uid_region()) {
    _this->_impl_.base_uid_region_ = new ::TST::CellUIDRegionArchive(*from._impl_.base_uid_region_);
  }
  if (from._internal_has_anchor_cell_uid()) {
    _this->_impl_.anchor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.anchor_cell_uid_);
  }
  if (from._internal_has_cursor_cell_uid()) {
    _this->_impl_.cursor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.cursor_cell_uid_);
  }
  _this->_impl_.selection_type_ = from._impl_.selection_type_;
  // @@protoc_insertion_point(copy_constructor:TST.DeathhawkRdar39989167CellSelectionArchive)
}

inline void DeathhawkRdar39989167CellSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.cell_uid_region_){nullptr}
    , decltype(_impl_.base_uid_region_){nullptr}
    , decltype(_impl_.anchor_cell_uid_){nullptr}
    , decltype(_impl_.cursor_cell_uid_){nullptr}
    , decltype(_impl_.selection_type_){0}
  };
}

DeathhawkRdar39989167CellSelectionArchive::~DeathhawkRdar39989167CellSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.DeathhawkRdar39989167CellSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeathhawkRdar39989167CellSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_info_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_region_;
  if (this != internal_default_instance()) delete _impl_.base_uid_region_;
  if (this != internal_default_instance()) delete _impl_.anchor_cell_uid_;
  if (this != internal_default_instance()) delete _impl_.cursor_cell_uid_;
}

void DeathhawkRdar39989167CellSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeathhawkRdar39989167CellSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_info_ != nullptr);
      _impl_.table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_uid_region_ != nullptr);
      _impl_.cell_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.base_uid_region_ != nullptr);
      _impl_.base_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.anchor_cell_uid_ != nullptr);
      _impl_.anchor_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.cursor_cell_uid_ != nullptr);
      _impl_.cursor_cell_uid_->Clear();
    }
  }
  _impl_.selection_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeathhawkRdar39989167CellSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.SelectionTypeArchive selection_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::SelectionTypeArchive_IsValid(val))) {
            _internal_set_selection_type(static_cast<::TST::SelectionTypeArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive cell_uid_region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive base_uid_region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_uid_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive anchor_cell_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive cursor_cell_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeathhawkRdar39989167CellSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_info(this),
        _Internal::table_info(this).GetCachedSize(), target, stream);
  }

  // optional .TST.SelectionTypeArchive selection_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_selection_type(), target);
  }

  // optional .TST.CellUIDRegionArchive cell_uid_region = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_uid_region(this),
        _Internal::cell_uid_region(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDRegionArchive base_uid_region = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::base_uid_region(this),
        _Internal::base_uid_region(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive anchor_cell_uid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::anchor_cell_uid(this),
        _Internal::anchor_cell_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive cursor_cell_uid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cursor_cell_uid(this),
        _Internal::cursor_cell_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DeathhawkRdar39989167CellSelectionArchive)
  return target;
}

size_t DeathhawkRdar39989167CellSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSP.Reference table_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_info_);
    }

    // optional .TST.CellUIDRegionArchive cell_uid_region = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uid_region_);
    }

    // optional .TST.CellUIDRegionArchive base_uid_region = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_uid_region_);
    }

    // optional .TSP.UUIDCoordArchive anchor_cell_uid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.anchor_cell_uid_);
    }

    // optional .TSP.UUIDCoordArchive cursor_cell_uid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cursor_cell_uid_);
    }

    // optional .TST.SelectionTypeArchive selection_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeathhawkRdar39989167CellSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeathhawkRdar39989167CellSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeathhawkRdar39989167CellSelectionArchive::GetClassData() const { return &_class_data_; }


void DeathhawkRdar39989167CellSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeathhawkRdar39989167CellSelectionArchive*>(&to_msg);
  auto& from = static_cast<const DeathhawkRdar39989167CellSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_info()->::TSP::Reference::MergeFrom(
          from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(
          from._internal_cell_uid_region());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_base_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(
          from._internal_base_uid_region());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_anchor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_anchor_cell_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_cursor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_cursor_cell_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.selection_type_ = from._impl_.selection_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeathhawkRdar39989167CellSelectionArchive::CopyFrom(const DeathhawkRdar39989167CellSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DeathhawkRdar39989167CellSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeathhawkRdar39989167CellSelectionArchive::IsInitialized() const {
  if (_internal_has_table_info()) {
    if (!_impl_.table_info_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_region()) {
    if (!_impl_.cell_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_base_uid_region()) {
    if (!_impl_.base_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_cell_uid()) {
    if (!_impl_.anchor_cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cursor_cell_uid()) {
    if (!_impl_.cursor_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void DeathhawkRdar39989167CellSelectionArchive::InternalSwap(DeathhawkRdar39989167CellSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeathhawkRdar39989167CellSelectionArchive, _impl_.selection_type_)
      + sizeof(DeathhawkRdar39989167CellSelectionArchive::_impl_.selection_type_)
      - PROTOBUF_FIELD_OFFSET(DeathhawkRdar39989167CellSelectionArchive, _impl_.table_info_)>(
          reinterpret_cast<char*>(&_impl_.table_info_),
          reinterpret_cast<char*>(&other->_impl_.table_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeathhawkRdar39989167CellSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[71]);
}

// ===================================================================

class StrokeSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeSelectionArchive>()._impl_._has_bits_);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StrokeSelectionArchive::StrokeSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StrokeSelectionArchive)
}
StrokeSelectionArchive::StrokeSelectionArchive(const StrokeSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrokeSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mask_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mask_ = from._impl_.mask_;
  // @@protoc_insertion_point(copy_constructor:TST.StrokeSelectionArchive)
}

inline void StrokeSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mask_){0}
  };
}

StrokeSelectionArchive::~StrokeSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrokeSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StrokeSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrokeSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mask_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mask(&has_bits);
          _impl_.mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrokeSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeSelectionArchive)
  return target;
}

size_t StrokeSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mask = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrokeSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeSelectionArchive::GetClassData() const { return &_class_data_; }


void StrokeSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrokeSelectionArchive*>(&to_msg);
  auto& from = static_cast<const StrokeSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mask()) {
    _this->_internal_set_mask(from._internal_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeSelectionArchive::CopyFrom(const StrokeSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeSelectionArchive::IsInitialized() const {
  return true;
}

void StrokeSelectionArchive::InternalSwap(StrokeSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mask_, other->_impl_.mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[72]);
}

// ===================================================================

class ControlCellSelectionArchive::_Internal {
 public:
};

ControlCellSelectionArchive::ControlCellSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TST.ControlCellSelectionArchive)
}
ControlCellSelectionArchive::ControlCellSelectionArchive(const ControlCellSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ControlCellSelectionArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ControlCellSelectionArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCellSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCellSelectionArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ControlCellSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[73]);
}

// ===================================================================

class StockCellSelectionArchive::_Internal {
 public:
};

StockCellSelectionArchive::StockCellSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TST.StockCellSelectionArchive)
}
StockCellSelectionArchive::StockCellSelectionArchive(const StockCellSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StockCellSelectionArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.StockCellSelectionArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StockCellSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StockCellSelectionArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StockCellSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[74]);
}

// ===================================================================

class TableNameSelectionArchive::_Internal {
 public:
};

TableNameSelectionArchive::TableNameSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TST.TableNameSelectionArchive)
}
TableNameSelectionArchive::TableNameSelectionArchive(const TableNameSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TableNameSelectionArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.TableNameSelectionArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableNameSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableNameSelectionArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TableNameSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[75]);
}

// ===================================================================

class AutofillSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillSelectionArchive>()._impl_._has_bits_);
  static const ::TST::CellRange& source_cell_range(const AutofillSelectionArchive* msg);
  static void set_has_source_cell_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellRange& target_cell_range(const AutofillSelectionArchive* msg);
  static void set_has_target_cell_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TST::CellRange&
AutofillSelectionArchive::_Internal::source_cell_range(const AutofillSelectionArchive* msg) {
  return *msg->_impl_.source_cell_range_;
}
const ::TST::CellRange&
AutofillSelectionArchive::_Internal::target_cell_range(const AutofillSelectionArchive* msg) {
  return *msg->_impl_.target_cell_range_;
}
AutofillSelectionArchive::AutofillSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.AutofillSelectionArchive)
}
AutofillSelectionArchive::AutofillSelectionArchive(const AutofillSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AutofillSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_cell_range_){nullptr}
    , decltype(_impl_.target_cell_range_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_cell_range()) {
    _this->_impl_.source_cell_range_ = new ::TST::CellRange(*from._impl_.source_cell_range_);
  }
  if (from._internal_has_target_cell_range()) {
    _this->_impl_.target_cell_range_ = new ::TST::CellRange(*from._impl_.target_cell_range_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.AutofillSelectionArchive)
}

inline void AutofillSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_cell_range_){nullptr}
    , decltype(_impl_.target_cell_range_){nullptr}
  };
}

AutofillSelectionArchive::~AutofillSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.AutofillSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_cell_range_;
  if (this != internal_default_instance()) delete _impl_.target_cell_range_;
}

void AutofillSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutofillSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.AutofillSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.source_cell_range_ != nullptr);
      _impl_.source_cell_range_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.target_cell_range_ != nullptr);
      _impl_.target_cell_range_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutofillSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.CellRange source_cell_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_cell_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellRange target_cell_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_cell_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.AutofillSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.CellRange source_cell_range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_cell_range(this),
        _Internal::source_cell_range(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellRange target_cell_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target_cell_range(this),
        _Internal::target_cell_range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.AutofillSelectionArchive)
  return target;
}

size_t AutofillSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.AutofillSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TST.CellRange source_cell_range = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_cell_range_);
    }

    // optional .TST.CellRange target_cell_range = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_cell_range_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutofillSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AutofillSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutofillSelectionArchive::GetClassData() const { return &_class_data_; }


void AutofillSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AutofillSelectionArchive*>(&to_msg);
  auto& from = static_cast<const AutofillSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.AutofillSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_source_cell_range()->::TST::CellRange::MergeFrom(
          from._internal_source_cell_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_target_cell_range()->::TST::CellRange::MergeFrom(
          from._internal_target_cell_range());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutofillSelectionArchive::CopyFrom(const AutofillSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.AutofillSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillSelectionArchive::IsInitialized() const {
  if (_internal_has_source_cell_range()) {
    if (!_impl_.source_cell_range_->IsInitialized()) return false;
  }
  if (_internal_has_target_cell_range()) {
    if (!_impl_.target_cell_range_->IsInitialized()) return false;
  }
  return true;
}

void AutofillSelectionArchive::InternalSwap(AutofillSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutofillSelectionArchive, _impl_.target_cell_range_)
      + sizeof(AutofillSelectionArchive::_impl_.target_cell_range_)
      - PROTOBUF_FIELD_OFFSET(AutofillSelectionArchive, _impl_.source_cell_range_)>(
          reinterpret_cast<char*>(&_impl_.source_cell_range_),
          reinterpret_cast<char*>(&other->_impl_.source_cell_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutofillSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[76]);
}

// ===================================================================

class FilterRulePrePivotArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterRulePrePivotArchive>()._impl_._has_bits_);
  static const ::TST::FormulaPredicatePrePivotArchive& predicate(const FilterRulePrePivotArchive* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::FormulaPredicatePrePivotArchive&
FilterRulePrePivotArchive::_Internal::predicate(const FilterRulePrePivotArchive* msg) {
  return *msg->_impl_.predicate_;
}
FilterRulePrePivotArchive::FilterRulePrePivotArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FilterRulePrePivotArchive)
}
FilterRulePrePivotArchive::FilterRulePrePivotArchive(const FilterRulePrePivotArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FilterRulePrePivotArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_){nullptr}
    , decltype(_impl_.disabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_predicate()) {
    _this->_impl_.predicate_ = new ::TST::FormulaPredicatePrePivotArchive(*from._impl_.predicate_);
  }
  _this->_impl_.disabled_ = from._impl_.disabled_;
  // @@protoc_insertion_point(copy_constructor:TST.FilterRulePrePivotArchive)
}

inline void FilterRulePrePivotArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_){nullptr}
    , decltype(_impl_.disabled_){false}
  };
}

FilterRulePrePivotArchive::~FilterRulePrePivotArchive() {
  // @@protoc_insertion_point(destructor:TST.FilterRulePrePivotArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilterRulePrePivotArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.predicate_;
}

void FilterRulePrePivotArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FilterRulePrePivotArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FilterRulePrePivotArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.predicate_ != nullptr);
    _impl_.predicate_->Clear();
  }
  _impl_.disabled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterRulePrePivotArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.FormulaPredicatePrePivotArchive predicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_disabled(&has_bits);
          _impl_.disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilterRulePrePivotArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FilterRulePrePivotArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.FormulaPredicatePrePivotArchive predicate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::predicate(this),
        _Internal::predicate(this).GetCachedSize(), target, stream);
  }

  // optional bool disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FilterRulePrePivotArchive)
  return target;
}

size_t FilterRulePrePivotArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FilterRulePrePivotArchive)
  size_t total_size = 0;

  // required .TST.FormulaPredicatePrePivotArchive predicate = 1;
  if (_internal_has_predicate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.predicate_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool disabled = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterRulePrePivotArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FilterRulePrePivotArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterRulePrePivotArchive::GetClassData() const { return &_class_data_; }


void FilterRulePrePivotArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FilterRulePrePivotArchive*>(&to_msg);
  auto& from = static_cast<const FilterRulePrePivotArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FilterRulePrePivotArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_predicate()->::TST::FormulaPredicatePrePivotArchive::MergeFrom(
          from._internal_predicate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.disabled_ = from._impl_.disabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterRulePrePivotArchive::CopyFrom(const FilterRulePrePivotArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FilterRulePrePivotArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterRulePrePivotArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_predicate()) {
    if (!_impl_.predicate_->IsInitialized()) return false;
  }
  return true;
}

void FilterRulePrePivotArchive::InternalSwap(FilterRulePrePivotArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterRulePrePivotArchive, _impl_.disabled_)
      + sizeof(FilterRulePrePivotArchive::_impl_.disabled_)
      - PROTOBUF_FIELD_OFFSET(FilterRulePrePivotArchive, _impl_.predicate_)>(
          reinterpret_cast<char*>(&_impl_.predicate_),
          reinterpret_cast<char*>(&other->_impl_.predicate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterRulePrePivotArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[77]);
}

// ===================================================================

class FilterRuleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterRuleArchive>()._impl_._has_bits_);
  static const ::TST::FormulaPredicateArchive& predicate(const FilterRuleArchive* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::FormulaPredicateArchive&
FilterRuleArchive::_Internal::predicate(const FilterRuleArchive* msg) {
  return *msg->_impl_.predicate_;
}
FilterRuleArchive::FilterRuleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FilterRuleArchive)
}
FilterRuleArchive::FilterRuleArchive(const FilterRuleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FilterRuleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_predicate()) {
    _this->_impl_.predicate_ = new ::TST::FormulaPredicateArchive(*from._impl_.predicate_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.FilterRuleArchive)
}

inline void FilterRuleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_){nullptr}
  };
}

FilterRuleArchive::~FilterRuleArchive() {
  // @@protoc_insertion_point(destructor:TST.FilterRuleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilterRuleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.predicate_;
}

void FilterRuleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FilterRuleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FilterRuleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.predicate_ != nullptr);
    _impl_.predicate_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterRuleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.FormulaPredicateArchive predicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilterRuleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FilterRuleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.FormulaPredicateArchive predicate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::predicate(this),
        _Internal::predicate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FilterRuleArchive)
  return target;
}

size_t FilterRuleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FilterRuleArchive)
  size_t total_size = 0;

  // required .TST.FormulaPredicateArchive predicate = 1;
  if (_internal_has_predicate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.predicate_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterRuleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FilterRuleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterRuleArchive::GetClassData() const { return &_class_data_; }


void FilterRuleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FilterRuleArchive*>(&to_msg);
  auto& from = static_cast<const FilterRuleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FilterRuleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_predicate()) {
    _this->_internal_mutable_predicate()->::TST::FormulaPredicateArchive::MergeFrom(
        from._internal_predicate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterRuleArchive::CopyFrom(const FilterRuleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FilterRuleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterRuleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_predicate()) {
    if (!_impl_.predicate_->IsInitialized()) return false;
  }
  return true;
}

void FilterRuleArchive::InternalSwap(FilterRuleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.predicate_, other->_impl_.predicate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterRuleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[78]);
}

// ===================================================================

class TableStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const TableStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::TableStylePropertiesArchive& table_properties(const TableStyleArchive* msg);
  static void set_has_table_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
TableStyleArchive::_Internal::super(const TableStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::TableStylePropertiesArchive&
TableStyleArchive::_Internal::table_properties(const TableStyleArchive* msg) {
  return *msg->_impl_.table_properties_;
}
void TableStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TableStyleArchive::clear_table_properties() {
  if (_impl_.table_properties_ != nullptr) _impl_.table_properties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TableStyleArchive::TableStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableStyleArchive)
}
TableStyleArchive::TableStyleArchive(const TableStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_properties_){nullptr}
    , decltype(_impl_.override_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_table_properties()) {
    _this->_impl_.table_properties_ = new ::TST::TableStylePropertiesArchive(*from._impl_.table_properties_);
  }
  _this->_impl_.override_count_ = from._impl_.override_count_;
  // @@protoc_insertion_point(copy_constructor:TST.TableStyleArchive)
}

inline void TableStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_properties_){nullptr}
    , decltype(_impl_.override_count_){0u}
  };
}

TableStyleArchive::~TableStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.TableStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.table_properties_;
}

void TableStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.table_properties_ != nullptr);
      _impl_.table_properties_->Clear();
    }
  }
  _impl_.override_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableStylePropertiesArchive table_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TST.TableStylePropertiesArchive table_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::table_properties(this),
        _Internal::table_properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableStyleArchive)
  return target;
}

size_t TableStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.TableStylePropertiesArchive table_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableStyleArchive::GetClassData() const { return &_class_data_; }


void TableStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableStyleArchive*>(&to_msg);
  auto& from = static_cast<const TableStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_properties()->::TST::TableStylePropertiesArchive::MergeFrom(
          from._internal_table_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableStyleArchive::CopyFrom(const TableStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_table_properties()) {
    if (!_impl_.table_properties_->IsInitialized()) return false;
  }
  return true;
}

void TableStyleArchive::InternalSwap(TableStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableStyleArchive, _impl_.override_count_)
      + sizeof(TableStyleArchive::_impl_.override_count_)
      - PROTOBUF_FIELD_OFFSET(TableStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[79]);
}

// ===================================================================

class CellStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const CellStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::CellStylePropertiesArchive& cell_properties(const CellStyleArchive* msg);
  static void set_has_cell_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
CellStyleArchive::_Internal::super(const CellStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::CellStylePropertiesArchive&
CellStyleArchive::_Internal::cell_properties(const CellStyleArchive* msg) {
  return *msg->_impl_.cell_properties_;
}
void CellStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CellStyleArchive::clear_cell_properties() {
  if (_impl_.cell_properties_ != nullptr) _impl_.cell_properties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CellStyleArchive::CellStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellStyleArchive)
}
CellStyleArchive::CellStyleArchive(const CellStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_properties_){nullptr}
    , decltype(_impl_.override_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_properties()) {
    _this->_impl_.cell_properties_ = new ::TST::CellStylePropertiesArchive(*from._impl_.cell_properties_);
  }
  _this->_impl_.override_count_ = from._impl_.override_count_;
  // @@protoc_insertion_point(copy_constructor:TST.CellStyleArchive)
}

inline void CellStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_properties_){nullptr}
    , decltype(_impl_.override_count_){0u}
  };
}

CellStyleArchive::~CellStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CellStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_properties_;
}

void CellStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_properties_ != nullptr);
      _impl_.cell_properties_->Clear();
    }
  }
  _impl_.override_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellStylePropertiesArchive cell_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .TST.CellStylePropertiesArchive cell_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::cell_properties(this),
        _Internal::cell_properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellStyleArchive)
  return target;
}

size_t CellStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.CellStylePropertiesArchive cell_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellStyleArchive::GetClassData() const { return &_class_data_; }


void CellStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellStyleArchive*>(&to_msg);
  auto& from = static_cast<const CellStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_properties()->::TST::CellStylePropertiesArchive::MergeFrom(
          from._internal_cell_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellStyleArchive::CopyFrom(const CellStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_properties()) {
    if (!_impl_.cell_properties_->IsInitialized()) return false;
  }
  return true;
}

void CellStyleArchive::InternalSwap(CellStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellStyleArchive, _impl_.override_count_)
      + sizeof(CellStyleArchive::_impl_.override_count_)
      - PROTOBUF_FIELD_OFFSET(CellStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[80]);
}

// ===================================================================

class FormulaPredArgDataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaPredArgDataArchive>()._impl_._has_bits_);
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_decimal_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decimal_high(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration_timeinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration_units(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_boolean_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

FormulaPredArgDataArchive::FormulaPredArgDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaPredArgDataArchive)
}
FormulaPredArgDataArchive::FormulaPredArgDataArchive(const FormulaPredArgDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaPredArgDataArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.double_value_){}
    , decltype(_impl_.decimal_low_){}
    , decltype(_impl_.decimal_high_){}
    , decltype(_impl_.date_value_){}
    , decltype(_impl_.duration_timeinterval_){}
    , decltype(_impl_.duration_units_){}
    , decltype(_impl_.boolean_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.double_value_, &from._impl_.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.boolean_value_) -
    reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.boolean_value_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaPredArgDataArchive)
}

inline void FormulaPredArgDataArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.double_value_){0}
    , decltype(_impl_.decimal_low_){uint64_t{0u}}
    , decltype(_impl_.decimal_high_){uint64_t{0u}}
    , decltype(_impl_.date_value_){0}
    , decltype(_impl_.duration_timeinterval_){0}
    , decltype(_impl_.duration_units_){0}
    , decltype(_impl_.boolean_value_){false}
  };
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FormulaPredArgDataArchive::~FormulaPredArgDataArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaPredArgDataArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaPredArgDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_value_.Destroy();
}

void FormulaPredArgDataArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaPredArgDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaPredArgDataArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.boolean_value_) -
        reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.boolean_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaPredArgDataArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double double_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_decimal_low(&has_bits);
          _impl_.decimal_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_decimal_high(&has_bits);
          _impl_.decimal_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.FormulaPredArgDataArchive.string_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double date_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_date_value(&has_bits);
          _impl_.date_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double duration_timeinterval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_duration_timeinterval(&has_bits);
          _impl_.duration_timeinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 duration_units = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_duration_units(&has_bits);
          _impl_.duration_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool boolean_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_boolean_value(&has_bits);
          _impl_.boolean_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaPredArgDataArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaPredArgDataArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double double_value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_value(), target);
  }

  // optional uint64 decimal_low = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_decimal_low(), target);
  }

  // optional uint64 decimal_high = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_decimal_high(), target);
  }

  // optional string string_value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.FormulaPredArgDataArchive.string_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_value(), target);
  }

  // optional double date_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_date_value(), target);
  }

  // optional double duration_timeinterval = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_duration_timeinterval(), target);
  }

  // optional int32 duration_units = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_duration_units(), target);
  }

  // optional bool boolean_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_boolean_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaPredArgDataArchive)
  return target;
}

size_t FormulaPredArgDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaPredArgDataArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional double double_value = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 decimal_low = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_decimal_low());
    }

    // optional uint64 decimal_high = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_decimal_high());
    }

    // optional double date_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double duration_timeinterval = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 duration_units = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration_units());
    }

    // optional bool boolean_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaPredArgDataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaPredArgDataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaPredArgDataArchive::GetClassData() const { return &_class_data_; }


void FormulaPredArgDataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaPredArgDataArchive*>(&to_msg);
  auto& from = static_cast<const FormulaPredArgDataArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaPredArgDataArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.decimal_low_ = from._impl_.decimal_low_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.decimal_high_ = from._impl_.decimal_high_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.date_value_ = from._impl_.date_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.duration_timeinterval_ = from._impl_.duration_timeinterval_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.duration_units_ = from._impl_.duration_units_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.boolean_value_ = from._impl_.boolean_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaPredArgDataArchive::CopyFrom(const FormulaPredArgDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaPredArgDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaPredArgDataArchive::IsInitialized() const {
  return true;
}

void FormulaPredArgDataArchive::InternalSwap(FormulaPredArgDataArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_value_, lhs_arena,
      &other->_impl_.string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaPredArgDataArchive, _impl_.boolean_value_)
      + sizeof(FormulaPredArgDataArchive::_impl_.boolean_value_)
      - PROTOBUF_FIELD_OFFSET(FormulaPredArgDataArchive, _impl_.double_value_)>(
          reinterpret_cast<char*>(&_impl_.double_value_),
          reinterpret_cast<char*>(&other->_impl_.double_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaPredArgDataArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[81]);
}

// ===================================================================

class FormulaPredArgArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaPredArgArchive>()._impl_._has_bits_);
  static void set_has_arg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TST::FormulaPredArgDataArchive& arg_value(const FormulaPredArgArchive* msg);
  static void set_has_arg_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellReferenceArchive& base_cell_ref(const FormulaPredArgArchive* msg);
  static void set_has_base_cell_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RelativeCellRefArchive& relative_cell_ref(const FormulaPredArgArchive* msg);
  static void set_has_relative_cell_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CategoryReferenceArchive& category_ref(const FormulaPredArgArchive* msg);
  static void set_has_category_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTUidTractList& uid_tract_list(const FormulaPredArgArchive* msg);
  static void set_has_uid_tract_list(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::CellCoordinateArchive& host_cell_coord(const FormulaPredArgArchive* msg);
  static void set_has_host_cell_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_preserve_row(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_preserve_column(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::ViewTractRefArchive& view_tract_ref(const FormulaPredArgArchive* msg);
  static void set_has_view_tract_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000080) ^ 0x00000080) != 0;
  }
};

const ::TST::FormulaPredArgDataArchive&
FormulaPredArgArchive::_Internal::arg_value(const FormulaPredArgArchive* msg) {
  return *msg->_impl_.arg_value_;
}
const ::TSCE::CellReferenceArchive&
FormulaPredArgArchive::_Internal::base_cell_ref(const FormulaPredArgArchive* msg) {
  return *msg->_impl_.base_cell_ref_;
}
const ::TSCE::RelativeCellRefArchive&
FormulaPredArgArchive::_Internal::relative_cell_ref(const FormulaPredArgArchive* msg) {
  return *msg->_impl_.relative_cell_ref_;
}
const ::TSCE::CategoryReferenceArchive&
FormulaPredArgArchive::_Internal::category_ref(const FormulaPredArgArchive* msg) {
  return *msg->_impl_.category_ref_;
}
const ::TSCE::ASTNodeArrayArchive_ASTUidTractList&
FormulaPredArgArchive::_Internal::uid_tract_list(const FormulaPredArgArchive* msg) {
  return *msg->_impl_.uid_tract_list_;
}
const ::TSCE::CellCoordinateArchive&
FormulaPredArgArchive::_Internal::host_cell_coord(const FormulaPredArgArchive* msg) {
  return *msg->_impl_.host_cell_coord_;
}
const ::TSCE::ViewTractRefArchive&
FormulaPredArgArchive::_Internal::view_tract_ref(const FormulaPredArgArchive* msg) {
  return *msg->_impl_.view_tract_ref_;
}
void FormulaPredArgArchive::clear_base_cell_ref() {
  if (_impl_.base_cell_ref_ != nullptr) _impl_.base_cell_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void FormulaPredArgArchive::clear_relative_cell_ref() {
  if (_impl_.relative_cell_ref_ != nullptr) _impl_.relative_cell_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void FormulaPredArgArchive::clear_category_ref() {
  if (_impl_.category_ref_ != nullptr) _impl_.category_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void FormulaPredArgArchive::clear_uid_tract_list() {
  if (_impl_.uid_tract_list_ != nullptr) _impl_.uid_tract_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void FormulaPredArgArchive::clear_host_cell_coord() {
  if (_impl_.host_cell_coord_ != nullptr) _impl_.host_cell_coord_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void FormulaPredArgArchive::clear_view_tract_ref() {
  if (_impl_.view_tract_ref_ != nullptr) _impl_.view_tract_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
FormulaPredArgArchive::FormulaPredArgArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaPredArgArchive)
}
FormulaPredArgArchive::FormulaPredArgArchive(const FormulaPredArgArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaPredArgArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_entries_){from._impl_.list_entries_}
    , decltype(_impl_.arg_value_){nullptr}
    , decltype(_impl_.base_cell_ref_){nullptr}
    , decltype(_impl_.relative_cell_ref_){nullptr}
    , decltype(_impl_.category_ref_){nullptr}
    , decltype(_impl_.uid_tract_list_){nullptr}
    , decltype(_impl_.host_cell_coord_){nullptr}
    , decltype(_impl_.view_tract_ref_){nullptr}
    , decltype(_impl_.arg_type_){}
    , decltype(_impl_.preserve_row_){}
    , decltype(_impl_.preserve_column_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_arg_value()) {
    _this->_impl_.arg_value_ = new ::TST::FormulaPredArgDataArchive(*from._impl_.arg_value_);
  }
  if (from._internal_has_base_cell_ref()) {
    _this->_impl_.base_cell_ref_ = new ::TSCE::CellReferenceArchive(*from._impl_.base_cell_ref_);
  }
  if (from._internal_has_relative_cell_ref()) {
    _this->_impl_.relative_cell_ref_ = new ::TSCE::RelativeCellRefArchive(*from._impl_.relative_cell_ref_);
  }
  if (from._internal_has_category_ref()) {
    _this->_impl_.category_ref_ = new ::TSCE::CategoryReferenceArchive(*from._impl_.category_ref_);
  }
  if (from._internal_has_uid_tract_list()) {
    _this->_impl_.uid_tract_list_ = new ::TSCE::ASTNodeArrayArchive_ASTUidTractList(*from._impl_.uid_tract_list_);
  }
  if (from._internal_has_host_cell_coord()) {
    _this->_impl_.host_cell_coord_ = new ::TSCE::CellCoordinateArchive(*from._impl_.host_cell_coord_);
  }
  if (from._internal_has_view_tract_ref()) {
    _this->_impl_.view_tract_ref_ = new ::TSCE::ViewTractRefArchive(*from._impl_.view_tract_ref_);
  }
  ::memcpy(&_impl_.arg_type_, &from._impl_.arg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preserve_column_) -
    reinterpret_cast<char*>(&_impl_.arg_type_)) + sizeof(_impl_.preserve_column_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaPredArgArchive)
}

inline void FormulaPredArgArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.list_entries_){arena}
    , decltype(_impl_.arg_value_){nullptr}
    , decltype(_impl_.base_cell_ref_){nullptr}
    , decltype(_impl_.relative_cell_ref_){nullptr}
    , decltype(_impl_.category_ref_){nullptr}
    , decltype(_impl_.uid_tract_list_){nullptr}
    , decltype(_impl_.host_cell_coord_){nullptr}
    , decltype(_impl_.view_tract_ref_){nullptr}
    , decltype(_impl_.arg_type_){0}
    , decltype(_impl_.preserve_row_){false}
    , decltype(_impl_.preserve_column_){false}
  };
}

FormulaPredArgArchive::~FormulaPredArgArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaPredArgArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaPredArgArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.arg_value_;
  if (this != internal_default_instance()) delete _impl_.base_cell_ref_;
  if (this != internal_default_instance()) delete _impl_.relative_cell_ref_;
  if (this != internal_default_instance()) delete _impl_.category_ref_;
  if (this != internal_default_instance()) delete _impl_.uid_tract_list_;
  if (this != internal_default_instance()) delete _impl_.host_cell_coord_;
  if (this != internal_default_instance()) delete _impl_.view_tract_ref_;
}

void FormulaPredArgArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaPredArgArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaPredArgArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.arg_value_ != nullptr);
      _impl_.arg_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.base_cell_ref_ != nullptr);
      _impl_.base_cell_ref_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.relative_cell_ref_ != nullptr);
      _impl_.relative_cell_ref_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.category_ref_ != nullptr);
      _impl_.category_ref_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.uid_tract_list_ != nullptr);
      _impl_.uid_tract_list_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.host_cell_coord_ != nullptr);
      _impl_.host_cell_coord_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.view_tract_ref_ != nullptr);
      _impl_.view_tract_ref_->Clear();
    }
  }
  _impl_.arg_type_ = 0;
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.preserve_row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.preserve_column_) -
        reinterpret_cast<char*>(&_impl_.preserve_row_)) + sizeof(_impl_.preserve_column_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaPredArgArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 arg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_arg_type(&has_bits);
          _impl_.arg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.FormulaPredArgDataArchive arg_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arg_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellReferenceArchive base_cell_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_cell_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RelativeCellRefArchive relative_cell_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_cell_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CategoryReferenceArchive category_ref = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList uid_tract_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid_tract_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive host_cell_coord = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_cell_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_row = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_preserve_row(&has_bits);
          _impl_.preserve_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_column = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_preserve_column(&has_bits);
          _impl_.preserve_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.FormulaPredArgDataArchive list_entries = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ViewTractRefArchive view_tract_ref = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_tract_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaPredArgArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaPredArgArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 arg_type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_arg_type(), target);
  }

  // optional .TST.FormulaPredArgDataArchive arg_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::arg_value(this),
        _Internal::arg_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellReferenceArchive base_cell_ref = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::base_cell_ref(this),
        _Internal::base_cell_ref(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RelativeCellRefArchive relative_cell_ref = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::relative_cell_ref(this),
        _Internal::relative_cell_ref(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CategoryReferenceArchive category_ref = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::category_ref(this),
        _Internal::category_ref(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList uid_tract_list = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::uid_tract_list(this),
        _Internal::uid_tract_list(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive host_cell_coord = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::host_cell_coord(this),
        _Internal::host_cell_coord(this).GetCachedSize(), target, stream);
  }

  // optional bool preserve_row = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_preserve_row(), target);
  }

  // optional bool preserve_column = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_preserve_column(), target);
  }

  // repeated .TST.FormulaPredArgDataArchive list_entries = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_list_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSCE.ViewTractRefArchive view_tract_ref = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::view_tract_ref(this),
        _Internal::view_tract_ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaPredArgArchive)
  return target;
}

size_t FormulaPredArgArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaPredArgArchive)
  size_t total_size = 0;

  // required int32 arg_type = 1;
  if (_internal_has_arg_type()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_arg_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.FormulaPredArgDataArchive list_entries = 10;
  total_size += 1UL * this->_internal_list_entries_size();
  for (const auto& msg : this->_impl_.list_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TST.FormulaPredArgDataArchive arg_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.arg_value_);
    }

    // optional .TSCE.CellReferenceArchive base_cell_ref = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_cell_ref_);
    }

    // optional .TSCE.RelativeCellRefArchive relative_cell_ref = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relative_cell_ref_);
    }

    // optional .TSCE.CategoryReferenceArchive category_ref = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_ref_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList uid_tract_list = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.uid_tract_list_);
    }

    // optional .TSCE.CellCoordinateArchive host_cell_coord = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_cell_coord_);
    }

    // optional .TSCE.ViewTractRefArchive view_tract_ref = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.view_tract_ref_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool preserve_row = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_column = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaPredArgArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaPredArgArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaPredArgArchive::GetClassData() const { return &_class_data_; }


void FormulaPredArgArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaPredArgArchive*>(&to_msg);
  auto& from = static_cast<const FormulaPredArgArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaPredArgArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_entries_.MergeFrom(from._impl_.list_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_arg_value()->::TST::FormulaPredArgDataArchive::MergeFrom(
          from._internal_arg_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_base_cell_ref()->::TSCE::CellReferenceArchive::MergeFrom(
          from._internal_base_cell_ref());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_relative_cell_ref()->::TSCE::RelativeCellRefArchive::MergeFrom(
          from._internal_relative_cell_ref());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_category_ref()->::TSCE::CategoryReferenceArchive::MergeFrom(
          from._internal_category_ref());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_uid_tract_list()->::TSCE::ASTNodeArrayArchive_ASTUidTractList::MergeFrom(
          from._internal_uid_tract_list());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_host_cell_coord()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_host_cell_coord());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_view_tract_ref()->::TSCE::ViewTractRefArchive::MergeFrom(
          from._internal_view_tract_ref());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.arg_type_ = from._impl_.arg_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.preserve_row_ = from._impl_.preserve_row_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.preserve_column_ = from._impl_.preserve_column_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaPredArgArchive::CopyFrom(const FormulaPredArgArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaPredArgArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaPredArgArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_base_cell_ref()) {
    if (!_impl_.base_cell_ref_->IsInitialized()) return false;
  }
  if (_internal_has_relative_cell_ref()) {
    if (!_impl_.relative_cell_ref_->IsInitialized()) return false;
  }
  if (_internal_has_category_ref()) {
    if (!_impl_.category_ref_->IsInitialized()) return false;
  }
  if (_internal_has_uid_tract_list()) {
    if (!_impl_.uid_tract_list_->IsInitialized()) return false;
  }
  if (_internal_has_view_tract_ref()) {
    if (!_impl_.view_tract_ref_->IsInitialized()) return false;
  }
  return true;
}

void FormulaPredArgArchive::InternalSwap(FormulaPredArgArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.list_entries_.InternalSwap(&other->_impl_.list_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaPredArgArchive, _impl_.preserve_column_)
      + sizeof(FormulaPredArgArchive::_impl_.preserve_column_)
      - PROTOBUF_FIELD_OFFSET(FormulaPredArgArchive, _impl_.arg_value_)>(
          reinterpret_cast<char*>(&_impl_.arg_value_),
          reinterpret_cast<char*>(&other->_impl_.arg_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaPredArgArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[82]);
}

// ===================================================================

class FormulaPredicatePrePivotArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaPredicatePrePivotArchive>()._impl_._has_bits_);
  static const ::TSCE::FormulaArchive& formula(const FormulaPredicatePrePivotArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_predicate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_qualifier1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_qualifier2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_param_index1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_param_index2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_param_index0(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::TSCE::FormulaArchive&
FormulaPredicatePrePivotArchive::_Internal::formula(const FormulaPredicatePrePivotArchive* msg) {
  return *msg->_impl_.formula_;
}
void FormulaPredicatePrePivotArchive::clear_formula() {
  if (_impl_.formula_ != nullptr) _impl_.formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FormulaPredicatePrePivotArchive::FormulaPredicatePrePivotArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaPredicatePrePivotArchive)
}
FormulaPredicatePrePivotArchive::FormulaPredicatePrePivotArchive(const FormulaPredicatePrePivotArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaPredicatePrePivotArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.predicate_type_){}
    , decltype(_impl_.qualifier1_){}
    , decltype(_impl_.qualifier2_){}
    , decltype(_impl_.param_index1_){}
    , decltype(_impl_.param_index2_){}
    , decltype(_impl_.param_index0_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    _this->_impl_.formula_ = new ::TSCE::FormulaArchive(*from._impl_.formula_);
  }
  ::memcpy(&_impl_.predicate_type_, &from._impl_.predicate_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.param_index0_) -
    reinterpret_cast<char*>(&_impl_.predicate_type_)) + sizeof(_impl_.param_index0_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaPredicatePrePivotArchive)
}

inline void FormulaPredicatePrePivotArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.predicate_type_){0}
    , decltype(_impl_.qualifier1_){0}
    , decltype(_impl_.qualifier2_){0}
    , decltype(_impl_.param_index1_){0}
    , decltype(_impl_.param_index2_){0}
    , decltype(_impl_.param_index0_){0}
  };
}

FormulaPredicatePrePivotArchive::~FormulaPredicatePrePivotArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaPredicatePrePivotArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaPredicatePrePivotArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.formula_;
}

void FormulaPredicatePrePivotArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaPredicatePrePivotArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaPredicatePrePivotArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.formula_ != nullptr);
    _impl_.formula_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.predicate_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.param_index0_) -
        reinterpret_cast<char*>(&_impl_.predicate_type_)) + sizeof(_impl_.param_index0_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaPredicatePrePivotArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.FormulaArchive formula = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 predicate_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_predicate_type(&has_bits);
          _impl_.predicate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 qualifier1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_qualifier1(&has_bits);
          _impl_.qualifier1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 qualifier2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_qualifier2(&has_bits);
          _impl_.qualifier2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 param_index1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_param_index1(&has_bits);
          _impl_.param_index1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 param_index2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_param_index2(&has_bits);
          _impl_.param_index2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 param_index0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_param_index0(&has_bits);
          _impl_.param_index0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaPredicatePrePivotArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaPredicatePrePivotArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.FormulaArchive formula = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::formula(this),
        _Internal::formula(this).GetCachedSize(), target, stream);
  }

  // required int32 predicate_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_predicate_type(), target);
  }

  // required int32 qualifier1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_qualifier1(), target);
  }

  // required int32 qualifier2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_qualifier2(), target);
  }

  // required int32 param_index1 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_param_index1(), target);
  }

  // required int32 param_index2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_param_index2(), target);
  }

  // required int32 param_index0 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_param_index0(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaPredicatePrePivotArchive)
  return target;
}

size_t FormulaPredicatePrePivotArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.FormulaPredicatePrePivotArchive)
  size_t total_size = 0;

  if (_internal_has_formula()) {
    // required .TSCE.FormulaArchive formula = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_);
  }

  if (_internal_has_predicate_type()) {
    // required int32 predicate_type = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_predicate_type());
  }

  if (_internal_has_qualifier1()) {
    // required int32 qualifier1 = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qualifier1());
  }

  if (_internal_has_qualifier2()) {
    // required int32 qualifier2 = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qualifier2());
  }

  if (_internal_has_param_index1()) {
    // required int32 param_index1 = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_param_index1());
  }

  if (_internal_has_param_index2()) {
    // required int32 param_index2 = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_param_index2());
  }

  if (_internal_has_param_index0()) {
    // required int32 param_index0 = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_param_index0());
  }

  return total_size;
}
size_t FormulaPredicatePrePivotArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaPredicatePrePivotArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .TSCE.FormulaArchive formula = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_);

    // required int32 predicate_type = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_predicate_type());

    // required int32 qualifier1 = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qualifier1());

    // required int32 qualifier2 = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qualifier2());

    // required int32 param_index1 = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_param_index1());

    // required int32 param_index2 = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_param_index2());

    // required int32 param_index0 = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_param_index0());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaPredicatePrePivotArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaPredicatePrePivotArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaPredicatePrePivotArchive::GetClassData() const { return &_class_data_; }


void FormulaPredicatePrePivotArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaPredicatePrePivotArchive*>(&to_msg);
  auto& from = static_cast<const FormulaPredicatePrePivotArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaPredicatePrePivotArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.predicate_type_ = from._impl_.predicate_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.qualifier1_ = from._impl_.qualifier1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.qualifier2_ = from._impl_.qualifier2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.param_index1_ = from._impl_.param_index1_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.param_index2_ = from._impl_.param_index2_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.param_index0_ = from._impl_.param_index0_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaPredicatePrePivotArchive::CopyFrom(const FormulaPredicatePrePivotArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaPredicatePrePivotArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaPredicatePrePivotArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!_impl_.formula_->IsInitialized()) return false;
  }
  return true;
}

void FormulaPredicatePrePivotArchive::InternalSwap(FormulaPredicatePrePivotArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaPredicatePrePivotArchive, _impl_.param_index0_)
      + sizeof(FormulaPredicatePrePivotArchive::_impl_.param_index0_)
      - PROTOBUF_FIELD_OFFSET(FormulaPredicatePrePivotArchive, _impl_.formula_)>(
          reinterpret_cast<char*>(&_impl_.formula_),
          reinterpret_cast<char*>(&other->_impl_.formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaPredicatePrePivotArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[83]);
}

// ===================================================================

class FormulaPredicateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaPredicateArchive>()._impl_._has_bits_);
  static void set_has_predicate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_qualifier1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_qualifier2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TST::FormulaPredArgArchive& param_value0(const FormulaPredicateArchive* msg);
  static void set_has_param_value0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaPredArgArchive& param_value1(const FormulaPredicateArchive* msg);
  static void set_has_param_value1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::FormulaPredArgArchive& param_value2(const FormulaPredicateArchive* msg);
  static void set_has_param_value2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::FormulaArchive& formula(const FormulaPredicateArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_for_conditional_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::UUID& host_table_uid(const FormulaPredicateArchive* msg);
  static void set_has_host_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUID& host_column_uid(const FormulaPredicateArchive* msg);
  static void set_has_host_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& host_row_uid(const FormulaPredicateArchive* msg);
  static void set_has_host_row_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000380) ^ 0x00000380) != 0;
  }
};

const ::TST::FormulaPredArgArchive&
FormulaPredicateArchive::_Internal::param_value0(const FormulaPredicateArchive* msg) {
  return *msg->_impl_.param_value0_;
}
const ::TST::FormulaPredArgArchive&
FormulaPredicateArchive::_Internal::param_value1(const FormulaPredicateArchive* msg) {
  return *msg->_impl_.param_value1_;
}
const ::TST::FormulaPredArgArchive&
FormulaPredicateArchive::_Internal::param_value2(const FormulaPredicateArchive* msg) {
  return *msg->_impl_.param_value2_;
}
const ::TSCE::FormulaArchive&
FormulaPredicateArchive::_Internal::formula(const FormulaPredicateArchive* msg) {
  return *msg->_impl_.formula_;
}
const ::TSP::UUID&
FormulaPredicateArchive::_Internal::host_table_uid(const FormulaPredicateArchive* msg) {
  return *msg->_impl_.host_table_uid_;
}
const ::TSP::UUID&
FormulaPredicateArchive::_Internal::host_column_uid(const FormulaPredicateArchive* msg) {
  return *msg->_impl_.host_column_uid_;
}
const ::TSP::UUID&
FormulaPredicateArchive::_Internal::host_row_uid(const FormulaPredicateArchive* msg) {
  return *msg->_impl_.host_row_uid_;
}
void FormulaPredicateArchive::clear_formula() {
  if (_impl_.formula_ != nullptr) _impl_.formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void FormulaPredicateArchive::clear_host_table_uid() {
  if (_impl_.host_table_uid_ != nullptr) _impl_.host_table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void FormulaPredicateArchive::clear_host_column_uid() {
  if (_impl_.host_column_uid_ != nullptr) _impl_.host_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void FormulaPredicateArchive::clear_host_row_uid() {
  if (_impl_.host_row_uid_ != nullptr) _impl_.host_row_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
FormulaPredicateArchive::FormulaPredicateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaPredicateArchive)
}
FormulaPredicateArchive::FormulaPredicateArchive(const FormulaPredicateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaPredicateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.param_value0_){nullptr}
    , decltype(_impl_.param_value1_){nullptr}
    , decltype(_impl_.param_value2_){nullptr}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.host_table_uid_){nullptr}
    , decltype(_impl_.host_column_uid_){nullptr}
    , decltype(_impl_.host_row_uid_){nullptr}
    , decltype(_impl_.predicate_type_){}
    , decltype(_impl_.qualifier1_){}
    , decltype(_impl_.qualifier2_){}
    , decltype(_impl_.for_conditional_style_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_param_value0()) {
    _this->_impl_.param_value0_ = new ::TST::FormulaPredArgArchive(*from._impl_.param_value0_);
  }
  if (from._internal_has_param_value1()) {
    _this->_impl_.param_value1_ = new ::TST::FormulaPredArgArchive(*from._impl_.param_value1_);
  }
  if (from._internal_has_param_value2()) {
    _this->_impl_.param_value2_ = new ::TST::FormulaPredArgArchive(*from._impl_.param_value2_);
  }
  if (from._internal_has_formula()) {
    _this->_impl_.formula_ = new ::TSCE::FormulaArchive(*from._impl_.formula_);
  }
  if (from._internal_has_host_table_uid()) {
    _this->_impl_.host_table_uid_ = new ::TSP::UUID(*from._impl_.host_table_uid_);
  }
  if (from._internal_has_host_column_uid()) {
    _this->_impl_.host_column_uid_ = new ::TSP::UUID(*from._impl_.host_column_uid_);
  }
  if (from._internal_has_host_row_uid()) {
    _this->_impl_.host_row_uid_ = new ::TSP::UUID(*from._impl_.host_row_uid_);
  }
  ::memcpy(&_impl_.predicate_type_, &from._impl_.predicate_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.for_conditional_style_) -
    reinterpret_cast<char*>(&_impl_.predicate_type_)) + sizeof(_impl_.for_conditional_style_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaPredicateArchive)
}

inline void FormulaPredicateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.param_value0_){nullptr}
    , decltype(_impl_.param_value1_){nullptr}
    , decltype(_impl_.param_value2_){nullptr}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.host_table_uid_){nullptr}
    , decltype(_impl_.host_column_uid_){nullptr}
    , decltype(_impl_.host_row_uid_){nullptr}
    , decltype(_impl_.predicate_type_){0}
    , decltype(_impl_.qualifier1_){0}
    , decltype(_impl_.qualifier2_){0}
    , decltype(_impl_.for_conditional_style_){false}
  };
}

FormulaPredicateArchive::~FormulaPredicateArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaPredicateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaPredicateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.param_value0_;
  if (this != internal_default_instance()) delete _impl_.param_value1_;
  if (this != internal_default_instance()) delete _impl_.param_value2_;
  if (this != internal_default_instance()) delete _impl_.formula_;
  if (this != internal_default_instance()) delete _impl_.host_table_uid_;
  if (this != internal_default_instance()) delete _impl_.host_column_uid_;
  if (this != internal_default_instance()) delete _impl_.host_row_uid_;
}

void FormulaPredicateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaPredicateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaPredicateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.param_value0_ != nullptr);
      _impl_.param_value0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.param_value1_ != nullptr);
      _impl_.param_value1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.param_value2_ != nullptr);
      _impl_.param_value2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.formula_ != nullptr);
      _impl_.formula_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.host_table_uid_ != nullptr);
      _impl_.host_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.host_column_uid_ != nullptr);
      _impl_.host_column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.host_row_uid_ != nullptr);
      _impl_.host_row_uid_->Clear();
    }
  }
  _impl_.predicate_type_ = 0;
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.qualifier1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.for_conditional_style_) -
        reinterpret_cast<char*>(&_impl_.qualifier1_)) + sizeof(_impl_.for_conditional_style_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaPredicateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 predicate_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_predicate_type(&has_bits);
          _impl_.predicate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 qualifier1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_qualifier1(&has_bits);
          _impl_.qualifier1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 qualifier2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_qualifier2(&has_bits);
          _impl_.qualifier2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.FormulaPredArgArchive param_value0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_param_value0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.FormulaPredArgArchive param_value1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_param_value1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.FormulaPredArgArchive param_value2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_param_value2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive formula = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool for_conditional_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_for_conditional_style(&has_bits);
          _impl_.for_conditional_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID host_table_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID host_column_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID host_row_uid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_row_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaPredicateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaPredicateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 predicate_type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_predicate_type(), target);
  }

  // required int32 qualifier1 = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_qualifier1(), target);
  }

  // required int32 qualifier2 = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_qualifier2(), target);
  }

  // optional .TST.FormulaPredArgArchive param_value0 = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::param_value0(this),
        _Internal::param_value0(this).GetCachedSize(), target, stream);
  }

  // optional .TST.FormulaPredArgArchive param_value1 = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::param_value1(this),
        _Internal::param_value1(this).GetCachedSize(), target, stream);
  }

  // optional .TST.FormulaPredArgArchive param_value2 = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::param_value2(this),
        _Internal::param_value2(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.FormulaArchive formula = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::formula(this),
        _Internal::formula(this).GetCachedSize(), target, stream);
  }

  // optional bool for_conditional_style = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_for_conditional_style(), target);
  }

  // optional .TSP.UUID host_table_uid = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::host_table_uid(this),
        _Internal::host_table_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID host_column_uid = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::host_column_uid(this),
        _Internal::host_column_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID host_row_uid = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::host_row_uid(this),
        _Internal::host_row_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaPredicateArchive)
  return target;
}

size_t FormulaPredicateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.FormulaPredicateArchive)
  size_t total_size = 0;

  if (_internal_has_predicate_type()) {
    // required int32 predicate_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_predicate_type());
  }

  if (_internal_has_qualifier1()) {
    // required int32 qualifier1 = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qualifier1());
  }

  if (_internal_has_qualifier2()) {
    // required int32 qualifier2 = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qualifier2());
  }

  return total_size;
}
size_t FormulaPredicateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaPredicateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000380) ^ 0x00000380) == 0) {  // All required fields are present.
    // required int32 predicate_type = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_predicate_type());

    // required int32 qualifier1 = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qualifier1());

    // required int32 qualifier2 = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_qualifier2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TST.FormulaPredArgArchive param_value0 = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.param_value0_);
    }

    // optional .TST.FormulaPredArgArchive param_value1 = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.param_value1_);
    }

    // optional .TST.FormulaPredArgArchive param_value2 = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.param_value2_);
    }

    // optional .TSCE.FormulaArchive formula = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_);
    }

    // optional .TSP.UUID host_table_uid = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_table_uid_);
    }

    // optional .TSP.UUID host_column_uid = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_column_uid_);
    }

    // optional .TSP.UUID host_row_uid = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_row_uid_);
    }

  }
  // optional bool for_conditional_style = 8;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaPredicateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaPredicateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaPredicateArchive::GetClassData() const { return &_class_data_; }


void FormulaPredicateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaPredicateArchive*>(&to_msg);
  auto& from = static_cast<const FormulaPredicateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaPredicateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_param_value0()->::TST::FormulaPredArgArchive::MergeFrom(
          from._internal_param_value0());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_param_value1()->::TST::FormulaPredArgArchive::MergeFrom(
          from._internal_param_value1());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_param_value2()->::TST::FormulaPredArgArchive::MergeFrom(
          from._internal_param_value2());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_formula());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_host_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_host_table_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_host_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_host_column_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_host_row_uid()->::TSP::UUID::MergeFrom(
          from._internal_host_row_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.predicate_type_ = from._impl_.predicate_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.qualifier1_ = from._impl_.qualifier1_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.qualifier2_ = from._impl_.qualifier2_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.for_conditional_style_ = from._impl_.for_conditional_style_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaPredicateArchive::CopyFrom(const FormulaPredicateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaPredicateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaPredicateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_param_value0()) {
    if (!_impl_.param_value0_->IsInitialized()) return false;
  }
  if (_internal_has_param_value1()) {
    if (!_impl_.param_value1_->IsInitialized()) return false;
  }
  if (_internal_has_param_value2()) {
    if (!_impl_.param_value2_->IsInitialized()) return false;
  }
  if (_internal_has_formula()) {
    if (!_impl_.formula_->IsInitialized()) return false;
  }
  if (_internal_has_host_table_uid()) {
    if (!_impl_.host_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_host_column_uid()) {
    if (!_impl_.host_column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_host_row_uid()) {
    if (!_impl_.host_row_uid_->IsInitialized()) return false;
  }
  return true;
}

void FormulaPredicateArchive::InternalSwap(FormulaPredicateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaPredicateArchive, _impl_.for_conditional_style_)
      + sizeof(FormulaPredicateArchive::_impl_.for_conditional_style_)
      - PROTOBUF_FIELD_OFFSET(FormulaPredicateArchive, _impl_.param_value0_)>(
          reinterpret_cast<char*>(&_impl_.param_value0_),
          reinterpret_cast<char*>(&other->_impl_.param_value0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaPredicateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[84]);
}

// ===================================================================

class ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::_Internal {
 public:
  using HasBits = decltype(std::declval<ConditionalStyleSetArchive_ConditionalStyleRulePrePivot>()._impl_._has_bits_);
  static const ::TST::FormulaPredicatePrePivotArchive& predicate(const ConditionalStyleSetArchive_ConditionalStyleRulePrePivot* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_style(const ConditionalStyleSetArchive_ConditionalStyleRulePrePivot* msg);
  static void set_has_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& text_style(const ConditionalStyleSetArchive_ConditionalStyleRulePrePivot* msg);
  static void set_has_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::FormulaPredicatePrePivotArchive&
ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::_Internal::predicate(const ConditionalStyleSetArchive_ConditionalStyleRulePrePivot* msg) {
  return *msg->_impl_.predicate_;
}
const ::TSP::Reference&
ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::_Internal::cell_style(const ConditionalStyleSetArchive_ConditionalStyleRulePrePivot* msg) {
  return *msg->_impl_.cell_style_;
}
const ::TSP::Reference&
ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::_Internal::text_style(const ConditionalStyleSetArchive_ConditionalStyleRulePrePivot* msg) {
  return *msg->_impl_.text_style_;
}
void ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::clear_cell_style() {
  if (_impl_.cell_style_ != nullptr) _impl_.cell_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::clear_text_style() {
  if (_impl_.text_style_ != nullptr) _impl_.text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
}
ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot(const ConditionalStyleSetArchive_ConditionalStyleRulePrePivot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionalStyleSetArchive_ConditionalStyleRulePrePivot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_){nullptr}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_predicate()) {
    _this->_impl_.predicate_ = new ::TST::FormulaPredicatePrePivotArchive(*from._impl_.predicate_);
  }
  if (from._internal_has_cell_style()) {
    _this->_impl_.cell_style_ = new ::TSP::Reference(*from._impl_.cell_style_);
  }
  if (from._internal_has_text_style()) {
    _this->_impl_.text_style_ = new ::TSP::Reference(*from._impl_.text_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
}

inline void ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_){nullptr}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}
  };
}

ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::~ConditionalStyleSetArchive_ConditionalStyleRulePrePivot() {
  // @@protoc_insertion_point(destructor:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.predicate_;
  if (this != internal_default_instance()) delete _impl_.cell_style_;
  if (this != internal_default_instance()) delete _impl_.text_style_;
}

void ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.predicate_ != nullptr);
      _impl_.predicate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_style_ != nullptr);
      _impl_.cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.text_style_ != nullptr);
      _impl_.text_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.FormulaPredicatePrePivotArchive predicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference cell_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference text_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.FormulaPredicatePrePivotArchive predicate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::predicate(this),
        _Internal::predicate(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference cell_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_style(this),
        _Internal::cell_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference text_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::text_style(this),
        _Internal::text_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
  return target;
}

size_t ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
  size_t total_size = 0;

  if (_internal_has_predicate()) {
    // required .TST.FormulaPredicatePrePivotArchive predicate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.predicate_);
  }

  if (_internal_has_cell_style()) {
    // required .TSP.Reference cell_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_style_);
  }

  if (_internal_has_text_style()) {
    // required .TSP.Reference text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_style_);
  }

  return total_size;
}
size_t ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.FormulaPredicatePrePivotArchive predicate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.predicate_);

    // required .TSP.Reference cell_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_style_);

    // required .TSP.Reference text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::GetClassData() const { return &_class_data_; }


void ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionalStyleSetArchive_ConditionalStyleRulePrePivot*>(&to_msg);
  auto& from = static_cast<const ConditionalStyleSetArchive_ConditionalStyleRulePrePivot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_predicate()->::TST::FormulaPredicatePrePivotArchive::MergeFrom(
          from._internal_predicate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_style()->::TSP::Reference::MergeFrom(
          from._internal_cell_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_text_style()->::TSP::Reference::MergeFrom(
          from._internal_text_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::CopyFrom(const ConditionalStyleSetArchive_ConditionalStyleRulePrePivot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_predicate()) {
    if (!_impl_.predicate_->IsInitialized()) return false;
  }
  if (_internal_has_cell_style()) {
    if (!_impl_.cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_text_style()) {
    if (!_impl_.text_style_->IsInitialized()) return false;
  }
  return true;
}

void ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::InternalSwap(ConditionalStyleSetArchive_ConditionalStyleRulePrePivot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRulePrePivot, _impl_.text_style_)
      + sizeof(ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::_impl_.text_style_)
      - PROTOBUF_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRulePrePivot, _impl_.predicate_)>(
          reinterpret_cast<char*>(&_impl_.predicate_),
          reinterpret_cast<char*>(&other->_impl_.predicate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionalStyleSetArchive_ConditionalStyleRulePrePivot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[85]);
}

// ===================================================================

class ConditionalStyleSetArchive_ConditionalStyleRule::_Internal {
 public:
  using HasBits = decltype(std::declval<ConditionalStyleSetArchive_ConditionalStyleRule>()._impl_._has_bits_);
  static const ::TST::FormulaPredicateArchive& predicate(const ConditionalStyleSetArchive_ConditionalStyleRule* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_style(const ConditionalStyleSetArchive_ConditionalStyleRule* msg);
  static void set_has_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& text_style(const ConditionalStyleSetArchive_ConditionalStyleRule* msg);
  static void set_has_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TST::FormulaPredicateArchive&
ConditionalStyleSetArchive_ConditionalStyleRule::_Internal::predicate(const ConditionalStyleSetArchive_ConditionalStyleRule* msg) {
  return *msg->_impl_.predicate_;
}
const ::TSP::Reference&
ConditionalStyleSetArchive_ConditionalStyleRule::_Internal::cell_style(const ConditionalStyleSetArchive_ConditionalStyleRule* msg) {
  return *msg->_impl_.cell_style_;
}
const ::TSP::Reference&
ConditionalStyleSetArchive_ConditionalStyleRule::_Internal::text_style(const ConditionalStyleSetArchive_ConditionalStyleRule* msg) {
  return *msg->_impl_.text_style_;
}
void ConditionalStyleSetArchive_ConditionalStyleRule::clear_cell_style() {
  if (_impl_.cell_style_ != nullptr) _impl_.cell_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ConditionalStyleSetArchive_ConditionalStyleRule::clear_text_style() {
  if (_impl_.text_style_ != nullptr) _impl_.text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ConditionalStyleSetArchive_ConditionalStyleRule::ConditionalStyleSetArchive_ConditionalStyleRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
}
ConditionalStyleSetArchive_ConditionalStyleRule::ConditionalStyleSetArchive_ConditionalStyleRule(const ConditionalStyleSetArchive_ConditionalStyleRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionalStyleSetArchive_ConditionalStyleRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_){nullptr}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_predicate()) {
    _this->_impl_.predicate_ = new ::TST::FormulaPredicateArchive(*from._impl_.predicate_);
  }
  if (from._internal_has_cell_style()) {
    _this->_impl_.cell_style_ = new ::TSP::Reference(*from._impl_.cell_style_);
  }
  if (from._internal_has_text_style()) {
    _this->_impl_.text_style_ = new ::TSP::Reference(*from._impl_.text_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
}

inline void ConditionalStyleSetArchive_ConditionalStyleRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predicate_){nullptr}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}
  };
}

ConditionalStyleSetArchive_ConditionalStyleRule::~ConditionalStyleSetArchive_ConditionalStyleRule() {
  // @@protoc_insertion_point(destructor:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionalStyleSetArchive_ConditionalStyleRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.predicate_;
  if (this != internal_default_instance()) delete _impl_.cell_style_;
  if (this != internal_default_instance()) delete _impl_.text_style_;
}

void ConditionalStyleSetArchive_ConditionalStyleRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionalStyleSetArchive_ConditionalStyleRule::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.predicate_ != nullptr);
      _impl_.predicate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_style_ != nullptr);
      _impl_.cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.text_style_ != nullptr);
      _impl_.text_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionalStyleSetArchive_ConditionalStyleRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.FormulaPredicateArchive predicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference cell_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference text_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionalStyleSetArchive_ConditionalStyleRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.FormulaPredicateArchive predicate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::predicate(this),
        _Internal::predicate(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference cell_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_style(this),
        _Internal::cell_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference text_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::text_style(this),
        _Internal::text_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  return target;
}

size_t ConditionalStyleSetArchive_ConditionalStyleRule::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  size_t total_size = 0;

  if (_internal_has_cell_style()) {
    // required .TSP.Reference cell_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_style_);
  }

  if (_internal_has_text_style()) {
    // required .TSP.Reference text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_style_);
  }

  return total_size;
}
size_t ConditionalStyleSetArchive_ConditionalStyleRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TSP.Reference cell_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_style_);

    // required .TSP.Reference text_style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.FormulaPredicateArchive predicate = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.predicate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionalStyleSetArchive_ConditionalStyleRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionalStyleSetArchive_ConditionalStyleRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionalStyleSetArchive_ConditionalStyleRule::GetClassData() const { return &_class_data_; }


void ConditionalStyleSetArchive_ConditionalStyleRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionalStyleSetArchive_ConditionalStyleRule*>(&to_msg);
  auto& from = static_cast<const ConditionalStyleSetArchive_ConditionalStyleRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_predicate()->::TST::FormulaPredicateArchive::MergeFrom(
          from._internal_predicate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_style()->::TSP::Reference::MergeFrom(
          from._internal_cell_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_text_style()->::TSP::Reference::MergeFrom(
          from._internal_text_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionalStyleSetArchive_ConditionalStyleRule::CopyFrom(const ConditionalStyleSetArchive_ConditionalStyleRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConditionalStyleSetArchive.ConditionalStyleRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalStyleSetArchive_ConditionalStyleRule::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_predicate()) {
    if (!_impl_.predicate_->IsInitialized()) return false;
  }
  if (_internal_has_cell_style()) {
    if (!_impl_.cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_text_style()) {
    if (!_impl_.text_style_->IsInitialized()) return false;
  }
  return true;
}

void ConditionalStyleSetArchive_ConditionalStyleRule::InternalSwap(ConditionalStyleSetArchive_ConditionalStyleRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRule, _impl_.text_style_)
      + sizeof(ConditionalStyleSetArchive_ConditionalStyleRule::_impl_.text_style_)
      - PROTOBUF_FIELD_OFFSET(ConditionalStyleSetArchive_ConditionalStyleRule, _impl_.predicate_)>(
          reinterpret_cast<char*>(&_impl_.predicate_),
          reinterpret_cast<char*>(&other->_impl_.predicate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionalStyleSetArchive_ConditionalStyleRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[86]);
}

// ===================================================================

class ConditionalStyleSetArchive_ConditionalStyleRules::_Internal {
 public:
};

ConditionalStyleSetArchive_ConditionalStyleRules::ConditionalStyleSetArchive_ConditionalStyleRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ConditionalStyleSetArchive.ConditionalStyleRules)
}
ConditionalStyleSetArchive_ConditionalStyleRules::ConditionalStyleSetArchive_ConditionalStyleRules(const ConditionalStyleSetArchive_ConditionalStyleRules& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionalStyleSetArchive_ConditionalStyleRules* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_){from._impl_.rule_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ConditionalStyleSetArchive.ConditionalStyleRules)
}

inline void ConditionalStyleSetArchive_ConditionalStyleRules::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConditionalStyleSetArchive_ConditionalStyleRules::~ConditionalStyleSetArchive_ConditionalStyleRules() {
  // @@protoc_insertion_point(destructor:TST.ConditionalStyleSetArchive.ConditionalStyleRules)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionalStyleSetArchive_ConditionalStyleRules::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rule_.~RepeatedPtrField();
}

void ConditionalStyleSetArchive_ConditionalStyleRules::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionalStyleSetArchive_ConditionalStyleRules::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConditionalStyleSetArchive.ConditionalStyleRules)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rule_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionalStyleSetArchive_ConditionalStyleRules::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionalStyleSetArchive_ConditionalStyleRules::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConditionalStyleSetArchive.ConditionalStyleRules)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rule = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rule_size()); i < n; i++) {
    const auto& repfield = this->_internal_rule(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConditionalStyleSetArchive.ConditionalStyleRules)
  return target;
}

size_t ConditionalStyleSetArchive_ConditionalStyleRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConditionalStyleSetArchive.ConditionalStyleRules)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRule rule = 1;
  total_size += 1UL * this->_internal_rule_size();
  for (const auto& msg : this->_impl_.rule_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionalStyleSetArchive_ConditionalStyleRules::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionalStyleSetArchive_ConditionalStyleRules::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionalStyleSetArchive_ConditionalStyleRules::GetClassData() const { return &_class_data_; }


void ConditionalStyleSetArchive_ConditionalStyleRules::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionalStyleSetArchive_ConditionalStyleRules*>(&to_msg);
  auto& from = static_cast<const ConditionalStyleSetArchive_ConditionalStyleRules&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ConditionalStyleSetArchive.ConditionalStyleRules)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rule_.MergeFrom(from._impl_.rule_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionalStyleSetArchive_ConditionalStyleRules::CopyFrom(const ConditionalStyleSetArchive_ConditionalStyleRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConditionalStyleSetArchive.ConditionalStyleRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalStyleSetArchive_ConditionalStyleRules::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rule_))
    return false;
  return true;
}

void ConditionalStyleSetArchive_ConditionalStyleRules::InternalSwap(ConditionalStyleSetArchive_ConditionalStyleRules* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rule_.InternalSwap(&other->_impl_.rule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionalStyleSetArchive_ConditionalStyleRules::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[87]);
}

// ===================================================================

class ConditionalStyleSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConditionalStyleSetArchive>()._impl_._has_bits_);
  static void set_has_rulecount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::ConditionalStyleSetArchive_ConditionalStyleRules& rules(const ConditionalStyleSetArchive* msg);
  static void set_has_rules(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TST::ConditionalStyleSetArchive_ConditionalStyleRules&
ConditionalStyleSetArchive::_Internal::rules(const ConditionalStyleSetArchive* msg) {
  return *msg->_impl_.rules_;
}
ConditionalStyleSetArchive::ConditionalStyleSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ConditionalStyleSetArchive)
}
ConditionalStyleSetArchive::ConditionalStyleSetArchive(const ConditionalStyleSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConditionalStyleSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rules_prepivot_){from._impl_.rules_prepivot_}
    , decltype(_impl_.rules_){nullptr}
    , decltype(_impl_.rulecount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rules()) {
    _this->_impl_.rules_ = new ::TST::ConditionalStyleSetArchive_ConditionalStyleRules(*from._impl_.rules_);
  }
  _this->_impl_.rulecount_ = from._impl_.rulecount_;
  // @@protoc_insertion_point(copy_constructor:TST.ConditionalStyleSetArchive)
}

inline void ConditionalStyleSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rules_prepivot_){arena}
    , decltype(_impl_.rules_){nullptr}
    , decltype(_impl_.rulecount_){0u}
  };
}

ConditionalStyleSetArchive::~ConditionalStyleSetArchive() {
  // @@protoc_insertion_point(destructor:TST.ConditionalStyleSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConditionalStyleSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rules_prepivot_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.rules_;
}

void ConditionalStyleSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConditionalStyleSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ConditionalStyleSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rules_prepivot_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.rules_ != nullptr);
    _impl_.rules_->Clear();
  }
  _impl_.rulecount_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionalStyleSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 ruleCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rulecount(&has_bits);
          _impl_.rulecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot rules_prepivot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules_prepivot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ConditionalStyleSetArchive.ConditionalStyleRules rules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rules(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConditionalStyleSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ConditionalStyleSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 ruleCount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rulecount(), target);
  }

  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot rules_prepivot = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rules_prepivot_size()); i < n; i++) {
    const auto& repfield = this->_internal_rules_prepivot(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TST.ConditionalStyleSetArchive.ConditionalStyleRules rules = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rules(this),
        _Internal::rules(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ConditionalStyleSetArchive)
  return target;
}

size_t ConditionalStyleSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ConditionalStyleSetArchive)
  size_t total_size = 0;

  // required uint32 ruleCount = 1;
  if (_internal_has_rulecount()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rulecount());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot rules_prepivot = 2;
  total_size += 1UL * this->_internal_rules_prepivot_size();
  for (const auto& msg : this->_impl_.rules_prepivot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.ConditionalStyleSetArchive.ConditionalStyleRules rules = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rules_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConditionalStyleSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConditionalStyleSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConditionalStyleSetArchive::GetClassData() const { return &_class_data_; }


void ConditionalStyleSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConditionalStyleSetArchive*>(&to_msg);
  auto& from = static_cast<const ConditionalStyleSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ConditionalStyleSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rules_prepivot_.MergeFrom(from._impl_.rules_prepivot_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rules()->::TST::ConditionalStyleSetArchive_ConditionalStyleRules::MergeFrom(
          from._internal_rules());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rulecount_ = from._impl_.rulecount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConditionalStyleSetArchive::CopyFrom(const ConditionalStyleSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ConditionalStyleSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalStyleSetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rules_prepivot_))
    return false;
  if (_internal_has_rules()) {
    if (!_impl_.rules_->IsInitialized()) return false;
  }
  return true;
}

void ConditionalStyleSetArchive::InternalSwap(ConditionalStyleSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rules_prepivot_.InternalSwap(&other->_impl_.rules_prepivot_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConditionalStyleSetArchive, _impl_.rulecount_)
      + sizeof(ConditionalStyleSetArchive::_impl_.rulecount_)
      - PROTOBUF_FIELD_OFFSET(ConditionalStyleSetArchive, _impl_.rules_)>(
          reinterpret_cast<char*>(&_impl_.rules_),
          reinterpret_cast<char*>(&other->_impl_.rules_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionalStyleSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[88]);
}

// ===================================================================

class FilterSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterSetArchive>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_needs_formula_rewrite_for_import(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FilterSetArchive::FilterSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FilterSetArchive)
}
FilterSetArchive::FilterSetArchive(const FilterSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FilterSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_rules_prepivot_){from._impl_.filter_rules_prepivot_}
    , decltype(_impl_.filter_offsets_){from._impl_.filter_offsets_}
    , decltype(_impl_.filter_enabled_){from._impl_.filter_enabled_}
    , decltype(_impl_.filter_rules_){from._impl_.filter_rules_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.needs_formula_rewrite_for_import_){}
    , decltype(_impl_.is_enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_enabled_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_enabled_));
  // @@protoc_insertion_point(copy_constructor:TST.FilterSetArchive)
}

inline void FilterSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filter_rules_prepivot_){arena}
    , decltype(_impl_.filter_offsets_){arena}
    , decltype(_impl_.filter_enabled_){arena}
    , decltype(_impl_.filter_rules_){arena}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.needs_formula_rewrite_for_import_){false}
    , decltype(_impl_.is_enabled_){true}
  };
}

FilterSetArchive::~FilterSetArchive() {
  // @@protoc_insertion_point(destructor:TST.FilterSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilterSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filter_rules_prepivot_.~RepeatedPtrField();
  _impl_.filter_offsets_.~RepeatedField();
  _impl_.filter_enabled_.~RepeatedField();
  _impl_.filter_rules_.~RepeatedPtrField();
}

void FilterSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FilterSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FilterSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filter_rules_prepivot_.Clear();
  _impl_.filter_offsets_.Clear();
  _impl_.filter_enabled_.Clear();
  _impl_.filter_rules_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.needs_formula_rewrite_for_import_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.needs_formula_rewrite_for_import_));
    _impl_.is_enabled_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::FilterSetArchive_FilterSetType_IsValid(val))) {
            _internal_set_type(static_cast<::TST::FilterSetArchive_FilterSetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_enabled = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_enabled(&has_bits);
          _impl_.is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.FilterRulePrePivotArchive filter_rules_prepivot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter_rules_prepivot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_formula_rewrite_for_import = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_needs_formula_rewrite_for_import(&has_bits);
          _impl_.needs_formula_rewrite_for_import_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 filter_offsets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_filter_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_filter_offsets(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool filter_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_filter_enabled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_filter_enabled(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.FilterRuleArchive filter_rules = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilterSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FilterSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bool is_enabled = 2 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_enabled(), target);
  }

  // repeated .TST.FilterRulePrePivotArchive filter_rules_prepivot = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filter_rules_prepivot_size()); i < n; i++) {
    const auto& repfield = this->_internal_filter_rules_prepivot(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool needs_formula_rewrite_for_import = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_needs_formula_rewrite_for_import(), target);
  }

  // repeated uint32 filter_offsets = 5;
  for (int i = 0, n = this->_internal_filter_offsets_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_filter_offsets(i), target);
  }

  // repeated bool filter_enabled = 6;
  for (int i = 0, n = this->_internal_filter_enabled_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_filter_enabled(i), target);
  }

  // repeated .TST.FilterRuleArchive filter_rules = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_filter_rules_size()); i < n; i++) {
    const auto& repfield = this->_internal_filter_rules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FilterSetArchive)
  return target;
}

size_t FilterSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FilterSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.FilterRulePrePivotArchive filter_rules_prepivot = 3;
  total_size += 1UL * this->_internal_filter_rules_prepivot_size();
  for (const auto& msg : this->_impl_.filter_rules_prepivot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 filter_offsets = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.filter_offsets_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_filter_offsets_size());
    total_size += data_size;
  }

  // repeated bool filter_enabled = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_filter_enabled_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_filter_enabled_size());
    total_size += data_size;
  }

  // repeated .TST.FilterRuleArchive filter_rules = 7;
  total_size += 1UL * this->_internal_filter_rules_size();
  for (const auto& msg : this->_impl_.filter_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TST.FilterSetArchive.FilterSetType type = 1 [default = FilterSetArchiveTypeAll];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool needs_formula_rewrite_for_import = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_enabled = 2 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FilterSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterSetArchive::GetClassData() const { return &_class_data_; }


void FilterSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FilterSetArchive*>(&to_msg);
  auto& from = static_cast<const FilterSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FilterSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.filter_rules_prepivot_.MergeFrom(from._impl_.filter_rules_prepivot_);
  _this->_impl_.filter_offsets_.MergeFrom(from._impl_.filter_offsets_);
  _this->_impl_.filter_enabled_.MergeFrom(from._impl_.filter_enabled_);
  _this->_impl_.filter_rules_.MergeFrom(from._impl_.filter_rules_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.needs_formula_rewrite_for_import_ = from._impl_.needs_formula_rewrite_for_import_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_enabled_ = from._impl_.is_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterSetArchive::CopyFrom(const FilterSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FilterSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.filter_rules_prepivot_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.filter_rules_))
    return false;
  return true;
}

void FilterSetArchive::InternalSwap(FilterSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.filter_rules_prepivot_.InternalSwap(&other->_impl_.filter_rules_prepivot_);
  _impl_.filter_offsets_.InternalSwap(&other->_impl_.filter_offsets_);
  _impl_.filter_enabled_.InternalSwap(&other->_impl_.filter_enabled_);
  _impl_.filter_rules_.InternalSwap(&other->_impl_.filter_rules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterSetArchive, _impl_.needs_formula_rewrite_for_import_)
      + sizeof(FilterSetArchive::_impl_.needs_formula_rewrite_for_import_)
      - PROTOBUF_FIELD_OFFSET(FilterSetArchive, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
  swap(_impl_.is_enabled_, other->_impl_.is_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[89]);
}

// ===================================================================

class UniqueIndexArchive_UniqueIndexEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UniqueIndexArchive_UniqueIndexEntryArchive>()._impl_._has_bits_);
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void UniqueIndexArchive_UniqueIndexEntryArchive::clear_row_uids() {
  _impl_.row_uids_.Clear();
}
UniqueIndexArchive_UniqueIndexEntryArchive::UniqueIndexArchive_UniqueIndexEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.UniqueIndexArchive.UniqueIndexEntryArchive)
}
UniqueIndexArchive_UniqueIndexEntryArchive::UniqueIndexArchive_UniqueIndexEntryArchive(const UniqueIndexArchive_UniqueIndexEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UniqueIndexArchive_UniqueIndexEntryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_uids_){from._impl_.row_uids_}
    , decltype(_impl_.string_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TST.UniqueIndexArchive.UniqueIndexEntryArchive)
}

inline void UniqueIndexArchive_UniqueIndexEntryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_uids_){arena}
    , decltype(_impl_.string_value_){}
  };
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UniqueIndexArchive_UniqueIndexEntryArchive::~UniqueIndexArchive_UniqueIndexEntryArchive() {
  // @@protoc_insertion_point(destructor:TST.UniqueIndexArchive.UniqueIndexEntryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UniqueIndexArchive_UniqueIndexEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_uids_.~RepeatedPtrField();
  _impl_.string_value_.Destroy();
}

void UniqueIndexArchive_UniqueIndexEntryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UniqueIndexArchive_UniqueIndexEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.UniqueIndexArchive.UniqueIndexEntryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_uids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.string_value_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniqueIndexArchive_UniqueIndexEntryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.UniqueIndexArchive.UniqueIndexEntryArchive.string_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UniqueIndexArchive_UniqueIndexEntryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.UniqueIndexArchive.UniqueIndexEntryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string string_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.UniqueIndexArchive.UniqueIndexEntryArchive.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // repeated .TSP.UUID row_uids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.UniqueIndexArchive.UniqueIndexEntryArchive)
  return target;
}

size_t UniqueIndexArchive_UniqueIndexEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.UniqueIndexArchive.UniqueIndexEntryArchive)
  size_t total_size = 0;

  // required string string_value = 1;
  if (_internal_has_string_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_value());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 2;
  total_size += 1UL * this->_internal_row_uids_size();
  for (const auto& msg : this->_impl_.row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UniqueIndexArchive_UniqueIndexEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UniqueIndexArchive_UniqueIndexEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UniqueIndexArchive_UniqueIndexEntryArchive::GetClassData() const { return &_class_data_; }


void UniqueIndexArchive_UniqueIndexEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UniqueIndexArchive_UniqueIndexEntryArchive*>(&to_msg);
  auto& from = static_cast<const UniqueIndexArchive_UniqueIndexEntryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.UniqueIndexArchive.UniqueIndexEntryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_uids_.MergeFrom(from._impl_.row_uids_);
  if (from._internal_has_string_value()) {
    _this->_internal_set_string_value(from._internal_string_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UniqueIndexArchive_UniqueIndexEntryArchive::CopyFrom(const UniqueIndexArchive_UniqueIndexEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.UniqueIndexArchive.UniqueIndexEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueIndexArchive_UniqueIndexEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_uids_))
    return false;
  return true;
}

void UniqueIndexArchive_UniqueIndexEntryArchive::InternalSwap(UniqueIndexArchive_UniqueIndexEntryArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_uids_.InternalSwap(&other->_impl_.row_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_value_, lhs_arena,
      &other->_impl_.string_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UniqueIndexArchive_UniqueIndexEntryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[90]);
}

// ===================================================================

class UniqueIndexArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UniqueIndexArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& column_uid(const UniqueIndexArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UniqueIndexArchive::_Internal::column_uid(const UniqueIndexArchive* msg) {
  return *msg->_impl_.column_uid_;
}
void UniqueIndexArchive::clear_column_uid() {
  if (_impl_.column_uid_ != nullptr) _impl_.column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UniqueIndexArchive::UniqueIndexArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.UniqueIndexArchive)
}
UniqueIndexArchive::UniqueIndexArchive(const UniqueIndexArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UniqueIndexArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_entries_){from._impl_.unique_entries_}
    , decltype(_impl_.column_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    _this->_impl_.column_uid_ = new ::TSP::UUID(*from._impl_.column_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.UniqueIndexArchive)
}

inline void UniqueIndexArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_entries_){arena}
    , decltype(_impl_.column_uid_){nullptr}
  };
}

UniqueIndexArchive::~UniqueIndexArchive() {
  // @@protoc_insertion_point(destructor:TST.UniqueIndexArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UniqueIndexArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unique_entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.column_uid_;
}

void UniqueIndexArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UniqueIndexArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.UniqueIndexArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unique_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.column_uid_ != nullptr);
    _impl_.column_uid_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniqueIndexArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.UniqueIndexArchive.UniqueIndexEntryArchive unique_entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unique_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UniqueIndexArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.UniqueIndexArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column_uid(this),
        _Internal::column_uid(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.UniqueIndexArchive.UniqueIndexEntryArchive unique_entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unique_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_unique_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.UniqueIndexArchive)
  return target;
}

size_t UniqueIndexArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.UniqueIndexArchive)
  size_t total_size = 0;

  // required .TSP.UUID column_uid = 1;
  if (_internal_has_column_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.UniqueIndexArchive.UniqueIndexEntryArchive unique_entries = 2;
  total_size += 1UL * this->_internal_unique_entries_size();
  for (const auto& msg : this->_impl_.unique_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UniqueIndexArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UniqueIndexArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UniqueIndexArchive::GetClassData() const { return &_class_data_; }


void UniqueIndexArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UniqueIndexArchive*>(&to_msg);
  auto& from = static_cast<const UniqueIndexArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.UniqueIndexArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unique_entries_.MergeFrom(from._impl_.unique_entries_);
  if (from._internal_has_column_uid()) {
    _this->_internal_mutable_column_uid()->::TSP::UUID::MergeFrom(
        from._internal_column_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UniqueIndexArchive::CopyFrom(const UniqueIndexArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.UniqueIndexArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueIndexArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.unique_entries_))
    return false;
  if (_internal_has_column_uid()) {
    if (!_impl_.column_uid_->IsInitialized()) return false;
  }
  return true;
}

void UniqueIndexArchive::InternalSwap(UniqueIndexArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.unique_entries_.InternalSwap(&other->_impl_.unique_entries_);
  swap(_impl_.column_uid_, other->_impl_.column_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniqueIndexArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[91]);
}

// ===================================================================

class HiddenStateExtentArchive_RowOrColumnState::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStateExtentArchive_RowOrColumnState>()._impl_._has_bits_);
  static const ::TSP::UUID& row_or_column_uid(const HiddenStateExtentArchive_RowOrColumnState* msg);
  static void set_has_row_or_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pivot_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
HiddenStateExtentArchive_RowOrColumnState::_Internal::row_or_column_uid(const HiddenStateExtentArchive_RowOrColumnState* msg) {
  return *msg->_impl_.row_or_column_uid_;
}
void HiddenStateExtentArchive_RowOrColumnState::clear_row_or_column_uid() {
  if (_impl_.row_or_column_uid_ != nullptr) _impl_.row_or_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HiddenStateExtentArchive_RowOrColumnState::HiddenStateExtentArchive_RowOrColumnState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStateExtentArchive.RowOrColumnState)
}
HiddenStateExtentArchive_RowOrColumnState::HiddenStateExtentArchive_RowOrColumnState(const HiddenStateExtentArchive_RowOrColumnState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HiddenStateExtentArchive_RowOrColumnState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_or_column_uid_){nullptr}
    , decltype(_impl_.user_hidden_){}
    , decltype(_impl_.filtered_){}
    , decltype(_impl_.pivot_hidden_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_row_or_column_uid()) {
    _this->_impl_.row_or_column_uid_ = new ::TSP::UUID(*from._impl_.row_or_column_uid_);
  }
  ::memcpy(&_impl_.user_hidden_, &from._impl_.user_hidden_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pivot_hidden_) -
    reinterpret_cast<char*>(&_impl_.user_hidden_)) + sizeof(_impl_.pivot_hidden_));
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStateExtentArchive.RowOrColumnState)
}

inline void HiddenStateExtentArchive_RowOrColumnState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_or_column_uid_){nullptr}
    , decltype(_impl_.user_hidden_){false}
    , decltype(_impl_.filtered_){false}
    , decltype(_impl_.pivot_hidden_){false}
  };
}

HiddenStateExtentArchive_RowOrColumnState::~HiddenStateExtentArchive_RowOrColumnState() {
  // @@protoc_insertion_point(destructor:TST.HiddenStateExtentArchive.RowOrColumnState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HiddenStateExtentArchive_RowOrColumnState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.row_or_column_uid_;
}

void HiddenStateExtentArchive_RowOrColumnState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HiddenStateExtentArchive_RowOrColumnState::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.row_or_column_uid_ != nullptr);
    _impl_.row_or_column_uid_->Clear();
  }
  ::memset(&_impl_.user_hidden_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pivot_hidden_) -
      reinterpret_cast<char*>(&_impl_.user_hidden_)) + sizeof(_impl_.pivot_hidden_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStateExtentArchive_RowOrColumnState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID row_or_column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_or_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool user_hidden = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_hidden(&has_bits);
          _impl_.user_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool filtered = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_filtered(&has_bits);
          _impl_.filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool pivot_hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_pivot_hidden(&has_bits);
          _impl_.pivot_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HiddenStateExtentArchive_RowOrColumnState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID row_or_column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::row_or_column_uid(this),
        _Internal::row_or_column_uid(this).GetCachedSize(), target, stream);
  }

  // optional bool user_hidden = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_user_hidden(), target);
  }

  // optional bool filtered = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_filtered(), target);
  }

  // optional bool pivot_hidden = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_pivot_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStateExtentArchive.RowOrColumnState)
  return target;
}

size_t HiddenStateExtentArchive_RowOrColumnState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  size_t total_size = 0;

  // required .TSP.UUID row_or_column_uid = 1;
  if (_internal_has_row_or_column_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.row_or_column_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bool user_hidden = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool filtered = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool pivot_hidden = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStateExtentArchive_RowOrColumnState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HiddenStateExtentArchive_RowOrColumnState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStateExtentArchive_RowOrColumnState::GetClassData() const { return &_class_data_; }


void HiddenStateExtentArchive_RowOrColumnState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HiddenStateExtentArchive_RowOrColumnState*>(&to_msg);
  auto& from = static_cast<const HiddenStateExtentArchive_RowOrColumnState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_row_or_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_row_or_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.user_hidden_ = from._impl_.user_hidden_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.filtered_ = from._impl_.filtered_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pivot_hidden_ = from._impl_.pivot_hidden_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStateExtentArchive_RowOrColumnState::CopyFrom(const HiddenStateExtentArchive_RowOrColumnState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStateExtentArchive.RowOrColumnState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStateExtentArchive_RowOrColumnState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_row_or_column_uid()) {
    if (!_impl_.row_or_column_uid_->IsInitialized()) return false;
  }
  return true;
}

void HiddenStateExtentArchive_RowOrColumnState::InternalSwap(HiddenStateExtentArchive_RowOrColumnState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HiddenStateExtentArchive_RowOrColumnState, _impl_.pivot_hidden_)
      + sizeof(HiddenStateExtentArchive_RowOrColumnState::_impl_.pivot_hidden_)
      - PROTOBUF_FIELD_OFFSET(HiddenStateExtentArchive_RowOrColumnState, _impl_.row_or_column_uid_)>(
          reinterpret_cast<char*>(&_impl_.row_or_column_uid_),
          reinterpret_cast<char*>(&other->_impl_.row_or_column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStateExtentArchive_RowOrColumnState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[92]);
}

// ===================================================================

class HiddenStateExtentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStateExtentArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& hidden_state_extent_uid(const HiddenStateExtentArchive* msg);
  static void set_has_hidden_state_extent_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_row_or_column_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_needs_to_update_filter_set_for_import(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& filter_set(const HiddenStateExtentArchive* msg);
  static void set_has_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::IndexSetArchive& summary_pivot_hidden_indexes(const HiddenStateExtentArchive* msg);
  static void set_has_summary_pivot_hidden_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::IndexSetArchive& summary_filtered_indexes(const HiddenStateExtentArchive* msg);
  static void set_has_summary_filtered_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000011) ^ 0x00000011) != 0;
  }
};

const ::TSP::UUID&
HiddenStateExtentArchive::_Internal::hidden_state_extent_uid(const HiddenStateExtentArchive* msg) {
  return *msg->_impl_.hidden_state_extent_uid_;
}
const ::TSP::Reference&
HiddenStateExtentArchive::_Internal::filter_set(const HiddenStateExtentArchive* msg) {
  return *msg->_impl_.filter_set_;
}
const ::TSCE::IndexSetArchive&
HiddenStateExtentArchive::_Internal::summary_pivot_hidden_indexes(const HiddenStateExtentArchive* msg) {
  return *msg->_impl_.summary_pivot_hidden_indexes_;
}
const ::TSCE::IndexSetArchive&
HiddenStateExtentArchive::_Internal::summary_filtered_indexes(const HiddenStateExtentArchive* msg) {
  return *msg->_impl_.summary_filtered_indexes_;
}
void HiddenStateExtentArchive::clear_hidden_state_extent_uid() {
  if (_impl_.hidden_state_extent_uid_ != nullptr) _impl_.hidden_state_extent_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HiddenStateExtentArchive::clear_threshold_value() {
  _impl_.threshold_value_.Clear();
}
void HiddenStateExtentArchive::clear_collapsed_group_uids() {
  _impl_.collapsed_group_uids_.Clear();
}
void HiddenStateExtentArchive::clear_filter_set() {
  if (_impl_.filter_set_ != nullptr) _impl_.filter_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void HiddenStateExtentArchive::clear_summary_pivot_hidden_indexes() {
  if (_impl_.summary_pivot_hidden_indexes_ != nullptr) _impl_.summary_pivot_hidden_indexes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void HiddenStateExtentArchive::clear_summary_filtered_indexes() {
  if (_impl_.summary_filtered_indexes_ != nullptr) _impl_.summary_filtered_indexes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
HiddenStateExtentArchive::HiddenStateExtentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStateExtentArchive)
}
HiddenStateExtentArchive::HiddenStateExtentArchive(const HiddenStateExtentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HiddenStateExtentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_hidden_states_){from._impl_.base_hidden_states_}
    , decltype(_impl_.threshold_value_){from._impl_.threshold_value_}
    , decltype(_impl_.collapsed_group_uids_){from._impl_.collapsed_group_uids_}
    , decltype(_impl_.unique_indexes_){from._impl_.unique_indexes_}
    , decltype(_impl_.summary_hidden_states_){from._impl_.summary_hidden_states_}
    , decltype(_impl_.hidden_state_extent_uid_){nullptr}
    , decltype(_impl_.filter_set_){nullptr}
    , decltype(_impl_.summary_pivot_hidden_indexes_){nullptr}
    , decltype(_impl_.summary_filtered_indexes_){nullptr}
    , decltype(_impl_.row_or_column_direction_){}
    , decltype(_impl_.needs_to_update_filter_set_for_import_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hidden_state_extent_uid()) {
    _this->_impl_.hidden_state_extent_uid_ = new ::TSP::UUID(*from._impl_.hidden_state_extent_uid_);
  }
  if (from._internal_has_filter_set()) {
    _this->_impl_.filter_set_ = new ::TSP::Reference(*from._impl_.filter_set_);
  }
  if (from._internal_has_summary_pivot_hidden_indexes()) {
    _this->_impl_.summary_pivot_hidden_indexes_ = new ::TSCE::IndexSetArchive(*from._impl_.summary_pivot_hidden_indexes_);
  }
  if (from._internal_has_summary_filtered_indexes()) {
    _this->_impl_.summary_filtered_indexes_ = new ::TSCE::IndexSetArchive(*from._impl_.summary_filtered_indexes_);
  }
  ::memcpy(&_impl_.row_or_column_direction_, &from._impl_.row_or_column_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.needs_to_update_filter_set_for_import_) -
    reinterpret_cast<char*>(&_impl_.row_or_column_direction_)) + sizeof(_impl_.needs_to_update_filter_set_for_import_));
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStateExtentArchive)
}

inline void HiddenStateExtentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_hidden_states_){arena}
    , decltype(_impl_.threshold_value_){arena}
    , decltype(_impl_.collapsed_group_uids_){arena}
    , decltype(_impl_.unique_indexes_){arena}
    , decltype(_impl_.summary_hidden_states_){arena}
    , decltype(_impl_.hidden_state_extent_uid_){nullptr}
    , decltype(_impl_.filter_set_){nullptr}
    , decltype(_impl_.summary_pivot_hidden_indexes_){nullptr}
    , decltype(_impl_.summary_filtered_indexes_){nullptr}
    , decltype(_impl_.row_or_column_direction_){0}
    , decltype(_impl_.needs_to_update_filter_set_for_import_){false}
  };
}

HiddenStateExtentArchive::~HiddenStateExtentArchive() {
  // @@protoc_insertion_point(destructor:TST.HiddenStateExtentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HiddenStateExtentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.base_hidden_states_.~RepeatedPtrField();
  _impl_.threshold_value_.~RepeatedPtrField();
  _impl_.collapsed_group_uids_.~RepeatedPtrField();
  _impl_.unique_indexes_.~RepeatedPtrField();
  _impl_.summary_hidden_states_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.hidden_state_extent_uid_;
  if (this != internal_default_instance()) delete _impl_.filter_set_;
  if (this != internal_default_instance()) delete _impl_.summary_pivot_hidden_indexes_;
  if (this != internal_default_instance()) delete _impl_.summary_filtered_indexes_;
}

void HiddenStateExtentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HiddenStateExtentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStateExtentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.base_hidden_states_.Clear();
  _impl_.threshold_value_.Clear();
  _impl_.collapsed_group_uids_.Clear();
  _impl_.unique_indexes_.Clear();
  _impl_.summary_hidden_states_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.hidden_state_extent_uid_ != nullptr);
      _impl_.hidden_state_extent_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.filter_set_ != nullptr);
      _impl_.filter_set_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.summary_pivot_hidden_indexes_ != nullptr);
      _impl_.summary_pivot_hidden_indexes_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.summary_filtered_indexes_ != nullptr);
      _impl_.summary_filtered_indexes_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.row_or_column_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.needs_to_update_filter_set_for_import_) -
        reinterpret_cast<char*>(&_impl_.row_or_column_direction_)) + sizeof(_impl_.needs_to_update_filter_set_for_import_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStateExtentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID hidden_state_extent_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_extent_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.HiddenStateExtentArchive.RowOrColumnState base_hidden_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_hidden_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::HiddenStateExtentArchive_RowOrColumnDirection_IsValid(val))) {
            _internal_set_row_or_column_direction(static_cast<::TST::HiddenStateExtentArchive_RowOrColumnDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellValueArchive threshold_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threshold_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_to_update_filter_set_for_import = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_needs_to_update_filter_set_for_import(&has_bits);
          _impl_.needs_to_update_filter_set_for_import_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID collapsed_group_uids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collapsed_group_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference filter_set = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.IndexSetArchive summary_pivot_hidden_indexes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_pivot_hidden_indexes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.IndexSetArchive summary_filtered_indexes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_filtered_indexes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.UniqueIndexArchive unique_indexes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unique_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.HiddenStateExtentArchive.RowOrColumnState summary_hidden_states = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summary_hidden_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HiddenStateExtentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStateExtentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID hidden_state_extent_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hidden_state_extent_uid(this),
        _Internal::hidden_state_extent_uid(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.HiddenStateExtentArchive.RowOrColumnState base_hidden_states = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_base_hidden_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_base_hidden_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_row_or_column_direction(), target);
  }

  // repeated .TSCE.CellValueArchive threshold_value = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threshold_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_threshold_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool needs_to_update_filter_set_for_import = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_needs_to_update_filter_set_for_import(), target);
  }

  // repeated .TSP.UUID collapsed_group_uids = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collapsed_group_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_collapsed_group_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference filter_set = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::filter_set(this),
        _Internal::filter_set(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.IndexSetArchive summary_pivot_hidden_indexes = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::summary_pivot_hidden_indexes(this),
        _Internal::summary_pivot_hidden_indexes(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.IndexSetArchive summary_filtered_indexes = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::summary_filtered_indexes(this),
        _Internal::summary_filtered_indexes(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.UniqueIndexArchive unique_indexes = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unique_indexes_size()); i < n; i++) {
    const auto& repfield = this->_internal_unique_indexes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.HiddenStateExtentArchive.RowOrColumnState summary_hidden_states = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_summary_hidden_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_summary_hidden_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStateExtentArchive)
  return target;
}

size_t HiddenStateExtentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HiddenStateExtentArchive)
  size_t total_size = 0;

  if (_internal_has_hidden_state_extent_uid()) {
    // required .TSP.UUID hidden_state_extent_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hidden_state_extent_uid_);
  }

  if (_internal_has_row_or_column_direction()) {
    // required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_row_or_column_direction());
  }

  return total_size;
}
size_t HiddenStateExtentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStateExtentArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required .TSP.UUID hidden_state_extent_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hidden_state_extent_uid_);

    // required .TST.HiddenStateExtentArchive.RowOrColumnDirection row_or_column_direction = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_row_or_column_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HiddenStateExtentArchive.RowOrColumnState base_hidden_states = 2;
  total_size += 1UL * this->_internal_base_hidden_states_size();
  for (const auto& msg : this->_impl_.base_hidden_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellValueArchive threshold_value = 5;
  total_size += 1UL * this->_internal_threshold_value_size();
  for (const auto& msg : this->_impl_.threshold_value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID collapsed_group_uids = 7;
  total_size += 1UL * this->_internal_collapsed_group_uids_size();
  for (const auto& msg : this->_impl_.collapsed_group_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.UniqueIndexArchive unique_indexes = 11;
  total_size += 1UL * this->_internal_unique_indexes_size();
  for (const auto& msg : this->_impl_.unique_indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.HiddenStateExtentArchive.RowOrColumnState summary_hidden_states = 12;
  total_size += 1UL * this->_internal_summary_hidden_states_size();
  for (const auto& msg : this->_impl_.summary_hidden_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference filter_set = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filter_set_);
    }

    // optional .TSCE.IndexSetArchive summary_pivot_hidden_indexes = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.summary_pivot_hidden_indexes_);
    }

    // optional .TSCE.IndexSetArchive summary_filtered_indexes = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.summary_filtered_indexes_);
    }

  }
  // optional bool needs_to_update_filter_set_for_import = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStateExtentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HiddenStateExtentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStateExtentArchive::GetClassData() const { return &_class_data_; }


void HiddenStateExtentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HiddenStateExtentArchive*>(&to_msg);
  auto& from = static_cast<const HiddenStateExtentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStateExtentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.base_hidden_states_.MergeFrom(from._impl_.base_hidden_states_);
  _this->_impl_.threshold_value_.MergeFrom(from._impl_.threshold_value_);
  _this->_impl_.collapsed_group_uids_.MergeFrom(from._impl_.collapsed_group_uids_);
  _this->_impl_.unique_indexes_.MergeFrom(from._impl_.unique_indexes_);
  _this->_impl_.summary_hidden_states_.MergeFrom(from._impl_.summary_hidden_states_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_hidden_state_extent_uid()->::TSP::UUID::MergeFrom(
          from._internal_hidden_state_extent_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_filter_set()->::TSP::Reference::MergeFrom(
          from._internal_filter_set());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_summary_pivot_hidden_indexes()->::TSCE::IndexSetArchive::MergeFrom(
          from._internal_summary_pivot_hidden_indexes());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_summary_filtered_indexes()->::TSCE::IndexSetArchive::MergeFrom(
          from._internal_summary_filtered_indexes());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.row_or_column_direction_ = from._impl_.row_or_column_direction_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.needs_to_update_filter_set_for_import_ = from._impl_.needs_to_update_filter_set_for_import_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStateExtentArchive::CopyFrom(const HiddenStateExtentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStateExtentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStateExtentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.base_hidden_states_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.threshold_value_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.collapsed_group_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.unique_indexes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.summary_hidden_states_))
    return false;
  if (_internal_has_hidden_state_extent_uid()) {
    if (!_impl_.hidden_state_extent_uid_->IsInitialized()) return false;
  }
  if (_internal_has_filter_set()) {
    if (!_impl_.filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_summary_pivot_hidden_indexes()) {
    if (!_impl_.summary_pivot_hidden_indexes_->IsInitialized()) return false;
  }
  if (_internal_has_summary_filtered_indexes()) {
    if (!_impl_.summary_filtered_indexes_->IsInitialized()) return false;
  }
  return true;
}

void HiddenStateExtentArchive::InternalSwap(HiddenStateExtentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.base_hidden_states_.InternalSwap(&other->_impl_.base_hidden_states_);
  _impl_.threshold_value_.InternalSwap(&other->_impl_.threshold_value_);
  _impl_.collapsed_group_uids_.InternalSwap(&other->_impl_.collapsed_group_uids_);
  _impl_.unique_indexes_.InternalSwap(&other->_impl_.unique_indexes_);
  _impl_.summary_hidden_states_.InternalSwap(&other->_impl_.summary_hidden_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HiddenStateExtentArchive, _impl_.needs_to_update_filter_set_for_import_)
      + sizeof(HiddenStateExtentArchive::_impl_.needs_to_update_filter_set_for_import_)
      - PROTOBUF_FIELD_OFFSET(HiddenStateExtentArchive, _impl_.hidden_state_extent_uid_)>(
          reinterpret_cast<char*>(&_impl_.hidden_state_extent_uid_),
          reinterpret_cast<char*>(&other->_impl_.hidden_state_extent_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStateExtentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[93]);
}

// ===================================================================

class HiddenStatesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStatesArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& hidden_states_uid(const HiddenStatesArchive* msg);
  static void set_has_hidden_states_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::HiddenStateExtentArchive& column_hidden_state_extent(const HiddenStatesArchive* msg);
  static void set_has_column_hidden_state_extent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::HiddenStateExtentArchive& row_hidden_state_extent(const HiddenStatesArchive* msg);
  static void set_has_row_hidden_state_extent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
HiddenStatesArchive::_Internal::hidden_states_uid(const HiddenStatesArchive* msg) {
  return *msg->_impl_.hidden_states_uid_;
}
const ::TST::HiddenStateExtentArchive&
HiddenStatesArchive::_Internal::column_hidden_state_extent(const HiddenStatesArchive* msg) {
  return *msg->_impl_.column_hidden_state_extent_;
}
const ::TST::HiddenStateExtentArchive&
HiddenStatesArchive::_Internal::row_hidden_state_extent(const HiddenStatesArchive* msg) {
  return *msg->_impl_.row_hidden_state_extent_;
}
void HiddenStatesArchive::clear_hidden_states_uid() {
  if (_impl_.hidden_states_uid_ != nullptr) _impl_.hidden_states_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HiddenStatesArchive::HiddenStatesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStatesArchive)
}
HiddenStatesArchive::HiddenStatesArchive(const HiddenStatesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HiddenStatesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hidden_states_uid_){nullptr}
    , decltype(_impl_.column_hidden_state_extent_){nullptr}
    , decltype(_impl_.row_hidden_state_extent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hidden_states_uid()) {
    _this->_impl_.hidden_states_uid_ = new ::TSP::UUID(*from._impl_.hidden_states_uid_);
  }
  if (from._internal_has_column_hidden_state_extent()) {
    _this->_impl_.column_hidden_state_extent_ = new ::TST::HiddenStateExtentArchive(*from._impl_.column_hidden_state_extent_);
  }
  if (from._internal_has_row_hidden_state_extent()) {
    _this->_impl_.row_hidden_state_extent_ = new ::TST::HiddenStateExtentArchive(*from._impl_.row_hidden_state_extent_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStatesArchive)
}

inline void HiddenStatesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hidden_states_uid_){nullptr}
    , decltype(_impl_.column_hidden_state_extent_){nullptr}
    , decltype(_impl_.row_hidden_state_extent_){nullptr}
  };
}

HiddenStatesArchive::~HiddenStatesArchive() {
  // @@protoc_insertion_point(destructor:TST.HiddenStatesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HiddenStatesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hidden_states_uid_;
  if (this != internal_default_instance()) delete _impl_.column_hidden_state_extent_;
  if (this != internal_default_instance()) delete _impl_.row_hidden_state_extent_;
}

void HiddenStatesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HiddenStatesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStatesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.hidden_states_uid_ != nullptr);
      _impl_.hidden_states_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.column_hidden_state_extent_ != nullptr);
      _impl_.column_hidden_state_extent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.row_hidden_state_extent_ != nullptr);
      _impl_.row_hidden_state_extent_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStatesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID hidden_states_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_states_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_hidden_state_extent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_hidden_state_extent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HiddenStatesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStatesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID hidden_states_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hidden_states_uid(this),
        _Internal::hidden_states_uid(this).GetCachedSize(), target, stream);
  }

  // required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::column_hidden_state_extent(this),
        _Internal::column_hidden_state_extent(this).GetCachedSize(), target, stream);
  }

  // required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::row_hidden_state_extent(this),
        _Internal::row_hidden_state_extent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStatesArchive)
  return target;
}

size_t HiddenStatesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HiddenStatesArchive)
  size_t total_size = 0;

  if (_internal_has_hidden_states_uid()) {
    // required .TSP.UUID hidden_states_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hidden_states_uid_);
  }

  if (_internal_has_column_hidden_state_extent()) {
    // required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_hidden_state_extent_);
  }

  if (_internal_has_row_hidden_state_extent()) {
    // required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.row_hidden_state_extent_);
  }

  return total_size;
}
size_t HiddenStatesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStatesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.UUID hidden_states_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hidden_states_uid_);

    // required .TST.HiddenStateExtentArchive column_hidden_state_extent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_hidden_state_extent_);

    // required .TST.HiddenStateExtentArchive row_hidden_state_extent = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.row_hidden_state_extent_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStatesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HiddenStatesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStatesArchive::GetClassData() const { return &_class_data_; }


void HiddenStatesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HiddenStatesArchive*>(&to_msg);
  auto& from = static_cast<const HiddenStatesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStatesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_hidden_states_uid()->::TSP::UUID::MergeFrom(
          from._internal_hidden_states_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_column_hidden_state_extent()->::TST::HiddenStateExtentArchive::MergeFrom(
          from._internal_column_hidden_state_extent());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_row_hidden_state_extent()->::TST::HiddenStateExtentArchive::MergeFrom(
          from._internal_row_hidden_state_extent());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStatesArchive::CopyFrom(const HiddenStatesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStatesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStatesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_hidden_states_uid()) {
    if (!_impl_.hidden_states_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_hidden_state_extent()) {
    if (!_impl_.column_hidden_state_extent_->IsInitialized()) return false;
  }
  if (_internal_has_row_hidden_state_extent()) {
    if (!_impl_.row_hidden_state_extent_->IsInitialized()) return false;
  }
  return true;
}

void HiddenStatesArchive::InternalSwap(HiddenStatesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HiddenStatesArchive, _impl_.row_hidden_state_extent_)
      + sizeof(HiddenStatesArchive::_impl_.row_hidden_state_extent_)
      - PROTOBUF_FIELD_OFFSET(HiddenStatesArchive, _impl_.hidden_states_uid_)>(
          reinterpret_cast<char*>(&_impl_.hidden_states_uid_),
          reinterpret_cast<char*>(&other->_impl_.hidden_states_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStatesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[94]);
}

// ===================================================================

class HiddenStatesOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStatesOwnerArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& owner_uid(const HiddenStatesOwnerArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
HiddenStatesOwnerArchive::_Internal::owner_uid(const HiddenStatesOwnerArchive* msg) {
  return *msg->_impl_.owner_uid_;
}
void HiddenStatesOwnerArchive::clear_owner_uid() {
  if (_impl_.owner_uid_ != nullptr) _impl_.owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HiddenStatesOwnerArchive::HiddenStatesOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStatesOwnerArchive)
}
HiddenStatesOwnerArchive::HiddenStatesOwnerArchive(const HiddenStatesOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HiddenStatesOwnerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hidden_states_){from._impl_.hidden_states_}
    , decltype(_impl_.owner_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    _this->_impl_.owner_uid_ = new ::TSP::UUID(*from._impl_.owner_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStatesOwnerArchive)
}

inline void HiddenStatesOwnerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hidden_states_){arena}
    , decltype(_impl_.owner_uid_){nullptr}
  };
}

HiddenStatesOwnerArchive::~HiddenStatesOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.HiddenStatesOwnerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HiddenStatesOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hidden_states_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.owner_uid_;
}

void HiddenStatesOwnerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HiddenStatesOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStatesOwnerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hidden_states_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_uid_ != nullptr);
    _impl_.owner_uid_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStatesOwnerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.HiddenStatesArchive hidden_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hidden_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HiddenStatesOwnerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStatesOwnerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_uid(this),
        _Internal::owner_uid(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.HiddenStatesArchive hidden_states = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hidden_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_hidden_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStatesOwnerArchive)
  return target;
}

size_t HiddenStatesOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStatesOwnerArchive)
  size_t total_size = 0;

  // required .TSP.UUID owner_uid = 1;
  if (_internal_has_owner_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HiddenStatesArchive hidden_states = 2;
  total_size += 1UL * this->_internal_hidden_states_size();
  for (const auto& msg : this->_impl_.hidden_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStatesOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HiddenStatesOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStatesOwnerArchive::GetClassData() const { return &_class_data_; }


void HiddenStatesOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HiddenStatesOwnerArchive*>(&to_msg);
  auto& from = static_cast<const HiddenStatesOwnerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStatesOwnerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hidden_states_.MergeFrom(from._impl_.hidden_states_);
  if (from._internal_has_owner_uid()) {
    _this->_internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(
        from._internal_owner_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStatesOwnerArchive::CopyFrom(const HiddenStatesOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStatesOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStatesOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.hidden_states_))
    return false;
  if (_internal_has_owner_uid()) {
    if (!_impl_.owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void HiddenStatesOwnerArchive::InternalSwap(HiddenStatesOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hidden_states_.InternalSwap(&other->_impl_.hidden_states_);
  swap(_impl_.owner_uid_, other->_impl_.owner_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStatesOwnerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[95]);
}

// ===================================================================

class ExpandCollapseStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpandCollapseStateArchive>()._impl_._has_bits_);
  static void set_has_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ExpandCollapseStateArchive::clear_uids_collapsed() {
  _impl_.uids_collapsed_.Clear();
}
void ExpandCollapseStateArchive::clear_uids_expanded() {
  _impl_.uids_expanded_.Clear();
}
ExpandCollapseStateArchive::ExpandCollapseStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ExpandCollapseStateArchive)
}
ExpandCollapseStateArchive::ExpandCollapseStateArchive(const ExpandCollapseStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpandCollapseStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uids_collapsed_){from._impl_.uids_collapsed_}
    , decltype(_impl_.uids_expanded_){from._impl_.uids_expanded_}
    , decltype(_impl_.dimension_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dimension_ = from._impl_.dimension_;
  // @@protoc_insertion_point(copy_constructor:TST.ExpandCollapseStateArchive)
}

inline void ExpandCollapseStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uids_collapsed_){arena}
    , decltype(_impl_.uids_expanded_){arena}
    , decltype(_impl_.dimension_){-1}
  };
}

ExpandCollapseStateArchive::~ExpandCollapseStateArchive() {
  // @@protoc_insertion_point(destructor:TST.ExpandCollapseStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpandCollapseStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uids_collapsed_.~RepeatedPtrField();
  _impl_.uids_expanded_.~RepeatedPtrField();
}

void ExpandCollapseStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpandCollapseStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ExpandCollapseStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uids_collapsed_.Clear();
  _impl_.uids_expanded_.Clear();
  _impl_.dimension_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandCollapseStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uids_collapsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids_collapsed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID uids_expanded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids_expanded(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableDimensionArchive dimension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_dimension(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpandCollapseStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ExpandCollapseStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uids_collapsed = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uids_collapsed_size()); i < n; i++) {
    const auto& repfield = this->_internal_uids_collapsed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID uids_expanded = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uids_expanded_size()); i < n; i++) {
    const auto& repfield = this->_internal_uids_expanded(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.TableDimensionArchive dimension = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dimension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ExpandCollapseStateArchive)
  return target;
}

size_t ExpandCollapseStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ExpandCollapseStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uids_collapsed = 1;
  total_size += 1UL * this->_internal_uids_collapsed_size();
  for (const auto& msg : this->_impl_.uids_collapsed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID uids_expanded = 2;
  total_size += 1UL * this->_internal_uids_expanded_size();
  for (const auto& msg : this->_impl_.uids_expanded_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.TableDimensionArchive dimension = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dimension());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandCollapseStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpandCollapseStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandCollapseStateArchive::GetClassData() const { return &_class_data_; }


void ExpandCollapseStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpandCollapseStateArchive*>(&to_msg);
  auto& from = static_cast<const ExpandCollapseStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ExpandCollapseStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uids_collapsed_.MergeFrom(from._impl_.uids_collapsed_);
  _this->_impl_.uids_expanded_.MergeFrom(from._impl_.uids_expanded_);
  if (from._internal_has_dimension()) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandCollapseStateArchive::CopyFrom(const ExpandCollapseStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ExpandCollapseStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandCollapseStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uids_collapsed_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uids_expanded_))
    return false;
  return true;
}

void ExpandCollapseStateArchive::InternalSwap(ExpandCollapseStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.uids_collapsed_.InternalSwap(&other->_impl_.uids_collapsed_);
  _impl_.uids_expanded_.InternalSwap(&other->_impl_.uids_expanded_);
  swap(_impl_.dimension_, other->_impl_.dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandCollapseStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[96]);
}

// ===================================================================

class TokenAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenAttachmentArchive>()._impl_._has_bits_);
  static const ::TSWP::UIGraphicalAttachment& super(const TokenAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& expressionnode(const TokenAttachmentArchive* msg);
  static void set_has_expressionnode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::UIGraphicalAttachment&
TokenAttachmentArchive::_Internal::super(const TokenAttachmentArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
TokenAttachmentArchive::_Internal::expressionnode(const TokenAttachmentArchive* msg) {
  return *msg->_impl_.expressionnode_;
}
void TokenAttachmentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TokenAttachmentArchive::clear_expressionnode() {
  if (_impl_.expressionnode_ != nullptr) _impl_.expressionnode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TokenAttachmentArchive::TokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TokenAttachmentArchive)
}
TokenAttachmentArchive::TokenAttachmentArchive(const TokenAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.expressionnode_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::UIGraphicalAttachment(*from._impl_.super_);
  }
  if (from._internal_has_expressionnode()) {
    _this->_impl_.expressionnode_ = new ::TSP::Reference(*from._impl_.expressionnode_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.TokenAttachmentArchive)
}

inline void TokenAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.expressionnode_){nullptr}
  };
}

TokenAttachmentArchive::~TokenAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TST.TokenAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.expressionnode_;
}

void TokenAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TokenAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.expressionnode_ != nullptr);
      _impl_.expressionnode_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UIGraphicalAttachment super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference expressionNode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expressionnode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TokenAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.UIGraphicalAttachment super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference expressionNode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::expressionnode(this),
        _Internal::expressionnode(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TokenAttachmentArchive)
  return target;
}

size_t TokenAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TokenAttachmentArchive)
  size_t total_size = 0;

  // required .TSWP.UIGraphicalAttachment super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference expressionNode = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expressionnode_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenAttachmentArchive::GetClassData() const { return &_class_data_; }


void TokenAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const TokenAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TokenAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSWP::UIGraphicalAttachment::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_expressionnode()->::TSP::Reference::MergeFrom(
          from._internal_expressionnode());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenAttachmentArchive::CopyFrom(const TokenAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TokenAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_expressionnode()) {
    if (!_impl_.expressionnode_->IsInitialized()) return false;
  }
  return true;
}

void TokenAttachmentArchive::InternalSwap(TokenAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenAttachmentArchive, _impl_.expressionnode_)
      + sizeof(TokenAttachmentArchive::_impl_.expressionnode_)
      - PROTOBUF_FIELD_OFFSET(TokenAttachmentArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[97]);
}

// ===================================================================

class FormulaArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& expressiontree(const FormulaArchive* msg);
  static void set_has_expressiontree(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
FormulaArchive::_Internal::expressiontree(const FormulaArchive* msg) {
  return *msg->_impl_.expressiontree_;
}
void FormulaArchive::clear_expressiontree() {
  if (_impl_.expressiontree_ != nullptr) _impl_.expressiontree_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FormulaArchive::FormulaArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaArchive)
}
FormulaArchive::FormulaArchive(const FormulaArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expressiontree_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expressiontree()) {
    _this->_impl_.expressiontree_ = new ::TSP::Reference(*from._impl_.expressiontree_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.FormulaArchive)
}

inline void FormulaArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expressiontree_){nullptr}
  };
}

FormulaArchive::~FormulaArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expressiontree_;
}

void FormulaArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.expressiontree_ != nullptr);
    _impl_.expressiontree_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference expressionTree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expressiontree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference expressionTree = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::expressiontree(this),
        _Internal::expressiontree(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaArchive)
  return target;
}

size_t FormulaArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference expressionTree = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expressiontree_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaArchive::GetClassData() const { return &_class_data_; }


void FormulaArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaArchive*>(&to_msg);
  auto& from = static_cast<const FormulaArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expressiontree()) {
    _this->_internal_mutable_expressiontree()->::TSP::Reference::MergeFrom(
        from._internal_expressiontree());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaArchive::CopyFrom(const FormulaArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaArchive::IsInitialized() const {
  if (_internal_has_expressiontree()) {
    if (!_impl_.expressiontree_->IsInitialized()) return false;
  }
  return true;
}

void FormulaArchive::InternalSwap(FormulaArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.expressiontree_, other->_impl_.expressiontree_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[98]);
}

// ===================================================================

class ExpressionNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpressionNodeArchive>()._impl_._has_bits_);
  static void set_has_first_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void ExpressionNodeArchive::clear_children() {
  _impl_.children_.Clear();
}
ExpressionNodeArchive::ExpressionNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ExpressionNodeArchive)
}
ExpressionNodeArchive::ExpressionNodeArchive(const ExpressionNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpressionNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.first_index_){}
    , decltype(_impl_.last_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.first_index_, &from._impl_.first_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_index_) -
    reinterpret_cast<char*>(&_impl_.first_index_)) + sizeof(_impl_.last_index_));
  // @@protoc_insertion_point(copy_constructor:TST.ExpressionNodeArchive)
}

inline void ExpressionNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.first_index_){uint64_t{0u}}
    , decltype(_impl_.last_index_){uint64_t{0u}}
  };
}

ExpressionNodeArchive::~ExpressionNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ExpressionNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpressionNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
}

void ExpressionNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpressionNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ExpressionNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.first_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_index_) -
        reinterpret_cast<char*>(&_impl_.first_index_)) + sizeof(_impl_.last_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpressionNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 first_index = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_first_index(&has_bits);
          _impl_.first_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 last_index = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_index(&has_bits);
          _impl_.last_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpressionNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ExpressionNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 first_index = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_first_index(), target);
  }

  // optional uint64 last_index = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ExpressionNodeArchive)
  return target;
}

size_t ExpressionNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ExpressionNodeArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 first_index = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first_index());
    }

    // optional uint64 last_index = 3 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpressionNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpressionNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpressionNodeArchive::GetClassData() const { return &_class_data_; }


void ExpressionNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpressionNodeArchive*>(&to_msg);
  auto& from = static_cast<const ExpressionNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ExpressionNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.first_index_ = from._impl_.first_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.last_index_ = from._impl_.last_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpressionNodeArchive::CopyFrom(const ExpressionNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ExpressionNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionNodeArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.children_))
    return false;
  return true;
}

void ExpressionNodeArchive::InternalSwap(ExpressionNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpressionNodeArchive, _impl_.last_index_)
      + sizeof(ExpressionNodeArchive::_impl_.last_index_)
      - PROTOBUF_FIELD_OFFSET(ExpressionNodeArchive, _impl_.first_index_)>(
          reinterpret_cast<char*>(&_impl_.first_index_),
          reinterpret_cast<char*>(&other->_impl_.first_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpressionNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[99]);
}

// ===================================================================

class BooleanNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BooleanNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const BooleanNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
BooleanNodeArchive::_Internal::super(const BooleanNodeArchive* msg) {
  return *msg->_impl_.super_;
}
BooleanNodeArchive::BooleanNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.BooleanNodeArchive)
}
BooleanNodeArchive::BooleanNodeArchive(const BooleanNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BooleanNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:TST.BooleanNodeArchive)
}

inline void BooleanNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.value_){false}
  };
}

BooleanNodeArchive::~BooleanNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.BooleanNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BooleanNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void BooleanNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BooleanNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.BooleanNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.value_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BooleanNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BooleanNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.BooleanNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.BooleanNodeArchive)
  return target;
}

size_t BooleanNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.BooleanNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_value()) {
    // required bool value = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t BooleanNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.BooleanNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool value = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BooleanNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BooleanNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BooleanNodeArchive::GetClassData() const { return &_class_data_; }


void BooleanNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BooleanNodeArchive*>(&to_msg);
  auto& from = static_cast<const BooleanNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.BooleanNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BooleanNodeArchive::CopyFrom(const BooleanNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.BooleanNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void BooleanNodeArchive::InternalSwap(BooleanNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BooleanNodeArchive, _impl_.value_)
      + sizeof(BooleanNodeArchive::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(BooleanNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BooleanNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[100]);
}

// ===================================================================

class NumberNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const NumberNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_decimal_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decimal_high(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
NumberNodeArchive::_Internal::super(const NumberNodeArchive* msg) {
  return *msg->_impl_.super_;
}
NumberNodeArchive::NumberNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.NumberNodeArchive)
}
NumberNodeArchive::NumberNodeArchive(const NumberNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumberNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.number_){}
    , decltype(_impl_.decimal_low_){}
    , decltype(_impl_.decimal_high_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.number_, &from._impl_.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.decimal_high_) -
    reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.decimal_high_));
  // @@protoc_insertion_point(copy_constructor:TST.NumberNodeArchive)
}

inline void NumberNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.number_){0}
    , decltype(_impl_.decimal_low_){uint64_t{0u}}
    , decltype(_impl_.decimal_high_){uint64_t{0u}}
  };
}

NumberNodeArchive::~NumberNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.NumberNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumberNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void NumberNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumberNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.NumberNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.decimal_high_) -
        reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.decimal_high_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_number(&has_bits);
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_low = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_decimal_low(&has_bits);
          _impl_.decimal_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_decimal_high(&has_bits);
          _impl_.decimal_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumberNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.NumberNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional double number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_number(), target);
  }

  // optional uint64 decimal_low = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_decimal_low(), target);
  }

  // optional uint64 decimal_high = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_decimal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.NumberNodeArchive)
  return target;
}

size_t NumberNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.NumberNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional double number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 decimal_low = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_decimal_low());
    }

    // optional uint64 decimal_high = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_decimal_high());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumberNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberNodeArchive::GetClassData() const { return &_class_data_; }


void NumberNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumberNodeArchive*>(&to_msg);
  auto& from = static_cast<const NumberNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.NumberNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.number_ = from._impl_.number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.decimal_low_ = from._impl_.decimal_low_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.decimal_high_ = from._impl_.decimal_high_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberNodeArchive::CopyFrom(const NumberNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.NumberNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void NumberNodeArchive::InternalSwap(NumberNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberNodeArchive, _impl_.decimal_high_)
      + sizeof(NumberNodeArchive::_impl_.decimal_high_)
      - PROTOBUF_FIELD_OFFSET(NumberNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[101]);
}

// ===================================================================

class StringNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StringNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const StringNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
StringNodeArchive::_Internal::super(const StringNodeArchive* msg) {
  return *msg->_impl_.super_;
}
StringNodeArchive::StringNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StringNodeArchive)
}
StringNodeArchive::StringNodeArchive(const StringNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.StringNodeArchive)
}

inline void StringNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringNodeArchive::~StringNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.StringNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void StringNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StringNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.StringNodeArchive.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StringNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.StringNodeArchive.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StringNodeArchive)
  return target;
}

size_t StringNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StringNodeArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t StringNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StringNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringNodeArchive::GetClassData() const { return &_class_data_; }


void StringNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringNodeArchive*>(&to_msg);
  auto& from = static_cast<const StringNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StringNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringNodeArchive::CopyFrom(const StringNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StringNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void StringNodeArchive::InternalSwap(StringNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[102]);
}

// ===================================================================

class IdentifierNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<IdentifierNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const IdentifierNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
IdentifierNodeArchive::_Internal::super(const IdentifierNodeArchive* msg) {
  return *msg->_impl_.super_;
}
IdentifierNodeArchive::IdentifierNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.IdentifierNodeArchive)
}
IdentifierNodeArchive::IdentifierNodeArchive(const IdentifierNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdentifierNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.symbol_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  _this->_impl_.symbol_ = from._impl_.symbol_;
  // @@protoc_insertion_point(copy_constructor:TST.IdentifierNodeArchive)
}

inline void IdentifierNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.symbol_){0u}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IdentifierNodeArchive::~IdentifierNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.IdentifierNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdentifierNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void IdentifierNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdentifierNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.IdentifierNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.symbol_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentifierNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.IdentifierNodeArchive.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_symbol(&has_bits);
          _impl_.symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdentifierNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.IdentifierNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.IdentifierNodeArchive.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // optional uint32 symbol = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.IdentifierNodeArchive)
  return target;
}

size_t IdentifierNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.IdentifierNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string identifier = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // optional uint32 symbol = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_symbol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdentifierNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdentifierNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdentifierNodeArchive::GetClassData() const { return &_class_data_; }


void IdentifierNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdentifierNodeArchive*>(&to_msg);
  auto& from = static_cast<const IdentifierNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.IdentifierNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.symbol_ = from._impl_.symbol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdentifierNodeArchive::CopyFrom(const IdentifierNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.IdentifierNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifierNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void IdentifierNodeArchive::InternalSwap(IdentifierNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdentifierNodeArchive, _impl_.symbol_)
      + sizeof(IdentifierNodeArchive::_impl_.symbol_)
      - PROTOBUF_FIELD_OFFSET(IdentifierNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifierNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[103]);
}

// ===================================================================

class ArrayNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ArrayNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const ArrayNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
ArrayNodeArchive::_Internal::super(const ArrayNodeArchive* msg) {
  return *msg->_impl_.super_;
}
ArrayNodeArchive::ArrayNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ArrayNodeArchive)
}
ArrayNodeArchive::ArrayNodeArchive(const ArrayNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArrayNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.columns_){}
    , decltype(_impl_.rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.columns_, &from._impl_.columns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rows_) -
    reinterpret_cast<char*>(&_impl_.columns_)) + sizeof(_impl_.rows_));
  // @@protoc_insertion_point(copy_constructor:TST.ArrayNodeArchive)
}

inline void ArrayNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.columns_){0u}
    , decltype(_impl_.rows_){0u}
  };
}

ArrayNodeArchive::~ArrayNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ArrayNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArrayNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ArrayNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArrayNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ArrayNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.columns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rows_) -
        reinterpret_cast<char*>(&_impl_.columns_)) + sizeof(_impl_.rows_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_columns(&has_bits);
          _impl_.columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rows(&has_bits);
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArrayNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ArrayNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_columns(), target);
  }

  // optional uint32 rows = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ArrayNodeArchive)
  return target;
}

size_t ArrayNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ArrayNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 columns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_columns());
    }

    // optional uint32 rows = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rows());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArrayNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArrayNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArrayNodeArchive::GetClassData() const { return &_class_data_; }


void ArrayNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArrayNodeArchive*>(&to_msg);
  auto& from = static_cast<const ArrayNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ArrayNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.columns_ = from._impl_.columns_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rows_ = from._impl_.rows_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArrayNodeArchive::CopyFrom(const ArrayNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ArrayNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ArrayNodeArchive::InternalSwap(ArrayNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArrayNodeArchive, _impl_.rows_)
      + sizeof(ArrayNodeArchive::_impl_.rows_)
      - PROTOBUF_FIELD_OFFSET(ArrayNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[104]);
}

// ===================================================================

class ListNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ListNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const ListNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
ListNodeArchive::_Internal::super(const ListNodeArchive* msg) {
  return *msg->_impl_.super_;
}
ListNodeArchive::ListNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ListNodeArchive)
}
ListNodeArchive::ListNodeArchive(const ListNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.ListNodeArchive)
}

inline void ListNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ListNodeArchive::~ListNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ListNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ListNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ListNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ListNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ListNodeArchive)
  return target;
}

size_t ListNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ListNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListNodeArchive::GetClassData() const { return &_class_data_; }


void ListNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListNodeArchive*>(&to_msg);
  auto& from = static_cast<const ListNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ListNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListNodeArchive::CopyFrom(const ListNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ListNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ListNodeArchive::InternalSwap(ListNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[105]);
}

// ===================================================================

class OperatorNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<OperatorNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const OperatorNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operatorchar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
OperatorNodeArchive::_Internal::super(const OperatorNodeArchive* msg) {
  return *msg->_impl_.super_;
}
OperatorNodeArchive::OperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.OperatorNodeArchive)
}
OperatorNodeArchive::OperatorNodeArchive(const OperatorNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperatorNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.operatorchar_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  _this->_impl_.operatorchar_ = from._impl_.operatorchar_;
  // @@protoc_insertion_point(copy_constructor:TST.OperatorNodeArchive)
}

inline void OperatorNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.operatorchar_){0u}
  };
}

OperatorNodeArchive::~OperatorNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.OperatorNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperatorNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void OperatorNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperatorNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.OperatorNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.operatorchar_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatorNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 operatorChar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_operatorchar(&has_bits);
          _impl_.operatorchar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperatorNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.OperatorNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 operatorChar = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_operatorchar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.OperatorNodeArchive)
  return target;
}

size_t OperatorNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.OperatorNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_operatorchar()) {
    // required uint32 operatorChar = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_operatorchar());
  }

  return total_size;
}
size_t OperatorNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.OperatorNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 operatorChar = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_operatorchar());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperatorNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperatorNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperatorNodeArchive::GetClassData() const { return &_class_data_; }


void OperatorNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperatorNodeArchive*>(&to_msg);
  auto& from = static_cast<const OperatorNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.OperatorNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.operatorchar_ = from._impl_.operatorchar_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperatorNodeArchive::CopyFrom(const OperatorNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.OperatorNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void OperatorNodeArchive::InternalSwap(OperatorNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperatorNodeArchive, _impl_.operatorchar_)
      + sizeof(OperatorNodeArchive::_impl_.operatorchar_)
      - PROTOBUF_FIELD_OFFSET(OperatorNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatorNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[106]);
}

// ===================================================================

class PostfixOperatorNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PostfixOperatorNodeArchive>()._impl_._has_bits_);
  static const ::TST::OperatorNodeArchive& super(const PostfixOperatorNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::OperatorNodeArchive&
PostfixOperatorNodeArchive::_Internal::super(const PostfixOperatorNodeArchive* msg) {
  return *msg->_impl_.super_;
}
PostfixOperatorNodeArchive::PostfixOperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.PostfixOperatorNodeArchive)
}
PostfixOperatorNodeArchive::PostfixOperatorNodeArchive(const PostfixOperatorNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PostfixOperatorNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::OperatorNodeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.PostfixOperatorNodeArchive)
}

inline void PostfixOperatorNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

PostfixOperatorNodeArchive::~PostfixOperatorNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.PostfixOperatorNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostfixOperatorNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void PostfixOperatorNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PostfixOperatorNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PostfixOperatorNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostfixOperatorNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.OperatorNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostfixOperatorNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PostfixOperatorNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.OperatorNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PostfixOperatorNodeArchive)
  return target;
}

size_t PostfixOperatorNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PostfixOperatorNodeArchive)
  size_t total_size = 0;

  // required .TST.OperatorNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PostfixOperatorNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PostfixOperatorNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PostfixOperatorNodeArchive::GetClassData() const { return &_class_data_; }


void PostfixOperatorNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PostfixOperatorNodeArchive*>(&to_msg);
  auto& from = static_cast<const PostfixOperatorNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.PostfixOperatorNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::OperatorNodeArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PostfixOperatorNodeArchive::CopyFrom(const PostfixOperatorNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PostfixOperatorNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostfixOperatorNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void PostfixOperatorNodeArchive::InternalSwap(PostfixOperatorNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostfixOperatorNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[107]);
}

// ===================================================================

class PrefixOperatorNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PrefixOperatorNodeArchive>()._impl_._has_bits_);
  static const ::TST::OperatorNodeArchive& super(const PrefixOperatorNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::OperatorNodeArchive&
PrefixOperatorNodeArchive::_Internal::super(const PrefixOperatorNodeArchive* msg) {
  return *msg->_impl_.super_;
}
PrefixOperatorNodeArchive::PrefixOperatorNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.PrefixOperatorNodeArchive)
}
PrefixOperatorNodeArchive::PrefixOperatorNodeArchive(const PrefixOperatorNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrefixOperatorNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::OperatorNodeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.PrefixOperatorNodeArchive)
}

inline void PrefixOperatorNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

PrefixOperatorNodeArchive::~PrefixOperatorNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.PrefixOperatorNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrefixOperatorNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void PrefixOperatorNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrefixOperatorNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PrefixOperatorNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrefixOperatorNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.OperatorNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrefixOperatorNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PrefixOperatorNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.OperatorNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PrefixOperatorNodeArchive)
  return target;
}

size_t PrefixOperatorNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PrefixOperatorNodeArchive)
  size_t total_size = 0;

  // required .TST.OperatorNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrefixOperatorNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrefixOperatorNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrefixOperatorNodeArchive::GetClassData() const { return &_class_data_; }


void PrefixOperatorNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrefixOperatorNodeArchive*>(&to_msg);
  auto& from = static_cast<const PrefixOperatorNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.PrefixOperatorNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::OperatorNodeArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrefixOperatorNodeArchive::CopyFrom(const PrefixOperatorNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PrefixOperatorNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefixOperatorNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void PrefixOperatorNodeArchive::InternalSwap(PrefixOperatorNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefixOperatorNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[108]);
}

// ===================================================================

class FunctionNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const FunctionNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_functionindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invalidfunctionname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
FunctionNodeArchive::_Internal::super(const FunctionNodeArchive* msg) {
  return *msg->_impl_.super_;
}
FunctionNodeArchive::FunctionNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FunctionNodeArchive)
}
FunctionNodeArchive::FunctionNodeArchive(const FunctionNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invalidfunctionname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.functionindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.invalidfunctionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invalidfunctionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_invalidfunctionname()) {
    _this->_impl_.invalidfunctionname_.Set(from._internal_invalidfunctionname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  _this->_impl_.functionindex_ = from._impl_.functionindex_;
  // @@protoc_insertion_point(copy_constructor:TST.FunctionNodeArchive)
}

inline void FunctionNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.invalidfunctionname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.functionindex_){0u}
  };
  _impl_.invalidfunctionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invalidfunctionname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FunctionNodeArchive::~FunctionNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.FunctionNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.invalidfunctionname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FunctionNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FunctionNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.invalidfunctionname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.functionindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 functionIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_functionindex(&has_bits);
          _impl_.functionindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string invalidFunctionName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_invalidfunctionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.FunctionNodeArchive.invalidFunctionName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FunctionNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 functionIndex = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_functionindex(), target);
  }

  // optional string invalidFunctionName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invalidfunctionname().data(), static_cast<int>(this->_internal_invalidfunctionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.FunctionNodeArchive.invalidFunctionName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_invalidfunctionname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FunctionNodeArchive)
  return target;
}

size_t FunctionNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.FunctionNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_functionindex()) {
    // required uint32 functionIndex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_functionindex());
  }

  return total_size;
}
size_t FunctionNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FunctionNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 functionIndex = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_functionindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string invalidFunctionName = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invalidfunctionname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionNodeArchive::GetClassData() const { return &_class_data_; }


void FunctionNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionNodeArchive*>(&to_msg);
  auto& from = static_cast<const FunctionNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FunctionNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_invalidfunctionname(from._internal_invalidfunctionname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.functionindex_ = from._impl_.functionindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionNodeArchive::CopyFrom(const FunctionNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FunctionNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FunctionNodeArchive::InternalSwap(FunctionNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invalidfunctionname_, lhs_arena,
      &other->_impl_.invalidfunctionname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionNodeArchive, _impl_.functionindex_)
      + sizeof(FunctionNodeArchive::_impl_.functionindex_)
      - PROTOBUF_FIELD_OFFSET(FunctionNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[109]);
}

// ===================================================================

class FunctionEndNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionEndNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const FunctionEndNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
FunctionEndNodeArchive::_Internal::super(const FunctionEndNodeArchive* msg) {
  return *msg->_impl_.super_;
}
FunctionEndNodeArchive::FunctionEndNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FunctionEndNodeArchive)
}
FunctionEndNodeArchive::FunctionEndNodeArchive(const FunctionEndNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionEndNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.FunctionEndNodeArchive)
}

inline void FunctionEndNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

FunctionEndNodeArchive::~FunctionEndNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.FunctionEndNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionEndNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FunctionEndNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionEndNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FunctionEndNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionEndNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionEndNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FunctionEndNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FunctionEndNodeArchive)
  return target;
}

size_t FunctionEndNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FunctionEndNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionEndNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionEndNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionEndNodeArchive::GetClassData() const { return &_class_data_; }


void FunctionEndNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionEndNodeArchive*>(&to_msg);
  auto& from = static_cast<const FunctionEndNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FunctionEndNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionEndNodeArchive::CopyFrom(const FunctionEndNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FunctionEndNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionEndNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FunctionEndNodeArchive::InternalSwap(FunctionEndNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionEndNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[110]);
}

// ===================================================================

class DateNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DateNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const DateNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
DateNodeArchive::_Internal::super(const DateNodeArchive* msg) {
  return *msg->_impl_.super_;
}
DateNodeArchive::DateNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.DateNodeArchive)
}
DateNodeArchive::DateNodeArchive(const DateNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DateNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_format()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.DateNodeArchive)
}

inline void DateNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DateNodeArchive::~DateNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.DateNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DateNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  _impl_.format_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void DateNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DateNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DateNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.DateNodeArchive.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.DateNodeArchive.format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DateNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DateNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.DateNodeArchive.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional string format = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.DateNodeArchive.format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DateNodeArchive)
  return target;
}

size_t DateNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DateNodeArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t DateNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DateNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string format = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DateNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DateNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DateNodeArchive::GetClassData() const { return &_class_data_; }


void DateNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DateNodeArchive*>(&to_msg);
  auto& from = static_cast<const DateNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.DateNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_format(from._internal_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DateNodeArchive::CopyFrom(const DateNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DateNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void DateNodeArchive::InternalSwap(DateNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DateNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[111]);
}

// ===================================================================

class ReferenceNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const ReferenceNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeReferenceArchive& rangereference(const ReferenceNodeArchive* msg);
  static void set_has_rangereference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preserve_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hosttableid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellReferenceArchive& host_cell_ref(const ReferenceNodeArchive* msg);
  static void set_has_host_cell_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& table_uid(const ReferenceNodeArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDCoordArchive& range_top_left(const ReferenceNodeArchive* msg);
  static void set_has_range_top_left(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUIDCoordArchive& range_bottom_right(const ReferenceNodeArchive* msg);
  static void set_has_range_bottom_right(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::CategoryReferenceArchive& category_ref(const ReferenceNodeArchive* msg);
  static void set_has_category_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUIDRectArchive& uid_range_rect(const ReferenceNodeArchive* msg);
  static void set_has_uid_range_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000202) ^ 0x00000202) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
ReferenceNodeArchive::_Internal::super(const ReferenceNodeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCE::RangeReferenceArchive&
ReferenceNodeArchive::_Internal::rangereference(const ReferenceNodeArchive* msg) {
  return *msg->_impl_.rangereference_;
}
const ::TSCE::CellReferenceArchive&
ReferenceNodeArchive::_Internal::host_cell_ref(const ReferenceNodeArchive* msg) {
  return *msg->_impl_.host_cell_ref_;
}
const ::TSP::UUID&
ReferenceNodeArchive::_Internal::table_uid(const ReferenceNodeArchive* msg) {
  return *msg->_impl_.table_uid_;
}
const ::TSP::UUIDCoordArchive&
ReferenceNodeArchive::_Internal::range_top_left(const ReferenceNodeArchive* msg) {
  return *msg->_impl_.range_top_left_;
}
const ::TSP::UUIDCoordArchive&
ReferenceNodeArchive::_Internal::range_bottom_right(const ReferenceNodeArchive* msg) {
  return *msg->_impl_.range_bottom_right_;
}
const ::TSCE::CategoryReferenceArchive&
ReferenceNodeArchive::_Internal::category_ref(const ReferenceNodeArchive* msg) {
  return *msg->_impl_.category_ref_;
}
const ::TSP::UUIDRectArchive&
ReferenceNodeArchive::_Internal::uid_range_rect(const ReferenceNodeArchive* msg) {
  return *msg->_impl_.uid_range_rect_;
}
void ReferenceNodeArchive::clear_rangereference() {
  if (_impl_.rangereference_ != nullptr) _impl_.rangereference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ReferenceNodeArchive::clear_host_cell_ref() {
  if (_impl_.host_cell_ref_ != nullptr) _impl_.host_cell_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ReferenceNodeArchive::clear_table_uid() {
  if (_impl_.table_uid_ != nullptr) _impl_.table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ReferenceNodeArchive::clear_range_top_left() {
  if (_impl_.range_top_left_ != nullptr) _impl_.range_top_left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ReferenceNodeArchive::clear_range_bottom_right() {
  if (_impl_.range_bottom_right_ != nullptr) _impl_.range_bottom_right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ReferenceNodeArchive::clear_category_ref() {
  if (_impl_.category_ref_ != nullptr) _impl_.category_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ReferenceNodeArchive::clear_uid_range_rect() {
  if (_impl_.uid_range_rect_ != nullptr) _impl_.uid_range_rect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
ReferenceNodeArchive::ReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ReferenceNodeArchive)
}
ReferenceNodeArchive::ReferenceNodeArchive(const ReferenceNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hosttableid_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rangereference_){nullptr}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.range_top_left_){nullptr}
    , decltype(_impl_.range_bottom_right_){nullptr}
    , decltype(_impl_.category_ref_){nullptr}
    , decltype(_impl_.uid_range_rect_){nullptr}
    , decltype(_impl_.host_cell_ref_){nullptr}
    , decltype(_impl_.preserve_flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hosttableid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hosttableid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hosttableid()) {
    _this->_impl_.hosttableid_.Set(from._internal_hosttableid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  if (from._internal_has_rangereference()) {
    _this->_impl_.rangereference_ = new ::TSCE::RangeReferenceArchive(*from._impl_.rangereference_);
  }
  if (from._internal_has_table_uid()) {
    _this->_impl_.table_uid_ = new ::TSP::UUID(*from._impl_.table_uid_);
  }
  if (from._internal_has_range_top_left()) {
    _this->_impl_.range_top_left_ = new ::TSP::UUIDCoordArchive(*from._impl_.range_top_left_);
  }
  if (from._internal_has_range_bottom_right()) {
    _this->_impl_.range_bottom_right_ = new ::TSP::UUIDCoordArchive(*from._impl_.range_bottom_right_);
  }
  if (from._internal_has_category_ref()) {
    _this->_impl_.category_ref_ = new ::TSCE::CategoryReferenceArchive(*from._impl_.category_ref_);
  }
  if (from._internal_has_uid_range_rect()) {
    _this->_impl_.uid_range_rect_ = new ::TSP::UUIDRectArchive(*from._impl_.uid_range_rect_);
  }
  if (from._internal_has_host_cell_ref()) {
    _this->_impl_.host_cell_ref_ = new ::TSCE::CellReferenceArchive(*from._impl_.host_cell_ref_);
  }
  _this->_impl_.preserve_flags_ = from._impl_.preserve_flags_;
  // @@protoc_insertion_point(copy_constructor:TST.ReferenceNodeArchive)
}

inline void ReferenceNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hosttableid_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rangereference_){nullptr}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.range_top_left_){nullptr}
    , decltype(_impl_.range_bottom_right_){nullptr}
    , decltype(_impl_.category_ref_){nullptr}
    , decltype(_impl_.uid_range_rect_){nullptr}
    , decltype(_impl_.host_cell_ref_){nullptr}
    , decltype(_impl_.preserve_flags_){0u}
  };
  _impl_.hosttableid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hosttableid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReferenceNodeArchive::~ReferenceNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ReferenceNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hosttableid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rangereference_;
  if (this != internal_default_instance()) delete _impl_.table_uid_;
  if (this != internal_default_instance()) delete _impl_.range_top_left_;
  if (this != internal_default_instance()) delete _impl_.range_bottom_right_;
  if (this != internal_default_instance()) delete _impl_.category_ref_;
  if (this != internal_default_instance()) delete _impl_.uid_range_rect_;
  if (this != internal_default_instance()) delete _impl_.host_cell_ref_;
}

void ReferenceNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hosttableid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.rangereference_ != nullptr);
      _impl_.rangereference_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.table_uid_ != nullptr);
      _impl_.table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.range_top_left_ != nullptr);
      _impl_.range_top_left_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.range_bottom_right_ != nullptr);
      _impl_.range_bottom_right_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.category_ref_ != nullptr);
      _impl_.category_ref_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.uid_range_rect_ != nullptr);
      _impl_.uid_range_rect_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.host_cell_ref_ != nullptr);
    _impl_.host_cell_ref_->Clear();
  }
  _impl_.preserve_flags_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive rangeReference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rangereference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 preserve_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_preserve_flags(&has_bits);
          _impl_.preserve_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hostTableID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hosttableid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.ReferenceNodeArchive.hostTableID");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID table_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive range_top_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_top_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive range_bottom_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_bottom_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CategoryReferenceArchive category_ref = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDRectArchive uid_range_rect = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid_range_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellReferenceArchive host_cell_ref = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_cell_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeReferenceArchive rangeReference = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rangereference(this),
        _Internal::rangereference(this).GetCachedSize(), target, stream);
  }

  // required uint32 preserve_flags = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_preserve_flags(), target);
  }

  // optional string hostTableID = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hosttableid().data(), static_cast<int>(this->_internal_hosttableid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.ReferenceNodeArchive.hostTableID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hosttableid(), target);
  }

  // optional .TSP.UUID table_uid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::table_uid(this),
        _Internal::table_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive range_top_left = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::range_top_left(this),
        _Internal::range_top_left(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive range_bottom_right = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::range_bottom_right(this),
        _Internal::range_bottom_right(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CategoryReferenceArchive category_ref = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::category_ref(this),
        _Internal::category_ref(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDRectArchive uid_range_rect = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::uid_range_rect(this),
        _Internal::uid_range_rect(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellReferenceArchive host_cell_ref = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::host_cell_ref(this),
        _Internal::host_cell_ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ReferenceNodeArchive)
  return target;
}

size_t ReferenceNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ReferenceNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_preserve_flags()) {
    // required uint32 preserve_flags = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_preserve_flags());
  }

  return total_size;
}
size_t ReferenceNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ReferenceNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000202) ^ 0x00000202) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 preserve_flags = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_preserve_flags());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hostTableID = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hosttableid());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSCE.RangeReferenceArchive rangeReference = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rangereference_);
    }

    // optional .TSP.UUID table_uid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_uid_);
    }

    // optional .TSP.UUIDCoordArchive range_top_left = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_top_left_);
    }

    // optional .TSP.UUIDCoordArchive range_bottom_right = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_bottom_right_);
    }

    // optional .TSCE.CategoryReferenceArchive category_ref = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_ref_);
    }

    // optional .TSP.UUIDRectArchive uid_range_rect = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.uid_range_rect_);
    }

  }
  // optional .TSCE.CellReferenceArchive host_cell_ref = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.host_cell_ref_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceNodeArchive::GetClassData() const { return &_class_data_; }


void ReferenceNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceNodeArchive*>(&to_msg);
  auto& from = static_cast<const ReferenceNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hosttableid(from._internal_hosttableid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rangereference()->::TSCE::RangeReferenceArchive::MergeFrom(
          from._internal_rangereference());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_range_top_left()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_range_top_left());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_range_bottom_right()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_range_bottom_right());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_category_ref()->::TSCE::CategoryReferenceArchive::MergeFrom(
          from._internal_category_ref());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_uid_range_rect()->::TSP::UUIDRectArchive::MergeFrom(
          from._internal_uid_range_rect());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_host_cell_ref()->::TSCE::CellReferenceArchive::MergeFrom(
          from._internal_host_cell_ref());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.preserve_flags_ = from._impl_.preserve_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceNodeArchive::CopyFrom(const ReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rangereference()) {
    if (!_impl_.rangereference_->IsInitialized()) return false;
  }
  if (_internal_has_table_uid()) {
    if (!_impl_.table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_range_top_left()) {
    if (!_impl_.range_top_left_->IsInitialized()) return false;
  }
  if (_internal_has_range_bottom_right()) {
    if (!_impl_.range_bottom_right_->IsInitialized()) return false;
  }
  if (_internal_has_category_ref()) {
    if (!_impl_.category_ref_->IsInitialized()) return false;
  }
  if (_internal_has_uid_range_rect()) {
    if (!_impl_.uid_range_rect_->IsInitialized()) return false;
  }
  if (_internal_has_host_cell_ref()) {
    if (!_impl_.host_cell_ref_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceNodeArchive::InternalSwap(ReferenceNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hosttableid_, lhs_arena,
      &other->_impl_.hosttableid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceNodeArchive, _impl_.preserve_flags_)
      + sizeof(ReferenceNodeArchive::_impl_.preserve_flags_)
      - PROTOBUF_FIELD_OFFSET(ReferenceNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[112]);
}

// ===================================================================

class DurationNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DurationNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const DurationNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_smallest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_largest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
DurationNodeArchive::_Internal::super(const DurationNodeArchive* msg) {
  return *msg->_impl_.super_;
}
DurationNodeArchive::DurationNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.DurationNodeArchive)
}
DurationNodeArchive::DurationNodeArchive(const DurationNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DurationNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.timeinterval_){}
    , decltype(_impl_.smallest_){}
    , decltype(_impl_.largest_){}
    , decltype(_impl_.style_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.timeinterval_, &from._impl_.timeinterval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.style_) -
    reinterpret_cast<char*>(&_impl_.timeinterval_)) + sizeof(_impl_.style_));
  // @@protoc_insertion_point(copy_constructor:TST.DurationNodeArchive)
}

inline void DurationNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.timeinterval_){0}
    , decltype(_impl_.smallest_){0u}
    , decltype(_impl_.largest_){0u}
    , decltype(_impl_.style_){0u}
  };
}

DurationNodeArchive::~DurationNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.DurationNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DurationNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void DurationNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DurationNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DurationNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.timeinterval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.style_) -
        reinterpret_cast<char*>(&_impl_.timeinterval_)) + sizeof(_impl_.style_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DurationNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double timeinterval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_timeinterval(&has_bits);
          _impl_.timeinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint32 smallest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_smallest(&has_bits);
          _impl_.smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 largest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_largest(&has_bits);
          _impl_.largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_style(&has_bits);
          _impl_.style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DurationNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DurationNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required double timeinterval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_timeinterval(), target);
  }

  // required uint32 smallest = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_smallest(), target);
  }

  // required uint32 largest = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_largest(), target);
  }

  // required uint32 style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DurationNodeArchive)
  return target;
}

size_t DurationNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.DurationNodeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_timeinterval()) {
    // required double timeinterval = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_smallest()) {
    // required uint32 smallest = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_smallest());
  }

  if (_internal_has_largest()) {
    // required uint32 largest = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_largest());
  }

  if (_internal_has_style()) {
    // required uint32 style = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style());
  }

  return total_size;
}
size_t DurationNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DurationNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required double timeinterval = 2;
    total_size += 1 + 8;

    // required uint32 smallest = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_smallest());

    // required uint32 largest = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_largest());

    // required uint32 style = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_style());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DurationNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DurationNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DurationNodeArchive::GetClassData() const { return &_class_data_; }


void DurationNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DurationNodeArchive*>(&to_msg);
  auto& from = static_cast<const DurationNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.DurationNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timeinterval_ = from._impl_.timeinterval_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.smallest_ = from._impl_.smallest_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.largest_ = from._impl_.largest_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.style_ = from._impl_.style_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DurationNodeArchive::CopyFrom(const DurationNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DurationNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void DurationNodeArchive::InternalSwap(DurationNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DurationNodeArchive, _impl_.style_)
      + sizeof(DurationNodeArchive::_impl_.style_)
      - PROTOBUF_FIELD_OFFSET(DurationNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DurationNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[113]);
}

// ===================================================================

class ArgumentPlaceholderNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ArgumentPlaceholderNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const ArgumentPlaceholderNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_functionindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_argumentindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
ArgumentPlaceholderNodeArchive::_Internal::super(const ArgumentPlaceholderNodeArchive* msg) {
  return *msg->_impl_.super_;
}
ArgumentPlaceholderNodeArchive::ArgumentPlaceholderNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ArgumentPlaceholderNodeArchive)
}
ArgumentPlaceholderNodeArchive::ArgumentPlaceholderNodeArchive(const ArgumentPlaceholderNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ArgumentPlaceholderNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.functionindex_){}
    , decltype(_impl_.argumentindex_){}
    , decltype(_impl_.mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.functionindex_, &from._impl_.functionindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.functionindex_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:TST.ArgumentPlaceholderNodeArchive)
}

inline void ArgumentPlaceholderNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.functionindex_){0u}
    , decltype(_impl_.argumentindex_){0u}
    , decltype(_impl_.mode_){0u}
  };
}

ArgumentPlaceholderNodeArchive::~ArgumentPlaceholderNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.ArgumentPlaceholderNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ArgumentPlaceholderNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ArgumentPlaceholderNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ArgumentPlaceholderNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ArgumentPlaceholderNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.functionindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mode_) -
        reinterpret_cast<char*>(&_impl_.functionindex_)) + sizeof(_impl_.mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArgumentPlaceholderNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 functionIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_functionindex(&has_bits);
          _impl_.functionindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 argumentIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_argumentindex(&has_bits);
          _impl_.argumentindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mode(&has_bits);
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArgumentPlaceholderNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ArgumentPlaceholderNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 functionIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_functionindex(), target);
  }

  // optional uint32 argumentIndex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_argumentindex(), target);
  }

  // optional uint32 mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ArgumentPlaceholderNodeArchive)
  return target;
}

size_t ArgumentPlaceholderNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ArgumentPlaceholderNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 functionIndex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_functionindex());
    }

    // optional uint32 argumentIndex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_argumentindex());
    }

    // optional uint32 mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArgumentPlaceholderNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ArgumentPlaceholderNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArgumentPlaceholderNodeArchive::GetClassData() const { return &_class_data_; }


void ArgumentPlaceholderNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ArgumentPlaceholderNodeArchive*>(&to_msg);
  auto& from = static_cast<const ArgumentPlaceholderNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ArgumentPlaceholderNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.functionindex_ = from._impl_.functionindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.argumentindex_ = from._impl_.argumentindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArgumentPlaceholderNodeArchive::CopyFrom(const ArgumentPlaceholderNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ArgumentPlaceholderNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgumentPlaceholderNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ArgumentPlaceholderNodeArchive::InternalSwap(ArgumentPlaceholderNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, _impl_.mode_)
      + sizeof(ArgumentPlaceholderNodeArchive::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(ArgumentPlaceholderNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ArgumentPlaceholderNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[114]);
}

// ===================================================================

class EmptyExpressionNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<EmptyExpressionNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const EmptyExpressionNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
EmptyExpressionNodeArchive::_Internal::super(const EmptyExpressionNodeArchive* msg) {
  return *msg->_impl_.super_;
}
EmptyExpressionNodeArchive::EmptyExpressionNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.EmptyExpressionNodeArchive)
}
EmptyExpressionNodeArchive::EmptyExpressionNodeArchive(const EmptyExpressionNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmptyExpressionNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.EmptyExpressionNodeArchive)
}

inline void EmptyExpressionNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

EmptyExpressionNodeArchive::~EmptyExpressionNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.EmptyExpressionNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmptyExpressionNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void EmptyExpressionNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmptyExpressionNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.EmptyExpressionNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyExpressionNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmptyExpressionNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.EmptyExpressionNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.EmptyExpressionNodeArchive)
  return target;
}

size_t EmptyExpressionNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.EmptyExpressionNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmptyExpressionNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmptyExpressionNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmptyExpressionNodeArchive::GetClassData() const { return &_class_data_; }


void EmptyExpressionNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmptyExpressionNodeArchive*>(&to_msg);
  auto& from = static_cast<const EmptyExpressionNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.EmptyExpressionNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyExpressionNodeArchive::CopyFrom(const EmptyExpressionNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.EmptyExpressionNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyExpressionNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void EmptyExpressionNodeArchive::InternalSwap(EmptyExpressionNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyExpressionNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[115]);
}

// ===================================================================

class LetNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LetNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const LetNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_whitespace_after_let(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_whitespace_after_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_whitespace_after_equals(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_whitespace_after_delimiter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
LetNodeArchive::_Internal::super(const LetNodeArchive* msg) {
  return *msg->_impl_.super_;
}
LetNodeArchive::LetNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.LetNodeArchive)
}
LetNodeArchive::LetNodeArchive(const LetNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LetNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.whitespace_after_let_){}
    , decltype(_impl_.whitespace_after_identifier_){}
    , decltype(_impl_.whitespace_after_equals_){}
    , decltype(_impl_.whitespace_after_delimiter_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.whitespace_after_let_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_after_let_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_whitespace_after_let()) {
    _this->_impl_.whitespace_after_let_.Set(from._internal_whitespace_after_let(), 
      _this->GetArenaForAllocation());
  }
  _impl_.whitespace_after_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_after_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_whitespace_after_identifier()) {
    _this->_impl_.whitespace_after_identifier_.Set(from._internal_whitespace_after_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.whitespace_after_equals_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_after_equals_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_whitespace_after_equals()) {
    _this->_impl_.whitespace_after_equals_.Set(from._internal_whitespace_after_equals(), 
      _this->GetArenaForAllocation());
  }
  _impl_.whitespace_after_delimiter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_after_delimiter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_whitespace_after_delimiter()) {
    _this->_impl_.whitespace_after_delimiter_.Set(from._internal_whitespace_after_delimiter(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.LetNodeArchive)
}

inline void LetNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.whitespace_after_let_){}
    , decltype(_impl_.whitespace_after_identifier_){}
    , decltype(_impl_.whitespace_after_equals_){}
    , decltype(_impl_.whitespace_after_delimiter_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.whitespace_after_let_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_after_let_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.whitespace_after_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_after_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.whitespace_after_equals_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_after_equals_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.whitespace_after_delimiter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.whitespace_after_delimiter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LetNodeArchive::~LetNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.LetNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LetNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.whitespace_after_let_.Destroy();
  _impl_.whitespace_after_identifier_.Destroy();
  _impl_.whitespace_after_equals_.Destroy();
  _impl_.whitespace_after_delimiter_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void LetNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LetNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.LetNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.whitespace_after_let_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.whitespace_after_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.whitespace_after_equals_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.whitespace_after_delimiter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LetNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string whitespace_after_let = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_whitespace_after_let();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.LetNodeArchive.whitespace_after_let");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string whitespace_after_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_whitespace_after_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.LetNodeArchive.whitespace_after_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string whitespace_after_equals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_whitespace_after_equals();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.LetNodeArchive.whitespace_after_equals");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string whitespace_after_delimiter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_whitespace_after_delimiter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.LetNodeArchive.whitespace_after_delimiter");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LetNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.LetNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string whitespace_after_let = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace_after_let().data(), static_cast<int>(this->_internal_whitespace_after_let().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.LetNodeArchive.whitespace_after_let");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_whitespace_after_let(), target);
  }

  // optional string whitespace_after_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace_after_identifier().data(), static_cast<int>(this->_internal_whitespace_after_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.LetNodeArchive.whitespace_after_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_whitespace_after_identifier(), target);
  }

  // optional string whitespace_after_equals = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace_after_equals().data(), static_cast<int>(this->_internal_whitespace_after_equals().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.LetNodeArchive.whitespace_after_equals");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_whitespace_after_equals(), target);
  }

  // optional string whitespace_after_delimiter = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_whitespace_after_delimiter().data(), static_cast<int>(this->_internal_whitespace_after_delimiter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.LetNodeArchive.whitespace_after_delimiter");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_whitespace_after_delimiter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.LetNodeArchive)
  return target;
}

size_t LetNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.LetNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string whitespace_after_let = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace_after_let());
    }

    // optional string whitespace_after_identifier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace_after_identifier());
    }

    // optional string whitespace_after_equals = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace_after_equals());
    }

    // optional string whitespace_after_delimiter = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_whitespace_after_delimiter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LetNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LetNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LetNodeArchive::GetClassData() const { return &_class_data_; }


void LetNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LetNodeArchive*>(&to_msg);
  auto& from = static_cast<const LetNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.LetNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_whitespace_after_let(from._internal_whitespace_after_let());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_whitespace_after_identifier(from._internal_whitespace_after_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_whitespace_after_equals(from._internal_whitespace_after_equals());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_whitespace_after_delimiter(from._internal_whitespace_after_delimiter());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LetNodeArchive::CopyFrom(const LetNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.LetNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LetNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void LetNodeArchive::InternalSwap(LetNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.whitespace_after_let_, lhs_arena,
      &other->_impl_.whitespace_after_let_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.whitespace_after_identifier_, lhs_arena,
      &other->_impl_.whitespace_after_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.whitespace_after_equals_, lhs_arena,
      &other->_impl_.whitespace_after_equals_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.whitespace_after_delimiter_, lhs_arena,
      &other->_impl_.whitespace_after_delimiter_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LetNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[116]);
}

// ===================================================================

class InNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const InNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
InNodeArchive::_Internal::super(const InNodeArchive* msg) {
  return *msg->_impl_.super_;
}
InNodeArchive::InNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.InNodeArchive)
}
InNodeArchive::InNodeArchive(const InNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.InNodeArchive)
}

inline void InNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

InNodeArchive::~InNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.InNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void InNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.InNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.InNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.InNodeArchive)
  return target;
}

size_t InNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.InNodeArchive)
  size_t total_size = 0;

  // required .TST.ExpressionNodeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InNodeArchive::GetClassData() const { return &_class_data_; }


void InNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InNodeArchive*>(&to_msg);
  auto& from = static_cast<const InNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.InNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InNodeArchive::CopyFrom(const InNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.InNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void InNodeArchive::InternalSwap(InNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[117]);
}

// ===================================================================

class VariableNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<VariableNodeArchive>()._impl_._has_bits_);
  static const ::TST::ExpressionNodeArchive& super(const VariableNodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::ExpressionNodeArchive&
VariableNodeArchive::_Internal::super(const VariableNodeArchive* msg) {
  return *msg->_impl_.super_;
}
VariableNodeArchive::VariableNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.VariableNodeArchive)
}
VariableNodeArchive::VariableNodeArchive(const VariableNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VariableNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.symbol_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::ExpressionNodeArchive(*from._impl_.super_);
  }
  _this->_impl_.symbol_ = from._impl_.symbol_;
  // @@protoc_insertion_point(copy_constructor:TST.VariableNodeArchive)
}

inline void VariableNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.symbol_){0u}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VariableNodeArchive::~VariableNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.VariableNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VariableNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void VariableNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VariableNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.VariableNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_.symbol_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.ExpressionNodeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.VariableNodeArchive.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_symbol(&has_bits);
          _impl_.symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.VariableNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.ExpressionNodeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required string identifier = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.VariableNodeArchive.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // required uint32 symbol = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.VariableNodeArchive)
  return target;
}

size_t VariableNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.VariableNodeArchive)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_super()) {
    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_symbol()) {
    // required uint32 symbol = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_symbol());
  }

  return total_size;
}
size_t VariableNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.VariableNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string identifier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required .TST.ExpressionNodeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 symbol = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_symbol());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VariableNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableNodeArchive::GetClassData() const { return &_class_data_; }


void VariableNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VariableNodeArchive*>(&to_msg);
  auto& from = static_cast<const VariableNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.VariableNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TST::ExpressionNodeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.symbol_ = from._impl_.symbol_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableNodeArchive::CopyFrom(const VariableNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.VariableNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void VariableNodeArchive::InternalSwap(VariableNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VariableNodeArchive, _impl_.symbol_)
      + sizeof(VariableNodeArchive::_impl_.symbol_)
      - PROTOBUF_FIELD_OFFSET(VariableNodeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[118]);
}

// ===================================================================

class LayoutHintArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LayoutHintArchive>()._impl_._has_bits_);
  static void set_has_isvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::CellRange& cellrange(const LayoutHintArchive* msg);
  static void set_has_cellrange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellID& hintid(const LayoutHintArchive* msg);
  static void set_has_hintid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& maximumsize(const LayoutHintArchive* msg);
  static void set_has_maximumsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_partitionposition(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_horizontal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Size& effectivesize(const LayoutHintArchive* msg);
  static void set_has_effectivesize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_partitioningpass(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000074) ^ 0x00000074) != 0;
  }
};

const ::TST::CellRange&
LayoutHintArchive::_Internal::cellrange(const LayoutHintArchive* msg) {
  return *msg->_impl_.cellrange_;
}
const ::TST::CellID&
LayoutHintArchive::_Internal::hintid(const LayoutHintArchive* msg) {
  return *msg->_impl_.hintid_;
}
const ::TSP::Size&
LayoutHintArchive::_Internal::maximumsize(const LayoutHintArchive* msg) {
  return *msg->_impl_.maximumsize_;
}
const ::TSP::Size&
LayoutHintArchive::_Internal::effectivesize(const LayoutHintArchive* msg) {
  return *msg->_impl_.effectivesize_;
}
void LayoutHintArchive::clear_maximumsize() {
  if (_impl_.maximumsize_ != nullptr) _impl_.maximumsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LayoutHintArchive::clear_effectivesize() {
  if (_impl_.effectivesize_ != nullptr) _impl_.effectivesize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
LayoutHintArchive::LayoutHintArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.LayoutHintArchive)
}
LayoutHintArchive::LayoutHintArchive(const LayoutHintArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayoutHintArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cellrange_){nullptr}
    , decltype(_impl_.hintid_){nullptr}
    , decltype(_impl_.maximumsize_){nullptr}
    , decltype(_impl_.effectivesize_){nullptr}
    , decltype(_impl_.isvalid_){}
    , decltype(_impl_.horizontal_){}
    , decltype(_impl_.partitionposition_){}
    , decltype(_impl_.partitioningpass_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cellrange()) {
    _this->_impl_.cellrange_ = new ::TST::CellRange(*from._impl_.cellrange_);
  }
  if (from._internal_has_hintid()) {
    _this->_impl_.hintid_ = new ::TST::CellID(*from._impl_.hintid_);
  }
  if (from._internal_has_maximumsize()) {
    _this->_impl_.maximumsize_ = new ::TSP::Size(*from._impl_.maximumsize_);
  }
  if (from._internal_has_effectivesize()) {
    _this->_impl_.effectivesize_ = new ::TSP::Size(*from._impl_.effectivesize_);
  }
  ::memcpy(&_impl_.isvalid_, &from._impl_.isvalid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitioningpass_) -
    reinterpret_cast<char*>(&_impl_.isvalid_)) + sizeof(_impl_.partitioningpass_));
  // @@protoc_insertion_point(copy_constructor:TST.LayoutHintArchive)
}

inline void LayoutHintArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cellrange_){nullptr}
    , decltype(_impl_.hintid_){nullptr}
    , decltype(_impl_.maximumsize_){nullptr}
    , decltype(_impl_.effectivesize_){nullptr}
    , decltype(_impl_.isvalid_){false}
    , decltype(_impl_.horizontal_){false}
    , decltype(_impl_.partitionposition_){0u}
    , decltype(_impl_.partitioningpass_){0u}
  };
}

LayoutHintArchive::~LayoutHintArchive() {
  // @@protoc_insertion_point(destructor:TST.LayoutHintArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayoutHintArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cellrange_;
  if (this != internal_default_instance()) delete _impl_.hintid_;
  if (this != internal_default_instance()) delete _impl_.maximumsize_;
  if (this != internal_default_instance()) delete _impl_.effectivesize_;
}

void LayoutHintArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayoutHintArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.LayoutHintArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cellrange_ != nullptr);
      _impl_.cellrange_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.hintid_ != nullptr);
      _impl_.hintid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.maximumsize_ != nullptr);
      _impl_.maximumsize_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.effectivesize_ != nullptr);
      _impl_.effectivesize_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.isvalid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.partitioningpass_) -
        reinterpret_cast<char*>(&_impl_.isvalid_)) + sizeof(_impl_.partitioningpass_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayoutHintArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool isValid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_isvalid(&has_bits);
          _impl_.isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellRange cellRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellrange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellID hintID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hintid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size maximumSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximumsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 partitionPosition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_partitionposition(&has_bits);
          _impl_.partitionposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool horizontal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_horizontal(&has_bits);
          _impl_.horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size effectiveSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_effectivesize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 partitioningPass = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_partitioningpass(&has_bits);
          _impl_.partitioningpass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayoutHintArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.LayoutHintArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool isValid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isvalid(), target);
  }

  // optional .TST.CellRange cellRange = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cellrange(this),
        _Internal::cellrange(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellID hintID = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::hintid(this),
        _Internal::hintid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Size maximumSize = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::maximumsize(this),
        _Internal::maximumsize(this).GetCachedSize(), target, stream);
  }

  // required uint32 partitionPosition = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_partitionposition(), target);
  }

  // required bool horizontal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_horizontal(), target);
  }

  // optional .TSP.Size effectiveSize = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::effectivesize(this),
        _Internal::effectivesize(this).GetCachedSize(), target, stream);
  }

  // optional uint32 partitioningPass = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_partitioningpass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.LayoutHintArchive)
  return target;
}

size_t LayoutHintArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.LayoutHintArchive)
  size_t total_size = 0;

  if (_internal_has_maximumsize()) {
    // required .TSP.Size maximumSize = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maximumsize_);
  }

  if (_internal_has_isvalid()) {
    // required bool isValid = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_horizontal()) {
    // required bool horizontal = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_partitionposition()) {
    // required uint32 partitionPosition = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partitionposition());
  }

  return total_size;
}
size_t LayoutHintArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.LayoutHintArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000074) ^ 0x00000074) == 0) {  // All required fields are present.
    // required .TSP.Size maximumSize = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maximumsize_);

    // required bool isValid = 1;
    total_size += 1 + 1;

    // required bool horizontal = 6;
    total_size += 1 + 1;

    // required uint32 partitionPosition = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partitionposition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TST.CellRange cellRange = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cellrange_);
    }

    // optional .TST.CellID hintID = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hintid_);
    }

  }
  // optional .TSP.Size effectiveSize = 7;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.effectivesize_);
  }

  // optional uint32 partitioningPass = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partitioningpass());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayoutHintArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayoutHintArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayoutHintArchive::GetClassData() const { return &_class_data_; }


void LayoutHintArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayoutHintArchive*>(&to_msg);
  auto& from = static_cast<const LayoutHintArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.LayoutHintArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cellrange()->::TST::CellRange::MergeFrom(
          from._internal_cellrange());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_hintid()->::TST::CellID::MergeFrom(
          from._internal_hintid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_maximumsize()->::TSP::Size::MergeFrom(
          from._internal_maximumsize());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_effectivesize()->::TSP::Size::MergeFrom(
          from._internal_effectivesize());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.isvalid_ = from._impl_.isvalid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.horizontal_ = from._impl_.horizontal_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.partitionposition_ = from._impl_.partitionposition_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.partitioningpass_ = from._impl_.partitioningpass_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayoutHintArchive::CopyFrom(const LayoutHintArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.LayoutHintArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutHintArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cellrange()) {
    if (!_impl_.cellrange_->IsInitialized()) return false;
  }
  if (_internal_has_hintid()) {
    if (!_impl_.hintid_->IsInitialized()) return false;
  }
  if (_internal_has_maximumsize()) {
    if (!_impl_.maximumsize_->IsInitialized()) return false;
  }
  if (_internal_has_effectivesize()) {
    if (!_impl_.effectivesize_->IsInitialized()) return false;
  }
  return true;
}

void LayoutHintArchive::InternalSwap(LayoutHintArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LayoutHintArchive, _impl_.partitioningpass_)
      + sizeof(LayoutHintArchive::_impl_.partitioningpass_)
      - PROTOBUF_FIELD_OFFSET(LayoutHintArchive, _impl_.cellrange_)>(
          reinterpret_cast<char*>(&_impl_.cellrange_),
          reinterpret_cast<char*>(&other->_impl_.cellrange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutHintArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[119]);
}

// ===================================================================

class CompletionTokenAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CompletionTokenAttachmentArchive>()._impl_._has_bits_);
  static const ::TST::TokenAttachmentArchive& super(const CompletionTokenAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_completiontext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caretposition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prefixstart(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TST::TokenAttachmentArchive&
CompletionTokenAttachmentArchive::_Internal::super(const CompletionTokenAttachmentArchive* msg) {
  return *msg->_impl_.super_;
}
CompletionTokenAttachmentArchive::CompletionTokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CompletionTokenAttachmentArchive)
}
CompletionTokenAttachmentArchive::CompletionTokenAttachmentArchive(const CompletionTokenAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompletionTokenAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.completiontext_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.caretposition_){}
    , decltype(_impl_.prefixstart_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.completiontext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completiontext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_completiontext()) {
    _this->_impl_.completiontext_.Set(from._internal_completiontext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TokenAttachmentArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.caretposition_, &from._impl_.caretposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prefixstart_) -
    reinterpret_cast<char*>(&_impl_.caretposition_)) + sizeof(_impl_.prefixstart_));
  // @@protoc_insertion_point(copy_constructor:TST.CompletionTokenAttachmentArchive)
}

inline void CompletionTokenAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.completiontext_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.caretposition_){0u}
    , decltype(_impl_.prefixstart_){0u}
  };
  _impl_.completiontext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.completiontext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompletionTokenAttachmentArchive::~CompletionTokenAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TST.CompletionTokenAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompletionTokenAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.completiontext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CompletionTokenAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompletionTokenAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CompletionTokenAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.completiontext_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.caretposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.prefixstart_) -
        reinterpret_cast<char*>(&_impl_.caretposition_)) + sizeof(_impl_.prefixstart_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompletionTokenAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TokenAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string completionText = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_completiontext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CompletionTokenAttachmentArchive.completionText");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 caretPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_caretposition(&has_bits);
          _impl_.caretposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prefixStart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_prefixstart(&has_bits);
          _impl_.prefixstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompletionTokenAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CompletionTokenAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TokenAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string completionText = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_completiontext().data(), static_cast<int>(this->_internal_completiontext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CompletionTokenAttachmentArchive.completionText");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_completiontext(), target);
  }

  // optional uint32 caretPosition = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_caretposition(), target);
  }

  // optional uint32 prefixStart = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prefixstart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CompletionTokenAttachmentArchive)
  return target;
}

size_t CompletionTokenAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CompletionTokenAttachmentArchive)
  size_t total_size = 0;

  // required .TST.TokenAttachmentArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string completionText = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_completiontext());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 caretPosition = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_caretposition());
    }

    // optional uint32 prefixStart = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prefixstart());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompletionTokenAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompletionTokenAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompletionTokenAttachmentArchive::GetClassData() const { return &_class_data_; }


void CompletionTokenAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompletionTokenAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const CompletionTokenAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CompletionTokenAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_completiontext(from._internal_completiontext());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TST::TokenAttachmentArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.caretposition_ = from._impl_.caretposition_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.prefixstart_ = from._impl_.prefixstart_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompletionTokenAttachmentArchive::CopyFrom(const CompletionTokenAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CompletionTokenAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompletionTokenAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CompletionTokenAttachmentArchive::InternalSwap(CompletionTokenAttachmentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.completiontext_, lhs_arena,
      &other->_impl_.completiontext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompletionTokenAttachmentArchive, _impl_.prefixstart_)
      + sizeof(CompletionTokenAttachmentArchive::_impl_.prefixstart_)
      - PROTOBUF_FIELD_OFFSET(CompletionTokenAttachmentArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompletionTokenAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[120]);
}

// ===================================================================

class HiddenStateFormulaOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HiddenStateFormulaOwnerArchive>()._impl_._has_bits_);
  static const ::TSP::CFUUIDArchive& owner_id(const HiddenStateFormulaOwnerArchive* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_needs_to_update_filter_set_for_import(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::CFUUIDArchive&
HiddenStateFormulaOwnerArchive::_Internal::owner_id(const HiddenStateFormulaOwnerArchive* msg) {
  return *msg->_impl_.owner_id_;
}
void HiddenStateFormulaOwnerArchive::clear_owner_id() {
  if (_impl_.owner_id_ != nullptr) _impl_.owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HiddenStateFormulaOwnerArchive::clear_threshold_value() {
  _impl_.threshold_value_.Clear();
}
HiddenStateFormulaOwnerArchive::HiddenStateFormulaOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HiddenStateFormulaOwnerArchive)
}
HiddenStateFormulaOwnerArchive::HiddenStateFormulaOwnerArchive(const HiddenStateFormulaOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HiddenStateFormulaOwnerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_value_){from._impl_.threshold_value_}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.needs_to_update_filter_set_for_import_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    _this->_impl_.owner_id_ = new ::TSP::CFUUIDArchive(*from._impl_.owner_id_);
  }
  _this->_impl_.needs_to_update_filter_set_for_import_ = from._impl_.needs_to_update_filter_set_for_import_;
  // @@protoc_insertion_point(copy_constructor:TST.HiddenStateFormulaOwnerArchive)
}

inline void HiddenStateFormulaOwnerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_value_){arena}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.needs_to_update_filter_set_for_import_){false}
  };
}

HiddenStateFormulaOwnerArchive::~HiddenStateFormulaOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.HiddenStateFormulaOwnerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HiddenStateFormulaOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.threshold_value_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.owner_id_;
}

void HiddenStateFormulaOwnerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HiddenStateFormulaOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HiddenStateFormulaOwnerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threshold_value_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_id_ != nullptr);
    _impl_.owner_id_->Clear();
  }
  _impl_.needs_to_update_filter_set_for_import_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HiddenStateFormulaOwnerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.CFUUIDArchive owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellValueArchive threshold_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_threshold_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_needs_to_update_filter_set_for_import(&has_bits);
          _impl_.needs_to_update_filter_set_for_import_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HiddenStateFormulaOwnerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HiddenStateFormulaOwnerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.CFUUIDArchive owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_id(this),
        _Internal::owner_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CellValueArchive threshold_value = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_threshold_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_threshold_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_needs_to_update_filter_set_for_import(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HiddenStateFormulaOwnerArchive)
  return target;
}

size_t HiddenStateFormulaOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HiddenStateFormulaOwnerArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellValueArchive threshold_value = 2;
  total_size += 1UL * this->_internal_threshold_value_size();
  for (const auto& msg : this->_impl_.threshold_value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.CFUUIDArchive owner_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.owner_id_);
    }

    // optional bool needs_to_update_filter_set_for_import = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HiddenStateFormulaOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HiddenStateFormulaOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HiddenStateFormulaOwnerArchive::GetClassData() const { return &_class_data_; }


void HiddenStateFormulaOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HiddenStateFormulaOwnerArchive*>(&to_msg);
  auto& from = static_cast<const HiddenStateFormulaOwnerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HiddenStateFormulaOwnerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.threshold_value_.MergeFrom(from._impl_.threshold_value_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.needs_to_update_filter_set_for_import_ = from._impl_.needs_to_update_filter_set_for_import_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HiddenStateFormulaOwnerArchive::CopyFrom(const HiddenStateFormulaOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HiddenStateFormulaOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiddenStateFormulaOwnerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.threshold_value_))
    return false;
  return true;
}

void HiddenStateFormulaOwnerArchive::InternalSwap(HiddenStateFormulaOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.threshold_value_.InternalSwap(&other->_impl_.threshold_value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HiddenStateFormulaOwnerArchive, _impl_.needs_to_update_filter_set_for_import_)
      + sizeof(HiddenStateFormulaOwnerArchive::_impl_.needs_to_update_filter_set_for_import_)
      - PROTOBUF_FIELD_OFFSET(HiddenStateFormulaOwnerArchive, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HiddenStateFormulaOwnerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[121]);
}

// ===================================================================

class FormulaStoreArchive_FormulaStorePair::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaStoreArchive_FormulaStorePair>()._impl_._has_bits_);
  static void set_has_formula_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulaArchive& formula(const FormulaStoreArchive_FormulaStorePair* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::FormulaArchive&
FormulaStoreArchive_FormulaStorePair::_Internal::formula(const FormulaStoreArchive_FormulaStorePair* msg) {
  return *msg->_impl_.formula_;
}
void FormulaStoreArchive_FormulaStorePair::clear_formula() {
  if (_impl_.formula_ != nullptr) _impl_.formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FormulaStoreArchive_FormulaStorePair::FormulaStoreArchive_FormulaStorePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaStoreArchive.FormulaStorePair)
}
FormulaStoreArchive_FormulaStorePair::FormulaStoreArchive_FormulaStorePair(const FormulaStoreArchive_FormulaStorePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaStoreArchive_FormulaStorePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.formula_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    _this->_impl_.formula_ = new ::TSCE::FormulaArchive(*from._impl_.formula_);
  }
  _this->_impl_.formula_index_ = from._impl_.formula_index_;
  // @@protoc_insertion_point(copy_constructor:TST.FormulaStoreArchive.FormulaStorePair)
}

inline void FormulaStoreArchive_FormulaStorePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.formula_index_){0u}
  };
}

FormulaStoreArchive_FormulaStorePair::~FormulaStoreArchive_FormulaStorePair() {
  // @@protoc_insertion_point(destructor:TST.FormulaStoreArchive.FormulaStorePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaStoreArchive_FormulaStorePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.formula_;
}

void FormulaStoreArchive_FormulaStorePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaStoreArchive_FormulaStorePair::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaStoreArchive.FormulaStorePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.formula_ != nullptr);
    _impl_.formula_->Clear();
  }
  _impl_.formula_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaStoreArchive_FormulaStorePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 formula_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_formula_index(&has_bits);
          _impl_.formula_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.FormulaArchive formula = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaStoreArchive_FormulaStorePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaStoreArchive.FormulaStorePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 formula_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_formula_index(), target);
  }

  // required .TSCE.FormulaArchive formula = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::formula(this),
        _Internal::formula(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaStoreArchive.FormulaStorePair)
  return target;
}

size_t FormulaStoreArchive_FormulaStorePair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.FormulaStoreArchive.FormulaStorePair)
  size_t total_size = 0;

  if (_internal_has_formula()) {
    // required .TSCE.FormulaArchive formula = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_);
  }

  if (_internal_has_formula_index()) {
    // required uint32 formula_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_index());
  }

  return total_size;
}
size_t FormulaStoreArchive_FormulaStorePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaStoreArchive.FormulaStorePair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.FormulaArchive formula = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_);

    // required uint32 formula_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaStoreArchive_FormulaStorePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaStoreArchive_FormulaStorePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaStoreArchive_FormulaStorePair::GetClassData() const { return &_class_data_; }


void FormulaStoreArchive_FormulaStorePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaStoreArchive_FormulaStorePair*>(&to_msg);
  auto& from = static_cast<const FormulaStoreArchive_FormulaStorePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaStoreArchive.FormulaStorePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.formula_index_ = from._impl_.formula_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaStoreArchive_FormulaStorePair::CopyFrom(const FormulaStoreArchive_FormulaStorePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaStoreArchive.FormulaStorePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaStoreArchive_FormulaStorePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!_impl_.formula_->IsInitialized()) return false;
  }
  return true;
}

void FormulaStoreArchive_FormulaStorePair::InternalSwap(FormulaStoreArchive_FormulaStorePair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaStoreArchive_FormulaStorePair, _impl_.formula_index_)
      + sizeof(FormulaStoreArchive_FormulaStorePair::_impl_.formula_index_)
      - PROTOBUF_FIELD_OFFSET(FormulaStoreArchive_FormulaStorePair, _impl_.formula_)>(
          reinterpret_cast<char*>(&_impl_.formula_),
          reinterpret_cast<char*>(&other->_impl_.formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaStoreArchive_FormulaStorePair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[122]);
}

// ===================================================================

class FormulaStoreArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaStoreArchive>()._impl_._has_bits_);
  static void set_has_next_formula_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FormulaStoreArchive::FormulaStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaStoreArchive)
}
FormulaStoreArchive::FormulaStoreArchive(const FormulaStoreArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaStoreArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formulas_){from._impl_.formulas_}
    , decltype(_impl_.next_formula_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.next_formula_index_ = from._impl_.next_formula_index_;
  // @@protoc_insertion_point(copy_constructor:TST.FormulaStoreArchive)
}

inline void FormulaStoreArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formulas_){arena}
    , decltype(_impl_.next_formula_index_){0u}
  };
}

FormulaStoreArchive::~FormulaStoreArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaStoreArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaStoreArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.formulas_.~RepeatedPtrField();
}

void FormulaStoreArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaStoreArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaStoreArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formulas_.Clear();
  _impl_.next_formula_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaStoreArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 next_formula_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_next_formula_index(&has_bits);
          _impl_.next_formula_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.FormulaStoreArchive.FormulaStorePair formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formulas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaStoreArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaStoreArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 next_formula_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_next_formula_index(), target);
  }

  // repeated .TST.FormulaStoreArchive.FormulaStorePair formulas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formulas_size()); i < n; i++) {
    const auto& repfield = this->_internal_formulas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaStoreArchive)
  return target;
}

size_t FormulaStoreArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaStoreArchive)
  size_t total_size = 0;

  // required uint32 next_formula_index = 2;
  if (_internal_has_next_formula_index()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_next_formula_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.FormulaStoreArchive.FormulaStorePair formulas = 3;
  total_size += 1UL * this->_internal_formulas_size();
  for (const auto& msg : this->_impl_.formulas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaStoreArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaStoreArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaStoreArchive::GetClassData() const { return &_class_data_; }


void FormulaStoreArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaStoreArchive*>(&to_msg);
  auto& from = static_cast<const FormulaStoreArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaStoreArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.formulas_.MergeFrom(from._impl_.formulas_);
  if (from._internal_has_next_formula_index()) {
    _this->_internal_set_next_formula_index(from._internal_next_formula_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaStoreArchive::CopyFrom(const FormulaStoreArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaStoreArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaStoreArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formulas_))
    return false;
  return true;
}

void FormulaStoreArchive::InternalSwap(FormulaStoreArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.formulas_.InternalSwap(&other->_impl_.formulas_);
  swap(_impl_.next_formula_index_, other->_impl_.next_formula_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaStoreArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[123]);
}

// ===================================================================

class MergeOperationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeOperationArchive>()._impl_._has_bits_);
  static void set_has_merge_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void MergeOperationArchive::clear_merge_ranges() {
  _impl_.merge_ranges_.Clear();
}
void MergeOperationArchive::clear_merge_formulas() {
  _impl_.merge_formulas_.Clear();
}
MergeOperationArchive::MergeOperationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.MergeOperationArchive)
}
MergeOperationArchive::MergeOperationArchive(const MergeOperationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MergeOperationArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.merge_ranges_){from._impl_.merge_ranges_}
    , decltype(_impl_.merge_formulas_){from._impl_.merge_formulas_}
    , decltype(_impl_.merge_formula_indexes_){from._impl_.merge_formula_indexes_}
    , decltype(_impl_.merge_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.merge_type_ = from._impl_.merge_type_;
  // @@protoc_insertion_point(copy_constructor:TST.MergeOperationArchive)
}

inline void MergeOperationArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.merge_ranges_){arena}
    , decltype(_impl_.merge_formulas_){arena}
    , decltype(_impl_.merge_formula_indexes_){arena}
    , decltype(_impl_.merge_type_){1}
  };
}

MergeOperationArchive::~MergeOperationArchive() {
  // @@protoc_insertion_point(destructor:TST.MergeOperationArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MergeOperationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.merge_ranges_.~RepeatedPtrField();
  _impl_.merge_formulas_.~RepeatedPtrField();
  _impl_.merge_formula_indexes_.~RepeatedField();
}

void MergeOperationArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MergeOperationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.MergeOperationArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.merge_ranges_.Clear();
  _impl_.merge_formulas_.Clear();
  _impl_.merge_formula_indexes_.Clear();
  _impl_.merge_type_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeOperationArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.MergeActionArchive merge_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::MergeActionArchive_IsValid(val))) {
            _internal_set_merge_type(static_cast<::TST::MergeActionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUIDRectArchive merge_ranges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive merge_formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merge_formulas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 merge_formula_indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_merge_formula_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_merge_formula_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MergeOperationArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.MergeOperationArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.MergeActionArchive merge_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_merge_type(), target);
  }

  // repeated .TSP.UUIDRectArchive merge_ranges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_merge_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_merge_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.FormulaArchive merge_formulas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_merge_formulas_size()); i < n; i++) {
    const auto& repfield = this->_internal_merge_formulas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 merge_formula_indexes = 4;
  for (int i = 0, n = this->_internal_merge_formula_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_merge_formula_indexes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.MergeOperationArchive)
  return target;
}

size_t MergeOperationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.MergeOperationArchive)
  size_t total_size = 0;

  // required .TST.MergeActionArchive merge_type = 1;
  if (_internal_has_merge_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_merge_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDRectArchive merge_ranges = 2;
  total_size += 1UL * this->_internal_merge_ranges_size();
  for (const auto& msg : this->_impl_.merge_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive merge_formulas = 3;
  total_size += 1UL * this->_internal_merge_formulas_size();
  for (const auto& msg : this->_impl_.merge_formulas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 merge_formula_indexes = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.merge_formula_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_merge_formula_indexes_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeOperationArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MergeOperationArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeOperationArchive::GetClassData() const { return &_class_data_; }


void MergeOperationArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MergeOperationArchive*>(&to_msg);
  auto& from = static_cast<const MergeOperationArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.MergeOperationArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.merge_ranges_.MergeFrom(from._impl_.merge_ranges_);
  _this->_impl_.merge_formulas_.MergeFrom(from._impl_.merge_formulas_);
  _this->_impl_.merge_formula_indexes_.MergeFrom(from._impl_.merge_formula_indexes_);
  if (from._internal_has_merge_type()) {
    _this->_internal_set_merge_type(from._internal_merge_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeOperationArchive::CopyFrom(const MergeOperationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.MergeOperationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeOperationArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.merge_ranges_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.merge_formulas_))
    return false;
  return true;
}

void MergeOperationArchive::InternalSwap(MergeOperationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.merge_ranges_.InternalSwap(&other->_impl_.merge_ranges_);
  _impl_.merge_formulas_.InternalSwap(&other->_impl_.merge_formulas_);
  _impl_.merge_formula_indexes_.InternalSwap(&other->_impl_.merge_formula_indexes_);
  swap(_impl_.merge_type_, other->_impl_.merge_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeOperationArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[124]);
}

// ===================================================================

class MergeOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeOwnerArchive>()._impl_._has_bits_);
  static const ::TSP::CFUUIDArchive& owner_id(const MergeOwnerArchive* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaStoreArchive& formula_store(const MergeOwnerArchive* msg);
  static void set_has_formula_store(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
MergeOwnerArchive::_Internal::owner_id(const MergeOwnerArchive* msg) {
  return *msg->_impl_.owner_id_;
}
const ::TST::FormulaStoreArchive&
MergeOwnerArchive::_Internal::formula_store(const MergeOwnerArchive* msg) {
  return *msg->_impl_.formula_store_;
}
void MergeOwnerArchive::clear_owner_id() {
  if (_impl_.owner_id_ != nullptr) _impl_.owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MergeOwnerArchive::MergeOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.MergeOwnerArchive)
}
MergeOwnerArchive::MergeOwnerArchive(const MergeOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MergeOwnerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.formula_store_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    _this->_impl_.owner_id_ = new ::TSP::CFUUIDArchive(*from._impl_.owner_id_);
  }
  if (from._internal_has_formula_store()) {
    _this->_impl_.formula_store_ = new ::TST::FormulaStoreArchive(*from._impl_.formula_store_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.MergeOwnerArchive)
}

inline void MergeOwnerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.formula_store_){nullptr}
  };
}

MergeOwnerArchive::~MergeOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.MergeOwnerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MergeOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_id_;
  if (this != internal_default_instance()) delete _impl_.formula_store_;
}

void MergeOwnerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MergeOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.MergeOwnerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.owner_id_ != nullptr);
      _impl_.owner_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.formula_store_ != nullptr);
      _impl_.formula_store_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeOwnerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.FormulaStoreArchive formula_store = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_store(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MergeOwnerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.MergeOwnerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.CFUUIDArchive owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_id(this),
        _Internal::owner_id(this).GetCachedSize(), target, stream);
  }

  // optional .TST.FormulaStoreArchive formula_store = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::formula_store(this),
        _Internal::formula_store(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.MergeOwnerArchive)
  return target;
}

size_t MergeOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.MergeOwnerArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive owner_id = 1;
  if (_internal_has_owner_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.FormulaStoreArchive formula_store = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_store_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MergeOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeOwnerArchive::GetClassData() const { return &_class_data_; }


void MergeOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MergeOwnerArchive*>(&to_msg);
  auto& from = static_cast<const MergeOwnerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.MergeOwnerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_formula_store()->::TST::FormulaStoreArchive::MergeFrom(
          from._internal_formula_store());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeOwnerArchive::CopyFrom(const MergeOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.MergeOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_formula_store()) {
    if (!_impl_.formula_store_->IsInitialized()) return false;
  }
  return true;
}

void MergeOwnerArchive::InternalSwap(MergeOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeOwnerArchive, _impl_.formula_store_)
      + sizeof(MergeOwnerArchive::_impl_.formula_store_)
      - PROTOBUF_FIELD_OFFSET(MergeOwnerArchive, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeOwnerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[125]);
}

// ===================================================================

class PencilAnnotationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& table_info(const PencilAnnotationArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& pencil_annotation_storage(const PencilAnnotationArchive* msg);
  static void set_has_pencil_annotation_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
PencilAnnotationArchive::_Internal::table_info(const PencilAnnotationArchive* msg) {
  return *msg->_impl_.table_info_;
}
const ::TSP::Reference&
PencilAnnotationArchive::_Internal::pencil_annotation_storage(const PencilAnnotationArchive* msg) {
  return *msg->_impl_.pencil_annotation_storage_;
}
void PencilAnnotationArchive::clear_table_info() {
  if (_impl_.table_info_ != nullptr) _impl_.table_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PencilAnnotationArchive::clear_pencil_annotation_storage() {
  if (_impl_.pencil_annotation_storage_ != nullptr) _impl_.pencil_annotation_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PencilAnnotationArchive::PencilAnnotationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.PencilAnnotationArchive)
}
PencilAnnotationArchive::PencilAnnotationArchive(const PencilAnnotationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PencilAnnotationArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.pencil_annotation_storage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    _this->_impl_.table_info_ = new ::TSP::Reference(*from._impl_.table_info_);
  }
  if (from._internal_has_pencil_annotation_storage()) {
    _this->_impl_.pencil_annotation_storage_ = new ::TSP::Reference(*from._impl_.pencil_annotation_storage_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.PencilAnnotationArchive)
}

inline void PencilAnnotationArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.pencil_annotation_storage_){nullptr}
  };
}

PencilAnnotationArchive::~PencilAnnotationArchive() {
  // @@protoc_insertion_point(destructor:TST.PencilAnnotationArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PencilAnnotationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_info_;
  if (this != internal_default_instance()) delete _impl_.pencil_annotation_storage_;
}

void PencilAnnotationArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PencilAnnotationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PencilAnnotationArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_info_ != nullptr);
      _impl_.table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pencil_annotation_storage_ != nullptr);
      _impl_.pencil_annotation_storage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pencil_annotation_storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PencilAnnotationArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PencilAnnotationArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_info(this),
        _Internal::table_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pencil_annotation_storage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pencil_annotation_storage(this),
        _Internal::pencil_annotation_storage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PencilAnnotationArchive)
  return target;
}

size_t PencilAnnotationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PencilAnnotationArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference table_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_info_);
    }

    // optional .TSP.Reference pencil_annotation_storage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pencil_annotation_storage_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PencilAnnotationArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PencilAnnotationArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PencilAnnotationArchive::GetClassData() const { return &_class_data_; }


void PencilAnnotationArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PencilAnnotationArchive*>(&to_msg);
  auto& from = static_cast<const PencilAnnotationArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.PencilAnnotationArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_info()->::TSP::Reference::MergeFrom(
          from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pencil_annotation_storage()->::TSP::Reference::MergeFrom(
          from._internal_pencil_annotation_storage());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PencilAnnotationArchive::CopyFrom(const PencilAnnotationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PencilAnnotationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationArchive::IsInitialized() const {
  if (_internal_has_table_info()) {
    if (!_impl_.table_info_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_storage()) {
    if (!_impl_.pencil_annotation_storage_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationArchive::InternalSwap(PencilAnnotationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PencilAnnotationArchive, _impl_.pencil_annotation_storage_)
      + sizeof(PencilAnnotationArchive::_impl_.pencil_annotation_storage_)
      - PROTOBUF_FIELD_OFFSET(PencilAnnotationArchive, _impl_.table_info_)>(
          reinterpret_cast<char*>(&_impl_.table_info_),
          reinterpret_cast<char*>(&other->_impl_.table_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[126]);
}

// ===================================================================

class PencilAnnotationOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationOwnerArchive>()._impl_._has_bits_);
  static const ::TSP::CFUUIDArchive& owner_id(const PencilAnnotationOwnerArchive* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaStoreArchive& formula_store(const PencilAnnotationOwnerArchive* msg);
  static void set_has_formula_store(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
PencilAnnotationOwnerArchive::_Internal::owner_id(const PencilAnnotationOwnerArchive* msg) {
  return *msg->_impl_.owner_id_;
}
const ::TST::FormulaStoreArchive&
PencilAnnotationOwnerArchive::_Internal::formula_store(const PencilAnnotationOwnerArchive* msg) {
  return *msg->_impl_.formula_store_;
}
void PencilAnnotationOwnerArchive::clear_owner_id() {
  if (_impl_.owner_id_ != nullptr) _impl_.owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PencilAnnotationOwnerArchive::clear_annotations() {
  _impl_.annotations_.Clear();
}
PencilAnnotationOwnerArchive::PencilAnnotationOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.PencilAnnotationOwnerArchive)
}
PencilAnnotationOwnerArchive::PencilAnnotationOwnerArchive(const PencilAnnotationOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PencilAnnotationOwnerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.formula_store_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    _this->_impl_.owner_id_ = new ::TSP::CFUUIDArchive(*from._impl_.owner_id_);
  }
  if (from._internal_has_formula_store()) {
    _this->_impl_.formula_store_ = new ::TST::FormulaStoreArchive(*from._impl_.formula_store_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.PencilAnnotationOwnerArchive)
}

inline void PencilAnnotationOwnerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){arena}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.formula_store_){nullptr}
  };
}

PencilAnnotationOwnerArchive::~PencilAnnotationOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.PencilAnnotationOwnerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PencilAnnotationOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotations_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.owner_id_;
  if (this != internal_default_instance()) delete _impl_.formula_store_;
}

void PencilAnnotationOwnerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PencilAnnotationOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PencilAnnotationOwnerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotations_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.owner_id_ != nullptr);
      _impl_.owner_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.formula_store_ != nullptr);
      _impl_.formula_store_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationOwnerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.FormulaStoreArchive formula_store = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_store(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference annotations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PencilAnnotationOwnerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PencilAnnotationOwnerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.CFUUIDArchive owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_id(this),
        _Internal::owner_id(this).GetCachedSize(), target, stream);
  }

  // optional .TST.FormulaStoreArchive formula_store = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::formula_store(this),
        _Internal::formula_store(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference annotations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PencilAnnotationOwnerArchive)
  return target;
}

size_t PencilAnnotationOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PencilAnnotationOwnerArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive owner_id = 1;
  if (_internal_has_owner_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference annotations = 3;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_impl_.annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.FormulaStoreArchive formula_store = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_store_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PencilAnnotationOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PencilAnnotationOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PencilAnnotationOwnerArchive::GetClassData() const { return &_class_data_; }


void PencilAnnotationOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PencilAnnotationOwnerArchive*>(&to_msg);
  auto& from = static_cast<const PencilAnnotationOwnerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.PencilAnnotationOwnerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_formula_store()->::TST::FormulaStoreArchive::MergeFrom(
          from._internal_formula_store());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PencilAnnotationOwnerArchive::CopyFrom(const PencilAnnotationOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PencilAnnotationOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.annotations_))
    return false;
  if (_internal_has_formula_store()) {
    if (!_impl_.formula_store_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationOwnerArchive::InternalSwap(PencilAnnotationOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PencilAnnotationOwnerArchive, _impl_.formula_store_)
      + sizeof(PencilAnnotationOwnerArchive::_impl_.formula_store_)
      - PROTOBUF_FIELD_OFFSET(PencilAnnotationOwnerArchive, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationOwnerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[127]);
}

// ===================================================================

class AccumulatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AccumulatorArchive>()._impl_._has_bits_);
  static void set_has_bool_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_number_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_date_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_duration_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_string_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::CellValueArchive& min_value(const AccumulatorArchive* msg);
  static void set_has_min_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellValueArchive& max_value(const AccumulatorArchive* msg);
  static void set_has_max_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellValueArchive& number_total_value(const AccumulatorArchive* msg);
  static void set_has_number_total_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellValueArchive& first_date_seen(const AccumulatorArchive* msg);
  static void set_has_first_date_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_secs_since_ref_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_secs_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bool_true_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_error_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_circular_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCE::CellValueArchive& product_value(const AccumulatorArchive* msg);
  static void set_has_product_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_no_content_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCE::CellValueArchive&
AccumulatorArchive::_Internal::min_value(const AccumulatorArchive* msg) {
  return *msg->_impl_.min_value_;
}
const ::TSCE::CellValueArchive&
AccumulatorArchive::_Internal::max_value(const AccumulatorArchive* msg) {
  return *msg->_impl_.max_value_;
}
const ::TSCE::CellValueArchive&
AccumulatorArchive::_Internal::number_total_value(const AccumulatorArchive* msg) {
  return *msg->_impl_.number_total_value_;
}
const ::TSCE::CellValueArchive&
AccumulatorArchive::_Internal::first_date_seen(const AccumulatorArchive* msg) {
  return *msg->_impl_.first_date_seen_;
}
const ::TSCE::CellValueArchive&
AccumulatorArchive::_Internal::product_value(const AccumulatorArchive* msg) {
  return *msg->_impl_.product_value_;
}
void AccumulatorArchive::clear_min_value() {
  if (_impl_.min_value_ != nullptr) _impl_.min_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AccumulatorArchive::clear_max_value() {
  if (_impl_.max_value_ != nullptr) _impl_.max_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AccumulatorArchive::clear_number_total_value() {
  if (_impl_.number_total_value_ != nullptr) _impl_.number_total_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AccumulatorArchive::clear_first_date_seen() {
  if (_impl_.first_date_seen_ != nullptr) _impl_.first_date_seen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AccumulatorArchive::clear_product_value() {
  if (_impl_.product_value_ != nullptr) _impl_.product_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
AccumulatorArchive::AccumulatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.AccumulatorArchive)
}
AccumulatorArchive::AccumulatorArchive(const AccumulatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccumulatorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_value_){nullptr}
    , decltype(_impl_.max_value_){nullptr}
    , decltype(_impl_.number_total_value_){nullptr}
    , decltype(_impl_.first_date_seen_){nullptr}
    , decltype(_impl_.product_value_){nullptr}
    , decltype(_impl_.bool_count_){}
    , decltype(_impl_.number_count_){}
    , decltype(_impl_.date_count_){}
    , decltype(_impl_.duration_count_){}
    , decltype(_impl_.string_count_){}
    , decltype(_impl_.bool_true_count_){}
    , decltype(_impl_.total_secs_since_ref_date_){}
    , decltype(_impl_.secs_to_add_){}
    , decltype(_impl_.error_count_){}
    , decltype(_impl_.is_circular_ref_){}
    , decltype(_impl_.no_content_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min_value()) {
    _this->_impl_.min_value_ = new ::TSCE::CellValueArchive(*from._impl_.min_value_);
  }
  if (from._internal_has_max_value()) {
    _this->_impl_.max_value_ = new ::TSCE::CellValueArchive(*from._impl_.max_value_);
  }
  if (from._internal_has_number_total_value()) {
    _this->_impl_.number_total_value_ = new ::TSCE::CellValueArchive(*from._impl_.number_total_value_);
  }
  if (from._internal_has_first_date_seen()) {
    _this->_impl_.first_date_seen_ = new ::TSCE::CellValueArchive(*from._impl_.first_date_seen_);
  }
  if (from._internal_has_product_value()) {
    _this->_impl_.product_value_ = new ::TSCE::CellValueArchive(*from._impl_.product_value_);
  }
  ::memcpy(&_impl_.bool_count_, &from._impl_.bool_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.no_content_count_) -
    reinterpret_cast<char*>(&_impl_.bool_count_)) + sizeof(_impl_.no_content_count_));
  // @@protoc_insertion_point(copy_constructor:TST.AccumulatorArchive)
}

inline void AccumulatorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_value_){nullptr}
    , decltype(_impl_.max_value_){nullptr}
    , decltype(_impl_.number_total_value_){nullptr}
    , decltype(_impl_.first_date_seen_){nullptr}
    , decltype(_impl_.product_value_){nullptr}
    , decltype(_impl_.bool_count_){0u}
    , decltype(_impl_.number_count_){0u}
    , decltype(_impl_.date_count_){0u}
    , decltype(_impl_.duration_count_){0u}
    , decltype(_impl_.string_count_){0u}
    , decltype(_impl_.bool_true_count_){0u}
    , decltype(_impl_.total_secs_since_ref_date_){0}
    , decltype(_impl_.secs_to_add_){0}
    , decltype(_impl_.error_count_){0u}
    , decltype(_impl_.is_circular_ref_){false}
    , decltype(_impl_.no_content_count_){0u}
  };
}

AccumulatorArchive::~AccumulatorArchive() {
  // @@protoc_insertion_point(destructor:TST.AccumulatorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccumulatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.min_value_;
  if (this != internal_default_instance()) delete _impl_.max_value_;
  if (this != internal_default_instance()) delete _impl_.number_total_value_;
  if (this != internal_default_instance()) delete _impl_.first_date_seen_;
  if (this != internal_default_instance()) delete _impl_.product_value_;
}

void AccumulatorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccumulatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.AccumulatorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.min_value_ != nullptr);
      _impl_.min_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.max_value_ != nullptr);
      _impl_.max_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.number_total_value_ != nullptr);
      _impl_.number_total_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.first_date_seen_ != nullptr);
      _impl_.first_date_seen_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.product_value_ != nullptr);
      _impl_.product_value_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.bool_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.date_count_) -
        reinterpret_cast<char*>(&_impl_.bool_count_)) + sizeof(_impl_.date_count_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.duration_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.no_content_count_) -
        reinterpret_cast<char*>(&_impl_.duration_count_)) + sizeof(_impl_.no_content_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccumulatorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bool_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bool_count(&has_bits);
          _impl_.bool_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_number_count(&has_bits);
          _impl_.number_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 date_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_date_count(&has_bits);
          _impl_.date_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_duration_count(&has_bits);
          _impl_.duration_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 string_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_string_count(&has_bits);
          _impl_.string_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellValueArchive min_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellValueArchive max_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellValueArchive number_total_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_total_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellValueArchive first_date_seen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_first_date_seen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double total_secs_since_ref_date = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_total_secs_since_ref_date(&has_bits);
          _impl_.total_secs_since_ref_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double secs_to_add = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_secs_to_add(&has_bits);
          _impl_.secs_to_add_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bool_true_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_bool_true_count(&has_bits);
          _impl_.bool_true_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 error_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_error_count(&has_bits);
          _impl_.error_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_circular_ref = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_is_circular_ref(&has_bits);
          _impl_.is_circular_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellValueArchive product_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_product_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 no_content_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_no_content_count(&has_bits);
          _impl_.no_content_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccumulatorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.AccumulatorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 bool_count = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bool_count(), target);
  }

  // optional uint32 number_count = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number_count(), target);
  }

  // optional uint32 date_count = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date_count(), target);
  }

  // optional uint32 duration_count = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duration_count(), target);
  }

  // optional uint32 string_count = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_string_count(), target);
  }

  // required .TSCE.CellValueArchive min_value = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::min_value(this),
        _Internal::min_value(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.CellValueArchive max_value = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::max_value(this),
        _Internal::max_value(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.CellValueArchive number_total_value = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::number_total_value(this),
        _Internal::number_total_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellValueArchive first_date_seen = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::first_date_seen(this),
        _Internal::first_date_seen(this).GetCachedSize(), target, stream);
  }

  // optional double total_secs_since_ref_date = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_total_secs_since_ref_date(), target);
  }

  // optional double secs_to_add = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_secs_to_add(), target);
  }

  // optional uint32 bool_true_count = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_bool_true_count(), target);
  }

  // optional uint32 error_count = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_error_count(), target);
  }

  // optional bool is_circular_ref = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_is_circular_ref(), target);
  }

  // optional .TSCE.CellValueArchive product_value = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::product_value(this),
        _Internal::product_value(this).GetCachedSize(), target, stream);
  }

  // optional uint32 no_content_count = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_no_content_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.AccumulatorArchive)
  return target;
}

size_t AccumulatorArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.AccumulatorArchive)
  size_t total_size = 0;

  if (_internal_has_min_value()) {
    // required .TSCE.CellValueArchive min_value = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_value_);
  }

  if (_internal_has_max_value()) {
    // required .TSCE.CellValueArchive max_value = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_value_);
  }

  if (_internal_has_number_total_value()) {
    // required .TSCE.CellValueArchive number_total_value = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.number_total_value_);
  }

  return total_size;
}
size_t AccumulatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.AccumulatorArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCE.CellValueArchive min_value = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_value_);

    // required .TSCE.CellValueArchive max_value = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_value_);

    // required .TSCE.CellValueArchive number_total_value = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.number_total_value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional .TSCE.CellValueArchive first_date_seen = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.first_date_seen_);
    }

    // optional .TSCE.CellValueArchive product_value = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.product_value_);
    }

    // optional uint32 bool_count = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bool_count());
    }

    // optional uint32 number_count = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_count());
    }

    // optional uint32 date_count = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_date_count());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 duration_count = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_count());
    }

    // optional uint32 string_count = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_string_count());
    }

    // optional uint32 bool_true_count = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bool_true_count());
    }

    // optional double total_secs_since_ref_date = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double secs_to_add = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional uint32 error_count = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_error_count());
    }

    // optional bool is_circular_ref = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional uint32 no_content_count = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_no_content_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccumulatorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccumulatorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccumulatorArchive::GetClassData() const { return &_class_data_; }


void AccumulatorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccumulatorArchive*>(&to_msg);
  auto& from = static_cast<const AccumulatorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.AccumulatorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_min_value()->::TSCE::CellValueArchive::MergeFrom(
          from._internal_min_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_max_value()->::TSCE::CellValueArchive::MergeFrom(
          from._internal_max_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_number_total_value()->::TSCE::CellValueArchive::MergeFrom(
          from._internal_number_total_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_first_date_seen()->::TSCE::CellValueArchive::MergeFrom(
          from._internal_first_date_seen());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_product_value()->::TSCE::CellValueArchive::MergeFrom(
          from._internal_product_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bool_count_ = from._impl_.bool_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.number_count_ = from._impl_.number_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.date_count_ = from._impl_.date_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.duration_count_ = from._impl_.duration_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.string_count_ = from._impl_.string_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.bool_true_count_ = from._impl_.bool_true_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.total_secs_since_ref_date_ = from._impl_.total_secs_since_ref_date_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.secs_to_add_ = from._impl_.secs_to_add_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.error_count_ = from._impl_.error_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_circular_ref_ = from._impl_.is_circular_ref_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.no_content_count_ = from._impl_.no_content_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccumulatorArchive::CopyFrom(const AccumulatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.AccumulatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccumulatorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_min_value()) {
    if (!_impl_.min_value_->IsInitialized()) return false;
  }
  if (_internal_has_max_value()) {
    if (!_impl_.max_value_->IsInitialized()) return false;
  }
  if (_internal_has_number_total_value()) {
    if (!_impl_.number_total_value_->IsInitialized()) return false;
  }
  if (_internal_has_first_date_seen()) {
    if (!_impl_.first_date_seen_->IsInitialized()) return false;
  }
  if (_internal_has_product_value()) {
    if (!_impl_.product_value_->IsInitialized()) return false;
  }
  return true;
}

void AccumulatorArchive::InternalSwap(AccumulatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccumulatorArchive, _impl_.no_content_count_)
      + sizeof(AccumulatorArchive::_impl_.no_content_count_)
      - PROTOBUF_FIELD_OFFSET(AccumulatorArchive, _impl_.min_value_)>(
          reinterpret_cast<char*>(&_impl_.min_value_),
          reinterpret_cast<char*>(&other->_impl_.min_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccumulatorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[128]);
}

// ===================================================================

class GroupColumnArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupColumnArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& column_uid(const GroupColumnArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grouping_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::FunctorArchive& grouping_functor(const GroupColumnArchive* msg);
  static void set_has_grouping_functor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& grouping_column_uid(const GroupColumnArchive* msg);
  static void set_has_grouping_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TSP::UUID&
GroupColumnArchive::_Internal::column_uid(const GroupColumnArchive* msg) {
  return *msg->_impl_.column_uid_;
}
const ::TSCE::FunctorArchive&
GroupColumnArchive::_Internal::grouping_functor(const GroupColumnArchive* msg) {
  return *msg->_impl_.grouping_functor_;
}
const ::TSP::UUID&
GroupColumnArchive::_Internal::grouping_column_uid(const GroupColumnArchive* msg) {
  return *msg->_impl_.grouping_column_uid_;
}
void GroupColumnArchive::clear_column_uid() {
  if (_impl_.column_uid_ != nullptr) _impl_.column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GroupColumnArchive::clear_grouping_functor() {
  if (_impl_.grouping_functor_ != nullptr) _impl_.grouping_functor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GroupColumnArchive::clear_grouping_column_uid() {
  if (_impl_.grouping_column_uid_ != nullptr) _impl_.grouping_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GroupColumnArchive::GroupColumnArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.GroupColumnArchive)
}
GroupColumnArchive::GroupColumnArchive(const GroupColumnArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupColumnArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.grouping_functor_){nullptr}
    , decltype(_impl_.grouping_column_uid_){nullptr}
    , decltype(_impl_.grouping_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    _this->_impl_.column_uid_ = new ::TSP::UUID(*from._impl_.column_uid_);
  }
  if (from._internal_has_grouping_functor()) {
    _this->_impl_.grouping_functor_ = new ::TSCE::FunctorArchive(*from._impl_.grouping_functor_);
  }
  if (from._internal_has_grouping_column_uid()) {
    _this->_impl_.grouping_column_uid_ = new ::TSP::UUID(*from._impl_.grouping_column_uid_);
  }
  _this->_impl_.grouping_type_ = from._impl_.grouping_type_;
  // @@protoc_insertion_point(copy_constructor:TST.GroupColumnArchive)
}

inline void GroupColumnArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.grouping_functor_){nullptr}
    , decltype(_impl_.grouping_column_uid_){nullptr}
    , decltype(_impl_.grouping_type_){0u}
  };
}

GroupColumnArchive::~GroupColumnArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupColumnArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupColumnArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.column_uid_;
  if (this != internal_default_instance()) delete _impl_.grouping_functor_;
  if (this != internal_default_instance()) delete _impl_.grouping_column_uid_;
}

void GroupColumnArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupColumnArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupColumnArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.column_uid_ != nullptr);
      _impl_.column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.grouping_functor_ != nullptr);
      _impl_.grouping_functor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.grouping_column_uid_ != nullptr);
      _impl_.grouping_column_uid_->Clear();
    }
  }
  _impl_.grouping_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupColumnArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 grouping_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_grouping_type(&has_bits);
          _impl_.grouping_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FunctorArchive grouping_functor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_functor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID grouping_column_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupColumnArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupColumnArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column_uid(this),
        _Internal::column_uid(this).GetCachedSize(), target, stream);
  }

  // required uint32 grouping_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grouping_type(), target);
  }

  // optional .TSCE.FunctorArchive grouping_functor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::grouping_functor(this),
        _Internal::grouping_functor(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID grouping_column_uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::grouping_column_uid(this),
        _Internal::grouping_column_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupColumnArchive)
  return target;
}

size_t GroupColumnArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.GroupColumnArchive)
  size_t total_size = 0;

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);
  }

  if (_internal_has_grouping_type()) {
    // required uint32 grouping_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grouping_type());
  }

  return total_size;
}
size_t GroupColumnArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupColumnArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);

    // required uint32 grouping_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grouping_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSCE.FunctorArchive grouping_functor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_functor_);
    }

    // optional .TSP.UUID grouping_column_uid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_column_uid_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupColumnArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupColumnArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupColumnArchive::GetClassData() const { return &_class_data_; }


void GroupColumnArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupColumnArchive*>(&to_msg);
  auto& from = static_cast<const GroupColumnArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupColumnArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_grouping_functor()->::TSCE::FunctorArchive::MergeFrom(
          from._internal_grouping_functor());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_grouping_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_grouping_column_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.grouping_type_ = from._impl_.grouping_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupColumnArchive::CopyFrom(const GroupColumnArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupColumnArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupColumnArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!_impl_.column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_functor()) {
    if (!_impl_.grouping_functor_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_column_uid()) {
    if (!_impl_.grouping_column_uid_->IsInitialized()) return false;
  }
  return true;
}

void GroupColumnArchive::InternalSwap(GroupColumnArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupColumnArchive, _impl_.grouping_type_)
      + sizeof(GroupColumnArchive::_impl_.grouping_type_)
      - PROTOBUF_FIELD_OFFSET(GroupColumnArchive, _impl_.column_uid_)>(
          reinterpret_cast<char*>(&_impl_.column_uid_),
          reinterpret_cast<char*>(&other->_impl_.column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupColumnArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[129]);
}

// ===================================================================

class GroupColumnListArchive::_Internal {
 public:
};

GroupColumnListArchive::GroupColumnListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.GroupColumnListArchive)
}
GroupColumnListArchive::GroupColumnListArchive(const GroupColumnListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupColumnListArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_column_){from._impl_.group_column_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.GroupColumnListArchive)
}

inline void GroupColumnListArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_column_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GroupColumnListArchive::~GroupColumnListArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupColumnListArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupColumnListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_column_.~RepeatedPtrField();
}

void GroupColumnListArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupColumnListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupColumnListArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_column_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupColumnListArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.GroupColumnArchive group_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupColumnListArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupColumnListArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.GroupColumnArchive group_column = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_column_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_column(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupColumnListArchive)
  return target;
}

size_t GroupColumnListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupColumnListArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.GroupColumnArchive group_column = 1;
  total_size += 1UL * this->_internal_group_column_size();
  for (const auto& msg : this->_impl_.group_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupColumnListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupColumnListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupColumnListArchive::GetClassData() const { return &_class_data_; }


void GroupColumnListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupColumnListArchive*>(&to_msg);
  auto& from = static_cast<const GroupColumnListArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupColumnListArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_column_.MergeFrom(from._impl_.group_column_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupColumnListArchive::CopyFrom(const GroupColumnListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupColumnListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupColumnListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.group_column_))
    return false;
  return true;
}

void GroupColumnListArchive::InternalSwap(GroupColumnListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.group_column_.InternalSwap(&other->_impl_.group_column_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupColumnListArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[130]);
}

// ===================================================================

class ColumnAggregateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnAggregateArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& column_uid(const ColumnAggregateArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_agg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_show_as_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& column_aggregate_uid(const ColumnAggregateArchive* msg);
  static void set_has_column_aggregate_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& running_total_group_column_uid(const ColumnAggregateArchive* msg);
  static void set_has_running_total_group_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000019) ^ 0x00000019) != 0;
  }
};

const ::TSP::UUID&
ColumnAggregateArchive::_Internal::column_uid(const ColumnAggregateArchive* msg) {
  return *msg->_impl_.column_uid_;
}
const ::TSP::UUID&
ColumnAggregateArchive::_Internal::column_aggregate_uid(const ColumnAggregateArchive* msg) {
  return *msg->_impl_.column_aggregate_uid_;
}
const ::TSP::UUID&
ColumnAggregateArchive::_Internal::running_total_group_column_uid(const ColumnAggregateArchive* msg) {
  return *msg->_impl_.running_total_group_column_uid_;
}
void ColumnAggregateArchive::clear_column_uid() {
  if (_impl_.column_uid_ != nullptr) _impl_.column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ColumnAggregateArchive::clear_column_aggregate_uid() {
  if (_impl_.column_aggregate_uid_ != nullptr) _impl_.column_aggregate_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ColumnAggregateArchive::clear_running_total_group_column_uid() {
  if (_impl_.running_total_group_column_uid_ != nullptr) _impl_.running_total_group_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ColumnAggregateArchive::ColumnAggregateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ColumnAggregateArchive)
}
ColumnAggregateArchive::ColumnAggregateArchive(const ColumnAggregateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnAggregateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.column_aggregate_uid_){nullptr}
    , decltype(_impl_.running_total_group_column_uid_){nullptr}
    , decltype(_impl_.level_){}
    , decltype(_impl_.agg_type_){}
    , decltype(_impl_.show_as_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    _this->_impl_.column_uid_ = new ::TSP::UUID(*from._impl_.column_uid_);
  }
  if (from._internal_has_column_aggregate_uid()) {
    _this->_impl_.column_aggregate_uid_ = new ::TSP::UUID(*from._impl_.column_aggregate_uid_);
  }
  if (from._internal_has_running_total_group_column_uid()) {
    _this->_impl_.running_total_group_column_uid_ = new ::TSP::UUID(*from._impl_.running_total_group_column_uid_);
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.show_as_type_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.show_as_type_));
  // @@protoc_insertion_point(copy_constructor:TST.ColumnAggregateArchive)
}

inline void ColumnAggregateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.column_aggregate_uid_){nullptr}
    , decltype(_impl_.running_total_group_column_uid_){nullptr}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.agg_type_){0u}
    , decltype(_impl_.show_as_type_){0u}
  };
}

ColumnAggregateArchive::~ColumnAggregateArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnAggregateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnAggregateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.column_uid_;
  if (this != internal_default_instance()) delete _impl_.column_aggregate_uid_;
  if (this != internal_default_instance()) delete _impl_.running_total_group_column_uid_;
}

void ColumnAggregateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnAggregateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnAggregateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.column_uid_ != nullptr);
      _impl_.column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.column_aggregate_uid_ != nullptr);
      _impl_.column_aggregate_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.running_total_group_column_uid_ != nullptr);
      _impl_.running_total_group_column_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.show_as_type_) -
        reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.show_as_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnAggregateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 agg_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_agg_type(&has_bits);
          _impl_.agg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 show_as_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_show_as_type(&has_bits);
          _impl_.show_as_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID column_aggregate_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_aggregate_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID running_total_group_column_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_running_total_group_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnAggregateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnAggregateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column_uid(this),
        _Internal::column_uid(this).GetCachedSize(), target, stream);
  }

  // required uint32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // required uint32 agg_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_agg_type(), target);
  }

  // optional uint32 show_as_type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_show_as_type(), target);
  }

  // optional .TSP.UUID column_aggregate_uid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::column_aggregate_uid(this),
        _Internal::column_aggregate_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID running_total_group_column_uid = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::running_total_group_column_uid(this),
        _Internal::running_total_group_column_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnAggregateArchive)
  return target;
}

size_t ColumnAggregateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ColumnAggregateArchive)
  size_t total_size = 0;

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);
  }

  if (_internal_has_level()) {
    // required uint32 level = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  if (_internal_has_agg_type()) {
    // required uint32 agg_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_agg_type());
  }

  return total_size;
}
size_t ColumnAggregateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnAggregateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);

    // required uint32 level = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());

    // required uint32 agg_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_agg_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.UUID column_aggregate_uid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.column_aggregate_uid_);
    }

    // optional .TSP.UUID running_total_group_column_uid = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.running_total_group_column_uid_);
    }

  }
  // optional uint32 show_as_type = 4;
  if (cached_has_bits & 0x00000020u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_show_as_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnAggregateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnAggregateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnAggregateArchive::GetClassData() const { return &_class_data_; }


void ColumnAggregateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnAggregateArchive*>(&to_msg);
  auto& from = static_cast<const ColumnAggregateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnAggregateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_column_aggregate_uid()->::TSP::UUID::MergeFrom(
          from._internal_column_aggregate_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_running_total_group_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_running_total_group_column_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.agg_type_ = from._impl_.agg_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.show_as_type_ = from._impl_.show_as_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnAggregateArchive::CopyFrom(const ColumnAggregateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnAggregateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnAggregateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!_impl_.column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_aggregate_uid()) {
    if (!_impl_.column_aggregate_uid_->IsInitialized()) return false;
  }
  if (_internal_has_running_total_group_column_uid()) {
    if (!_impl_.running_total_group_column_uid_->IsInitialized()) return false;
  }
  return true;
}

void ColumnAggregateArchive::InternalSwap(ColumnAggregateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnAggregateArchive, _impl_.show_as_type_)
      + sizeof(ColumnAggregateArchive::_impl_.show_as_type_)
      - PROTOBUF_FIELD_OFFSET(ColumnAggregateArchive, _impl_.column_uid_)>(
          reinterpret_cast<char*>(&_impl_.column_uid_),
          reinterpret_cast<char*>(&other->_impl_.column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnAggregateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[131]);
}

// ===================================================================

class ColumnAggregateListArchive::_Internal {
 public:
};

ColumnAggregateListArchive::ColumnAggregateListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ColumnAggregateListArchive)
}
ColumnAggregateListArchive::ColumnAggregateListArchive(const ColumnAggregateListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnAggregateListArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregates_){from._impl_.aggregates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ColumnAggregateListArchive)
}

inline void ColumnAggregateListArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aggregates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ColumnAggregateListArchive::~ColumnAggregateListArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnAggregateListArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnAggregateListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aggregates_.~RepeatedPtrField();
}

void ColumnAggregateListArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnAggregateListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnAggregateListArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aggregates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnAggregateListArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.ColumnAggregateArchive aggregates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnAggregateListArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnAggregateListArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.ColumnAggregateArchive aggregates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregates_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnAggregateListArchive)
  return target;
}

size_t ColumnAggregateListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnAggregateListArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.ColumnAggregateArchive aggregates = 1;
  total_size += 1UL * this->_internal_aggregates_size();
  for (const auto& msg : this->_impl_.aggregates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnAggregateListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnAggregateListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnAggregateListArchive::GetClassData() const { return &_class_data_; }


void ColumnAggregateListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnAggregateListArchive*>(&to_msg);
  auto& from = static_cast<const ColumnAggregateListArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnAggregateListArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aggregates_.MergeFrom(from._impl_.aggregates_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnAggregateListArchive::CopyFrom(const ColumnAggregateListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnAggregateListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnAggregateListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.aggregates_))
    return false;
  return true;
}

void ColumnAggregateListArchive::InternalSwap(ColumnAggregateListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.aggregates_.InternalSwap(&other->_impl_.aggregates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnAggregateListArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[132]);
}

// ===================================================================

class GroupByArchive_AggNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByArchive_AggNodeArchive>()._impl_._has_bits_);
  static const ::TSCE::CellCoordinateArchive& formula_coord(const GroupByArchive_AggNodeArchive* msg);
  static void set_has_formula_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::AccumulatorArchive& accum(const GroupByArchive_AggNodeArchive* msg);
  static void set_has_accum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
GroupByArchive_AggNodeArchive::_Internal::formula_coord(const GroupByArchive_AggNodeArchive* msg) {
  return *msg->_impl_.formula_coord_;
}
const ::TST::AccumulatorArchive&
GroupByArchive_AggNodeArchive::_Internal::accum(const GroupByArchive_AggNodeArchive* msg) {
  return *msg->_impl_.accum_;
}
void GroupByArchive_AggNodeArchive::clear_formula_coord() {
  if (_impl_.formula_coord_ != nullptr) _impl_.formula_coord_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GroupByArchive_AggNodeArchive::GroupByArchive_AggNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.GroupByArchive.AggNodeArchive)
}
GroupByArchive_AggNodeArchive::GroupByArchive_AggNodeArchive(const GroupByArchive_AggNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByArchive_AggNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.child_){from._impl_.child_}
    , decltype(_impl_.formula_coord_){nullptr}
    , decltype(_impl_.accum_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula_coord()) {
    _this->_impl_.formula_coord_ = new ::TSCE::CellCoordinateArchive(*from._impl_.formula_coord_);
  }
  if (from._internal_has_accum()) {
    _this->_impl_.accum_ = new ::TST::AccumulatorArchive(*from._impl_.accum_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.GroupByArchive.AggNodeArchive)
}

inline void GroupByArchive_AggNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.child_){arena}
    , decltype(_impl_.formula_coord_){nullptr}
    , decltype(_impl_.accum_){nullptr}
  };
}

GroupByArchive_AggNodeArchive::~GroupByArchive_AggNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupByArchive.AggNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByArchive_AggNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.child_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.formula_coord_;
  if (this != internal_default_instance()) delete _impl_.accum_;
}

void GroupByArchive_AggNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByArchive_AggNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupByArchive.AggNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.child_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.formula_coord_ != nullptr);
      _impl_.formula_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.accum_ != nullptr);
      _impl_.accum_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByArchive_AggNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive formula_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.AccumulatorArchive accum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.GroupByArchive.AggNodeArchive child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByArchive_AggNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupByArchive.AggNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellCoordinateArchive formula_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::formula_coord(this),
        _Internal::formula_coord(this).GetCachedSize(), target, stream);
  }

  // optional .TST.AccumulatorArchive accum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accum(this),
        _Internal::accum(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.GroupByArchive.AggNodeArchive child = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_child_size()); i < n; i++) {
    const auto& repfield = this->_internal_child(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupByArchive.AggNodeArchive)
  return target;
}

size_t GroupByArchive_AggNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupByArchive.AggNodeArchive)
  size_t total_size = 0;

  // required .TSCE.CellCoordinateArchive formula_coord = 1;
  if (_internal_has_formula_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_coord_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.GroupByArchive.AggNodeArchive child = 3;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->_impl_.child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.AccumulatorArchive accum = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accum_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByArchive_AggNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByArchive_AggNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByArchive_AggNodeArchive::GetClassData() const { return &_class_data_; }


void GroupByArchive_AggNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByArchive_AggNodeArchive*>(&to_msg);
  auto& from = static_cast<const GroupByArchive_AggNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupByArchive.AggNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.child_.MergeFrom(from._impl_.child_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula_coord()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_formula_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_accum()->::TST::AccumulatorArchive::MergeFrom(
          from._internal_accum());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByArchive_AggNodeArchive::CopyFrom(const GroupByArchive_AggNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupByArchive.AggNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByArchive_AggNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.child_))
    return false;
  if (_internal_has_accum()) {
    if (!_impl_.accum_->IsInitialized()) return false;
  }
  return true;
}

void GroupByArchive_AggNodeArchive::InternalSwap(GroupByArchive_AggNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.child_.InternalSwap(&other->_impl_.child_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByArchive_AggNodeArchive, _impl_.accum_)
      + sizeof(GroupByArchive_AggNodeArchive::_impl_.accum_)
      - PROTOBUF_FIELD_OFFSET(GroupByArchive_AggNodeArchive, _impl_.formula_coord_)>(
          reinterpret_cast<char*>(&_impl_.formula_coord_),
          reinterpret_cast<char*>(&other->_impl_.formula_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByArchive_AggNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[133]);
}

// ===================================================================

class GroupByArchive_AggregatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByArchive_AggregatorArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& column_uid(const GroupByArchive_AggregatorArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::GroupByArchive_AggNodeArchive& agg_node(const GroupByArchive_AggregatorArchive* msg);
  static void set_has_agg_node(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
GroupByArchive_AggregatorArchive::_Internal::column_uid(const GroupByArchive_AggregatorArchive* msg) {
  return *msg->_impl_.column_uid_;
}
const ::TST::GroupByArchive_AggNodeArchive&
GroupByArchive_AggregatorArchive::_Internal::agg_node(const GroupByArchive_AggregatorArchive* msg) {
  return *msg->_impl_.agg_node_;
}
void GroupByArchive_AggregatorArchive::clear_column_uid() {
  if (_impl_.column_uid_ != nullptr) _impl_.column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GroupByArchive_AggregatorArchive::GroupByArchive_AggregatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.GroupByArchive.AggregatorArchive)
}
GroupByArchive_AggregatorArchive::GroupByArchive_AggregatorArchive(const GroupByArchive_AggregatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByArchive_AggregatorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.agg_node_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    _this->_impl_.column_uid_ = new ::TSP::UUID(*from._impl_.column_uid_);
  }
  if (from._internal_has_agg_node()) {
    _this->_impl_.agg_node_ = new ::TST::GroupByArchive_AggNodeArchive(*from._impl_.agg_node_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.GroupByArchive.AggregatorArchive)
}

inline void GroupByArchive_AggregatorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.agg_node_){nullptr}
  };
}

GroupByArchive_AggregatorArchive::~GroupByArchive_AggregatorArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupByArchive.AggregatorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByArchive_AggregatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.column_uid_;
  if (this != internal_default_instance()) delete _impl_.agg_node_;
}

void GroupByArchive_AggregatorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByArchive_AggregatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupByArchive.AggregatorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.column_uid_ != nullptr);
      _impl_.column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.agg_node_ != nullptr);
      _impl_.agg_node_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByArchive_AggregatorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupByArchive.AggNodeArchive agg_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_agg_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByArchive_AggregatorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupByArchive.AggregatorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column_uid(this),
        _Internal::column_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TST.GroupByArchive.AggNodeArchive agg_node = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::agg_node(this),
        _Internal::agg_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupByArchive.AggregatorArchive)
  return target;
}

size_t GroupByArchive_AggregatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupByArchive.AggregatorArchive)
  size_t total_size = 0;

  // required .TSP.UUID column_uid = 1;
  if (_internal_has_column_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.GroupByArchive.AggNodeArchive agg_node = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.agg_node_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByArchive_AggregatorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByArchive_AggregatorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByArchive_AggregatorArchive::GetClassData() const { return &_class_data_; }


void GroupByArchive_AggregatorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByArchive_AggregatorArchive*>(&to_msg);
  auto& from = static_cast<const GroupByArchive_AggregatorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupByArchive.AggregatorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_agg_node()->::TST::GroupByArchive_AggNodeArchive::MergeFrom(
          from._internal_agg_node());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByArchive_AggregatorArchive::CopyFrom(const GroupByArchive_AggregatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupByArchive.AggregatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByArchive_AggregatorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!_impl_.column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_agg_node()) {
    if (!_impl_.agg_node_->IsInitialized()) return false;
  }
  return true;
}

void GroupByArchive_AggregatorArchive::InternalSwap(GroupByArchive_AggregatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByArchive_AggregatorArchive, _impl_.agg_node_)
      + sizeof(GroupByArchive_AggregatorArchive::_impl_.agg_node_)
      - PROTOBUF_FIELD_OFFSET(GroupByArchive_AggregatorArchive, _impl_.column_uid_)>(
          reinterpret_cast<char*>(&_impl_.column_uid_),
          reinterpret_cast<char*>(&other->_impl_.column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByArchive_AggregatorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[134]);
}

// ===================================================================

class GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_Internal {
 public:
};

void GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::clear_row_uids() {
  _impl_.row_uids_.Clear();
}
GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
}
GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive(const GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.row_uids_){from._impl_.row_uids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
}

inline void GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.row_uids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::~GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_uids_.~RepeatedPtrField();
}

void GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_uids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID row_uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  return target;
}

size_t GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 1;
  total_size += 1UL * this->_internal_row_uids_size();
  for (const auto& msg : this->_impl_.row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::GetClassData() const { return &_class_data_; }


void GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive*>(&to_msg);
  auto& from = static_cast<const GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_uids_.MergeFrom(from._impl_.row_uids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::CopyFrom(const GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_uids_))
    return false;
  return true;
}

void GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::InternalSwap(GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.row_uids_.InternalSwap(&other->_impl_.row_uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[135]);
}

// ===================================================================

class GroupByArchive_GroupNodeArchive_FormatManagerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByArchive_GroupNodeArchive_FormatManagerArchive>()._impl_._has_bits_);
  static const ::TSCE::CellValueArchive& cell_value(const GroupByArchive_GroupNodeArchive_FormatManagerArchive* msg);
  static void set_has_cell_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCE::CellValueArchive&
GroupByArchive_GroupNodeArchive_FormatManagerArchive::_Internal::cell_value(const GroupByArchive_GroupNodeArchive_FormatManagerArchive* msg) {
  return *msg->_impl_.cell_value_;
}
void GroupByArchive_GroupNodeArchive_FormatManagerArchive::clear_cell_value() {
  if (_impl_.cell_value_ != nullptr) _impl_.cell_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GroupByArchive_GroupNodeArchive_FormatManagerArchive::clear_formats() {
  _impl_.formats_.Clear();
}
void GroupByArchive_GroupNodeArchive_FormatManagerArchive::clear_row_uid_lookup_sets() {
  _impl_.row_uid_lookup_sets_.Clear();
}
GroupByArchive_GroupNodeArchive_FormatManagerArchive::GroupByArchive_GroupNodeArchive_FormatManagerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
}
GroupByArchive_GroupNodeArchive_FormatManagerArchive::GroupByArchive_GroupNodeArchive_FormatManagerArchive(const GroupByArchive_GroupNodeArchive_FormatManagerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByArchive_GroupNodeArchive_FormatManagerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formats_){from._impl_.formats_}
    , decltype(_impl_.row_sets_){from._impl_.row_sets_}
    , decltype(_impl_.row_uid_lookup_sets_){from._impl_.row_uid_lookup_sets_}
    , decltype(_impl_.cell_value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_value()) {
    _this->_impl_.cell_value_ = new ::TSCE::CellValueArchive(*from._impl_.cell_value_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
}

inline void GroupByArchive_GroupNodeArchive_FormatManagerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formats_){arena}
    , decltype(_impl_.row_sets_){arena}
    , decltype(_impl_.row_uid_lookup_sets_){arena}
    , decltype(_impl_.cell_value_){nullptr}
  };
}

GroupByArchive_GroupNodeArchive_FormatManagerArchive::~GroupByArchive_GroupNodeArchive_FormatManagerArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByArchive_GroupNodeArchive_FormatManagerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.formats_.~RepeatedPtrField();
  _impl_.row_sets_.~RepeatedPtrField();
  _impl_.row_uid_lookup_sets_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cell_value_;
}

void GroupByArchive_GroupNodeArchive_FormatManagerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByArchive_GroupNodeArchive_FormatManagerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formats_.Clear();
  _impl_.row_sets_.Clear();
  _impl_.row_uid_lookup_sets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cell_value_ != nullptr);
    _impl_.cell_value_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByArchive_GroupNodeArchive_FormatManagerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.CellValueArchive cell_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.FormatStructArchive formats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive row_sets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.IndexSetArchive row_uid_lookup_sets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uid_lookup_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByArchive_GroupNodeArchive_FormatManagerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.CellValueArchive cell_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell_value(this),
        _Internal::cell_value(this).GetCachedSize(), target, stream);
  }

  // repeated .TSK.FormatStructArchive formats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formats_size()); i < n; i++) {
    const auto& repfield = this->_internal_formats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive row_sets = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_sets_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_sets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.IndexSetArchive row_uid_lookup_sets = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_uid_lookup_sets_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_uid_lookup_sets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  return target;
}

size_t GroupByArchive_GroupNodeArchive_FormatManagerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.FormatStructArchive formats = 2;
  total_size += 1UL * this->_internal_formats_size();
  for (const auto& msg : this->_impl_.formats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive row_sets = 3;
  total_size += 1UL * this->_internal_row_sets_size();
  for (const auto& msg : this->_impl_.row_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.IndexSetArchive row_uid_lookup_sets = 4;
  total_size += 1UL * this->_internal_row_uid_lookup_sets_size();
  for (const auto& msg : this->_impl_.row_uid_lookup_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.CellValueArchive cell_value = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByArchive_GroupNodeArchive_FormatManagerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByArchive_GroupNodeArchive_FormatManagerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByArchive_GroupNodeArchive_FormatManagerArchive::GetClassData() const { return &_class_data_; }


void GroupByArchive_GroupNodeArchive_FormatManagerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByArchive_GroupNodeArchive_FormatManagerArchive*>(&to_msg);
  auto& from = static_cast<const GroupByArchive_GroupNodeArchive_FormatManagerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.formats_.MergeFrom(from._impl_.formats_);
  _this->_impl_.row_sets_.MergeFrom(from._impl_.row_sets_);
  _this->_impl_.row_uid_lookup_sets_.MergeFrom(from._impl_.row_uid_lookup_sets_);
  if (from._internal_has_cell_value()) {
    _this->_internal_mutable_cell_value()->::TSCE::CellValueArchive::MergeFrom(
        from._internal_cell_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByArchive_GroupNodeArchive_FormatManagerArchive::CopyFrom(const GroupByArchive_GroupNodeArchive_FormatManagerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByArchive_GroupNodeArchive_FormatManagerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formats_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_sets_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_uid_lookup_sets_))
    return false;
  if (_internal_has_cell_value()) {
    if (!_impl_.cell_value_->IsInitialized()) return false;
  }
  return true;
}

void GroupByArchive_GroupNodeArchive_FormatManagerArchive::InternalSwap(GroupByArchive_GroupNodeArchive_FormatManagerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.formats_.InternalSwap(&other->_impl_.formats_);
  _impl_.row_sets_.InternalSwap(&other->_impl_.row_sets_);
  _impl_.row_uid_lookup_sets_.InternalSwap(&other->_impl_.row_uid_lookup_sets_);
  swap(_impl_.cell_value_, other->_impl_.cell_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByArchive_GroupNodeArchive_FormatManagerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[136]);
}

// ===================================================================

class GroupByArchive_GroupNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByArchive_GroupNodeArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& group_uid(const GroupByArchive_GroupNodeArchive* msg);
  static void set_has_group_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive& format_manager(const GroupByArchive_GroupNodeArchive* msg);
  static void set_has_format_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellValueArchive& group_cell_value(const GroupByArchive_GroupNodeArchive* msg);
  static void set_has_group_cell_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::IndexSetArchive& row_indexes(const GroupByArchive_GroupNodeArchive* msg);
  static void set_has_row_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::IndexSetArchive& row_lookup_uids(const GroupByArchive_GroupNodeArchive* msg);
  static void set_has_row_lookup_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
GroupByArchive_GroupNodeArchive::_Internal::group_uid(const GroupByArchive_GroupNodeArchive* msg) {
  return *msg->_impl_.group_uid_;
}
const ::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive&
GroupByArchive_GroupNodeArchive::_Internal::format_manager(const GroupByArchive_GroupNodeArchive* msg) {
  return *msg->_impl_.format_manager_;
}
const ::TSCE::CellValueArchive&
GroupByArchive_GroupNodeArchive::_Internal::group_cell_value(const GroupByArchive_GroupNodeArchive* msg) {
  return *msg->_impl_.group_cell_value_;
}
const ::TSCE::IndexSetArchive&
GroupByArchive_GroupNodeArchive::_Internal::row_indexes(const GroupByArchive_GroupNodeArchive* msg) {
  return *msg->_impl_.row_indexes_;
}
const ::TSCE::IndexSetArchive&
GroupByArchive_GroupNodeArchive::_Internal::row_lookup_uids(const GroupByArchive_GroupNodeArchive* msg) {
  return *msg->_impl_.row_lookup_uids_;
}
void GroupByArchive_GroupNodeArchive::clear_group_uid() {
  if (_impl_.group_uid_ != nullptr) _impl_.group_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GroupByArchive_GroupNodeArchive::clear_row_uid() {
  _impl_.row_uid_.Clear();
}
void GroupByArchive_GroupNodeArchive::clear_agg_formula_coords() {
  _impl_.agg_formula_coords_.Clear();
}
void GroupByArchive_GroupNodeArchive::clear_group_cell_value() {
  if (_impl_.group_cell_value_ != nullptr) _impl_.group_cell_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GroupByArchive_GroupNodeArchive::clear_row_indexes() {
  if (_impl_.row_indexes_ != nullptr) _impl_.row_indexes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GroupByArchive_GroupNodeArchive::clear_row_lookup_uids() {
  if (_impl_.row_lookup_uids_ != nullptr) _impl_.row_lookup_uids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void GroupByArchive_GroupNodeArchive::clear_child_ref() {
  _impl_.child_ref_.Clear();
}
GroupByArchive_GroupNodeArchive::GroupByArchive_GroupNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.GroupByArchive.GroupNodeArchive)
}
GroupByArchive_GroupNodeArchive::GroupByArchive_GroupNodeArchive(const GroupByArchive_GroupNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByArchive_GroupNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.child_){from._impl_.child_}
    , decltype(_impl_.row_uid_){from._impl_.row_uid_}
    , decltype(_impl_.agg_formula_coords_){from._impl_.agg_formula_coords_}
    , decltype(_impl_.child_ref_){from._impl_.child_ref_}
    , decltype(_impl_.group_uid_){nullptr}
    , decltype(_impl_.format_manager_){nullptr}
    , decltype(_impl_.group_cell_value_){nullptr}
    , decltype(_impl_.row_indexes_){nullptr}
    , decltype(_impl_.row_lookup_uids_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_uid()) {
    _this->_impl_.group_uid_ = new ::TSP::UUID(*from._impl_.group_uid_);
  }
  if (from._internal_has_format_manager()) {
    _this->_impl_.format_manager_ = new ::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive(*from._impl_.format_manager_);
  }
  if (from._internal_has_group_cell_value()) {
    _this->_impl_.group_cell_value_ = new ::TSCE::CellValueArchive(*from._impl_.group_cell_value_);
  }
  if (from._internal_has_row_indexes()) {
    _this->_impl_.row_indexes_ = new ::TSCE::IndexSetArchive(*from._impl_.row_indexes_);
  }
  if (from._internal_has_row_lookup_uids()) {
    _this->_impl_.row_lookup_uids_ = new ::TSCE::IndexSetArchive(*from._impl_.row_lookup_uids_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.GroupByArchive.GroupNodeArchive)
}

inline void GroupByArchive_GroupNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.child_){arena}
    , decltype(_impl_.row_uid_){arena}
    , decltype(_impl_.agg_formula_coords_){arena}
    , decltype(_impl_.child_ref_){arena}
    , decltype(_impl_.group_uid_){nullptr}
    , decltype(_impl_.format_manager_){nullptr}
    , decltype(_impl_.group_cell_value_){nullptr}
    , decltype(_impl_.row_indexes_){nullptr}
    , decltype(_impl_.row_lookup_uids_){nullptr}
  };
}

GroupByArchive_GroupNodeArchive::~GroupByArchive_GroupNodeArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupByArchive.GroupNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByArchive_GroupNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.child_.~RepeatedPtrField();
  _impl_.row_uid_.~RepeatedPtrField();
  _impl_.agg_formula_coords_.~RepeatedPtrField();
  _impl_.child_ref_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.group_uid_;
  if (this != internal_default_instance()) delete _impl_.format_manager_;
  if (this != internal_default_instance()) delete _impl_.group_cell_value_;
  if (this != internal_default_instance()) delete _impl_.row_indexes_;
  if (this != internal_default_instance()) delete _impl_.row_lookup_uids_;
}

void GroupByArchive_GroupNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByArchive_GroupNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupByArchive.GroupNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.child_.Clear();
  _impl_.row_uid_.Clear();
  _impl_.agg_formula_coords_.Clear();
  _impl_.child_ref_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.group_uid_ != nullptr);
      _impl_.group_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.format_manager_ != nullptr);
      _impl_.format_manager_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.group_cell_value_ != nullptr);
      _impl_.group_cell_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.row_indexes_ != nullptr);
      _impl_.row_indexes_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.row_lookup_uids_ != nullptr);
      _impl_.row_lookup_uids_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByArchive_GroupNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.GroupByArchive.GroupNodeArchive child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive agg_formula_coords = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agg_formula_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive format_manager = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_manager(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellValueArchive group_cell_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_cell_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.IndexSetArchive row_indexes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_indexes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.IndexSetArchive row_lookup_uids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_lookup_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference child_ref = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByArchive_GroupNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupByArchive.GroupNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID group_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group_uid(this),
        _Internal::group_uid(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.GroupByArchive.GroupNodeArchive child = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_child_size()); i < n; i++) {
    const auto& repfield = this->_internal_child(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID row_uid = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_uid_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_uid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CellCoordinateArchive agg_formula_coords = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_agg_formula_coords_size()); i < n; i++) {
    const auto& repfield = this->_internal_agg_formula_coords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive format_manager = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::format_manager(this),
        _Internal::format_manager(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellValueArchive group_cell_value = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::group_cell_value(this),
        _Internal::group_cell_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.IndexSetArchive row_indexes = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::row_indexes(this),
        _Internal::row_indexes(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.IndexSetArchive row_lookup_uids = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::row_lookup_uids(this),
        _Internal::row_lookup_uids(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference child_ref = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_child_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_child_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupByArchive.GroupNodeArchive)
  return target;
}

size_t GroupByArchive_GroupNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupByArchive.GroupNodeArchive)
  size_t total_size = 0;

  // required .TSP.UUID group_uid = 1;
  if (_internal_has_group_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.GroupByArchive.GroupNodeArchive child = 3;
  total_size += 1UL * this->_internal_child_size();
  for (const auto& msg : this->_impl_.child_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID row_uid = 4;
  total_size += 1UL * this->_internal_row_uid_size();
  for (const auto& msg : this->_impl_.row_uid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellCoordinateArchive agg_formula_coords = 5;
  total_size += 1UL * this->_internal_agg_formula_coords_size();
  for (const auto& msg : this->_impl_.agg_formula_coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference child_ref = 10;
  total_size += 1UL * this->_internal_child_ref_size();
  for (const auto& msg : this->_impl_.child_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive format_manager = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.format_manager_);
    }

    // optional .TSCE.CellValueArchive group_cell_value = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_cell_value_);
    }

    // optional .TSCE.IndexSetArchive row_indexes = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.row_indexes_);
    }

    // optional .TSCE.IndexSetArchive row_lookup_uids = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.row_lookup_uids_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByArchive_GroupNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByArchive_GroupNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByArchive_GroupNodeArchive::GetClassData() const { return &_class_data_; }


void GroupByArchive_GroupNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByArchive_GroupNodeArchive*>(&to_msg);
  auto& from = static_cast<const GroupByArchive_GroupNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupByArchive.GroupNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.child_.MergeFrom(from._impl_.child_);
  _this->_impl_.row_uid_.MergeFrom(from._impl_.row_uid_);
  _this->_impl_.agg_formula_coords_.MergeFrom(from._impl_.agg_formula_coords_);
  _this->_impl_.child_ref_.MergeFrom(from._impl_.child_ref_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_group_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_format_manager()->::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive::MergeFrom(
          from._internal_format_manager());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_group_cell_value()->::TSCE::CellValueArchive::MergeFrom(
          from._internal_group_cell_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_row_indexes()->::TSCE::IndexSetArchive::MergeFrom(
          from._internal_row_indexes());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_row_lookup_uids()->::TSCE::IndexSetArchive::MergeFrom(
          from._internal_row_lookup_uids());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByArchive_GroupNodeArchive::CopyFrom(const GroupByArchive_GroupNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupByArchive.GroupNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByArchive_GroupNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.child_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_uid_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.child_ref_))
    return false;
  if (_internal_has_group_uid()) {
    if (!_impl_.group_uid_->IsInitialized()) return false;
  }
  if (_internal_has_format_manager()) {
    if (!_impl_.format_manager_->IsInitialized()) return false;
  }
  if (_internal_has_group_cell_value()) {
    if (!_impl_.group_cell_value_->IsInitialized()) return false;
  }
  if (_internal_has_row_indexes()) {
    if (!_impl_.row_indexes_->IsInitialized()) return false;
  }
  if (_internal_has_row_lookup_uids()) {
    if (!_impl_.row_lookup_uids_->IsInitialized()) return false;
  }
  return true;
}

void GroupByArchive_GroupNodeArchive::InternalSwap(GroupByArchive_GroupNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.child_.InternalSwap(&other->_impl_.child_);
  _impl_.row_uid_.InternalSwap(&other->_impl_.row_uid_);
  _impl_.agg_formula_coords_.InternalSwap(&other->_impl_.agg_formula_coords_);
  _impl_.child_ref_.InternalSwap(&other->_impl_.child_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByArchive_GroupNodeArchive, _impl_.row_lookup_uids_)
      + sizeof(GroupByArchive_GroupNodeArchive::_impl_.row_lookup_uids_)
      - PROTOBUF_FIELD_OFFSET(GroupByArchive_GroupNodeArchive, _impl_.group_uid_)>(
          reinterpret_cast<char*>(&_impl_.group_uid_),
          reinterpret_cast<char*>(&other->_impl_.group_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByArchive_GroupNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[137]);
}

// ===================================================================

class GroupByArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& group_by_uid(const GroupByArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::GroupByArchive_GroupNodeArchive& group_node_root(const GroupByArchive* msg);
  static void set_has_group_node_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCE::CellCoordinateArchive& indirect_agg_type_change_formula(const GroupByArchive* msg);
  static void set_has_indirect_agg_type_change_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellCoordinateArchive& grouping_columns_formula(const GroupByArchive* msg);
  static void set_has_grouping_columns_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::CellCoordinateArchive& aggs_in_group_root_formula(const GroupByArchive* msg);
  static void set_has_aggs_in_group_root_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::CellCoordinateArchive& grouping_column_headers_formula(const GroupByArchive* msg);
  static void set_has_grouping_column_headers_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::CellCoordinateArchive& column_order_changed_formula(const GroupByArchive* msg);
  static void set_has_column_order_changed_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCE::CellCoordinateArchive& row_order_changed_formula(const GroupByArchive* msg);
  static void set_has_row_order_changed_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::CellCoordinateArchive& row_order_changed_ignoring_recalc_formula(const GroupByArchive* msg);
  static void set_has_row_order_changed_ignoring_recalc_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_owner_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCE::UidLookupListArchive& row_uid_lookup(const GroupByArchive* msg);
  static void set_has_row_uid_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::CellCoordinateArchive& hidden_states_changed_formula(const GroupByArchive* msg);
  static void set_has_hidden_states_changed_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& group_node_root_ref(const GroupByArchive* msg);
  static void set_has_group_node_root_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001001) ^ 0x00001001) != 0;
  }
};

const ::TSP::UUID&
GroupByArchive::_Internal::group_by_uid(const GroupByArchive* msg) {
  return *msg->_impl_.group_by_uid_;
}
const ::TST::GroupByArchive_GroupNodeArchive&
GroupByArchive::_Internal::group_node_root(const GroupByArchive* msg) {
  return *msg->_impl_.group_node_root_;
}
const ::TSCE::CellCoordinateArchive&
GroupByArchive::_Internal::indirect_agg_type_change_formula(const GroupByArchive* msg) {
  return *msg->_impl_.indirect_agg_type_change_formula_;
}
const ::TSCE::CellCoordinateArchive&
GroupByArchive::_Internal::grouping_columns_formula(const GroupByArchive* msg) {
  return *msg->_impl_.grouping_columns_formula_;
}
const ::TSCE::CellCoordinateArchive&
GroupByArchive::_Internal::aggs_in_group_root_formula(const GroupByArchive* msg) {
  return *msg->_impl_.aggs_in_group_root_formula_;
}
const ::TSCE::CellCoordinateArchive&
GroupByArchive::_Internal::grouping_column_headers_formula(const GroupByArchive* msg) {
  return *msg->_impl_.grouping_column_headers_formula_;
}
const ::TSCE::CellCoordinateArchive&
GroupByArchive::_Internal::column_order_changed_formula(const GroupByArchive* msg) {
  return *msg->_impl_.column_order_changed_formula_;
}
const ::TSCE::CellCoordinateArchive&
GroupByArchive::_Internal::row_order_changed_formula(const GroupByArchive* msg) {
  return *msg->_impl_.row_order_changed_formula_;
}
const ::TSCE::CellCoordinateArchive&
GroupByArchive::_Internal::row_order_changed_ignoring_recalc_formula(const GroupByArchive* msg) {
  return *msg->_impl_.row_order_changed_ignoring_recalc_formula_;
}
const ::TSCE::UidLookupListArchive&
GroupByArchive::_Internal::row_uid_lookup(const GroupByArchive* msg) {
  return *msg->_impl_.row_uid_lookup_;
}
const ::TSCE::CellCoordinateArchive&
GroupByArchive::_Internal::hidden_states_changed_formula(const GroupByArchive* msg) {
  return *msg->_impl_.hidden_states_changed_formula_;
}
const ::TSP::Reference&
GroupByArchive::_Internal::group_node_root_ref(const GroupByArchive* msg) {
  return *msg->_impl_.group_node_root_ref_;
}
void GroupByArchive::clear_group_by_uid() {
  if (_impl_.group_by_uid_ != nullptr) _impl_.group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GroupByArchive::clear_indirect_agg_type_change_formula() {
  if (_impl_.indirect_agg_type_change_formula_ != nullptr) _impl_.indirect_agg_type_change_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GroupByArchive::clear_grouping_columns_formula() {
  if (_impl_.grouping_columns_formula_ != nullptr) _impl_.grouping_columns_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GroupByArchive::clear_aggs_in_group_root_formula() {
  if (_impl_.aggs_in_group_root_formula_ != nullptr) _impl_.aggs_in_group_root_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void GroupByArchive::clear_grouping_column_headers_formula() {
  if (_impl_.grouping_column_headers_formula_ != nullptr) _impl_.grouping_column_headers_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void GroupByArchive::clear_column_order_changed_formula() {
  if (_impl_.column_order_changed_formula_ != nullptr) _impl_.column_order_changed_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void GroupByArchive::clear_row_order_changed_formula() {
  if (_impl_.row_order_changed_formula_ != nullptr) _impl_.row_order_changed_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void GroupByArchive::clear_row_order_changed_ignoring_recalc_formula() {
  if (_impl_.row_order_changed_ignoring_recalc_formula_ != nullptr) _impl_.row_order_changed_ignoring_recalc_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void GroupByArchive::clear_row_uid_lookup() {
  if (_impl_.row_uid_lookup_ != nullptr) _impl_.row_uid_lookup_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void GroupByArchive::clear_hidden_states_changed_formula() {
  if (_impl_.hidden_states_changed_formula_ != nullptr) _impl_.hidden_states_changed_formula_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void GroupByArchive::clear_aggregator_ref() {
  _impl_.aggregator_ref_.Clear();
}
void GroupByArchive::clear_group_node_root_ref() {
  if (_impl_.group_node_root_ref_ != nullptr) _impl_.group_node_root_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
GroupByArchive::GroupByArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.GroupByArchive)
}
GroupByArchive::GroupByArchive(const GroupByArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_column_){from._impl_.group_column_}
    , decltype(_impl_.aggregator_){from._impl_.aggregator_}
    , decltype(_impl_.column_agg_type_){from._impl_.column_agg_type_}
    , decltype(_impl_.aggregator_ref_){from._impl_.aggregator_ref_}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.group_node_root_){nullptr}
    , decltype(_impl_.indirect_agg_type_change_formula_){nullptr}
    , decltype(_impl_.grouping_columns_formula_){nullptr}
    , decltype(_impl_.aggs_in_group_root_formula_){nullptr}
    , decltype(_impl_.grouping_column_headers_formula_){nullptr}
    , decltype(_impl_.column_order_changed_formula_){nullptr}
    , decltype(_impl_.row_order_changed_formula_){nullptr}
    , decltype(_impl_.row_order_changed_ignoring_recalc_formula_){nullptr}
    , decltype(_impl_.row_uid_lookup_){nullptr}
    , decltype(_impl_.hidden_states_changed_formula_){nullptr}
    , decltype(_impl_.group_node_root_ref_){nullptr}
    , decltype(_impl_.is_enabled_){}
    , decltype(_impl_.owner_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    _this->_impl_.group_by_uid_ = new ::TSP::UUID(*from._impl_.group_by_uid_);
  }
  if (from._internal_has_group_node_root()) {
    _this->_impl_.group_node_root_ = new ::TST::GroupByArchive_GroupNodeArchive(*from._impl_.group_node_root_);
  }
  if (from._internal_has_indirect_agg_type_change_formula()) {
    _this->_impl_.indirect_agg_type_change_formula_ = new ::TSCE::CellCoordinateArchive(*from._impl_.indirect_agg_type_change_formula_);
  }
  if (from._internal_has_grouping_columns_formula()) {
    _this->_impl_.grouping_columns_formula_ = new ::TSCE::CellCoordinateArchive(*from._impl_.grouping_columns_formula_);
  }
  if (from._internal_has_aggs_in_group_root_formula()) {
    _this->_impl_.aggs_in_group_root_formula_ = new ::TSCE::CellCoordinateArchive(*from._impl_.aggs_in_group_root_formula_);
  }
  if (from._internal_has_grouping_column_headers_formula()) {
    _this->_impl_.grouping_column_headers_formula_ = new ::TSCE::CellCoordinateArchive(*from._impl_.grouping_column_headers_formula_);
  }
  if (from._internal_has_column_order_changed_formula()) {
    _this->_impl_.column_order_changed_formula_ = new ::TSCE::CellCoordinateArchive(*from._impl_.column_order_changed_formula_);
  }
  if (from._internal_has_row_order_changed_formula()) {
    _this->_impl_.row_order_changed_formula_ = new ::TSCE::CellCoordinateArchive(*from._impl_.row_order_changed_formula_);
  }
  if (from._internal_has_row_order_changed_ignoring_recalc_formula()) {
    _this->_impl_.row_order_changed_ignoring_recalc_formula_ = new ::TSCE::CellCoordinateArchive(*from._impl_.row_order_changed_ignoring_recalc_formula_);
  }
  if (from._internal_has_row_uid_lookup()) {
    _this->_impl_.row_uid_lookup_ = new ::TSCE::UidLookupListArchive(*from._impl_.row_uid_lookup_);
  }
  if (from._internal_has_hidden_states_changed_formula()) {
    _this->_impl_.hidden_states_changed_formula_ = new ::TSCE::CellCoordinateArchive(*from._impl_.hidden_states_changed_formula_);
  }
  if (from._internal_has_group_node_root_ref()) {
    _this->_impl_.group_node_root_ref_ = new ::TSP::Reference(*from._impl_.group_node_root_ref_);
  }
  ::memcpy(&_impl_.is_enabled_, &from._impl_.is_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owner_index_) -
    reinterpret_cast<char*>(&_impl_.is_enabled_)) + sizeof(_impl_.owner_index_));
  // @@protoc_insertion_point(copy_constructor:TST.GroupByArchive)
}

inline void GroupByArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_column_){arena}
    , decltype(_impl_.aggregator_){arena}
    , decltype(_impl_.column_agg_type_){arena}
    , decltype(_impl_.aggregator_ref_){arena}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.group_node_root_){nullptr}
    , decltype(_impl_.indirect_agg_type_change_formula_){nullptr}
    , decltype(_impl_.grouping_columns_formula_){nullptr}
    , decltype(_impl_.aggs_in_group_root_formula_){nullptr}
    , decltype(_impl_.grouping_column_headers_formula_){nullptr}
    , decltype(_impl_.column_order_changed_formula_){nullptr}
    , decltype(_impl_.row_order_changed_formula_){nullptr}
    , decltype(_impl_.row_order_changed_ignoring_recalc_formula_){nullptr}
    , decltype(_impl_.row_uid_lookup_){nullptr}
    , decltype(_impl_.hidden_states_changed_formula_){nullptr}
    , decltype(_impl_.group_node_root_ref_){nullptr}
    , decltype(_impl_.is_enabled_){false}
    , decltype(_impl_.owner_index_){8}
  };
}

GroupByArchive::~GroupByArchive() {
  // @@protoc_insertion_point(destructor:TST.GroupByArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_column_.~RepeatedPtrField();
  _impl_.aggregator_.~RepeatedPtrField();
  _impl_.column_agg_type_.~RepeatedPtrField();
  _impl_.aggregator_ref_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.group_by_uid_;
  if (this != internal_default_instance()) delete _impl_.group_node_root_;
  if (this != internal_default_instance()) delete _impl_.indirect_agg_type_change_formula_;
  if (this != internal_default_instance()) delete _impl_.grouping_columns_formula_;
  if (this != internal_default_instance()) delete _impl_.aggs_in_group_root_formula_;
  if (this != internal_default_instance()) delete _impl_.grouping_column_headers_formula_;
  if (this != internal_default_instance()) delete _impl_.column_order_changed_formula_;
  if (this != internal_default_instance()) delete _impl_.row_order_changed_formula_;
  if (this != internal_default_instance()) delete _impl_.row_order_changed_ignoring_recalc_formula_;
  if (this != internal_default_instance()) delete _impl_.row_uid_lookup_;
  if (this != internal_default_instance()) delete _impl_.hidden_states_changed_formula_;
  if (this != internal_default_instance()) delete _impl_.group_node_root_ref_;
}

void GroupByArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.GroupByArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_column_.Clear();
  _impl_.aggregator_.Clear();
  _impl_.column_agg_type_.Clear();
  _impl_.aggregator_ref_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.group_by_uid_ != nullptr);
      _impl_.group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.group_node_root_ != nullptr);
      _impl_.group_node_root_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.indirect_agg_type_change_formula_ != nullptr);
      _impl_.indirect_agg_type_change_formula_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.grouping_columns_formula_ != nullptr);
      _impl_.grouping_columns_formula_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.aggs_in_group_root_formula_ != nullptr);
      _impl_.aggs_in_group_root_formula_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.grouping_column_headers_formula_ != nullptr);
      _impl_.grouping_column_headers_formula_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.column_order_changed_formula_ != nullptr);
      _impl_.column_order_changed_formula_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.row_order_changed_formula_ != nullptr);
      _impl_.row_order_changed_formula_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.row_order_changed_ignoring_recalc_formula_ != nullptr);
      _impl_.row_order_changed_ignoring_recalc_formula_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.row_uid_lookup_ != nullptr);
      _impl_.row_uid_lookup_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.hidden_states_changed_formula_ != nullptr);
      _impl_.hidden_states_changed_formula_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.group_node_root_ref_ != nullptr);
      _impl_.group_node_root_ref_->Clear();
    }
  }
  if (cached_has_bits & 0x00003000u) {
    _impl_.is_enabled_ = false;
    _impl_.owner_index_ = 8;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_by_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.GroupColumnArchive group_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupByArchive.GroupNodeArchive group_node_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.GroupByArchive.AggregatorArchive aggregator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregator(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.ColumnAggregateArchive column_agg_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_agg_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool is_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_enabled(&has_bits);
          _impl_.is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive indirect_agg_type_change_formula = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_indirect_agg_type_change_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive grouping_columns_formula = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_columns_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive aggs_in_group_root_formula = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggs_in_group_root_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive grouping_column_headers_formula = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_column_headers_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive column_order_changed_formula = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_order_changed_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive row_order_changed_formula = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_order_changed_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive row_order_changed_ignoring_recalc_formula = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_order_changed_ignoring_recalc_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 owner_index = 14 [default = 8];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_owner_index(&has_bits);
          _impl_.owner_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.UidLookupListArchive row_uid_lookup = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_uid_lookup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordinateArchive hidden_states_changed_formula = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_states_changed_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference aggregator_ref = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_aggregator_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference group_node_root_ref = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_root_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.GroupByArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID group_by_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group_by_uid(this),
        _Internal::group_by_uid(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.GroupColumnArchive group_column = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_column_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_column(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TST.GroupByArchive.GroupNodeArchive group_node_root = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::group_node_root(this),
        _Internal::group_node_root(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.GroupByArchive.AggregatorArchive aggregator = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregator_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregator(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.ColumnAggregateArchive column_agg_type = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_agg_type_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_agg_type(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool is_enabled = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_enabled(), target);
  }

  // optional .TSCE.CellCoordinateArchive indirect_agg_type_change_formula = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::indirect_agg_type_change_formula(this),
        _Internal::indirect_agg_type_change_formula(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive grouping_columns_formula = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::grouping_columns_formula(this),
        _Internal::grouping_columns_formula(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive aggs_in_group_root_formula = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::aggs_in_group_root_formula(this),
        _Internal::aggs_in_group_root_formula(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive grouping_column_headers_formula = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::grouping_column_headers_formula(this),
        _Internal::grouping_column_headers_formula(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive column_order_changed_formula = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::column_order_changed_formula(this),
        _Internal::column_order_changed_formula(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive row_order_changed_formula = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::row_order_changed_formula(this),
        _Internal::row_order_changed_formula(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive row_order_changed_ignoring_recalc_formula = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::row_order_changed_ignoring_recalc_formula(this),
        _Internal::row_order_changed_ignoring_recalc_formula(this).GetCachedSize(), target, stream);
  }

  // optional int32 owner_index = 14 [default = 8];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_owner_index(), target);
  }

  // optional .TSCE.UidLookupListArchive row_uid_lookup = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::row_uid_lookup(this),
        _Internal::row_uid_lookup(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordinateArchive hidden_states_changed_formula = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::hidden_states_changed_formula(this),
        _Internal::hidden_states_changed_formula(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference aggregator_ref = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregator_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregator_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference group_node_root_ref = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::group_node_root_ref(this),
        _Internal::group_node_root_ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.GroupByArchive)
  return target;
}

size_t GroupByArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.GroupByArchive)
  size_t total_size = 0;

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);
  }

  if (_internal_has_is_enabled()) {
    // required bool is_enabled = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GroupByArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.GroupByArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00001001) ^ 0x00001001) == 0) {  // All required fields are present.
    // required .TSP.UUID group_by_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);

    // required bool is_enabled = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.GroupColumnArchive group_column = 2;
  total_size += 1UL * this->_internal_group_column_size();
  for (const auto& msg : this->_impl_.group_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.GroupByArchive.AggregatorArchive aggregator = 4;
  total_size += 1UL * this->_internal_aggregator_size();
  for (const auto& msg : this->_impl_.aggregator_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnAggregateArchive column_agg_type = 5;
  total_size += 1UL * this->_internal_column_agg_type_size();
  for (const auto& msg : this->_impl_.column_agg_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference aggregator_ref = 17;
  total_size += 2UL * this->_internal_aggregator_ref_size();
  for (const auto& msg : this->_impl_.aggregator_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TST.GroupByArchive.GroupNodeArchive group_node_root = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_node_root_);
    }

    // optional .TSCE.CellCoordinateArchive indirect_agg_type_change_formula = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.indirect_agg_type_change_formula_);
    }

    // optional .TSCE.CellCoordinateArchive grouping_columns_formula = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_columns_formula_);
    }

    // optional .TSCE.CellCoordinateArchive aggs_in_group_root_formula = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aggs_in_group_root_formula_);
    }

    // optional .TSCE.CellCoordinateArchive grouping_column_headers_formula = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_column_headers_formula_);
    }

    // optional .TSCE.CellCoordinateArchive column_order_changed_formula = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.column_order_changed_formula_);
    }

    // optional .TSCE.CellCoordinateArchive row_order_changed_formula = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.row_order_changed_formula_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSCE.CellCoordinateArchive row_order_changed_ignoring_recalc_formula = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.row_order_changed_ignoring_recalc_formula_);
    }

    // optional .TSCE.UidLookupListArchive row_uid_lookup = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.row_uid_lookup_);
    }

    // optional .TSCE.CellCoordinateArchive hidden_states_changed_formula = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hidden_states_changed_formula_);
    }

    // optional .TSP.Reference group_node_root_ref = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_node_root_ref_);
    }

  }
  // optional int32 owner_index = 14 [default = 8];
  if (cached_has_bits & 0x00002000u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_owner_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByArchive::GetClassData() const { return &_class_data_; }


void GroupByArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByArchive*>(&to_msg);
  auto& from = static_cast<const GroupByArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.GroupByArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_column_.MergeFrom(from._impl_.group_column_);
  _this->_impl_.aggregator_.MergeFrom(from._impl_.aggregator_);
  _this->_impl_.column_agg_type_.MergeFrom(from._impl_.column_agg_type_);
  _this->_impl_.aggregator_ref_.MergeFrom(from._impl_.aggregator_ref_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_group_node_root()->::TST::GroupByArchive_GroupNodeArchive::MergeFrom(
          from._internal_group_node_root());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_indirect_agg_type_change_formula()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_indirect_agg_type_change_formula());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_grouping_columns_formula()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_grouping_columns_formula());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_aggs_in_group_root_formula()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_aggs_in_group_root_formula());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_grouping_column_headers_formula()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_grouping_column_headers_formula());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_column_order_changed_formula()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_column_order_changed_formula());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_row_order_changed_formula()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_row_order_changed_formula());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_row_order_changed_ignoring_recalc_formula()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_row_order_changed_ignoring_recalc_formula());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_row_uid_lookup()->::TSCE::UidLookupListArchive::MergeFrom(
          from._internal_row_uid_lookup());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_hidden_states_changed_formula()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_hidden_states_changed_formula());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_group_node_root_ref()->::TSP::Reference::MergeFrom(
          from._internal_group_node_root_ref());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.is_enabled_ = from._impl_.is_enabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.owner_index_ = from._impl_.owner_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByArchive::CopyFrom(const GroupByArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.GroupByArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.group_column_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.aggregator_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_agg_type_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.aggregator_ref_))
    return false;
  if (_internal_has_group_by_uid()) {
    if (!_impl_.group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_root()) {
    if (!_impl_.group_node_root_->IsInitialized()) return false;
  }
  if (_internal_has_row_uid_lookup()) {
    if (!_impl_.row_uid_lookup_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_root_ref()) {
    if (!_impl_.group_node_root_ref_->IsInitialized()) return false;
  }
  return true;
}

void GroupByArchive::InternalSwap(GroupByArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_column_.InternalSwap(&other->_impl_.group_column_);
  _impl_.aggregator_.InternalSwap(&other->_impl_.aggregator_);
  _impl_.column_agg_type_.InternalSwap(&other->_impl_.column_agg_type_);
  _impl_.aggregator_ref_.InternalSwap(&other->_impl_.aggregator_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByArchive, _impl_.is_enabled_)
      + sizeof(GroupByArchive::_impl_.is_enabled_)
      - PROTOBUF_FIELD_OFFSET(GroupByArchive, _impl_.group_by_uid_)>(
          reinterpret_cast<char*>(&_impl_.group_by_uid_),
          reinterpret_cast<char*>(&other->_impl_.group_by_uid_));
  swap(_impl_.owner_index_, other->_impl_.owner_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[138]);
}

// ===================================================================

class CategoryOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryOwnerArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& owner_uid(const CategoryOwnerArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
CategoryOwnerArchive::_Internal::owner_uid(const CategoryOwnerArchive* msg) {
  return *msg->_impl_.owner_uid_;
}
void CategoryOwnerArchive::clear_owner_uid() {
  if (_impl_.owner_uid_ != nullptr) _impl_.owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CategoryOwnerArchive::CategoryOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerArchive)
}
CategoryOwnerArchive::CategoryOwnerArchive(const CategoryOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryOwnerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_){from._impl_.group_by_}
    , decltype(_impl_.owner_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    _this->_impl_.owner_uid_ = new ::TSP::UUID(*from._impl_.owner_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerArchive)
}

inline void CategoryOwnerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_){arena}
    , decltype(_impl_.owner_uid_){nullptr}
  };
}

CategoryOwnerArchive::~CategoryOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_by_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.owner_uid_;
}

void CategoryOwnerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_by_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_uid_ != nullptr);
    _impl_.owner_uid_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.GroupByArchive group_by = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_by(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryOwnerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_uid(this),
        _Internal::owner_uid(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.GroupByArchive group_by = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_by_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_by(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerArchive)
  return target;
}

size_t CategoryOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerArchive)
  size_t total_size = 0;

  // required .TSP.UUID owner_uid = 1;
  if (_internal_has_owner_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.GroupByArchive group_by = 2;
  total_size += 1UL * this->_internal_group_by_size();
  for (const auto& msg : this->_impl_.group_by_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerArchive::GetClassData() const { return &_class_data_; }


void CategoryOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryOwnerArchive*>(&to_msg);
  auto& from = static_cast<const CategoryOwnerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_by_.MergeFrom(from._impl_.group_by_);
  if (from._internal_has_owner_uid()) {
    _this->_internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(
        from._internal_owner_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerArchive::CopyFrom(const CategoryOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.group_by_))
    return false;
  if (_internal_has_owner_uid()) {
    if (!_impl_.owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void CategoryOwnerArchive::InternalSwap(CategoryOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_by_.InternalSwap(&other->_impl_.group_by_);
  swap(_impl_.owner_uid_, other->_impl_.owner_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[139]);
}

// ===================================================================

class CategoryOwnerRefArchive::_Internal {
 public:
};

void CategoryOwnerRefArchive::clear_group_by() {
  _impl_.group_by_.Clear();
}
CategoryOwnerRefArchive::CategoryOwnerRefArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOwnerRefArchive)
}
CategoryOwnerRefArchive::CategoryOwnerRefArchive(const CategoryOwnerRefArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryOwnerRefArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_by_){from._impl_.group_by_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOwnerRefArchive)
}

inline void CategoryOwnerRefArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_by_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CategoryOwnerRefArchive::~CategoryOwnerRefArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOwnerRefArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryOwnerRefArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_by_.~RepeatedPtrField();
}

void CategoryOwnerRefArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryOwnerRefArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOwnerRefArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_by_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOwnerRefArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference group_by = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_by(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryOwnerRefArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOwnerRefArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference group_by = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_by_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_by(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOwnerRefArchive)
  return target;
}

size_t CategoryOwnerRefArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOwnerRefArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference group_by = 1;
  total_size += 1UL * this->_internal_group_by_size();
  for (const auto& msg : this->_impl_.group_by_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOwnerRefArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryOwnerRefArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOwnerRefArchive::GetClassData() const { return &_class_data_; }


void CategoryOwnerRefArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryOwnerRefArchive*>(&to_msg);
  auto& from = static_cast<const CategoryOwnerRefArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOwnerRefArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_by_.MergeFrom(from._impl_.group_by_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOwnerRefArchive::CopyFrom(const CategoryOwnerRefArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOwnerRefArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOwnerRefArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.group_by_))
    return false;
  return true;
}

void CategoryOwnerRefArchive::InternalSwap(CategoryOwnerRefArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.group_by_.InternalSwap(&other->_impl_.group_by_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOwnerRefArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[140]);
}

// ===================================================================

class PivotGroupingColumnOptionsMapArchive::_Internal {
 public:
};

void PivotGroupingColumnOptionsMapArchive::clear_uids() {
  _impl_.uids_.Clear();
}
void PivotGroupingColumnOptionsMapArchive::clear_aggregate_rule_uids() {
  _impl_.aggregate_rule_uids_.Clear();
}
PivotGroupingColumnOptionsMapArchive::PivotGroupingColumnOptionsMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.PivotGroupingColumnOptionsMapArchive)
}
PivotGroupingColumnOptionsMapArchive::PivotGroupingColumnOptionsMapArchive(const PivotGroupingColumnOptionsMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotGroupingColumnOptionsMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uids_){from._impl_.uids_}
    , decltype(_impl_.flags_){from._impl_.flags_}
    , decltype(_impl_.aggregate_rule_uids_){from._impl_.aggregate_rule_uids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.PivotGroupingColumnOptionsMapArchive)
}

inline void PivotGroupingColumnOptionsMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uids_){arena}
    , decltype(_impl_.flags_){arena}
    , decltype(_impl_.aggregate_rule_uids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PivotGroupingColumnOptionsMapArchive::~PivotGroupingColumnOptionsMapArchive() {
  // @@protoc_insertion_point(destructor:TST.PivotGroupingColumnOptionsMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotGroupingColumnOptionsMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uids_.~RepeatedPtrField();
  _impl_.flags_.~RepeatedField();
  _impl_.aggregate_rule_uids_.~RepeatedPtrField();
}

void PivotGroupingColumnOptionsMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotGroupingColumnOptionsMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PivotGroupingColumnOptionsMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uids_.Clear();
  _impl_.flags_.Clear();
  _impl_.aggregate_rule_uids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotGroupingColumnOptionsMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_flags(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID aggregate_rule_uids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aggregate_rule_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotGroupingColumnOptionsMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PivotGroupingColumnOptionsMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 flags = 2;
  for (int i = 0, n = this->_internal_flags_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(i), target);
  }

  // repeated .TSP.UUID aggregate_rule_uids = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aggregate_rule_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_aggregate_rule_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PivotGroupingColumnOptionsMapArchive)
  return target;
}

size_t PivotGroupingColumnOptionsMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PivotGroupingColumnOptionsMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uids = 1;
  total_size += 1UL * this->_internal_uids_size();
  for (const auto& msg : this->_impl_.uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 flags = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.flags_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_flags_size());
    total_size += data_size;
  }

  // repeated .TSP.UUID aggregate_rule_uids = 4;
  total_size += 1UL * this->_internal_aggregate_rule_uids_size();
  for (const auto& msg : this->_impl_.aggregate_rule_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotGroupingColumnOptionsMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotGroupingColumnOptionsMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotGroupingColumnOptionsMapArchive::GetClassData() const { return &_class_data_; }


void PivotGroupingColumnOptionsMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotGroupingColumnOptionsMapArchive*>(&to_msg);
  auto& from = static_cast<const PivotGroupingColumnOptionsMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.PivotGroupingColumnOptionsMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uids_.MergeFrom(from._impl_.uids_);
  _this->_impl_.flags_.MergeFrom(from._impl_.flags_);
  _this->_impl_.aggregate_rule_uids_.MergeFrom(from._impl_.aggregate_rule_uids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotGroupingColumnOptionsMapArchive::CopyFrom(const PivotGroupingColumnOptionsMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PivotGroupingColumnOptionsMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotGroupingColumnOptionsMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.aggregate_rule_uids_))
    return false;
  return true;
}

void PivotGroupingColumnOptionsMapArchive::InternalSwap(PivotGroupingColumnOptionsMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uids_.InternalSwap(&other->_impl_.uids_);
  _impl_.flags_.InternalSwap(&other->_impl_.flags_);
  _impl_.aggregate_rule_uids_.InternalSwap(&other->_impl_.aggregate_rule_uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotGroupingColumnOptionsMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[141]);
}

// ===================================================================

class PivotOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PivotOwnerArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& pivot_owner_uid(const PivotOwnerArchive* msg);
  static void set_has_pivot_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::GroupColumnListArchive& grouping_columns_for_rows(const PivotOwnerArchive* msg);
  static void set_has_grouping_columns_for_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::GroupColumnListArchive& grouping_columns_for_columns(const PivotOwnerArchive* msg);
  static void set_has_grouping_columns_for_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::ColumnAggregateListArchive& aggregate_columns(const PivotOwnerArchive* msg);
  static void set_has_aggregate_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flattening_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_empty_pivot(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::UUID& source_table_uid(const PivotOwnerArchive* msg);
  static void set_has_source_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_refresh_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& grpg_col_options_map(const PivotOwnerArchive* msg);
  static void set_has_grpg_col_options_map(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hide_grand_total_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_source_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hide_grand_total_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TST::FormulaStoreArchive& formula_store(const PivotOwnerArchive* msg);
  static void set_has_formula_store(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::UUID& refresh_uid(const PivotOwnerArchive* msg);
  static void set_has_refresh_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& row_column_rule_change_uid(const PivotOwnerArchive* msg);
  static void set_has_row_column_rule_change_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::UUID& aggregate_rule_change_uid(const PivotOwnerArchive* msg);
  static void set_has_aggregate_rule_change_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::TSP::UUID&
PivotOwnerArchive::_Internal::pivot_owner_uid(const PivotOwnerArchive* msg) {
  return *msg->_impl_.pivot_owner_uid_;
}
const ::TST::GroupColumnListArchive&
PivotOwnerArchive::_Internal::grouping_columns_for_rows(const PivotOwnerArchive* msg) {
  return *msg->_impl_.grouping_columns_for_rows_;
}
const ::TST::GroupColumnListArchive&
PivotOwnerArchive::_Internal::grouping_columns_for_columns(const PivotOwnerArchive* msg) {
  return *msg->_impl_.grouping_columns_for_columns_;
}
const ::TST::ColumnAggregateListArchive&
PivotOwnerArchive::_Internal::aggregate_columns(const PivotOwnerArchive* msg) {
  return *msg->_impl_.aggregate_columns_;
}
const ::TSP::UUID&
PivotOwnerArchive::_Internal::source_table_uid(const PivotOwnerArchive* msg) {
  return *msg->_impl_.source_table_uid_;
}
const ::TSP::Reference&
PivotOwnerArchive::_Internal::grpg_col_options_map(const PivotOwnerArchive* msg) {
  return *msg->_impl_.grpg_col_options_map_;
}
const ::TST::FormulaStoreArchive&
PivotOwnerArchive::_Internal::formula_store(const PivotOwnerArchive* msg) {
  return *msg->_impl_.formula_store_;
}
const ::TSP::UUID&
PivotOwnerArchive::_Internal::refresh_uid(const PivotOwnerArchive* msg) {
  return *msg->_impl_.refresh_uid_;
}
const ::TSP::UUID&
PivotOwnerArchive::_Internal::row_column_rule_change_uid(const PivotOwnerArchive* msg) {
  return *msg->_impl_.row_column_rule_change_uid_;
}
const ::TSP::UUID&
PivotOwnerArchive::_Internal::aggregate_rule_change_uid(const PivotOwnerArchive* msg) {
  return *msg->_impl_.aggregate_rule_change_uid_;
}
void PivotOwnerArchive::clear_pivot_owner_uid() {
  if (_impl_.pivot_owner_uid_ != nullptr) _impl_.pivot_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PivotOwnerArchive::clear_source_table_uid() {
  if (_impl_.source_table_uid_ != nullptr) _impl_.source_table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void PivotOwnerArchive::clear_grpg_col_options_map() {
  if (_impl_.grpg_col_options_map_ != nullptr) _impl_.grpg_col_options_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void PivotOwnerArchive::clear_refresh_uid() {
  if (_impl_.refresh_uid_ != nullptr) _impl_.refresh_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void PivotOwnerArchive::clear_row_column_rule_change_uid() {
  if (_impl_.row_column_rule_change_uid_ != nullptr) _impl_.row_column_rule_change_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void PivotOwnerArchive::clear_aggregate_rule_change_uid() {
  if (_impl_.aggregate_rule_change_uid_ != nullptr) _impl_.aggregate_rule_change_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
PivotOwnerArchive::PivotOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.PivotOwnerArchive)
}
PivotOwnerArchive::PivotOwnerArchive(const PivotOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotOwnerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_table_name_){}
    , decltype(_impl_.pivot_owner_uid_){nullptr}
    , decltype(_impl_.grouping_columns_for_rows_){nullptr}
    , decltype(_impl_.grouping_columns_for_columns_){nullptr}
    , decltype(_impl_.aggregate_columns_){nullptr}
    , decltype(_impl_.source_table_uid_){nullptr}
    , decltype(_impl_.grpg_col_options_map_){nullptr}
    , decltype(_impl_.formula_store_){nullptr}
    , decltype(_impl_.refresh_uid_){nullptr}
    , decltype(_impl_.row_column_rule_change_uid_){nullptr}
    , decltype(_impl_.aggregate_rule_change_uid_){nullptr}
    , decltype(_impl_.refresh_timestamp_){}
    , decltype(_impl_.flattening_dimension_){}
    , decltype(_impl_.is_empty_pivot_){}
    , decltype(_impl_.hide_grand_total_rows_){}
    , decltype(_impl_.hide_grand_total_columns_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_table_name()) {
    _this->_impl_.source_table_name_.Set(from._internal_source_table_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pivot_owner_uid()) {
    _this->_impl_.pivot_owner_uid_ = new ::TSP::UUID(*from._impl_.pivot_owner_uid_);
  }
  if (from._internal_has_grouping_columns_for_rows()) {
    _this->_impl_.grouping_columns_for_rows_ = new ::TST::GroupColumnListArchive(*from._impl_.grouping_columns_for_rows_);
  }
  if (from._internal_has_grouping_columns_for_columns()) {
    _this->_impl_.grouping_columns_for_columns_ = new ::TST::GroupColumnListArchive(*from._impl_.grouping_columns_for_columns_);
  }
  if (from._internal_has_aggregate_columns()) {
    _this->_impl_.aggregate_columns_ = new ::TST::ColumnAggregateListArchive(*from._impl_.aggregate_columns_);
  }
  if (from._internal_has_source_table_uid()) {
    _this->_impl_.source_table_uid_ = new ::TSP::UUID(*from._impl_.source_table_uid_);
  }
  if (from._internal_has_grpg_col_options_map()) {
    _this->_impl_.grpg_col_options_map_ = new ::TSP::Reference(*from._impl_.grpg_col_options_map_);
  }
  if (from._internal_has_formula_store()) {
    _this->_impl_.formula_store_ = new ::TST::FormulaStoreArchive(*from._impl_.formula_store_);
  }
  if (from._internal_has_refresh_uid()) {
    _this->_impl_.refresh_uid_ = new ::TSP::UUID(*from._impl_.refresh_uid_);
  }
  if (from._internal_has_row_column_rule_change_uid()) {
    _this->_impl_.row_column_rule_change_uid_ = new ::TSP::UUID(*from._impl_.row_column_rule_change_uid_);
  }
  if (from._internal_has_aggregate_rule_change_uid()) {
    _this->_impl_.aggregate_rule_change_uid_ = new ::TSP::UUID(*from._impl_.aggregate_rule_change_uid_);
  }
  ::memcpy(&_impl_.refresh_timestamp_, &from._impl_.refresh_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hide_grand_total_columns_) -
    reinterpret_cast<char*>(&_impl_.refresh_timestamp_)) + sizeof(_impl_.hide_grand_total_columns_));
  // @@protoc_insertion_point(copy_constructor:TST.PivotOwnerArchive)
}

inline void PivotOwnerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_table_name_){}
    , decltype(_impl_.pivot_owner_uid_){nullptr}
    , decltype(_impl_.grouping_columns_for_rows_){nullptr}
    , decltype(_impl_.grouping_columns_for_columns_){nullptr}
    , decltype(_impl_.aggregate_columns_){nullptr}
    , decltype(_impl_.source_table_uid_){nullptr}
    , decltype(_impl_.grpg_col_options_map_){nullptr}
    , decltype(_impl_.formula_store_){nullptr}
    , decltype(_impl_.refresh_uid_){nullptr}
    , decltype(_impl_.row_column_rule_change_uid_){nullptr}
    , decltype(_impl_.aggregate_rule_change_uid_){nullptr}
    , decltype(_impl_.refresh_timestamp_){0}
    , decltype(_impl_.flattening_dimension_){0}
    , decltype(_impl_.is_empty_pivot_){false}
    , decltype(_impl_.hide_grand_total_rows_){false}
    , decltype(_impl_.hide_grand_total_columns_){false}
  };
  _impl_.source_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PivotOwnerArchive::~PivotOwnerArchive() {
  // @@protoc_insertion_point(destructor:TST.PivotOwnerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_table_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pivot_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.grouping_columns_for_rows_;
  if (this != internal_default_instance()) delete _impl_.grouping_columns_for_columns_;
  if (this != internal_default_instance()) delete _impl_.aggregate_columns_;
  if (this != internal_default_instance()) delete _impl_.source_table_uid_;
  if (this != internal_default_instance()) delete _impl_.grpg_col_options_map_;
  if (this != internal_default_instance()) delete _impl_.formula_store_;
  if (this != internal_default_instance()) delete _impl_.refresh_uid_;
  if (this != internal_default_instance()) delete _impl_.row_column_rule_change_uid_;
  if (this != internal_default_instance()) delete _impl_.aggregate_rule_change_uid_;
}

void PivotOwnerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PivotOwnerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pivot_owner_uid_ != nullptr);
      _impl_.pivot_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.grouping_columns_for_rows_ != nullptr);
      _impl_.grouping_columns_for_rows_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.grouping_columns_for_columns_ != nullptr);
      _impl_.grouping_columns_for_columns_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.aggregate_columns_ != nullptr);
      _impl_.aggregate_columns_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.source_table_uid_ != nullptr);
      _impl_.source_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.grpg_col_options_map_ != nullptr);
      _impl_.grpg_col_options_map_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.formula_store_ != nullptr);
      _impl_.formula_store_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.refresh_uid_ != nullptr);
      _impl_.refresh_uid_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.row_column_rule_change_uid_ != nullptr);
      _impl_.row_column_rule_change_uid_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.aggregate_rule_change_uid_ != nullptr);
      _impl_.aggregate_rule_change_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.refresh_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hide_grand_total_columns_) -
        reinterpret_cast<char*>(&_impl_.refresh_timestamp_)) + sizeof(_impl_.hide_grand_total_columns_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotOwnerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID pivot_owner_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pivot_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive grouping_columns_for_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_columns_for_rows(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive grouping_columns_for_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_columns_for_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ColumnAggregateListArchive aggregate_columns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 flattening_dimension = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_flattening_dimension(&has_bits);
          _impl_.flattening_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_empty_pivot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_empty_pivot(&has_bits);
          _impl_.is_empty_pivot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID source_table_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double refresh_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_refresh_timestamp(&has_bits);
          _impl_.refresh_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference grpg_col_options_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_grpg_col_options_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_grand_total_rows = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_hide_grand_total_rows(&has_bits);
          _impl_.hide_grand_total_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_table_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_source_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.PivotOwnerArchive.source_table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_grand_total_columns = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_hide_grand_total_columns(&has_bits);
          _impl_.hide_grand_total_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.FormulaStoreArchive formula_store = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_store(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID refresh_uid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_refresh_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID row_column_rule_change_uid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_column_rule_change_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID aggregate_rule_change_uid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate_rule_change_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotOwnerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PivotOwnerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID pivot_owner_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pivot_owner_uid(this),
        _Internal::pivot_owner_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TST.GroupColumnListArchive grouping_columns_for_rows = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::grouping_columns_for_rows(this),
        _Internal::grouping_columns_for_rows(this).GetCachedSize(), target, stream);
  }

  // optional .TST.GroupColumnListArchive grouping_columns_for_columns = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::grouping_columns_for_columns(this),
        _Internal::grouping_columns_for_columns(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ColumnAggregateListArchive aggregate_columns = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::aggregate_columns(this),
        _Internal::aggregate_columns(this).GetCachedSize(), target, stream);
  }

  // optional int32 flattening_dimension = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_flattening_dimension(), target);
  }

  // optional bool is_empty_pivot = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_empty_pivot(), target);
  }

  // optional .TSP.UUID source_table_uid = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::source_table_uid(this),
        _Internal::source_table_uid(this).GetCachedSize(), target, stream);
  }

  // optional double refresh_timestamp = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_refresh_timestamp(), target);
  }

  // optional .TSP.Reference grpg_col_options_map = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::grpg_col_options_map(this),
        _Internal::grpg_col_options_map(this).GetCachedSize(), target, stream);
  }

  // optional bool hide_grand_total_rows = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_hide_grand_total_rows(), target);
  }

  // optional string source_table_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_table_name().data(), static_cast<int>(this->_internal_source_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.PivotOwnerArchive.source_table_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_source_table_name(), target);
  }

  // optional bool hide_grand_total_columns = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_hide_grand_total_columns(), target);
  }

  // optional .TST.FormulaStoreArchive formula_store = 17;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::formula_store(this),
        _Internal::formula_store(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID refresh_uid = 18;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::refresh_uid(this),
        _Internal::refresh_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID row_column_rule_change_uid = 19;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::row_column_rule_change_uid(this),
        _Internal::row_column_rule_change_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID aggregate_rule_change_uid = 20;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::aggregate_rule_change_uid(this),
        _Internal::aggregate_rule_change_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PivotOwnerArchive)
  return target;
}

size_t PivotOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PivotOwnerArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string source_table_name = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_table_name());
    }

    // optional .TSP.UUID pivot_owner_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pivot_owner_uid_);
    }

    // optional .TST.GroupColumnListArchive grouping_columns_for_rows = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_columns_for_rows_);
    }

    // optional .TST.GroupColumnListArchive grouping_columns_for_columns = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_columns_for_columns_);
    }

    // optional .TST.ColumnAggregateListArchive aggregate_columns = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aggregate_columns_);
    }

    // optional .TSP.UUID source_table_uid = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_table_uid_);
    }

    // optional .TSP.Reference grpg_col_options_map = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grpg_col_options_map_);
    }

    // optional .TST.FormulaStoreArchive formula_store = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_store_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.UUID refresh_uid = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.refresh_uid_);
    }

    // optional .TSP.UUID row_column_rule_change_uid = 19;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.row_column_rule_change_uid_);
    }

    // optional .TSP.UUID aggregate_rule_change_uid = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aggregate_rule_change_uid_);
    }

    // optional double refresh_timestamp = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int32 flattening_dimension = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flattening_dimension());
    }

    // optional bool is_empty_pivot = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool hide_grand_total_rows = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool hide_grand_total_columns = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotOwnerArchive::GetClassData() const { return &_class_data_; }


void PivotOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotOwnerArchive*>(&to_msg);
  auto& from = static_cast<const PivotOwnerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.PivotOwnerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source_table_name(from._internal_source_table_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pivot_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_pivot_owner_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_grouping_columns_for_rows()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_grouping_columns_for_rows());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_grouping_columns_for_columns()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_grouping_columns_for_columns());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_aggregate_columns()->::TST::ColumnAggregateListArchive::MergeFrom(
          from._internal_aggregate_columns());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_source_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_source_table_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_grpg_col_options_map()->::TSP::Reference::MergeFrom(
          from._internal_grpg_col_options_map());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_formula_store()->::TST::FormulaStoreArchive::MergeFrom(
          from._internal_formula_store());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_refresh_uid()->::TSP::UUID::MergeFrom(
          from._internal_refresh_uid());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_row_column_rule_change_uid()->::TSP::UUID::MergeFrom(
          from._internal_row_column_rule_change_uid());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_aggregate_rule_change_uid()->::TSP::UUID::MergeFrom(
          from._internal_aggregate_rule_change_uid());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.refresh_timestamp_ = from._impl_.refresh_timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.flattening_dimension_ = from._impl_.flattening_dimension_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.is_empty_pivot_ = from._impl_.is_empty_pivot_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.hide_grand_total_rows_ = from._impl_.hide_grand_total_rows_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.hide_grand_total_columns_ = from._impl_.hide_grand_total_columns_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotOwnerArchive::CopyFrom(const PivotOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PivotOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotOwnerArchive::IsInitialized() const {
  if (_internal_has_pivot_owner_uid()) {
    if (!_impl_.pivot_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_columns_for_rows()) {
    if (!_impl_.grouping_columns_for_rows_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_columns_for_columns()) {
    if (!_impl_.grouping_columns_for_columns_->IsInitialized()) return false;
  }
  if (_internal_has_aggregate_columns()) {
    if (!_impl_.aggregate_columns_->IsInitialized()) return false;
  }
  if (_internal_has_source_table_uid()) {
    if (!_impl_.source_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_grpg_col_options_map()) {
    if (!_impl_.grpg_col_options_map_->IsInitialized()) return false;
  }
  if (_internal_has_formula_store()) {
    if (!_impl_.formula_store_->IsInitialized()) return false;
  }
  if (_internal_has_refresh_uid()) {
    if (!_impl_.refresh_uid_->IsInitialized()) return false;
  }
  if (_internal_has_row_column_rule_change_uid()) {
    if (!_impl_.row_column_rule_change_uid_->IsInitialized()) return false;
  }
  if (_internal_has_aggregate_rule_change_uid()) {
    if (!_impl_.aggregate_rule_change_uid_->IsInitialized()) return false;
  }
  return true;
}

void PivotOwnerArchive::InternalSwap(PivotOwnerArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_table_name_, lhs_arena,
      &other->_impl_.source_table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PivotOwnerArchive, _impl_.hide_grand_total_columns_)
      + sizeof(PivotOwnerArchive::_impl_.hide_grand_total_columns_)
      - PROTOBUF_FIELD_OFFSET(PivotOwnerArchive, _impl_.pivot_owner_uid_)>(
          reinterpret_cast<char*>(&_impl_.pivot_owner_uid_),
          reinterpret_cast<char*>(&other->_impl_.pivot_owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotOwnerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[142]);
}

// ===================================================================

class RichTextPayloadArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RichTextPayloadArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& storage(const RichTextPayloadArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Range& range(const RichTextPayloadArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellID& cellid(const RichTextPayloadArchive* msg);
  static void set_has_cellid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSP::Reference&
RichTextPayloadArchive::_Internal::storage(const RichTextPayloadArchive* msg) {
  return *msg->_impl_.storage_;
}
const ::TSP::Range&
RichTextPayloadArchive::_Internal::range(const RichTextPayloadArchive* msg) {
  return *msg->_impl_.range_;
}
const ::TST::CellID&
RichTextPayloadArchive::_Internal::cellid(const RichTextPayloadArchive* msg) {
  return *msg->_impl_.cellid_;
}
void RichTextPayloadArchive::clear_storage() {
  if (_impl_.storage_ != nullptr) _impl_.storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RichTextPayloadArchive::clear_range() {
  if (_impl_.range_ != nullptr) _impl_.range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RichTextPayloadArchive::RichTextPayloadArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.RichTextPayloadArchive)
}
RichTextPayloadArchive::RichTextPayloadArchive(const RichTextPayloadArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RichTextPayloadArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.storage_){nullptr}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.cellid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_storage()) {
    _this->_impl_.storage_ = new ::TSP::Reference(*from._impl_.storage_);
  }
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::TSP::Range(*from._impl_.range_);
  }
  if (from._internal_has_cellid()) {
    _this->_impl_.cellid_ = new ::TST::CellID(*from._impl_.cellid_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.RichTextPayloadArchive)
}

inline void RichTextPayloadArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.storage_){nullptr}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.cellid_){nullptr}
  };
}

RichTextPayloadArchive::~RichTextPayloadArchive() {
  // @@protoc_insertion_point(destructor:TST.RichTextPayloadArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RichTextPayloadArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.storage_;
  if (this != internal_default_instance()) delete _impl_.range_;
  if (this != internal_default_instance()) delete _impl_.cellid_;
}

void RichTextPayloadArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RichTextPayloadArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.RichTextPayloadArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.storage_ != nullptr);
      _impl_.storage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.range_ != nullptr);
      _impl_.range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cellid_ != nullptr);
      _impl_.cellid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RichTextPayloadArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Range range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.CellID cellid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RichTextPayloadArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.RichTextPayloadArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference storage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::storage(this),
        _Internal::storage(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Range range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // required .TST.CellID cellid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cellid(this),
        _Internal::cellid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.RichTextPayloadArchive)
  return target;
}

size_t RichTextPayloadArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.RichTextPayloadArchive)
  size_t total_size = 0;

  if (_internal_has_storage()) {
    // required .TSP.Reference storage = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_);
  }

  if (_internal_has_cellid()) {
    // required .TST.CellID cellid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cellid_);
  }

  return total_size;
}
size_t RichTextPayloadArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.RichTextPayloadArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSP.Reference storage = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_);

    // required .TST.CellID cellid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cellid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Range range = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RichTextPayloadArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RichTextPayloadArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RichTextPayloadArchive::GetClassData() const { return &_class_data_; }


void RichTextPayloadArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RichTextPayloadArchive*>(&to_msg);
  auto& from = static_cast<const RichTextPayloadArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.RichTextPayloadArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_storage()->::TSP::Reference::MergeFrom(
          from._internal_storage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_range()->::TSP::Range::MergeFrom(
          from._internal_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cellid()->::TST::CellID::MergeFrom(
          from._internal_cellid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RichTextPayloadArchive::CopyFrom(const RichTextPayloadArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.RichTextPayloadArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RichTextPayloadArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_storage()) {
    if (!_impl_.storage_->IsInitialized()) return false;
  }
  if (_internal_has_range()) {
    if (!_impl_.range_->IsInitialized()) return false;
  }
  if (_internal_has_cellid()) {
    if (!_impl_.cellid_->IsInitialized()) return false;
  }
  return true;
}

void RichTextPayloadArchive::InternalSwap(RichTextPayloadArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RichTextPayloadArchive, _impl_.cellid_)
      + sizeof(RichTextPayloadArchive::_impl_.cellid_)
      - PROTOBUF_FIELD_OFFSET(RichTextPayloadArchive, _impl_.storage_)>(
          reinterpret_cast<char*>(&_impl_.storage_),
          reinterpret_cast<char*>(&other->_impl_.storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RichTextPayloadArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[143]);
}

// ===================================================================

class FormulaEqualsTokenAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaEqualsTokenAttachmentArchive>()._impl_._has_bits_);
  static const ::TSWP::UIGraphicalAttachment& super(const FormulaEqualsTokenAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::UIGraphicalAttachment&
FormulaEqualsTokenAttachmentArchive::_Internal::super(const FormulaEqualsTokenAttachmentArchive* msg) {
  return *msg->_impl_.super_;
}
void FormulaEqualsTokenAttachmentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FormulaEqualsTokenAttachmentArchive::FormulaEqualsTokenAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaEqualsTokenAttachmentArchive)
}
FormulaEqualsTokenAttachmentArchive::FormulaEqualsTokenAttachmentArchive(const FormulaEqualsTokenAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaEqualsTokenAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::UIGraphicalAttachment(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.FormulaEqualsTokenAttachmentArchive)
}

inline void FormulaEqualsTokenAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

FormulaEqualsTokenAttachmentArchive::~FormulaEqualsTokenAttachmentArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaEqualsTokenAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaEqualsTokenAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FormulaEqualsTokenAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaEqualsTokenAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaEqualsTokenAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaEqualsTokenAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.UIGraphicalAttachment super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaEqualsTokenAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaEqualsTokenAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.UIGraphicalAttachment super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaEqualsTokenAttachmentArchive)
  return target;
}

size_t FormulaEqualsTokenAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaEqualsTokenAttachmentArchive)
  size_t total_size = 0;

  // required .TSWP.UIGraphicalAttachment super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaEqualsTokenAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaEqualsTokenAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaEqualsTokenAttachmentArchive::GetClassData() const { return &_class_data_; }


void FormulaEqualsTokenAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaEqualsTokenAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const FormulaEqualsTokenAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaEqualsTokenAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSWP::UIGraphicalAttachment::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaEqualsTokenAttachmentArchive::CopyFrom(const FormulaEqualsTokenAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaEqualsTokenAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaEqualsTokenAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FormulaEqualsTokenAttachmentArchive::InternalSwap(FormulaEqualsTokenAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaEqualsTokenAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[144]);
}

// ===================================================================

class CellFillStandIn::_Internal {
 public:
  using HasBits = decltype(std::declval<CellFillStandIn>()._impl_._has_bits_);
  static const ::TSD::FillArchive& fill(const CellFillStandIn* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_color_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_color_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_first_color_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_color_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_color_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gradient_type_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gradient_type_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gradient_angle_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gradient_angle_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_image_data_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_image_data_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tint_color_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tint_color_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_scale_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_scale_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_technique_has_been_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_technique_is_mixed(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::FillArchive&
CellFillStandIn::_Internal::fill(const CellFillStandIn* msg) {
  return *msg->_impl_.fill_;
}
void CellFillStandIn::clear_fill() {
  if (_impl_.fill_ != nullptr) _impl_.fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CellFillStandIn::CellFillStandIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellFillStandIn)
}
CellFillStandIn::CellFillStandIn(const CellFillStandIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellFillStandIn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.type_is_mixed_){}
    , decltype(_impl_.color_has_been_modified_){}
    , decltype(_impl_.color_is_mixed_){}
    , decltype(_impl_.first_color_has_been_modified_){}
    , decltype(_impl_.first_color_is_mixed_){}
    , decltype(_impl_.last_color_has_been_modified_){}
    , decltype(_impl_.last_color_is_mixed_){}
    , decltype(_impl_.gradient_type_has_been_modified_){}
    , decltype(_impl_.gradient_type_is_mixed_){}
    , decltype(_impl_.gradient_angle_has_been_modified_){}
    , decltype(_impl_.gradient_angle_is_mixed_){}
    , decltype(_impl_.image_data_has_been_modified_){}
    , decltype(_impl_.image_data_is_mixed_){}
    , decltype(_impl_.tint_color_has_been_modified_){}
    , decltype(_impl_.tint_color_is_mixed_){}
    , decltype(_impl_.scale_has_been_modified_){}
    , decltype(_impl_.scale_is_mixed_){}
    , decltype(_impl_.technique_has_been_modified_){}
    , decltype(_impl_.technique_is_mixed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    _this->_impl_.fill_ = new ::TSD::FillArchive(*from._impl_.fill_);
  }
  ::memcpy(&_impl_.type_is_mixed_, &from._impl_.type_is_mixed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.technique_is_mixed_) -
    reinterpret_cast<char*>(&_impl_.type_is_mixed_)) + sizeof(_impl_.technique_is_mixed_));
  // @@protoc_insertion_point(copy_constructor:TST.CellFillStandIn)
}

inline void CellFillStandIn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.type_is_mixed_){false}
    , decltype(_impl_.color_has_been_modified_){false}
    , decltype(_impl_.color_is_mixed_){false}
    , decltype(_impl_.first_color_has_been_modified_){false}
    , decltype(_impl_.first_color_is_mixed_){false}
    , decltype(_impl_.last_color_has_been_modified_){false}
    , decltype(_impl_.last_color_is_mixed_){false}
    , decltype(_impl_.gradient_type_has_been_modified_){false}
    , decltype(_impl_.gradient_type_is_mixed_){false}
    , decltype(_impl_.gradient_angle_has_been_modified_){false}
    , decltype(_impl_.gradient_angle_is_mixed_){false}
    , decltype(_impl_.image_data_has_been_modified_){false}
    , decltype(_impl_.image_data_is_mixed_){false}
    , decltype(_impl_.tint_color_has_been_modified_){false}
    , decltype(_impl_.tint_color_is_mixed_){false}
    , decltype(_impl_.scale_has_been_modified_){false}
    , decltype(_impl_.scale_is_mixed_){false}
    , decltype(_impl_.technique_has_been_modified_){false}
    , decltype(_impl_.technique_is_mixed_){false}
  };
}

CellFillStandIn::~CellFillStandIn() {
  // @@protoc_insertion_point(destructor:TST.CellFillStandIn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellFillStandIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fill_;
}

void CellFillStandIn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellFillStandIn::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellFillStandIn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.fill_ != nullptr);
    _impl_.fill_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.type_is_mixed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_color_is_mixed_) -
        reinterpret_cast<char*>(&_impl_.type_is_mixed_)) + sizeof(_impl_.last_color_is_mixed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.gradient_type_has_been_modified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tint_color_is_mixed_) -
        reinterpret_cast<char*>(&_impl_.gradient_type_has_been_modified_)) + sizeof(_impl_.tint_color_is_mixed_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.scale_has_been_modified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.technique_is_mixed_) -
        reinterpret_cast<char*>(&_impl_.scale_has_been_modified_)) + sizeof(_impl_.technique_is_mixed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellFillStandIn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.FillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool type_is_mixed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type_is_mixed(&has_bits);
          _impl_.type_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool color_has_been_modified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_color_has_been_modified(&has_bits);
          _impl_.color_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool color_is_mixed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_color_is_mixed(&has_bits);
          _impl_.color_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool first_color_has_been_modified = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_first_color_has_been_modified(&has_bits);
          _impl_.first_color_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool first_color_is_mixed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_first_color_is_mixed(&has_bits);
          _impl_.first_color_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool last_color_has_been_modified = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_last_color_has_been_modified(&has_bits);
          _impl_.last_color_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool last_color_is_mixed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_last_color_is_mixed(&has_bits);
          _impl_.last_color_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gradient_type_has_been_modified = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_gradient_type_has_been_modified(&has_bits);
          _impl_.gradient_type_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gradient_type_is_mixed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_gradient_type_is_mixed(&has_bits);
          _impl_.gradient_type_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gradient_angle_has_been_modified = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_gradient_angle_has_been_modified(&has_bits);
          _impl_.gradient_angle_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gradient_angle_is_mixed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_gradient_angle_is_mixed(&has_bits);
          _impl_.gradient_angle_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool image_data_has_been_modified = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_image_data_has_been_modified(&has_bits);
          _impl_.image_data_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool image_data_is_mixed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_image_data_is_mixed(&has_bits);
          _impl_.image_data_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tint_color_has_been_modified = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tint_color_has_been_modified(&has_bits);
          _impl_.tint_color_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tint_color_is_mixed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tint_color_is_mixed(&has_bits);
          _impl_.tint_color_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool scale_has_been_modified = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_scale_has_been_modified(&has_bits);
          _impl_.scale_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool scale_is_mixed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_scale_is_mixed(&has_bits);
          _impl_.scale_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool technique_has_been_modified = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_technique_has_been_modified(&has_bits);
          _impl_.technique_has_been_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool technique_is_mixed = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_technique_is_mixed(&has_bits);
          _impl_.technique_is_mixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellFillStandIn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellFillStandIn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.FillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fill(this),
        _Internal::fill(this).GetCachedSize(), target, stream);
  }

  // optional bool type_is_mixed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_type_is_mixed(), target);
  }

  // optional bool color_has_been_modified = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_color_has_been_modified(), target);
  }

  // optional bool color_is_mixed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_color_is_mixed(), target);
  }

  // optional bool first_color_has_been_modified = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_first_color_has_been_modified(), target);
  }

  // optional bool first_color_is_mixed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_first_color_is_mixed(), target);
  }

  // optional bool last_color_has_been_modified = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_last_color_has_been_modified(), target);
  }

  // optional bool last_color_is_mixed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_last_color_is_mixed(), target);
  }

  // optional bool gradient_type_has_been_modified = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_gradient_type_has_been_modified(), target);
  }

  // optional bool gradient_type_is_mixed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_gradient_type_is_mixed(), target);
  }

  // optional bool gradient_angle_has_been_modified = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_gradient_angle_has_been_modified(), target);
  }

  // optional bool gradient_angle_is_mixed = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_gradient_angle_is_mixed(), target);
  }

  // optional bool image_data_has_been_modified = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_image_data_has_been_modified(), target);
  }

  // optional bool image_data_is_mixed = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_image_data_is_mixed(), target);
  }

  // optional bool tint_color_has_been_modified = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_tint_color_has_been_modified(), target);
  }

  // optional bool tint_color_is_mixed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_tint_color_is_mixed(), target);
  }

  // optional bool scale_has_been_modified = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_scale_has_been_modified(), target);
  }

  // optional bool scale_is_mixed = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_scale_is_mixed(), target);
  }

  // optional bool technique_has_been_modified = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_technique_has_been_modified(), target);
  }

  // optional bool technique_is_mixed = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_technique_is_mixed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellFillStandIn)
  return target;
}

size_t CellFillStandIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellFillStandIn)
  size_t total_size = 0;

  // required .TSD.FillArchive fill = 1;
  if (_internal_has_fill()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fill_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional bool type_is_mixed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool color_has_been_modified = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool color_is_mixed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool first_color_has_been_modified = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool first_color_is_mixed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool last_color_has_been_modified = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool last_color_is_mixed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool gradient_type_has_been_modified = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool gradient_type_is_mixed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool gradient_angle_has_been_modified = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool gradient_angle_is_mixed = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool image_data_has_been_modified = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool image_data_is_mixed = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool tint_color_has_been_modified = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool tint_color_is_mixed = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool scale_has_been_modified = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool scale_is_mixed = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool technique_has_been_modified = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool technique_is_mixed = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellFillStandIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellFillStandIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellFillStandIn::GetClassData() const { return &_class_data_; }


void CellFillStandIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellFillStandIn*>(&to_msg);
  auto& from = static_cast<const CellFillStandIn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellFillStandIn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_is_mixed_ = from._impl_.type_is_mixed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.color_has_been_modified_ = from._impl_.color_has_been_modified_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.color_is_mixed_ = from._impl_.color_is_mixed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.first_color_has_been_modified_ = from._impl_.first_color_has_been_modified_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.first_color_is_mixed_ = from._impl_.first_color_is_mixed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.last_color_has_been_modified_ = from._impl_.last_color_has_been_modified_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.last_color_is_mixed_ = from._impl_.last_color_is_mixed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.gradient_type_has_been_modified_ = from._impl_.gradient_type_has_been_modified_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.gradient_type_is_mixed_ = from._impl_.gradient_type_is_mixed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.gradient_angle_has_been_modified_ = from._impl_.gradient_angle_has_been_modified_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.gradient_angle_is_mixed_ = from._impl_.gradient_angle_is_mixed_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.image_data_has_been_modified_ = from._impl_.image_data_has_been_modified_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.image_data_is_mixed_ = from._impl_.image_data_is_mixed_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tint_color_has_been_modified_ = from._impl_.tint_color_has_been_modified_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tint_color_is_mixed_ = from._impl_.tint_color_is_mixed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.scale_has_been_modified_ = from._impl_.scale_has_been_modified_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.scale_is_mixed_ = from._impl_.scale_is_mixed_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.technique_has_been_modified_ = from._impl_.technique_has_been_modified_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.technique_is_mixed_ = from._impl_.technique_is_mixed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellFillStandIn::CopyFrom(const CellFillStandIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellFillStandIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellFillStandIn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_fill()) {
    if (!_impl_.fill_->IsInitialized()) return false;
  }
  return true;
}

void CellFillStandIn::InternalSwap(CellFillStandIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellFillStandIn, _impl_.technique_is_mixed_)
      + sizeof(CellFillStandIn::_impl_.technique_is_mixed_)
      - PROTOBUF_FIELD_OFFSET(CellFillStandIn, _impl_.fill_)>(
          reinterpret_cast<char*>(&_impl_.fill_),
          reinterpret_cast<char*>(&other->_impl_.fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellFillStandIn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[145]);
}

// ===================================================================

class FormulaSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaSelectionArchive>()._impl_._has_bits_);
  static const ::TSWP::SelectionArchive& super(const FormulaSelectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activetokencharindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::SelectionArchive&
FormulaSelectionArchive::_Internal::super(const FormulaSelectionArchive* msg) {
  return *msg->_impl_.super_;
}
void FormulaSelectionArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FormulaSelectionArchive::FormulaSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaSelectionArchive)
}
FormulaSelectionArchive::FormulaSelectionArchive(const FormulaSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.activetokencharindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::SelectionArchive(*from._impl_.super_);
  }
  _this->_impl_.activetokencharindex_ = from._impl_.activetokencharindex_;
  // @@protoc_insertion_point(copy_constructor:TST.FormulaSelectionArchive)
}

inline void FormulaSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.activetokencharindex_){0u}
  };
}

FormulaSelectionArchive::~FormulaSelectionArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FormulaSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.activetokencharindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.SelectionArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 activeTokenCharIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_activetokencharindex(&has_bits);
          _impl_.activetokencharindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.SelectionArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 activeTokenCharIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_activetokencharindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaSelectionArchive)
  return target;
}

size_t FormulaSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaSelectionArchive)
  size_t total_size = 0;

  // required .TSWP.SelectionArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 activeTokenCharIndex = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_activetokencharindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaSelectionArchive::GetClassData() const { return &_class_data_; }


void FormulaSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaSelectionArchive*>(&to_msg);
  auto& from = static_cast<const FormulaSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSWP::SelectionArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.activetokencharindex_ = from._impl_.activetokencharindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaSelectionArchive::CopyFrom(const FormulaSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaSelectionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FormulaSelectionArchive::InternalSwap(FormulaSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaSelectionArchive, _impl_.activetokencharindex_)
      + sizeof(FormulaSelectionArchive::_impl_.activetokencharindex_)
      - PROTOBUF_FIELD_OFFSET(FormulaSelectionArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[146]);
}

// ===================================================================

class CellBorderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellBorderArchive>()._impl_._has_bits_);
  static const ::TSD::StrokeArchive& top_stroke(const CellBorderArchive* msg);
  static void set_has_top_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_stroke_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::StrokeArchive& right_stroke(const CellBorderArchive* msg);
  static void set_has_right_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right_stroke_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::StrokeArchive& bottom_stroke(const CellBorderArchive* msg);
  static void set_has_bottom_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom_stroke_order(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& left_stroke(const CellBorderArchive* msg);
  static void set_has_left_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_left_stroke_order(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::TSD::StrokeArchive&
CellBorderArchive::_Internal::top_stroke(const CellBorderArchive* msg) {
  return *msg->_impl_.top_stroke_;
}
const ::TSD::StrokeArchive&
CellBorderArchive::_Internal::right_stroke(const CellBorderArchive* msg) {
  return *msg->_impl_.right_stroke_;
}
const ::TSD::StrokeArchive&
CellBorderArchive::_Internal::bottom_stroke(const CellBorderArchive* msg) {
  return *msg->_impl_.bottom_stroke_;
}
const ::TSD::StrokeArchive&
CellBorderArchive::_Internal::left_stroke(const CellBorderArchive* msg) {
  return *msg->_impl_.left_stroke_;
}
void CellBorderArchive::clear_top_stroke() {
  if (_impl_.top_stroke_ != nullptr) _impl_.top_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CellBorderArchive::clear_right_stroke() {
  if (_impl_.right_stroke_ != nullptr) _impl_.right_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CellBorderArchive::clear_bottom_stroke() {
  if (_impl_.bottom_stroke_ != nullptr) _impl_.bottom_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CellBorderArchive::clear_left_stroke() {
  if (_impl_.left_stroke_ != nullptr) _impl_.left_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CellBorderArchive::CellBorderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellBorderArchive)
}
CellBorderArchive::CellBorderArchive(const CellBorderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellBorderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_stroke_){nullptr}
    , decltype(_impl_.right_stroke_){nullptr}
    , decltype(_impl_.bottom_stroke_){nullptr}
    , decltype(_impl_.left_stroke_){nullptr}
    , decltype(_impl_.top_stroke_order_){}
    , decltype(_impl_.right_stroke_order_){}
    , decltype(_impl_.bottom_stroke_order_){}
    , decltype(_impl_.left_stroke_order_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_top_stroke()) {
    _this->_impl_.top_stroke_ = new ::TSD::StrokeArchive(*from._impl_.top_stroke_);
  }
  if (from._internal_has_right_stroke()) {
    _this->_impl_.right_stroke_ = new ::TSD::StrokeArchive(*from._impl_.right_stroke_);
  }
  if (from._internal_has_bottom_stroke()) {
    _this->_impl_.bottom_stroke_ = new ::TSD::StrokeArchive(*from._impl_.bottom_stroke_);
  }
  if (from._internal_has_left_stroke()) {
    _this->_impl_.left_stroke_ = new ::TSD::StrokeArchive(*from._impl_.left_stroke_);
  }
  ::memcpy(&_impl_.top_stroke_order_, &from._impl_.top_stroke_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.left_stroke_order_) -
    reinterpret_cast<char*>(&_impl_.top_stroke_order_)) + sizeof(_impl_.left_stroke_order_));
  // @@protoc_insertion_point(copy_constructor:TST.CellBorderArchive)
}

inline void CellBorderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_stroke_){nullptr}
    , decltype(_impl_.right_stroke_){nullptr}
    , decltype(_impl_.bottom_stroke_){nullptr}
    , decltype(_impl_.left_stroke_){nullptr}
    , decltype(_impl_.top_stroke_order_){0}
    , decltype(_impl_.right_stroke_order_){0}
    , decltype(_impl_.bottom_stroke_order_){0}
    , decltype(_impl_.left_stroke_order_){0}
  };
}

CellBorderArchive::~CellBorderArchive() {
  // @@protoc_insertion_point(destructor:TST.CellBorderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellBorderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.top_stroke_;
  if (this != internal_default_instance()) delete _impl_.right_stroke_;
  if (this != internal_default_instance()) delete _impl_.bottom_stroke_;
  if (this != internal_default_instance()) delete _impl_.left_stroke_;
}

void CellBorderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellBorderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellBorderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.top_stroke_ != nullptr);
      _impl_.top_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.right_stroke_ != nullptr);
      _impl_.right_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.bottom_stroke_ != nullptr);
      _impl_.bottom_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.left_stroke_ != nullptr);
      _impl_.left_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.top_stroke_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.left_stroke_order_) -
        reinterpret_cast<char*>(&_impl_.top_stroke_order_)) + sizeof(_impl_.left_stroke_order_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellBorderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokeArchive top_stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 top_stroke_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_stroke_order(&has_bits);
          _impl_.top_stroke_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive right_stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 right_stroke_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_right_stroke_order(&has_bits);
          _impl_.right_stroke_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive bottom_stroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bottom_stroke_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bottom_stroke_order(&has_bits);
          _impl_.bottom_stroke_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive left_stroke = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 left_stroke_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_left_stroke_order(&has_bits);
          _impl_.left_stroke_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellBorderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellBorderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive top_stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::top_stroke(this),
        _Internal::top_stroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 top_stroke_order = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_top_stroke_order(), target);
  }

  // optional .TSD.StrokeArchive right_stroke = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::right_stroke(this),
        _Internal::right_stroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 right_stroke_order = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_right_stroke_order(), target);
  }

  // optional .TSD.StrokeArchive bottom_stroke = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bottom_stroke(this),
        _Internal::bottom_stroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 bottom_stroke_order = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_bottom_stroke_order(), target);
  }

  // optional .TSD.StrokeArchive left_stroke = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::left_stroke(this),
        _Internal::left_stroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 left_stroke_order = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_left_stroke_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellBorderArchive)
  return target;
}

size_t CellBorderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellBorderArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive top_stroke = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.top_stroke_);
    }

    // optional .TSD.StrokeArchive right_stroke = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.right_stroke_);
    }

    // optional .TSD.StrokeArchive bottom_stroke = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bottom_stroke_);
    }

    // optional .TSD.StrokeArchive left_stroke = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.left_stroke_);
    }

    // optional int32 top_stroke_order = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_top_stroke_order());
    }

    // optional int32 right_stroke_order = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_right_stroke_order());
    }

    // optional int32 bottom_stroke_order = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bottom_stroke_order());
    }

    // optional int32 left_stroke_order = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left_stroke_order());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellBorderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellBorderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellBorderArchive::GetClassData() const { return &_class_data_; }


void CellBorderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellBorderArchive*>(&to_msg);
  auto& from = static_cast<const CellBorderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellBorderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_top_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_top_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_right_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_right_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_bottom_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_bottom_stroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_left_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_left_stroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.top_stroke_order_ = from._impl_.top_stroke_order_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.right_stroke_order_ = from._impl_.right_stroke_order_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bottom_stroke_order_ = from._impl_.bottom_stroke_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.left_stroke_order_ = from._impl_.left_stroke_order_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellBorderArchive::CopyFrom(const CellBorderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellBorderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellBorderArchive::IsInitialized() const {
  if (_internal_has_top_stroke()) {
    if (!_impl_.top_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_right_stroke()) {
    if (!_impl_.right_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_bottom_stroke()) {
    if (!_impl_.bottom_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_left_stroke()) {
    if (!_impl_.left_stroke_->IsInitialized()) return false;
  }
  return true;
}

void CellBorderArchive::InternalSwap(CellBorderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellBorderArchive, _impl_.left_stroke_order_)
      + sizeof(CellBorderArchive::_impl_.left_stroke_order_)
      - PROTOBUF_FIELD_OFFSET(CellBorderArchive, _impl_.top_stroke_)>(
          reinterpret_cast<char*>(&_impl_.top_stroke_),
          reinterpret_cast<char*>(&other->_impl_.top_stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellBorderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[147]);
}

// ===================================================================

class DefaultCellStylesContainerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DefaultCellStylesContainerArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& table_style_network(const DefaultCellStylesContainerArchive* msg);
  static void set_has_table_style_network(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_a_pivot_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
DefaultCellStylesContainerArchive::_Internal::table_style_network(const DefaultCellStylesContainerArchive* msg) {
  return *msg->_impl_.table_style_network_;
}
void DefaultCellStylesContainerArchive::clear_table_style_network() {
  if (_impl_.table_style_network_ != nullptr) _impl_.table_style_network_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DefaultCellStylesContainerArchive::clear_row_uids() {
  _impl_.row_uids_.Clear();
}
void DefaultCellStylesContainerArchive::clear_column_uids() {
  _impl_.column_uids_.Clear();
}
DefaultCellStylesContainerArchive::DefaultCellStylesContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.DefaultCellStylesContainerArchive)
}
DefaultCellStylesContainerArchive::DefaultCellStylesContainerArchive(const DefaultCellStylesContainerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DefaultCellStylesContainerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_uids_){from._impl_.row_uids_}
    , decltype(_impl_.column_uids_){from._impl_.column_uids_}
    , decltype(_impl_.row_types_){from._impl_.row_types_}
    , decltype(_impl_.column_types_){from._impl_.column_types_}
    , decltype(_impl_.table_style_network_){nullptr}
    , decltype(_impl_.is_a_pivot_table_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_style_network()) {
    _this->_impl_.table_style_network_ = new ::TSP::Reference(*from._impl_.table_style_network_);
  }
  _this->_impl_.is_a_pivot_table_ = from._impl_.is_a_pivot_table_;
  // @@protoc_insertion_point(copy_constructor:TST.DefaultCellStylesContainerArchive)
}

inline void DefaultCellStylesContainerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_uids_){arena}
    , decltype(_impl_.column_uids_){arena}
    , decltype(_impl_.row_types_){arena}
    , decltype(_impl_.column_types_){arena}
    , decltype(_impl_.table_style_network_){nullptr}
    , decltype(_impl_.is_a_pivot_table_){false}
  };
}

DefaultCellStylesContainerArchive::~DefaultCellStylesContainerArchive() {
  // @@protoc_insertion_point(destructor:TST.DefaultCellStylesContainerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DefaultCellStylesContainerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_uids_.~RepeatedPtrField();
  _impl_.column_uids_.~RepeatedPtrField();
  _impl_.row_types_.~RepeatedField();
  _impl_.column_types_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.table_style_network_;
}

void DefaultCellStylesContainerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DefaultCellStylesContainerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.DefaultCellStylesContainerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_uids_.Clear();
  _impl_.column_uids_.Clear();
  _impl_.row_types_.Clear();
  _impl_.column_types_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_style_network_ != nullptr);
    _impl_.table_style_network_->Clear();
  }
  _impl_.is_a_pivot_table_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultCellStylesContainerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference table_style_network = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_style_network(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID column_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 row_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_row_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_row_types(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 column_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_column_types(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_a_pivot_table = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_a_pivot_table(&has_bits);
          _impl_.is_a_pivot_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DefaultCellStylesContainerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.DefaultCellStylesContainerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference table_style_network = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_style_network(this),
        _Internal::table_style_network(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID row_uids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID column_uids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 row_types = 4;
  for (int i = 0, n = this->_internal_row_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_row_types(i), target);
  }

  // repeated uint32 column_types = 5;
  for (int i = 0, n = this->_internal_column_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_column_types(i), target);
  }

  // optional bool is_a_pivot_table = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_a_pivot_table(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.DefaultCellStylesContainerArchive)
  return target;
}

size_t DefaultCellStylesContainerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.DefaultCellStylesContainerArchive)
  size_t total_size = 0;

  // required .TSP.Reference table_style_network = 1;
  if (_internal_has_table_style_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_style_network_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_uids = 2;
  total_size += 1UL * this->_internal_row_uids_size();
  for (const auto& msg : this->_impl_.row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID column_uids = 3;
  total_size += 1UL * this->_internal_column_uids_size();
  for (const auto& msg : this->_impl_.column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 row_types = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.row_types_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_row_types_size());
    total_size += data_size;
  }

  // repeated uint32 column_types = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.column_types_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_column_types_size());
    total_size += data_size;
  }

  // optional bool is_a_pivot_table = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefaultCellStylesContainerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DefaultCellStylesContainerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefaultCellStylesContainerArchive::GetClassData() const { return &_class_data_; }


void DefaultCellStylesContainerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DefaultCellStylesContainerArchive*>(&to_msg);
  auto& from = static_cast<const DefaultCellStylesContainerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.DefaultCellStylesContainerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_uids_.MergeFrom(from._impl_.row_uids_);
  _this->_impl_.column_uids_.MergeFrom(from._impl_.column_uids_);
  _this->_impl_.row_types_.MergeFrom(from._impl_.row_types_);
  _this->_impl_.column_types_.MergeFrom(from._impl_.column_types_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_style_network()->::TSP::Reference::MergeFrom(
          from._internal_table_style_network());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_a_pivot_table_ = from._impl_.is_a_pivot_table_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultCellStylesContainerArchive::CopyFrom(const DefaultCellStylesContainerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.DefaultCellStylesContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultCellStylesContainerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_uids_))
    return false;
  if (_internal_has_table_style_network()) {
    if (!_impl_.table_style_network_->IsInitialized()) return false;
  }
  return true;
}

void DefaultCellStylesContainerArchive::InternalSwap(DefaultCellStylesContainerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_uids_.InternalSwap(&other->_impl_.row_uids_);
  _impl_.column_uids_.InternalSwap(&other->_impl_.column_uids_);
  _impl_.row_types_.InternalSwap(&other->_impl_.row_types_);
  _impl_.column_types_.InternalSwap(&other->_impl_.column_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DefaultCellStylesContainerArchive, _impl_.is_a_pivot_table_)
      + sizeof(DefaultCellStylesContainerArchive::_impl_.is_a_pivot_table_)
      - PROTOBUF_FIELD_OFFSET(DefaultCellStylesContainerArchive, _impl_.table_style_network_)>(
          reinterpret_cast<char*>(&_impl_.table_style_network_),
          reinterpret_cast<char*>(&other->_impl_.table_style_network_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultCellStylesContainerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[148]);
}

// ===================================================================

class MultiTableRemapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiTableRemapperArchive>()._impl_._has_bits_);
  static void set_has_mapping_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_steal_references(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_reuse_table_names(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDMapArchive& backing_tables_for_charts(const MultiTableRemapperArchive* msg);
  static void set_has_backing_tables_for_charts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cross_document_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nested_inner_mapper(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::TSP::UUIDMapArchive&
MultiTableRemapperArchive::_Internal::backing_tables_for_charts(const MultiTableRemapperArchive* msg) {
  return *msg->_impl_.backing_tables_for_charts_;
}
void MultiTableRemapperArchive::clear_owner_uid_mapper() {
  _impl_.owner_uid_mapper_.Clear();
}
void MultiTableRemapperArchive::clear_backing_tables_for_charts() {
  if (_impl_.backing_tables_for_charts_ != nullptr) _impl_.backing_tables_for_charts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MultiTableRemapperArchive::MultiTableRemapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.MultiTableRemapperArchive)
}
MultiTableRemapperArchive::MultiTableRemapperArchive(const MultiTableRemapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiTableRemapperArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uid_mapper_){from._impl_.owner_uid_mapper_}
    , decltype(_impl_.backing_tables_for_charts_){nullptr}
    , decltype(_impl_.mapping_purpose_){}
    , decltype(_impl_.should_steal_references_){}
    , decltype(_impl_.can_reuse_table_names_){}
    , decltype(_impl_.cross_document_paste_){}
    , decltype(_impl_.nested_inner_mapper_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_backing_tables_for_charts()) {
    _this->_impl_.backing_tables_for_charts_ = new ::TSP::UUIDMapArchive(*from._impl_.backing_tables_for_charts_);
  }
  ::memcpy(&_impl_.mapping_purpose_, &from._impl_.mapping_purpose_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nested_inner_mapper_) -
    reinterpret_cast<char*>(&_impl_.mapping_purpose_)) + sizeof(_impl_.nested_inner_mapper_));
  // @@protoc_insertion_point(copy_constructor:TST.MultiTableRemapperArchive)
}

inline void MultiTableRemapperArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uid_mapper_){arena}
    , decltype(_impl_.backing_tables_for_charts_){nullptr}
    , decltype(_impl_.mapping_purpose_){0}
    , decltype(_impl_.should_steal_references_){false}
    , decltype(_impl_.can_reuse_table_names_){false}
    , decltype(_impl_.cross_document_paste_){false}
    , decltype(_impl_.nested_inner_mapper_){false}
  };
}

MultiTableRemapperArchive::~MultiTableRemapperArchive() {
  // @@protoc_insertion_point(destructor:TST.MultiTableRemapperArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiTableRemapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_uid_mapper_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.backing_tables_for_charts_;
}

void MultiTableRemapperArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiTableRemapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.MultiTableRemapperArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_uid_mapper_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.backing_tables_for_charts_ != nullptr);
    _impl_.backing_tables_for_charts_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.mapping_purpose_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.nested_inner_mapper_) -
        reinterpret_cast<char*>(&_impl_.mapping_purpose_)) + sizeof(_impl_.nested_inner_mapper_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiTableRemapperArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::MultiTableRemapperArchive_Purpose_IsValid(val))) {
            _internal_set_mapping_purpose(static_cast<::TST::MultiTableRemapperArchive_Purpose>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool should_steal_references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_should_steal_references(&has_bits);
          _impl_.should_steal_references_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool can_reuse_table_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_can_reuse_table_names(&has_bits);
          _impl_.can_reuse_table_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.OwnerUIDMapperArchive owner_uid_mapper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_uid_mapper(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_backing_tables_for_charts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool cross_document_paste = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cross_document_paste(&has_bits);
          _impl_.cross_document_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool nested_inner_mapper = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_nested_inner_mapper(&has_bits);
          _impl_.nested_inner_mapper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiTableRemapperArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.MultiTableRemapperArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mapping_purpose(), target);
  }

  // required bool should_steal_references = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_should_steal_references(), target);
  }

  // required bool can_reuse_table_names = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_can_reuse_table_names(), target);
  }

  // repeated .TSCE.OwnerUIDMapperArchive owner_uid_mapper = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owner_uid_mapper_size()); i < n; i++) {
    const auto& repfield = this->_internal_owner_uid_mapper(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::backing_tables_for_charts(this),
        _Internal::backing_tables_for_charts(this).GetCachedSize(), target, stream);
  }

  // required bool cross_document_paste = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_cross_document_paste(), target);
  }

  // required bool nested_inner_mapper = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_nested_inner_mapper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.MultiTableRemapperArchive)
  return target;
}

size_t MultiTableRemapperArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.MultiTableRemapperArchive)
  size_t total_size = 0;

  if (_internal_has_backing_tables_for_charts()) {
    // required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.backing_tables_for_charts_);
  }

  if (_internal_has_mapping_purpose()) {
    // required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mapping_purpose());
  }

  if (_internal_has_should_steal_references()) {
    // required bool should_steal_references = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_can_reuse_table_names()) {
    // required bool can_reuse_table_names = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_cross_document_paste()) {
    // required bool cross_document_paste = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_nested_inner_mapper()) {
    // required bool nested_inner_mapper = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MultiTableRemapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.MultiTableRemapperArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .TSP.UUIDMapArchive backing_tables_for_charts = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.backing_tables_for_charts_);

    // required .TST.MultiTableRemapperArchive.Purpose mapping_purpose = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mapping_purpose());

    // required bool should_steal_references = 2;
    total_size += 1 + 1;

    // required bool can_reuse_table_names = 3;
    total_size += 1 + 1;

    // required bool cross_document_paste = 6;
    total_size += 1 + 1;

    // required bool nested_inner_mapper = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.OwnerUIDMapperArchive owner_uid_mapper = 4;
  total_size += 1UL * this->_internal_owner_uid_mapper_size();
  for (const auto& msg : this->_impl_.owner_uid_mapper_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiTableRemapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiTableRemapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiTableRemapperArchive::GetClassData() const { return &_class_data_; }


void MultiTableRemapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiTableRemapperArchive*>(&to_msg);
  auto& from = static_cast<const MultiTableRemapperArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.MultiTableRemapperArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.owner_uid_mapper_.MergeFrom(from._impl_.owner_uid_mapper_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_backing_tables_for_charts()->::TSP::UUIDMapArchive::MergeFrom(
          from._internal_backing_tables_for_charts());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mapping_purpose_ = from._impl_.mapping_purpose_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.should_steal_references_ = from._impl_.should_steal_references_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.can_reuse_table_names_ = from._impl_.can_reuse_table_names_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cross_document_paste_ = from._impl_.cross_document_paste_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nested_inner_mapper_ = from._impl_.nested_inner_mapper_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiTableRemapperArchive::CopyFrom(const MultiTableRemapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.MultiTableRemapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTableRemapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.owner_uid_mapper_))
    return false;
  if (_internal_has_backing_tables_for_charts()) {
    if (!_impl_.backing_tables_for_charts_->IsInitialized()) return false;
  }
  return true;
}

void MultiTableRemapperArchive::InternalSwap(MultiTableRemapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.owner_uid_mapper_.InternalSwap(&other->_impl_.owner_uid_mapper_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiTableRemapperArchive, _impl_.nested_inner_mapper_)
      + sizeof(MultiTableRemapperArchive::_impl_.nested_inner_mapper_)
      - PROTOBUF_FIELD_OFFSET(MultiTableRemapperArchive, _impl_.backing_tables_for_charts_)>(
          reinterpret_cast<char*>(&_impl_.backing_tables_for_charts_),
          reinterpret_cast<char*>(&other->_impl_.backing_tables_for_charts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTableRemapperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[149]);
}

// ===================================================================

class ChangePropagationMapWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangePropagationMapWrapper>()._impl_._has_bits_);
  static void set_has_replacement_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& table_preset_replace_prototype(const ChangePropagationMapWrapper* msg);
  static void set_has_table_preset_replace_prototype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& table_preset_replace_replacement(const ChangePropagationMapWrapper* msg);
  static void set_has_table_preset_replace_replacement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& table_preset_delete_prototype(const ChangePropagationMapWrapper* msg);
  static void set_has_table_preset_delete_prototype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& table_preset_delete_replacement(const ChangePropagationMapWrapper* msg);
  static void set_has_table_preset_delete_replacement(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TSP::Reference&
ChangePropagationMapWrapper::_Internal::table_preset_replace_prototype(const ChangePropagationMapWrapper* msg) {
  return *msg->_impl_.table_preset_replace_prototype_;
}
const ::TSP::Reference&
ChangePropagationMapWrapper::_Internal::table_preset_replace_replacement(const ChangePropagationMapWrapper* msg) {
  return *msg->_impl_.table_preset_replace_replacement_;
}
const ::TSP::Reference&
ChangePropagationMapWrapper::_Internal::table_preset_delete_prototype(const ChangePropagationMapWrapper* msg) {
  return *msg->_impl_.table_preset_delete_prototype_;
}
const ::TSP::Reference&
ChangePropagationMapWrapper::_Internal::table_preset_delete_replacement(const ChangePropagationMapWrapper* msg) {
  return *msg->_impl_.table_preset_delete_replacement_;
}
void ChangePropagationMapWrapper::clear_style_replace_prototypes() {
  _impl_.style_replace_prototypes_.Clear();
}
void ChangePropagationMapWrapper::clear_style_replace_replacements() {
  _impl_.style_replace_replacements_.Clear();
}
void ChangePropagationMapWrapper::clear_style_modify_styles() {
  _impl_.style_modify_styles_.Clear();
}
void ChangePropagationMapWrapper::clear_style_modify_old_prop_maps() {
  _impl_.style_modify_old_prop_maps_.Clear();
}
void ChangePropagationMapWrapper::clear_style_modify_new_prop_maps() {
  _impl_.style_modify_new_prop_maps_.Clear();
}
void ChangePropagationMapWrapper::clear_style_delete_prototypes() {
  _impl_.style_delete_prototypes_.Clear();
}
void ChangePropagationMapWrapper::clear_style_delete_replacements() {
  _impl_.style_delete_replacements_.Clear();
}
void ChangePropagationMapWrapper::clear_table_preset_replace_prototype() {
  if (_impl_.table_preset_replace_prototype_ != nullptr) _impl_.table_preset_replace_prototype_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChangePropagationMapWrapper::clear_table_preset_replace_replacement() {
  if (_impl_.table_preset_replace_replacement_ != nullptr) _impl_.table_preset_replace_replacement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChangePropagationMapWrapper::clear_table_preset_delete_prototype() {
  if (_impl_.table_preset_delete_prototype_ != nullptr) _impl_.table_preset_delete_prototype_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChangePropagationMapWrapper::clear_table_preset_delete_replacement() {
  if (_impl_.table_preset_delete_replacement_ != nullptr) _impl_.table_preset_delete_replacement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ChangePropagationMapWrapper::ChangePropagationMapWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ChangePropagationMapWrapper)
}
ChangePropagationMapWrapper::ChangePropagationMapWrapper(const ChangePropagationMapWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangePropagationMapWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.style_replace_prototypes_){from._impl_.style_replace_prototypes_}
    , decltype(_impl_.style_replace_replacements_){from._impl_.style_replace_replacements_}
    , decltype(_impl_.style_modify_styles_){from._impl_.style_modify_styles_}
    , decltype(_impl_.style_modify_old_prop_maps_){from._impl_.style_modify_old_prop_maps_}
    , decltype(_impl_.style_modify_new_prop_maps_){from._impl_.style_modify_new_prop_maps_}
    , decltype(_impl_.style_delete_prototypes_){from._impl_.style_delete_prototypes_}
    , decltype(_impl_.style_delete_replacements_){from._impl_.style_delete_replacements_}
    , decltype(_impl_.table_preset_replace_prototype_){nullptr}
    , decltype(_impl_.table_preset_replace_replacement_){nullptr}
    , decltype(_impl_.table_preset_delete_prototype_){nullptr}
    , decltype(_impl_.table_preset_delete_replacement_){nullptr}
    , decltype(_impl_.replacement_behavior_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_preset_replace_prototype()) {
    _this->_impl_.table_preset_replace_prototype_ = new ::TSP::Reference(*from._impl_.table_preset_replace_prototype_);
  }
  if (from._internal_has_table_preset_replace_replacement()) {
    _this->_impl_.table_preset_replace_replacement_ = new ::TSP::Reference(*from._impl_.table_preset_replace_replacement_);
  }
  if (from._internal_has_table_preset_delete_prototype()) {
    _this->_impl_.table_preset_delete_prototype_ = new ::TSP::Reference(*from._impl_.table_preset_delete_prototype_);
  }
  if (from._internal_has_table_preset_delete_replacement()) {
    _this->_impl_.table_preset_delete_replacement_ = new ::TSP::Reference(*from._impl_.table_preset_delete_replacement_);
  }
  _this->_impl_.replacement_behavior_ = from._impl_.replacement_behavior_;
  // @@protoc_insertion_point(copy_constructor:TST.ChangePropagationMapWrapper)
}

inline void ChangePropagationMapWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.style_replace_prototypes_){arena}
    , decltype(_impl_.style_replace_replacements_){arena}
    , decltype(_impl_.style_modify_styles_){arena}
    , decltype(_impl_.style_modify_old_prop_maps_){arena}
    , decltype(_impl_.style_modify_new_prop_maps_){arena}
    , decltype(_impl_.style_delete_prototypes_){arena}
    , decltype(_impl_.style_delete_replacements_){arena}
    , decltype(_impl_.table_preset_replace_prototype_){nullptr}
    , decltype(_impl_.table_preset_replace_replacement_){nullptr}
    , decltype(_impl_.table_preset_delete_prototype_){nullptr}
    , decltype(_impl_.table_preset_delete_replacement_){nullptr}
    , decltype(_impl_.replacement_behavior_){0}
  };
}

ChangePropagationMapWrapper::~ChangePropagationMapWrapper() {
  // @@protoc_insertion_point(destructor:TST.ChangePropagationMapWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangePropagationMapWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.style_replace_prototypes_.~RepeatedPtrField();
  _impl_.style_replace_replacements_.~RepeatedPtrField();
  _impl_.style_modify_styles_.~RepeatedPtrField();
  _impl_.style_modify_old_prop_maps_.~RepeatedPtrField();
  _impl_.style_modify_new_prop_maps_.~RepeatedPtrField();
  _impl_.style_delete_prototypes_.~RepeatedPtrField();
  _impl_.style_delete_replacements_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.table_preset_replace_prototype_;
  if (this != internal_default_instance()) delete _impl_.table_preset_replace_replacement_;
  if (this != internal_default_instance()) delete _impl_.table_preset_delete_prototype_;
  if (this != internal_default_instance()) delete _impl_.table_preset_delete_replacement_;
}

void ChangePropagationMapWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangePropagationMapWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ChangePropagationMapWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.style_replace_prototypes_.Clear();
  _impl_.style_replace_replacements_.Clear();
  _impl_.style_modify_styles_.Clear();
  _impl_.style_modify_old_prop_maps_.Clear();
  _impl_.style_modify_new_prop_maps_.Clear();
  _impl_.style_delete_prototypes_.Clear();
  _impl_.style_delete_replacements_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_preset_replace_prototype_ != nullptr);
      _impl_.table_preset_replace_prototype_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.table_preset_replace_replacement_ != nullptr);
      _impl_.table_preset_replace_replacement_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.table_preset_delete_prototype_ != nullptr);
      _impl_.table_preset_delete_prototype_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.table_preset_delete_replacement_ != nullptr);
      _impl_.table_preset_delete_replacement_->Clear();
    }
  }
  _impl_.replacement_behavior_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangePropagationMapWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 replacement_behavior = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_replacement_behavior(&has_bits);
          _impl_.replacement_behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_replace_prototypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_replace_prototypes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_replace_replacements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_replace_replacements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_modify_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_modify_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_modify_old_prop_maps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_modify_old_prop_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_modify_new_prop_maps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_modify_new_prop_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_delete_prototypes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_delete_prototypes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference style_delete_replacements = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_style_delete_replacements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_preset_replace_prototype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_preset_replace_prototype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_preset_replace_replacement = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_preset_replace_replacement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_preset_delete_prototype = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_preset_delete_prototype(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_preset_delete_replacement = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_preset_delete_replacement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangePropagationMapWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ChangePropagationMapWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 replacement_behavior = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_replacement_behavior(), target);
  }

  // repeated .TSP.Reference style_replace_prototypes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_style_replace_prototypes_size()); i < n; i++) {
    const auto& repfield = this->_internal_style_replace_prototypes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference style_replace_replacements = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_style_replace_replacements_size()); i < n; i++) {
    const auto& repfield = this->_internal_style_replace_replacements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference style_modify_styles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_style_modify_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_style_modify_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference style_modify_old_prop_maps = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_style_modify_old_prop_maps_size()); i < n; i++) {
    const auto& repfield = this->_internal_style_modify_old_prop_maps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference style_modify_new_prop_maps = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_style_modify_new_prop_maps_size()); i < n; i++) {
    const auto& repfield = this->_internal_style_modify_new_prop_maps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference style_delete_prototypes = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_style_delete_prototypes_size()); i < n; i++) {
    const auto& repfield = this->_internal_style_delete_prototypes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference style_delete_replacements = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_style_delete_replacements_size()); i < n; i++) {
    const auto& repfield = this->_internal_style_delete_replacements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_preset_replace_prototype = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::table_preset_replace_prototype(this),
        _Internal::table_preset_replace_prototype(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_preset_replace_replacement = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::table_preset_replace_replacement(this),
        _Internal::table_preset_replace_replacement(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_preset_delete_prototype = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::table_preset_delete_prototype(this),
        _Internal::table_preset_delete_prototype(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_preset_delete_replacement = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::table_preset_delete_replacement(this),
        _Internal::table_preset_delete_replacement(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ChangePropagationMapWrapper)
  return target;
}

size_t ChangePropagationMapWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ChangePropagationMapWrapper)
  size_t total_size = 0;

  // required int32 replacement_behavior = 1;
  if (_internal_has_replacement_behavior()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replacement_behavior());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference style_replace_prototypes = 2;
  total_size += 1UL * this->_internal_style_replace_prototypes_size();
  for (const auto& msg : this->_impl_.style_replace_prototypes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_replace_replacements = 3;
  total_size += 1UL * this->_internal_style_replace_replacements_size();
  for (const auto& msg : this->_impl_.style_replace_replacements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_modify_styles = 4;
  total_size += 1UL * this->_internal_style_modify_styles_size();
  for (const auto& msg : this->_impl_.style_modify_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_modify_old_prop_maps = 5;
  total_size += 1UL * this->_internal_style_modify_old_prop_maps_size();
  for (const auto& msg : this->_impl_.style_modify_old_prop_maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_modify_new_prop_maps = 6;
  total_size += 1UL * this->_internal_style_modify_new_prop_maps_size();
  for (const auto& msg : this->_impl_.style_modify_new_prop_maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_delete_prototypes = 7;
  total_size += 1UL * this->_internal_style_delete_prototypes_size();
  for (const auto& msg : this->_impl_.style_delete_prototypes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference style_delete_replacements = 8;
  total_size += 1UL * this->_internal_style_delete_replacements_size();
  for (const auto& msg : this->_impl_.style_delete_replacements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference table_preset_replace_prototype = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_preset_replace_prototype_);
    }

    // optional .TSP.Reference table_preset_replace_replacement = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_preset_replace_replacement_);
    }

    // optional .TSP.Reference table_preset_delete_prototype = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_preset_delete_prototype_);
    }

    // optional .TSP.Reference table_preset_delete_replacement = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_preset_delete_replacement_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangePropagationMapWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangePropagationMapWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangePropagationMapWrapper::GetClassData() const { return &_class_data_; }


void ChangePropagationMapWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangePropagationMapWrapper*>(&to_msg);
  auto& from = static_cast<const ChangePropagationMapWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ChangePropagationMapWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.style_replace_prototypes_.MergeFrom(from._impl_.style_replace_prototypes_);
  _this->_impl_.style_replace_replacements_.MergeFrom(from._impl_.style_replace_replacements_);
  _this->_impl_.style_modify_styles_.MergeFrom(from._impl_.style_modify_styles_);
  _this->_impl_.style_modify_old_prop_maps_.MergeFrom(from._impl_.style_modify_old_prop_maps_);
  _this->_impl_.style_modify_new_prop_maps_.MergeFrom(from._impl_.style_modify_new_prop_maps_);
  _this->_impl_.style_delete_prototypes_.MergeFrom(from._impl_.style_delete_prototypes_);
  _this->_impl_.style_delete_replacements_.MergeFrom(from._impl_.style_delete_replacements_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_preset_replace_prototype()->::TSP::Reference::MergeFrom(
          from._internal_table_preset_replace_prototype());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_preset_replace_replacement()->::TSP::Reference::MergeFrom(
          from._internal_table_preset_replace_replacement());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_table_preset_delete_prototype()->::TSP::Reference::MergeFrom(
          from._internal_table_preset_delete_prototype());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_table_preset_delete_replacement()->::TSP::Reference::MergeFrom(
          from._internal_table_preset_delete_replacement());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.replacement_behavior_ = from._impl_.replacement_behavior_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangePropagationMapWrapper::CopyFrom(const ChangePropagationMapWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ChangePropagationMapWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePropagationMapWrapper::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.style_replace_prototypes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.style_replace_replacements_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.style_modify_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.style_modify_old_prop_maps_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.style_modify_new_prop_maps_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.style_delete_prototypes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.style_delete_replacements_))
    return false;
  if (_internal_has_table_preset_replace_prototype()) {
    if (!_impl_.table_preset_replace_prototype_->IsInitialized()) return false;
  }
  if (_internal_has_table_preset_replace_replacement()) {
    if (!_impl_.table_preset_replace_replacement_->IsInitialized()) return false;
  }
  if (_internal_has_table_preset_delete_prototype()) {
    if (!_impl_.table_preset_delete_prototype_->IsInitialized()) return false;
  }
  if (_internal_has_table_preset_delete_replacement()) {
    if (!_impl_.table_preset_delete_replacement_->IsInitialized()) return false;
  }
  return true;
}

void ChangePropagationMapWrapper::InternalSwap(ChangePropagationMapWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.style_replace_prototypes_.InternalSwap(&other->_impl_.style_replace_prototypes_);
  _impl_.style_replace_replacements_.InternalSwap(&other->_impl_.style_replace_replacements_);
  _impl_.style_modify_styles_.InternalSwap(&other->_impl_.style_modify_styles_);
  _impl_.style_modify_old_prop_maps_.InternalSwap(&other->_impl_.style_modify_old_prop_maps_);
  _impl_.style_modify_new_prop_maps_.InternalSwap(&other->_impl_.style_modify_new_prop_maps_);
  _impl_.style_delete_prototypes_.InternalSwap(&other->_impl_.style_delete_prototypes_);
  _impl_.style_delete_replacements_.InternalSwap(&other->_impl_.style_delete_replacements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangePropagationMapWrapper, _impl_.replacement_behavior_)
      + sizeof(ChangePropagationMapWrapper::_impl_.replacement_behavior_)
      - PROTOBUF_FIELD_OFFSET(ChangePropagationMapWrapper, _impl_.table_preset_replace_prototype_)>(
          reinterpret_cast<char*>(&_impl_.table_preset_replace_prototype_),
          reinterpret_cast<char*>(&other->_impl_.table_preset_replace_prototype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePropagationMapWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[150]);
}

// ===================================================================

class SummaryCellVendorArchive_SummaryCellEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryCellVendorArchive_SummaryCellEntry>()._impl_._has_bits_);
  static const ::TSP::UUID& wildcarduid(const SummaryCellVendorArchive_SummaryCellEntry* msg);
  static void set_has_wildcarduid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& columnuid(const SummaryCellVendorArchive_SummaryCellEntry* msg);
  static void set_has_columnuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::Cell& cell(const SummaryCellVendorArchive_SummaryCellEntry* msg);
  static void set_has_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
SummaryCellVendorArchive_SummaryCellEntry::_Internal::wildcarduid(const SummaryCellVendorArchive_SummaryCellEntry* msg) {
  return *msg->_impl_.wildcarduid_;
}
const ::TSP::UUID&
SummaryCellVendorArchive_SummaryCellEntry::_Internal::columnuid(const SummaryCellVendorArchive_SummaryCellEntry* msg) {
  return *msg->_impl_.columnuid_;
}
const ::TST::Cell&
SummaryCellVendorArchive_SummaryCellEntry::_Internal::cell(const SummaryCellVendorArchive_SummaryCellEntry* msg) {
  return *msg->_impl_.cell_;
}
void SummaryCellVendorArchive_SummaryCellEntry::clear_wildcarduid() {
  if (_impl_.wildcarduid_ != nullptr) _impl_.wildcarduid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SummaryCellVendorArchive_SummaryCellEntry::clear_columnuid() {
  if (_impl_.columnuid_ != nullptr) _impl_.columnuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SummaryCellVendorArchive_SummaryCellEntry::SummaryCellVendorArchive_SummaryCellEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.SummaryCellVendorArchive.SummaryCellEntry)
}
SummaryCellVendorArchive_SummaryCellEntry::SummaryCellVendorArchive_SummaryCellEntry(const SummaryCellVendorArchive_SummaryCellEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryCellVendorArchive_SummaryCellEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wildcarduid_){nullptr}
    , decltype(_impl_.columnuid_){nullptr}
    , decltype(_impl_.cell_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_wildcarduid()) {
    _this->_impl_.wildcarduid_ = new ::TSP::UUID(*from._impl_.wildcarduid_);
  }
  if (from._internal_has_columnuid()) {
    _this->_impl_.columnuid_ = new ::TSP::UUID(*from._impl_.columnuid_);
  }
  if (from._internal_has_cell()) {
    _this->_impl_.cell_ = new ::TST::Cell(*from._impl_.cell_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.SummaryCellVendorArchive.SummaryCellEntry)
}

inline void SummaryCellVendorArchive_SummaryCellEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wildcarduid_){nullptr}
    , decltype(_impl_.columnuid_){nullptr}
    , decltype(_impl_.cell_){nullptr}
  };
}

SummaryCellVendorArchive_SummaryCellEntry::~SummaryCellVendorArchive_SummaryCellEntry() {
  // @@protoc_insertion_point(destructor:TST.SummaryCellVendorArchive.SummaryCellEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummaryCellVendorArchive_SummaryCellEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.wildcarduid_;
  if (this != internal_default_instance()) delete _impl_.columnuid_;
  if (this != internal_default_instance()) delete _impl_.cell_;
}

void SummaryCellVendorArchive_SummaryCellEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryCellVendorArchive_SummaryCellEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.wildcarduid_ != nullptr);
      _impl_.wildcarduid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.columnuid_ != nullptr);
      _impl_.columnuid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cell_ != nullptr);
      _impl_.cell_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryCellVendorArchive_SummaryCellEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID wildcardUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wildcarduid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID columnUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_columnuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.Cell cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryCellVendorArchive_SummaryCellEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID wildcardUID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::wildcarduid(this),
        _Internal::wildcarduid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID columnUID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::columnuid(this),
        _Internal::columnuid(this).GetCachedSize(), target, stream);
  }

  // required .TST.Cell cell = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell(this),
        _Internal::cell(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SummaryCellVendorArchive.SummaryCellEntry)
  return target;
}

size_t SummaryCellVendorArchive_SummaryCellEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  size_t total_size = 0;

  if (_internal_has_wildcarduid()) {
    // required .TSP.UUID wildcardUID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wildcarduid_);
  }

  if (_internal_has_columnuid()) {
    // required .TSP.UUID columnUID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.columnuid_);
  }

  if (_internal_has_cell()) {
    // required .TST.Cell cell = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);
  }

  return total_size;
}
size_t SummaryCellVendorArchive_SummaryCellEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.UUID wildcardUID = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wildcarduid_);

    // required .TSP.UUID columnUID = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.columnuid_);

    // required .TST.Cell cell = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryCellVendorArchive_SummaryCellEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryCellVendorArchive_SummaryCellEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryCellVendorArchive_SummaryCellEntry::GetClassData() const { return &_class_data_; }


void SummaryCellVendorArchive_SummaryCellEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryCellVendorArchive_SummaryCellEntry*>(&to_msg);
  auto& from = static_cast<const SummaryCellVendorArchive_SummaryCellEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_wildcarduid()->::TSP::UUID::MergeFrom(
          from._internal_wildcarduid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_columnuid()->::TSP::UUID::MergeFrom(
          from._internal_columnuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cell()->::TST::Cell::MergeFrom(
          from._internal_cell());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryCellVendorArchive_SummaryCellEntry::CopyFrom(const SummaryCellVendorArchive_SummaryCellEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SummaryCellVendorArchive.SummaryCellEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryCellVendorArchive_SummaryCellEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_wildcarduid()) {
    if (!_impl_.wildcarduid_->IsInitialized()) return false;
  }
  if (_internal_has_columnuid()) {
    if (!_impl_.columnuid_->IsInitialized()) return false;
  }
  if (_internal_has_cell()) {
    if (!_impl_.cell_->IsInitialized()) return false;
  }
  return true;
}

void SummaryCellVendorArchive_SummaryCellEntry::InternalSwap(SummaryCellVendorArchive_SummaryCellEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryCellVendorArchive_SummaryCellEntry, _impl_.cell_)
      + sizeof(SummaryCellVendorArchive_SummaryCellEntry::_impl_.cell_)
      - PROTOBUF_FIELD_OFFSET(SummaryCellVendorArchive_SummaryCellEntry, _impl_.wildcarduid_)>(
          reinterpret_cast<char*>(&_impl_.wildcarduid_),
          reinterpret_cast<char*>(&other->_impl_.wildcarduid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryCellVendorArchive_SummaryCellEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[151]);
}

// ===================================================================

class SummaryCellVendorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SummaryCellVendorArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& table_info(const SummaryCellVendorArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
SummaryCellVendorArchive::_Internal::table_info(const SummaryCellVendorArchive* msg) {
  return *msg->_impl_.table_info_;
}
void SummaryCellVendorArchive::clear_table_info() {
  if (_impl_.table_info_ != nullptr) _impl_.table_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SummaryCellVendorArchive::SummaryCellVendorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.SummaryCellVendorArchive)
}
SummaryCellVendorArchive::SummaryCellVendorArchive(const SummaryCellVendorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryCellVendorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.table_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    _this->_impl_.table_info_ = new ::TSP::Reference(*from._impl_.table_info_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.SummaryCellVendorArchive)
}

inline void SummaryCellVendorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.table_info_){nullptr}
  };
}

SummaryCellVendorArchive::~SummaryCellVendorArchive() {
  // @@protoc_insertion_point(destructor:TST.SummaryCellVendorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummaryCellVendorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.table_info_;
}

void SummaryCellVendorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryCellVendorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.SummaryCellVendorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_info_ != nullptr);
    _impl_.table_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryCellVendorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.SummaryCellVendorArchive.SummaryCellEntry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryCellVendorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.SummaryCellVendorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_info(this),
        _Internal::table_info(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.SummaryCellVendorArchive.SummaryCellEntry entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.SummaryCellVendorArchive)
  return target;
}

size_t SummaryCellVendorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.SummaryCellVendorArchive)
  size_t total_size = 0;

  // required .TSP.Reference table_info = 1;
  if (_internal_has_table_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_info_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.SummaryCellVendorArchive.SummaryCellEntry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryCellVendorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryCellVendorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryCellVendorArchive::GetClassData() const { return &_class_data_; }


void SummaryCellVendorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryCellVendorArchive*>(&to_msg);
  auto& from = static_cast<const SummaryCellVendorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.SummaryCellVendorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_has_table_info()) {
    _this->_internal_mutable_table_info()->::TSP::Reference::MergeFrom(
        from._internal_table_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryCellVendorArchive::CopyFrom(const SummaryCellVendorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.SummaryCellVendorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryCellVendorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  if (_internal_has_table_info()) {
    if (!_impl_.table_info_->IsInitialized()) return false;
  }
  return true;
}

void SummaryCellVendorArchive::InternalSwap(SummaryCellVendorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  swap(_impl_.table_info_, other->_impl_.table_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryCellVendorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[152]);
}

// ===================================================================

class CategoryOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryOrderArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& table_info(const CategoryOrderArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& uid_map(const CategoryOrderArchive* msg);
  static void set_has_uid_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
CategoryOrderArchive::_Internal::table_info(const CategoryOrderArchive* msg) {
  return *msg->_impl_.table_info_;
}
const ::TSP::Reference&
CategoryOrderArchive::_Internal::uid_map(const CategoryOrderArchive* msg) {
  return *msg->_impl_.uid_map_;
}
void CategoryOrderArchive::clear_table_info() {
  if (_impl_.table_info_ != nullptr) _impl_.table_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CategoryOrderArchive::clear_uid_map() {
  if (_impl_.uid_map_ != nullptr) _impl_.uid_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CategoryOrderArchive::CategoryOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CategoryOrderArchive)
}
CategoryOrderArchive::CategoryOrderArchive(const CategoryOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryOrderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.uid_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info()) {
    _this->_impl_.table_info_ = new ::TSP::Reference(*from._impl_.table_info_);
  }
  if (from._internal_has_uid_map()) {
    _this->_impl_.uid_map_ = new ::TSP::Reference(*from._impl_.uid_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CategoryOrderArchive)
}

inline void CategoryOrderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.uid_map_){nullptr}
  };
}

CategoryOrderArchive::~CategoryOrderArchive() {
  // @@protoc_insertion_point(destructor:TST.CategoryOrderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_info_;
  if (this != internal_default_instance()) delete _impl_.uid_map_;
}

void CategoryOrderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CategoryOrderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_info_ != nullptr);
      _impl_.table_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.uid_map_ != nullptr);
      _impl_.uid_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryOrderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference table_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference uid_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryOrderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CategoryOrderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference table_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_info(this),
        _Internal::table_info(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference uid_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uid_map(this),
        _Internal::uid_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CategoryOrderArchive)
  return target;
}

size_t CategoryOrderArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CategoryOrderArchive)
  size_t total_size = 0;

  if (_internal_has_table_info()) {
    // required .TSP.Reference table_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_info_);
  }

  if (_internal_has_uid_map()) {
    // required .TSP.Reference uid_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uid_map_);
  }

  return total_size;
}
size_t CategoryOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CategoryOrderArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference table_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_info_);

    // required .TSP.Reference uid_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uid_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryOrderArchive::GetClassData() const { return &_class_data_; }


void CategoryOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryOrderArchive*>(&to_msg);
  auto& from = static_cast<const CategoryOrderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CategoryOrderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_info()->::TSP::Reference::MergeFrom(
          from._internal_table_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_uid_map()->::TSP::Reference::MergeFrom(
          from._internal_uid_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryOrderArchive::CopyFrom(const CategoryOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CategoryOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_table_info()) {
    if (!_impl_.table_info_->IsInitialized()) return false;
  }
  if (_internal_has_uid_map()) {
    if (!_impl_.uid_map_->IsInitialized()) return false;
  }
  return true;
}

void CategoryOrderArchive::InternalSwap(CategoryOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryOrderArchive, _impl_.uid_map_)
      + sizeof(CategoryOrderArchive::_impl_.uid_map_)
      - PROTOBUF_FIELD_OFFSET(CategoryOrderArchive, _impl_.table_info_)>(
          reinterpret_cast<char*>(&_impl_.table_info_),
          reinterpret_cast<char*>(&other->_impl_.table_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryOrderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[153]);
}

// ===================================================================

class PivotOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PivotOrderArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& uid_map(const PivotOrderArchive* msg);
  static void set_has_uid_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
PivotOrderArchive::_Internal::uid_map(const PivotOrderArchive* msg) {
  return *msg->_impl_.uid_map_;
}
void PivotOrderArchive::clear_uid_map() {
  if (_impl_.uid_map_ != nullptr) _impl_.uid_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PivotOrderArchive::PivotOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.PivotOrderArchive)
}
PivotOrderArchive::PivotOrderArchive(const PivotOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PivotOrderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uid_map()) {
    _this->_impl_.uid_map_ = new ::TSP::Reference(*from._impl_.uid_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.PivotOrderArchive)
}

inline void PivotOrderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_map_){nullptr}
  };
}

PivotOrderArchive::~PivotOrderArchive() {
  // @@protoc_insertion_point(destructor:TST.PivotOrderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PivotOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uid_map_;
}

void PivotOrderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PivotOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.PivotOrderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uid_map_ != nullptr);
    _impl_.uid_map_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PivotOrderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference uid_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PivotOrderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.PivotOrderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference uid_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uid_map(this),
        _Internal::uid_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.PivotOrderArchive)
  return target;
}

size_t PivotOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.PivotOrderArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference uid_map = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uid_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PivotOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PivotOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PivotOrderArchive::GetClassData() const { return &_class_data_; }


void PivotOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PivotOrderArchive*>(&to_msg);
  auto& from = static_cast<const PivotOrderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.PivotOrderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uid_map()) {
    _this->_internal_mutable_uid_map()->::TSP::Reference::MergeFrom(
        from._internal_uid_map());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PivotOrderArchive::CopyFrom(const PivotOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.PivotOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotOrderArchive::IsInitialized() const {
  if (_internal_has_uid_map()) {
    if (!_impl_.uid_map_->IsInitialized()) return false;
  }
  return true;
}

void PivotOrderArchive::InternalSwap(PivotOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.uid_map_, other->_impl_.uid_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PivotOrderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[154]);
}

// ===================================================================

class HeaderNameMgrTileArchive_NameFragmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderNameMgrTileArchive_NameFragmentArchive>()._impl_._has_bits_);
  static void set_has_name_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordinateArchive& name_precedent(const HeaderNameMgrTileArchive_NameFragmentArchive* msg);
  static void set_has_name_precedent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::UidCellRefSetArchive& uses_of_name_fragment(const HeaderNameMgrTileArchive_NameFragmentArchive* msg);
  static void set_has_uses_of_name_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
HeaderNameMgrTileArchive_NameFragmentArchive::_Internal::name_precedent(const HeaderNameMgrTileArchive_NameFragmentArchive* msg) {
  return *msg->_impl_.name_precedent_;
}
const ::TSCE::UidCellRefSetArchive&
HeaderNameMgrTileArchive_NameFragmentArchive::_Internal::uses_of_name_fragment(const HeaderNameMgrTileArchive_NameFragmentArchive* msg) {
  return *msg->_impl_.uses_of_name_fragment_;
}
void HeaderNameMgrTileArchive_NameFragmentArchive::clear_name_precedent() {
  if (_impl_.name_precedent_ != nullptr) _impl_.name_precedent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void HeaderNameMgrTileArchive_NameFragmentArchive::clear_uses_of_name_fragment() {
  if (_impl_.uses_of_name_fragment_ != nullptr) _impl_.uses_of_name_fragment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
HeaderNameMgrTileArchive_NameFragmentArchive::HeaderNameMgrTileArchive_NameFragmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
}
HeaderNameMgrTileArchive_NameFragmentArchive::HeaderNameMgrTileArchive_NameFragmentArchive(const HeaderNameMgrTileArchive_NameFragmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderNameMgrTileArchive_NameFragmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_fragment_){}
    , decltype(_impl_.name_precedent_){nullptr}
    , decltype(_impl_.uses_of_name_fragment_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_fragment()) {
    _this->_impl_.name_fragment_.Set(from._internal_name_fragment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_name_precedent()) {
    _this->_impl_.name_precedent_ = new ::TSCE::CellCoordinateArchive(*from._impl_.name_precedent_);
  }
  if (from._internal_has_uses_of_name_fragment()) {
    _this->_impl_.uses_of_name_fragment_ = new ::TSCE::UidCellRefSetArchive(*from._impl_.uses_of_name_fragment_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
}

inline void HeaderNameMgrTileArchive_NameFragmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_fragment_){}
    , decltype(_impl_.name_precedent_){nullptr}
    , decltype(_impl_.uses_of_name_fragment_){nullptr}
  };
  _impl_.name_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeaderNameMgrTileArchive_NameFragmentArchive::~HeaderNameMgrTileArchive_NameFragmentArchive() {
  // @@protoc_insertion_point(destructor:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderNameMgrTileArchive_NameFragmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_fragment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.name_precedent_;
  if (this != internal_default_instance()) delete _impl_.uses_of_name_fragment_;
}

void HeaderNameMgrTileArchive_NameFragmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderNameMgrTileArchive_NameFragmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_fragment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.name_precedent_ != nullptr);
      _impl_.name_precedent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.uses_of_name_fragment_ != nullptr);
      _impl_.uses_of_name_fragment_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderNameMgrTileArchive_NameFragmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name_fragment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name_fragment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_fragment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellCoordinateArchive name_precedent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_precedent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.UidCellRefSetArchive uses_of_name_fragment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_uses_of_name_fragment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeaderNameMgrTileArchive_NameFragmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name_fragment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_fragment().data(), static_cast<int>(this->_internal_name_fragment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_fragment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_fragment(), target);
  }

  // required .TSCE.CellCoordinateArchive name_precedent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::name_precedent(this),
        _Internal::name_precedent(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.UidCellRefSetArchive uses_of_name_fragment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::uses_of_name_fragment(this),
        _Internal::uses_of_name_fragment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  return target;
}

size_t HeaderNameMgrTileArchive_NameFragmentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  size_t total_size = 0;

  if (_internal_has_name_fragment()) {
    // required string name_fragment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_fragment());
  }

  if (_internal_has_name_precedent()) {
    // required .TSCE.CellCoordinateArchive name_precedent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.name_precedent_);
  }

  return total_size;
}
size_t HeaderNameMgrTileArchive_NameFragmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name_fragment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_fragment());

    // required .TSCE.CellCoordinateArchive name_precedent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.name_precedent_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.UidCellRefSetArchive uses_of_name_fragment = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uses_of_name_fragment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderNameMgrTileArchive_NameFragmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderNameMgrTileArchive_NameFragmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderNameMgrTileArchive_NameFragmentArchive::GetClassData() const { return &_class_data_; }


void HeaderNameMgrTileArchive_NameFragmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderNameMgrTileArchive_NameFragmentArchive*>(&to_msg);
  auto& from = static_cast<const HeaderNameMgrTileArchive_NameFragmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name_fragment(from._internal_name_fragment());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_name_precedent()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_name_precedent());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_uses_of_name_fragment()->::TSCE::UidCellRefSetArchive::MergeFrom(
          from._internal_uses_of_name_fragment());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderNameMgrTileArchive_NameFragmentArchive::CopyFrom(const HeaderNameMgrTileArchive_NameFragmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderNameMgrTileArchive.NameFragmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderNameMgrTileArchive_NameFragmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_uses_of_name_fragment()) {
    if (!_impl_.uses_of_name_fragment_->IsInitialized()) return false;
  }
  return true;
}

void HeaderNameMgrTileArchive_NameFragmentArchive::InternalSwap(HeaderNameMgrTileArchive_NameFragmentArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_fragment_, lhs_arena,
      &other->_impl_.name_fragment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderNameMgrTileArchive_NameFragmentArchive, _impl_.uses_of_name_fragment_)
      + sizeof(HeaderNameMgrTileArchive_NameFragmentArchive::_impl_.uses_of_name_fragment_)
      - PROTOBUF_FIELD_OFFSET(HeaderNameMgrTileArchive_NameFragmentArchive, _impl_.name_precedent_)>(
          reinterpret_cast<char*>(&_impl_.name_precedent_),
          reinterpret_cast<char*>(&other->_impl_.name_precedent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderNameMgrTileArchive_NameFragmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[155]);
}

// ===================================================================

class HeaderNameMgrTileArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderNameMgrTileArchive>()._impl_._has_bits_);
  static void set_has_first_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

HeaderNameMgrTileArchive::HeaderNameMgrTileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HeaderNameMgrTileArchive)
}
HeaderNameMgrTileArchive::HeaderNameMgrTileArchive(const HeaderNameMgrTileArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderNameMgrTileArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_frag_entries_){from._impl_.name_frag_entries_}
    , decltype(_impl_.first_fragment_){}
    , decltype(_impl_.last_fragment_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.first_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.first_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_first_fragment()) {
    _this->_impl_.first_fragment_.Set(from._internal_first_fragment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_fragment()) {
    _this->_impl_.last_fragment_.Set(from._internal_last_fragment(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TST.HeaderNameMgrTileArchive)
}

inline void HeaderNameMgrTileArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_frag_entries_){arena}
    , decltype(_impl_.first_fragment_){}
    , decltype(_impl_.last_fragment_){}
  };
  _impl_.first_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.first_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeaderNameMgrTileArchive::~HeaderNameMgrTileArchive() {
  // @@protoc_insertion_point(destructor:TST.HeaderNameMgrTileArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderNameMgrTileArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_frag_entries_.~RepeatedPtrField();
  _impl_.first_fragment_.Destroy();
  _impl_.last_fragment_.Destroy();
}

void HeaderNameMgrTileArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderNameMgrTileArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderNameMgrTileArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_frag_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.first_fragment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.last_fragment_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderNameMgrTileArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string first_fragment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_first_fragment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.HeaderNameMgrTileArchive.first_fragment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string last_fragment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_last_fragment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.HeaderNameMgrTileArchive.last_fragment");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.HeaderNameMgrTileArchive.NameFragmentArchive name_frag_entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name_frag_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeaderNameMgrTileArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderNameMgrTileArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string first_fragment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_first_fragment().data(), static_cast<int>(this->_internal_first_fragment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.HeaderNameMgrTileArchive.first_fragment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_first_fragment(), target);
  }

  // required string last_fragment = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_fragment().data(), static_cast<int>(this->_internal_last_fragment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.HeaderNameMgrTileArchive.last_fragment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_fragment(), target);
  }

  // repeated .TST.HeaderNameMgrTileArchive.NameFragmentArchive name_frag_entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_name_frag_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_name_frag_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderNameMgrTileArchive)
  return target;
}

size_t HeaderNameMgrTileArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HeaderNameMgrTileArchive)
  size_t total_size = 0;

  if (_internal_has_first_fragment()) {
    // required string first_fragment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_fragment());
  }

  if (_internal_has_last_fragment()) {
    // required string last_fragment = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_fragment());
  }

  return total_size;
}
size_t HeaderNameMgrTileArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderNameMgrTileArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string first_fragment = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_fragment());

    // required string last_fragment = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_fragment());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HeaderNameMgrTileArchive.NameFragmentArchive name_frag_entries = 3;
  total_size += 1UL * this->_internal_name_frag_entries_size();
  for (const auto& msg : this->_impl_.name_frag_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderNameMgrTileArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderNameMgrTileArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderNameMgrTileArchive::GetClassData() const { return &_class_data_; }


void HeaderNameMgrTileArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderNameMgrTileArchive*>(&to_msg);
  auto& from = static_cast<const HeaderNameMgrTileArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderNameMgrTileArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_frag_entries_.MergeFrom(from._impl_.name_frag_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_first_fragment(from._internal_first_fragment());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_last_fragment(from._internal_last_fragment());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderNameMgrTileArchive::CopyFrom(const HeaderNameMgrTileArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderNameMgrTileArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderNameMgrTileArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.name_frag_entries_))
    return false;
  return true;
}

void HeaderNameMgrTileArchive::InternalSwap(HeaderNameMgrTileArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_frag_entries_.InternalSwap(&other->_impl_.name_frag_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.first_fragment_, lhs_arena,
      &other->_impl_.first_fragment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_fragment_, lhs_arena,
      &other->_impl_.last_fragment_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderNameMgrTileArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[156]);
}

// ===================================================================

class HeaderNameMgrArchive_PerTableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderNameMgrArchive_PerTableArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& table_uid(const HeaderNameMgrArchive_PerTableArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordinateArchive& per_table_precedent(const HeaderNameMgrArchive_PerTableArchive* msg);
  static void set_has_per_table_precedent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
HeaderNameMgrArchive_PerTableArchive::_Internal::table_uid(const HeaderNameMgrArchive_PerTableArchive* msg) {
  return *msg->_impl_.table_uid_;
}
const ::TSCE::CellCoordinateArchive&
HeaderNameMgrArchive_PerTableArchive::_Internal::per_table_precedent(const HeaderNameMgrArchive_PerTableArchive* msg) {
  return *msg->_impl_.per_table_precedent_;
}
void HeaderNameMgrArchive_PerTableArchive::clear_table_uid() {
  if (_impl_.table_uid_ != nullptr) _impl_.table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HeaderNameMgrArchive_PerTableArchive::clear_per_table_precedent() {
  if (_impl_.per_table_precedent_ != nullptr) _impl_.per_table_precedent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void HeaderNameMgrArchive_PerTableArchive::clear_header_row_uids() {
  _impl_.header_row_uids_.Clear();
}
void HeaderNameMgrArchive_PerTableArchive::clear_header_column_uids() {
  _impl_.header_column_uids_.Clear();
}
void HeaderNameMgrArchive_PerTableArchive::clear_update_header_row_uids() {
  _impl_.update_header_row_uids_.Clear();
}
void HeaderNameMgrArchive_PerTableArchive::clear_update_header_column_uids() {
  _impl_.update_header_column_uids_.Clear();
}
HeaderNameMgrArchive_PerTableArchive::HeaderNameMgrArchive_PerTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HeaderNameMgrArchive.PerTableArchive)
}
HeaderNameMgrArchive_PerTableArchive::HeaderNameMgrArchive_PerTableArchive(const HeaderNameMgrArchive_PerTableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderNameMgrArchive_PerTableArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_row_uids_){from._impl_.header_row_uids_}
    , decltype(_impl_.header_column_uids_){from._impl_.header_column_uids_}
    , decltype(_impl_.update_header_row_uids_){from._impl_.update_header_row_uids_}
    , decltype(_impl_.update_header_column_uids_){from._impl_.update_header_column_uids_}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.per_table_precedent_){nullptr}
    , decltype(_impl_.is_deleted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    _this->_impl_.table_uid_ = new ::TSP::UUID(*from._impl_.table_uid_);
  }
  if (from._internal_has_per_table_precedent()) {
    _this->_impl_.per_table_precedent_ = new ::TSCE::CellCoordinateArchive(*from._impl_.per_table_precedent_);
  }
  _this->_impl_.is_deleted_ = from._impl_.is_deleted_;
  // @@protoc_insertion_point(copy_constructor:TST.HeaderNameMgrArchive.PerTableArchive)
}

inline void HeaderNameMgrArchive_PerTableArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_row_uids_){arena}
    , decltype(_impl_.header_column_uids_){arena}
    , decltype(_impl_.update_header_row_uids_){arena}
    , decltype(_impl_.update_header_column_uids_){arena}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.per_table_precedent_){nullptr}
    , decltype(_impl_.is_deleted_){false}
  };
}

HeaderNameMgrArchive_PerTableArchive::~HeaderNameMgrArchive_PerTableArchive() {
  // @@protoc_insertion_point(destructor:TST.HeaderNameMgrArchive.PerTableArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderNameMgrArchive_PerTableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_row_uids_.~RepeatedPtrField();
  _impl_.header_column_uids_.~RepeatedPtrField();
  _impl_.update_header_row_uids_.~RepeatedPtrField();
  _impl_.update_header_column_uids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.table_uid_;
  if (this != internal_default_instance()) delete _impl_.per_table_precedent_;
}

void HeaderNameMgrArchive_PerTableArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderNameMgrArchive_PerTableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderNameMgrArchive.PerTableArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.header_row_uids_.Clear();
  _impl_.header_column_uids_.Clear();
  _impl_.update_header_row_uids_.Clear();
  _impl_.update_header_column_uids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_uid_ != nullptr);
      _impl_.table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.per_table_precedent_ != nullptr);
      _impl_.per_table_precedent_->Clear();
    }
  }
  _impl_.is_deleted_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderNameMgrArchive_PerTableArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellCoordinateArchive per_table_precedent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_per_table_precedent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_deleted(&has_bits);
          _impl_.is_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID header_row_uids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID header_column_uids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_header_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID update_header_row_uids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update_header_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID update_header_column_uids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update_header_column_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeaderNameMgrArchive_PerTableArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderNameMgrArchive.PerTableArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_uid(this),
        _Internal::table_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.CellCoordinateArchive per_table_precedent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::per_table_precedent(this),
        _Internal::per_table_precedent(this).GetCachedSize(), target, stream);
  }

  // optional bool is_deleted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_deleted(), target);
  }

  // repeated .TSP.UUID header_row_uids = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_header_row_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_header_row_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID header_column_uids = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_header_column_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_header_column_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID update_header_row_uids = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_update_header_row_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_update_header_row_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID update_header_column_uids = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_update_header_column_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_update_header_column_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderNameMgrArchive.PerTableArchive)
  return target;
}

size_t HeaderNameMgrArchive_PerTableArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.HeaderNameMgrArchive.PerTableArchive)
  size_t total_size = 0;

  if (_internal_has_table_uid()) {
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);
  }

  if (_internal_has_per_table_precedent()) {
    // required .TSCE.CellCoordinateArchive per_table_precedent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.per_table_precedent_);
  }

  return total_size;
}
size_t HeaderNameMgrArchive_PerTableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderNameMgrArchive.PerTableArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);

    // required .TSCE.CellCoordinateArchive per_table_precedent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.per_table_precedent_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID header_row_uids = 5;
  total_size += 1UL * this->_internal_header_row_uids_size();
  for (const auto& msg : this->_impl_.header_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID header_column_uids = 6;
  total_size += 1UL * this->_internal_header_column_uids_size();
  for (const auto& msg : this->_impl_.header_column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID update_header_row_uids = 7;
  total_size += 1UL * this->_internal_update_header_row_uids_size();
  for (const auto& msg : this->_impl_.update_header_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID update_header_column_uids = 8;
  total_size += 1UL * this->_internal_update_header_column_uids_size();
  for (const auto& msg : this->_impl_.update_header_column_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_deleted = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderNameMgrArchive_PerTableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderNameMgrArchive_PerTableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderNameMgrArchive_PerTableArchive::GetClassData() const { return &_class_data_; }


void HeaderNameMgrArchive_PerTableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderNameMgrArchive_PerTableArchive*>(&to_msg);
  auto& from = static_cast<const HeaderNameMgrArchive_PerTableArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderNameMgrArchive.PerTableArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.header_row_uids_.MergeFrom(from._impl_.header_row_uids_);
  _this->_impl_.header_column_uids_.MergeFrom(from._impl_.header_column_uids_);
  _this->_impl_.update_header_row_uids_.MergeFrom(from._impl_.update_header_row_uids_);
  _this->_impl_.update_header_column_uids_.MergeFrom(from._impl_.update_header_column_uids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_per_table_precedent()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_per_table_precedent());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_deleted_ = from._impl_.is_deleted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderNameMgrArchive_PerTableArchive::CopyFrom(const HeaderNameMgrArchive_PerTableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderNameMgrArchive.PerTableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderNameMgrArchive_PerTableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.header_row_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.header_column_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.update_header_row_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.update_header_column_uids_))
    return false;
  if (_internal_has_table_uid()) {
    if (!_impl_.table_uid_->IsInitialized()) return false;
  }
  return true;
}

void HeaderNameMgrArchive_PerTableArchive::InternalSwap(HeaderNameMgrArchive_PerTableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.header_row_uids_.InternalSwap(&other->_impl_.header_row_uids_);
  _impl_.header_column_uids_.InternalSwap(&other->_impl_.header_column_uids_);
  _impl_.update_header_row_uids_.InternalSwap(&other->_impl_.update_header_row_uids_);
  _impl_.update_header_column_uids_.InternalSwap(&other->_impl_.update_header_column_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderNameMgrArchive_PerTableArchive, _impl_.is_deleted_)
      + sizeof(HeaderNameMgrArchive_PerTableArchive::_impl_.is_deleted_)
      - PROTOBUF_FIELD_OFFSET(HeaderNameMgrArchive_PerTableArchive, _impl_.table_uid_)>(
          reinterpret_cast<char*>(&_impl_.table_uid_),
          reinterpret_cast<char*>(&other->_impl_.table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderNameMgrArchive_PerTableArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[157]);
}

// ===================================================================

class HeaderNameMgrArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderNameMgrArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& owner_uid(const HeaderNameMgrArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& nrm_owner_uid(const HeaderNameMgrArchive* msg);
  static void set_has_nrm_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
HeaderNameMgrArchive::_Internal::owner_uid(const HeaderNameMgrArchive* msg) {
  return *msg->_impl_.owner_uid_;
}
const ::TSP::UUID&
HeaderNameMgrArchive::_Internal::nrm_owner_uid(const HeaderNameMgrArchive* msg) {
  return *msg->_impl_.nrm_owner_uid_;
}
void HeaderNameMgrArchive::clear_owner_uid() {
  if (_impl_.owner_uid_ != nullptr) _impl_.owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HeaderNameMgrArchive::clear_nrm_owner_uid() {
  if (_impl_.nrm_owner_uid_ != nullptr) _impl_.nrm_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void HeaderNameMgrArchive::clear_name_frag_tiles() {
  _impl_.name_frag_tiles_.Clear();
}
HeaderNameMgrArchive::HeaderNameMgrArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.HeaderNameMgrArchive)
}
HeaderNameMgrArchive::HeaderNameMgrArchive(const HeaderNameMgrArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderNameMgrArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_tables_){from._impl_.per_tables_}
    , decltype(_impl_.name_frag_tiles_){from._impl_.name_frag_tiles_}
    , decltype(_impl_.owner_uid_){nullptr}
    , decltype(_impl_.nrm_owner_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    _this->_impl_.owner_uid_ = new ::TSP::UUID(*from._impl_.owner_uid_);
  }
  if (from._internal_has_nrm_owner_uid()) {
    _this->_impl_.nrm_owner_uid_ = new ::TSP::UUID(*from._impl_.nrm_owner_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.HeaderNameMgrArchive)
}

inline void HeaderNameMgrArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_tables_){arena}
    , decltype(_impl_.name_frag_tiles_){arena}
    , decltype(_impl_.owner_uid_){nullptr}
    , decltype(_impl_.nrm_owner_uid_){nullptr}
  };
}

HeaderNameMgrArchive::~HeaderNameMgrArchive() {
  // @@protoc_insertion_point(destructor:TST.HeaderNameMgrArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderNameMgrArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.per_tables_.~RepeatedPtrField();
  _impl_.name_frag_tiles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.owner_uid_;
  if (this != internal_default_instance()) delete _impl_.nrm_owner_uid_;
}

void HeaderNameMgrArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderNameMgrArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.HeaderNameMgrArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.per_tables_.Clear();
  _impl_.name_frag_tiles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.owner_uid_ != nullptr);
      _impl_.owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.nrm_owner_uid_ != nullptr);
      _impl_.nrm_owner_uid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderNameMgrArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID nrm_owner_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nrm_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.HeaderNameMgrArchive.PerTableArchive per_tables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_per_tables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference name_frag_tiles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name_frag_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeaderNameMgrArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.HeaderNameMgrArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_uid(this),
        _Internal::owner_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID nrm_owner_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nrm_owner_uid(this),
        _Internal::nrm_owner_uid(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.HeaderNameMgrArchive.PerTableArchive per_tables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_per_tables_size()); i < n; i++) {
    const auto& repfield = this->_internal_per_tables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference name_frag_tiles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_name_frag_tiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_name_frag_tiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.HeaderNameMgrArchive)
  return target;
}

size_t HeaderNameMgrArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.HeaderNameMgrArchive)
  size_t total_size = 0;

  // required .TSP.UUID owner_uid = 1;
  if (_internal_has_owner_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HeaderNameMgrArchive.PerTableArchive per_tables = 3;
  total_size += 1UL * this->_internal_per_tables_size();
  for (const auto& msg : this->_impl_.per_tables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference name_frag_tiles = 4;
  total_size += 1UL * this->_internal_name_frag_tiles_size();
  for (const auto& msg : this->_impl_.name_frag_tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUID nrm_owner_uid = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nrm_owner_uid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderNameMgrArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderNameMgrArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderNameMgrArchive::GetClassData() const { return &_class_data_; }


void HeaderNameMgrArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderNameMgrArchive*>(&to_msg);
  auto& from = static_cast<const HeaderNameMgrArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.HeaderNameMgrArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.per_tables_.MergeFrom(from._impl_.per_tables_);
  _this->_impl_.name_frag_tiles_.MergeFrom(from._impl_.name_frag_tiles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_nrm_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_nrm_owner_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderNameMgrArchive::CopyFrom(const HeaderNameMgrArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.HeaderNameMgrArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderNameMgrArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.per_tables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.name_frag_tiles_))
    return false;
  if (_internal_has_owner_uid()) {
    if (!_impl_.owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_nrm_owner_uid()) {
    if (!_impl_.nrm_owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void HeaderNameMgrArchive::InternalSwap(HeaderNameMgrArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.per_tables_.InternalSwap(&other->_impl_.per_tables_);
  _impl_.name_frag_tiles_.InternalSwap(&other->_impl_.name_frag_tiles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderNameMgrArchive, _impl_.nrm_owner_uid_)
      + sizeof(HeaderNameMgrArchive::_impl_.nrm_owner_uid_)
      - PROTOBUF_FIELD_OFFSET(HeaderNameMgrArchive, _impl_.owner_uid_)>(
          reinterpret_cast<char*>(&_impl_.owner_uid_),
          reinterpret_cast<char*>(&other->_impl_.owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderNameMgrArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[158]);
}

// ===================================================================

class WidthHeightCacheFittingEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<WidthHeightCacheFittingEntry>()._impl_._has_bits_);
  static void set_has_fitting_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fitting_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WidthHeightCacheFittingEntry::WidthHeightCacheFittingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.WidthHeightCacheFittingEntry)
}
WidthHeightCacheFittingEntry::WidthHeightCacheFittingEntry(const WidthHeightCacheFittingEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WidthHeightCacheFittingEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fitting_index_){}
    , decltype(_impl_.fitting_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fitting_index_, &from._impl_.fitting_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fitting_size_) -
    reinterpret_cast<char*>(&_impl_.fitting_index_)) + sizeof(_impl_.fitting_size_));
  // @@protoc_insertion_point(copy_constructor:TST.WidthHeightCacheFittingEntry)
}

inline void WidthHeightCacheFittingEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fitting_index_){0u}
    , decltype(_impl_.fitting_size_){0}
  };
}

WidthHeightCacheFittingEntry::~WidthHeightCacheFittingEntry() {
  // @@protoc_insertion_point(destructor:TST.WidthHeightCacheFittingEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WidthHeightCacheFittingEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WidthHeightCacheFittingEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WidthHeightCacheFittingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.WidthHeightCacheFittingEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.fitting_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fitting_size_) -
        reinterpret_cast<char*>(&_impl_.fitting_index_)) + sizeof(_impl_.fitting_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WidthHeightCacheFittingEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fitting_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fitting_index(&has_bits);
          _impl_.fitting_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fitting_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_fitting_size(&has_bits);
          _impl_.fitting_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WidthHeightCacheFittingEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.WidthHeightCacheFittingEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 fitting_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fitting_index(), target);
  }

  // optional float fitting_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_fitting_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.WidthHeightCacheFittingEntry)
  return target;
}

size_t WidthHeightCacheFittingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.WidthHeightCacheFittingEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 fitting_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fitting_index());
    }

    // optional float fitting_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WidthHeightCacheFittingEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WidthHeightCacheFittingEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WidthHeightCacheFittingEntry::GetClassData() const { return &_class_data_; }


void WidthHeightCacheFittingEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WidthHeightCacheFittingEntry*>(&to_msg);
  auto& from = static_cast<const WidthHeightCacheFittingEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.WidthHeightCacheFittingEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fitting_index_ = from._impl_.fitting_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fitting_size_ = from._impl_.fitting_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WidthHeightCacheFittingEntry::CopyFrom(const WidthHeightCacheFittingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.WidthHeightCacheFittingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WidthHeightCacheFittingEntry::IsInitialized() const {
  return true;
}

void WidthHeightCacheFittingEntry::InternalSwap(WidthHeightCacheFittingEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WidthHeightCacheFittingEntry, _impl_.fitting_size_)
      + sizeof(WidthHeightCacheFittingEntry::_impl_.fitting_size_)
      - PROTOBUF_FIELD_OFFSET(WidthHeightCacheFittingEntry, _impl_.fitting_index_)>(
          reinterpret_cast<char*>(&_impl_.fitting_index_),
          reinterpret_cast<char*>(&other->_impl_.fitting_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WidthHeightCacheFittingEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[159]);
}

// ===================================================================

class WidthHeightCache::_Internal {
 public:
  using HasBits = decltype(std::declval<WidthHeightCache>()._impl_._has_bits_);
  static void set_has_columns_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WidthHeightCache::WidthHeightCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.WidthHeightCache)
}
WidthHeightCache::WidthHeightCache(const WidthHeightCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WidthHeightCache* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rows_fitting_entries_){from._impl_.rows_fitting_entries_}
    , decltype(_impl_.columns_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.columns_count_ = from._impl_.columns_count_;
  // @@protoc_insertion_point(copy_constructor:TST.WidthHeightCache)
}

inline void WidthHeightCache::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rows_fitting_entries_){arena}
    , decltype(_impl_.columns_count_){0u}
  };
}

WidthHeightCache::~WidthHeightCache() {
  // @@protoc_insertion_point(destructor:TST.WidthHeightCache)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WidthHeightCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rows_fitting_entries_.~RepeatedPtrField();
}

void WidthHeightCache::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WidthHeightCache::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.WidthHeightCache)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rows_fitting_entries_.Clear();
  _impl_.columns_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WidthHeightCache::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TST.WidthHeightCacheFittingEntry rows_fitting_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows_fitting_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 columns_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_columns_count(&has_bits);
          _impl_.columns_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WidthHeightCache::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.WidthHeightCache)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TST.WidthHeightCacheFittingEntry rows_fitting_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rows_fitting_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_rows_fitting_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 columns_count = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_columns_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.WidthHeightCache)
  return target;
}

size_t WidthHeightCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.WidthHeightCache)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.WidthHeightCacheFittingEntry rows_fitting_entries = 1;
  total_size += 1UL * this->_internal_rows_fitting_entries_size();
  for (const auto& msg : this->_impl_.rows_fitting_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 columns_count = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_columns_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WidthHeightCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WidthHeightCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WidthHeightCache::GetClassData() const { return &_class_data_; }


void WidthHeightCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WidthHeightCache*>(&to_msg);
  auto& from = static_cast<const WidthHeightCache&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.WidthHeightCache)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rows_fitting_entries_.MergeFrom(from._impl_.rows_fitting_entries_);
  if (from._internal_has_columns_count()) {
    _this->_internal_set_columns_count(from._internal_columns_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WidthHeightCache::CopyFrom(const WidthHeightCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.WidthHeightCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WidthHeightCache::IsInitialized() const {
  return true;
}

void WidthHeightCache::InternalSwap(WidthHeightCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rows_fitting_entries_.InternalSwap(&other->_impl_.rows_fitting_entries_);
  swap(_impl_.columns_count_, other->_impl_.columns_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WidthHeightCache::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[160]);
}

// ===================================================================

class LayoutEngineArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LayoutEngineArchive>()._impl_._has_bits_);
  static const ::TST::WidthHeightCache& width_height_cache(const LayoutEngineArchive* msg);
  static void set_has_width_height_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TST::WidthHeightCache&
LayoutEngineArchive::_Internal::width_height_cache(const LayoutEngineArchive* msg) {
  return *msg->_impl_.width_height_cache_;
}
LayoutEngineArchive::LayoutEngineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.LayoutEngineArchive)
}
LayoutEngineArchive::LayoutEngineArchive(const LayoutEngineArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LayoutEngineArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.width_height_cache_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_width_height_cache()) {
    _this->_impl_.width_height_cache_ = new ::TST::WidthHeightCache(*from._impl_.width_height_cache_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.LayoutEngineArchive)
}

inline void LayoutEngineArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.width_height_cache_){nullptr}
  };
}

LayoutEngineArchive::~LayoutEngineArchive() {
  // @@protoc_insertion_point(destructor:TST.LayoutEngineArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LayoutEngineArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.width_height_cache_;
}

void LayoutEngineArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LayoutEngineArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.LayoutEngineArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.width_height_cache_ != nullptr);
    _impl_.width_height_cache_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LayoutEngineArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.WidthHeightCache width_height_cache = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_width_height_cache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LayoutEngineArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.LayoutEngineArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.WidthHeightCache width_height_cache = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::width_height_cache(this),
        _Internal::width_height_cache(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.LayoutEngineArchive)
  return target;
}

size_t LayoutEngineArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.LayoutEngineArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.WidthHeightCache width_height_cache = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.width_height_cache_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LayoutEngineArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LayoutEngineArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LayoutEngineArchive::GetClassData() const { return &_class_data_; }


void LayoutEngineArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LayoutEngineArchive*>(&to_msg);
  auto& from = static_cast<const LayoutEngineArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.LayoutEngineArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_width_height_cache()) {
    _this->_internal_mutable_width_height_cache()->::TST::WidthHeightCache::MergeFrom(
        from._internal_width_height_cache());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LayoutEngineArchive::CopyFrom(const LayoutEngineArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.LayoutEngineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutEngineArchive::IsInitialized() const {
  return true;
}

void LayoutEngineArchive::InternalSwap(LayoutEngineArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.width_height_cache_, other->_impl_.width_height_cache_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LayoutEngineArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[161]);
}

// ===================================================================

class CollaboratorTableCursorSubselectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaboratorTableCursorSubselectionArchive>()._impl_._has_bits_);
  static const ::TST::CellUIDListArchive& cell_uid_list(const CollaboratorTableCursorSubselectionArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TST::CellUIDListArchive&
CollaboratorTableCursorSubselectionArchive::_Internal::cell_uid_list(const CollaboratorTableCursorSubselectionArchive* msg) {
  return *msg->_impl_.cell_uid_list_;
}
void CollaboratorTableCursorSubselectionArchive::clear_row_column_uid_list() {
  _impl_.row_column_uid_list_.Clear();
}
CollaboratorTableCursorSubselectionArchive::CollaboratorTableCursorSubselectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CollaboratorTableCursorSubselectionArchive)
}
CollaboratorTableCursorSubselectionArchive::CollaboratorTableCursorSubselectionArchive(const CollaboratorTableCursorSubselectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaboratorTableCursorSubselectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_column_uid_list_){from._impl_.row_column_uid_list_}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.selection_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_uid_list()) {
    _this->_impl_.cell_uid_list_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uid_list_);
  }
  _this->_impl_.selection_type_ = from._impl_.selection_type_;
  // @@protoc_insertion_point(copy_constructor:TST.CollaboratorTableCursorSubselectionArchive)
}

inline void CollaboratorTableCursorSubselectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_column_uid_list_){arena}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.selection_type_){0}
  };
}

CollaboratorTableCursorSubselectionArchive::~CollaboratorTableCursorSubselectionArchive() {
  // @@protoc_insertion_point(destructor:TST.CollaboratorTableCursorSubselectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaboratorTableCursorSubselectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_column_uid_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cell_uid_list_;
}

void CollaboratorTableCursorSubselectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaboratorTableCursorSubselectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CollaboratorTableCursorSubselectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_column_uid_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cell_uid_list_ != nullptr);
    _impl_.cell_uid_list_->Clear();
  }
  _impl_.selection_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaboratorTableCursorSubselectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TST.CellUIDListArchive cell_uid_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.SelectionTypeArchive selection_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::SelectionTypeArchive_IsValid(val))) {
            _internal_set_selection_type(static_cast<::TST::SelectionTypeArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_column_uid_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_column_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaboratorTableCursorSubselectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CollaboratorTableCursorSubselectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.CellUIDListArchive cell_uid_list = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell_uid_list(this),
        _Internal::cell_uid_list(this).GetCachedSize(), target, stream);
  }

  // optional .TST.SelectionTypeArchive selection_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_selection_type(), target);
  }

  // repeated .TSP.UUID row_column_uid_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_column_uid_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_column_uid_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CollaboratorTableCursorSubselectionArchive)
  return target;
}

size_t CollaboratorTableCursorSubselectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CollaboratorTableCursorSubselectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_column_uid_list = 4;
  total_size += 1UL * this->_internal_row_column_uid_list_size();
  for (const auto& msg : this->_impl_.row_column_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TST.CellUIDListArchive cell_uid_list = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uid_list_);
    }

    // optional .TST.SelectionTypeArchive selection_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaboratorTableCursorSubselectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaboratorTableCursorSubselectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaboratorTableCursorSubselectionArchive::GetClassData() const { return &_class_data_; }


void CollaboratorTableCursorSubselectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaboratorTableCursorSubselectionArchive*>(&to_msg);
  auto& from = static_cast<const CollaboratorTableCursorSubselectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CollaboratorTableCursorSubselectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_column_uid_list_.MergeFrom(from._impl_.row_column_uid_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.selection_type_ = from._impl_.selection_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaboratorTableCursorSubselectionArchive::CopyFrom(const CollaboratorTableCursorSubselectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CollaboratorTableCursorSubselectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaboratorTableCursorSubselectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_column_uid_list_))
    return false;
  if (_internal_has_cell_uid_list()) {
    if (!_impl_.cell_uid_list_->IsInitialized()) return false;
  }
  return true;
}

void CollaboratorTableCursorSubselectionArchive::InternalSwap(CollaboratorTableCursorSubselectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_column_uid_list_.InternalSwap(&other->_impl_.row_column_uid_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaboratorTableCursorSubselectionArchive, _impl_.selection_type_)
      + sizeof(CollaboratorTableCursorSubselectionArchive::_impl_.selection_type_)
      - PROTOBUF_FIELD_OFFSET(CollaboratorTableCursorSubselectionArchive, _impl_.cell_uid_list_)>(
          reinterpret_cast<char*>(&_impl_.cell_uid_list_),
          reinterpret_cast<char*>(&other->_impl_.cell_uid_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaboratorTableCursorSubselectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTArchives_2eproto_getter, &descriptor_table_TSTArchives_2eproto_once,
      file_level_metadata_TSTArchives_2eproto[162]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int CollaboratorTableCursorSubselectionArchive::kTableCursorSubselectionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::CollaboratorCursorArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CollaboratorTableCursorSubselectionArchive >, 11, false>
  CollaboratorTableCursorSubselectionArchive::table_cursor_subselection(kTableCursorSubselectionFieldNumber, ::TST::CollaboratorTableCursorSubselectionArchive::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::ImportWarningSetArchive >, 11, false>
  import_warning_set(kImportWarningSetFieldNumber, ::TST::ImportWarningSetArchive::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CellFormatAndValueArchive >, 11, false>
  format_and_value(kFormatAndValueFieldNumber, ::TST::CellFormatAndValueArchive::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CellBorderArchive >, 11, false>
  cell_border(kCellBorderFieldNumber, ::TST::CellBorderArchive::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CommentStorageWrapperArchive >, 11, false>
  comment_storage(kCommentStorageFieldNumber, ::TST::CommentStorageWrapperArchive::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::CellSpecArchive >, 11, false>
  cell_spec(kCellSpecFieldNumber, ::TST::CellSpecArchive::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace TST
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TST::CellID*
Arena::CreateMaybeMessage< ::TST::CellID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellID >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellUIDLookupListArchive*
Arena::CreateMaybeMessage< ::TST::CellUIDLookupListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellUIDLookupListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellUIDListArchive*
Arena::CreateMaybeMessage< ::TST::CellUIDListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellUIDListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSize*
Arena::CreateMaybeMessage< ::TST::TableSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSize >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ExpandedTableSize*
Arena::CreateMaybeMessage< ::TST::ExpandedTableSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ExpandedTableSize >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellRange*
Arena::CreateMaybeMessage< ::TST::CellRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellRange >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ExpandedCellRange*
Arena::CreateMaybeMessage< ::TST::ExpandedCellRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ExpandedCellRange >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSelection*
Arena::CreateMaybeMessage< ::TST::TableSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TileRowInfo*
Arena::CreateMaybeMessage< ::TST::TileRowInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TileRowInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::Tile*
Arena::CreateMaybeMessage< ::TST::Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TileStorage_Tile*
Arena::CreateMaybeMessage< ::TST::TileStorage_Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TileStorage_Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TileStorage*
Arena::CreateMaybeMessage< ::TST::TileStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TileStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PopUpMenuModel_CellValue*
Arena::CreateMaybeMessage< ::TST::PopUpMenuModel_CellValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PopUpMenuModel_CellValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PopUpMenuModel*
Arena::CreateMaybeMessage< ::TST::PopUpMenuModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PopUpMenuModel >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ImportWarningSetArchive_FormulaImportWarning*
Arena::CreateMaybeMessage< ::TST::ImportWarningSetArchive_FormulaImportWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ImportWarningSetArchive_FormulaImportWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ImportWarningSetArchive*
Arena::CreateMaybeMessage< ::TST::ImportWarningSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ImportWarningSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellRefImportWarningSetPairArchive*
Arena::CreateMaybeMessage< ::TST::CellRefImportWarningSetPairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellRefImportWarningSetPairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ImportWarningSetByCellRefArchive*
Arena::CreateMaybeMessage< ::TST::ImportWarningSetByCellRefArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ImportWarningSetByCellRefArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableDataList_ListEntry*
Arena::CreateMaybeMessage< ::TST::TableDataList_ListEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableDataList_ListEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableDataList*
Arena::CreateMaybeMessage< ::TST::TableDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableDataList >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableDataListSegment*
Arena::CreateMaybeMessage< ::TST::TableDataListSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableDataListSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableRBTree_Node*
Arena::CreateMaybeMessage< ::TST::TableRBTree_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableRBTree_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableRBTree*
Arena::CreateMaybeMessage< ::TST::TableRBTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableRBTree >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderStorageBucket_Header*
Arena::CreateMaybeMessage< ::TST::HeaderStorageBucket_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderStorageBucket_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderStorageBucket*
Arena::CreateMaybeMessage< ::TST::HeaderStorageBucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderStorageBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderStorage*
Arena::CreateMaybeMessage< ::TST::HeaderStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DataStore*
Arena::CreateMaybeMessage< ::TST::DataStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DataStore >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableInfoArchive*
Arena::CreateMaybeMessage< ::TST::TableInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryInfoArchive*
Arena::CreateMaybeMessage< ::TST::CategoryInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::WPTableInfoArchive*
Arena::CreateMaybeMessage< ::TST::WPTableInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::WPTableInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableStyleNetworkArchive*
Arena::CreateMaybeMessage< ::TST::TableStyleNetworkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableStyleNetworkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive*
Arena::CreateMaybeMessage< ::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableGroupSortOrderUIDArchive*
Arena::CreateMaybeMessage< ::TST::TableGroupSortOrderUIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableGroupSortOrderUIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSortOrderArchive_SortRuleArchive*
Arena::CreateMaybeMessage< ::TST::TableSortOrderArchive_SortRuleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSortOrderArchive_SortRuleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSortOrderArchive*
Arena::CreateMaybeMessage< ::TST::TableSortOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSortOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSortOrderUIDArchive_SortRuleArchive*
Arena::CreateMaybeMessage< ::TST::TableSortOrderUIDArchive_SortRuleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSortOrderUIDArchive_SortRuleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSortOrderUIDArchive*
Arena::CreateMaybeMessage< ::TST::TableSortOrderUIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSortOrderUIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SortRuleReferenceTrackerArchive*
Arena::CreateMaybeMessage< ::TST::SortRuleReferenceTrackerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SortRuleReferenceTrackerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellRegion*
Arena::CreateMaybeMessage< ::TST::CellRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellUIDRegionArchive*
Arena::CreateMaybeMessage< ::TST::CellUIDRegionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellUIDRegionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StructuredTextImportRecord*
Arena::CreateMaybeMessage< ::TST::StructuredTextImportRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StructuredTextImportRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableModelArchive*
Arena::CreateMaybeMessage< ::TST::TableModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SummaryModelArchive*
Arena::CreateMaybeMessage< ::TST::SummaryModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SummaryModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SummaryModelGroupByChangeStateArchive*
Arena::CreateMaybeMessage< ::TST::SummaryModelGroupByChangeStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SummaryModelGroupByChangeStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnRowUIDMapArchive*
Arena::CreateMaybeMessage< ::TST::ColumnRowUIDMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnRowUIDMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeLayerArchive_StrokeRunArchive*
Arena::CreateMaybeMessage< ::TST::StrokeLayerArchive_StrokeRunArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeLayerArchive_StrokeRunArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeLayerArchive*
Arena::CreateMaybeMessage< ::TST::StrokeLayerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeLayerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeSidecarArchive*
Arena::CreateMaybeMessage< ::TST::StrokeSidecarArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeSidecarArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DurationWrapperArchive*
Arena::CreateMaybeMessage< ::TST::DurationWrapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DurationWrapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::Cell*
Arena::CreateMaybeMessage< ::TST::Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::MergeRegionMapArchive*
Arena::CreateMaybeMessage< ::TST::MergeRegionMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::MergeRegionMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellMapArchive*
Arena::CreateMaybeMessage< ::TST::CellMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellListArchive_OptionalCell*
Arena::CreateMaybeMessage< ::TST::CellListArchive_OptionalCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellListArchive_OptionalCell >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellListArchive*
Arena::CreateMaybeMessage< ::TST::CellListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConcurrentCellMapArchive*
Arena::CreateMaybeMessage< ::TST::ConcurrentCellMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConcurrentCellMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConcurrentCellListArchive_OptionalCell*
Arena::CreateMaybeMessage< ::TST::ConcurrentCellListArchive_OptionalCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConcurrentCellListArchive_OptionalCell >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConcurrentCellListArchive*
Arena::CreateMaybeMessage< ::TST::ConcurrentCellListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConcurrentCellListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellFormatAndValueArchive*
Arena::CreateMaybeMessage< ::TST::CellFormatAndValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellFormatAndValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellSpecArchive*
Arena::CreateMaybeMessage< ::TST::CellSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommentStorageWrapperArchive*
Arena::CreateMaybeMessage< ::TST::CommentStorageWrapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommentStorageWrapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellDiffArchive*
Arena::CreateMaybeMessage< ::TST::CellDiffArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellDiffArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellDiffArray*
Arena::CreateMaybeMessage< ::TST::CellDiffArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellDiffArray >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellDiffArraySegment*
Arena::CreateMaybeMessage< ::TST::CellDiffArraySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellDiffArraySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellDiffMapArchive*
Arena::CreateMaybeMessage< ::TST::CellDiffMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellDiffMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HierarchicalCellDiffMapArchive_BoxedRow*
Arena::CreateMaybeMessage< ::TST::HierarchicalCellDiffMapArchive_BoxedRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HierarchicalCellDiffMapArchive_BoxedRow >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HierarchicalCellDiffMapArchive*
Arena::CreateMaybeMessage< ::TST::HierarchicalCellDiffMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HierarchicalCellDiffMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive*
Arena::CreateMaybeMessage< ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DoubleStyleMapArchive_DoubleStyleMapEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DoubleStyleMapArchive*
Arena::CreateMaybeMessage< ::TST::DoubleStyleMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DoubleStyleMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StyleTableMapArchive_StyleTableMapEntryArchive*
Arena::CreateMaybeMessage< ::TST::StyleTableMapArchive_StyleTableMapEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StyleTableMapArchive_StyleTableMapEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StyleTableMapArchive*
Arena::CreateMaybeMessage< ::TST::StyleTableMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StyleTableMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SelectionArchive*
Arena::CreateMaybeMessage< ::TST::SelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DeathhawkRdar39989167CellSelectionArchive*
Arena::CreateMaybeMessage< ::TST::DeathhawkRdar39989167CellSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DeathhawkRdar39989167CellSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeSelectionArchive*
Arena::CreateMaybeMessage< ::TST::StrokeSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ControlCellSelectionArchive*
Arena::CreateMaybeMessage< ::TST::ControlCellSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ControlCellSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StockCellSelectionArchive*
Arena::CreateMaybeMessage< ::TST::StockCellSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StockCellSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableNameSelectionArchive*
Arena::CreateMaybeMessage< ::TST::TableNameSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableNameSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::AutofillSelectionArchive*
Arena::CreateMaybeMessage< ::TST::AutofillSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::AutofillSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FilterRulePrePivotArchive*
Arena::CreateMaybeMessage< ::TST::FilterRulePrePivotArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FilterRulePrePivotArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FilterRuleArchive*
Arena::CreateMaybeMessage< ::TST::FilterRuleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FilterRuleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableStyleArchive*
Arena::CreateMaybeMessage< ::TST::TableStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellStyleArchive*
Arena::CreateMaybeMessage< ::TST::CellStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaPredArgDataArchive*
Arena::CreateMaybeMessage< ::TST::FormulaPredArgDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaPredArgDataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaPredArgArchive*
Arena::CreateMaybeMessage< ::TST::FormulaPredArgArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaPredArgArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaPredicatePrePivotArchive*
Arena::CreateMaybeMessage< ::TST::FormulaPredicatePrePivotArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaPredicatePrePivotArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaPredicateArchive*
Arena::CreateMaybeMessage< ::TST::FormulaPredicateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaPredicateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot*
Arena::CreateMaybeMessage< ::TST::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConditionalStyleSetArchive_ConditionalStyleRulePrePivot >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConditionalStyleSetArchive_ConditionalStyleRule*
Arena::CreateMaybeMessage< ::TST::ConditionalStyleSetArchive_ConditionalStyleRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConditionalStyleSetArchive_ConditionalStyleRule >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConditionalStyleSetArchive_ConditionalStyleRules*
Arena::CreateMaybeMessage< ::TST::ConditionalStyleSetArchive_ConditionalStyleRules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConditionalStyleSetArchive_ConditionalStyleRules >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ConditionalStyleSetArchive*
Arena::CreateMaybeMessage< ::TST::ConditionalStyleSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ConditionalStyleSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FilterSetArchive*
Arena::CreateMaybeMessage< ::TST::FilterSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FilterSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::UniqueIndexArchive_UniqueIndexEntryArchive*
Arena::CreateMaybeMessage< ::TST::UniqueIndexArchive_UniqueIndexEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::UniqueIndexArchive_UniqueIndexEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::UniqueIndexArchive*
Arena::CreateMaybeMessage< ::TST::UniqueIndexArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::UniqueIndexArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStateExtentArchive_RowOrColumnState*
Arena::CreateMaybeMessage< ::TST::HiddenStateExtentArchive_RowOrColumnState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStateExtentArchive_RowOrColumnState >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStateExtentArchive*
Arena::CreateMaybeMessage< ::TST::HiddenStateExtentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStateExtentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStatesArchive*
Arena::CreateMaybeMessage< ::TST::HiddenStatesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStatesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStatesOwnerArchive*
Arena::CreateMaybeMessage< ::TST::HiddenStatesOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStatesOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ExpandCollapseStateArchive*
Arena::CreateMaybeMessage< ::TST::ExpandCollapseStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ExpandCollapseStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TokenAttachmentArchive*
Arena::CreateMaybeMessage< ::TST::TokenAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TokenAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaArchive*
Arena::CreateMaybeMessage< ::TST::FormulaArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ExpressionNodeArchive*
Arena::CreateMaybeMessage< ::TST::ExpressionNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ExpressionNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::BooleanNodeArchive*
Arena::CreateMaybeMessage< ::TST::BooleanNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::BooleanNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::NumberNodeArchive*
Arena::CreateMaybeMessage< ::TST::NumberNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::NumberNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StringNodeArchive*
Arena::CreateMaybeMessage< ::TST::StringNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StringNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::IdentifierNodeArchive*
Arena::CreateMaybeMessage< ::TST::IdentifierNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::IdentifierNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ArrayNodeArchive*
Arena::CreateMaybeMessage< ::TST::ArrayNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ArrayNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ListNodeArchive*
Arena::CreateMaybeMessage< ::TST::ListNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ListNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::OperatorNodeArchive*
Arena::CreateMaybeMessage< ::TST::OperatorNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::OperatorNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PostfixOperatorNodeArchive*
Arena::CreateMaybeMessage< ::TST::PostfixOperatorNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PostfixOperatorNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PrefixOperatorNodeArchive*
Arena::CreateMaybeMessage< ::TST::PrefixOperatorNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PrefixOperatorNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FunctionNodeArchive*
Arena::CreateMaybeMessage< ::TST::FunctionNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FunctionNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FunctionEndNodeArchive*
Arena::CreateMaybeMessage< ::TST::FunctionEndNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FunctionEndNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DateNodeArchive*
Arena::CreateMaybeMessage< ::TST::DateNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DateNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ReferenceNodeArchive*
Arena::CreateMaybeMessage< ::TST::ReferenceNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ReferenceNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DurationNodeArchive*
Arena::CreateMaybeMessage< ::TST::DurationNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DurationNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ArgumentPlaceholderNodeArchive*
Arena::CreateMaybeMessage< ::TST::ArgumentPlaceholderNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ArgumentPlaceholderNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::EmptyExpressionNodeArchive*
Arena::CreateMaybeMessage< ::TST::EmptyExpressionNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::EmptyExpressionNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::LetNodeArchive*
Arena::CreateMaybeMessage< ::TST::LetNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::LetNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::InNodeArchive*
Arena::CreateMaybeMessage< ::TST::InNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::InNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::VariableNodeArchive*
Arena::CreateMaybeMessage< ::TST::VariableNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::VariableNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::LayoutHintArchive*
Arena::CreateMaybeMessage< ::TST::LayoutHintArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::LayoutHintArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CompletionTokenAttachmentArchive*
Arena::CreateMaybeMessage< ::TST::CompletionTokenAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CompletionTokenAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HiddenStateFormulaOwnerArchive*
Arena::CreateMaybeMessage< ::TST::HiddenStateFormulaOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HiddenStateFormulaOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaStoreArchive_FormulaStorePair*
Arena::CreateMaybeMessage< ::TST::FormulaStoreArchive_FormulaStorePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaStoreArchive_FormulaStorePair >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaStoreArchive*
Arena::CreateMaybeMessage< ::TST::FormulaStoreArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaStoreArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::MergeOperationArchive*
Arena::CreateMaybeMessage< ::TST::MergeOperationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::MergeOperationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::MergeOwnerArchive*
Arena::CreateMaybeMessage< ::TST::MergeOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::MergeOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PencilAnnotationArchive*
Arena::CreateMaybeMessage< ::TST::PencilAnnotationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PencilAnnotationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PencilAnnotationOwnerArchive*
Arena::CreateMaybeMessage< ::TST::PencilAnnotationOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PencilAnnotationOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::AccumulatorArchive*
Arena::CreateMaybeMessage< ::TST::AccumulatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::AccumulatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupColumnArchive*
Arena::CreateMaybeMessage< ::TST::GroupColumnArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupColumnArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupColumnListArchive*
Arena::CreateMaybeMessage< ::TST::GroupColumnListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupColumnListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnAggregateArchive*
Arena::CreateMaybeMessage< ::TST::ColumnAggregateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnAggregateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnAggregateListArchive*
Arena::CreateMaybeMessage< ::TST::ColumnAggregateListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnAggregateListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupByArchive_AggNodeArchive*
Arena::CreateMaybeMessage< ::TST::GroupByArchive_AggNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupByArchive_AggNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupByArchive_AggregatorArchive*
Arena::CreateMaybeMessage< ::TST::GroupByArchive_AggregatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupByArchive_AggregatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive*
Arena::CreateMaybeMessage< ::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive*
Arena::CreateMaybeMessage< ::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupByArchive_GroupNodeArchive_FormatManagerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupByArchive_GroupNodeArchive*
Arena::CreateMaybeMessage< ::TST::GroupByArchive_GroupNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupByArchive_GroupNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::GroupByArchive*
Arena::CreateMaybeMessage< ::TST::GroupByArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::GroupByArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerArchive*
Arena::CreateMaybeMessage< ::TST::CategoryOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOwnerRefArchive*
Arena::CreateMaybeMessage< ::TST::CategoryOwnerRefArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOwnerRefArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PivotGroupingColumnOptionsMapArchive*
Arena::CreateMaybeMessage< ::TST::PivotGroupingColumnOptionsMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PivotGroupingColumnOptionsMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PivotOwnerArchive*
Arena::CreateMaybeMessage< ::TST::PivotOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PivotOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::RichTextPayloadArchive*
Arena::CreateMaybeMessage< ::TST::RichTextPayloadArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::RichTextPayloadArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaEqualsTokenAttachmentArchive*
Arena::CreateMaybeMessage< ::TST::FormulaEqualsTokenAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaEqualsTokenAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellFillStandIn*
Arena::CreateMaybeMessage< ::TST::CellFillStandIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellFillStandIn >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaSelectionArchive*
Arena::CreateMaybeMessage< ::TST::FormulaSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellBorderArchive*
Arena::CreateMaybeMessage< ::TST::CellBorderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellBorderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::DefaultCellStylesContainerArchive*
Arena::CreateMaybeMessage< ::TST::DefaultCellStylesContainerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::DefaultCellStylesContainerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::MultiTableRemapperArchive*
Arena::CreateMaybeMessage< ::TST::MultiTableRemapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::MultiTableRemapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ChangePropagationMapWrapper*
Arena::CreateMaybeMessage< ::TST::ChangePropagationMapWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ChangePropagationMapWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SummaryCellVendorArchive_SummaryCellEntry*
Arena::CreateMaybeMessage< ::TST::SummaryCellVendorArchive_SummaryCellEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SummaryCellVendorArchive_SummaryCellEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::SummaryCellVendorArchive*
Arena::CreateMaybeMessage< ::TST::SummaryCellVendorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::SummaryCellVendorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CategoryOrderArchive*
Arena::CreateMaybeMessage< ::TST::CategoryOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CategoryOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::PivotOrderArchive*
Arena::CreateMaybeMessage< ::TST::PivotOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::PivotOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderNameMgrTileArchive_NameFragmentArchive*
Arena::CreateMaybeMessage< ::TST::HeaderNameMgrTileArchive_NameFragmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderNameMgrTileArchive_NameFragmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderNameMgrTileArchive*
Arena::CreateMaybeMessage< ::TST::HeaderNameMgrTileArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderNameMgrTileArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderNameMgrArchive_PerTableArchive*
Arena::CreateMaybeMessage< ::TST::HeaderNameMgrArchive_PerTableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderNameMgrArchive_PerTableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::HeaderNameMgrArchive*
Arena::CreateMaybeMessage< ::TST::HeaderNameMgrArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::HeaderNameMgrArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::WidthHeightCacheFittingEntry*
Arena::CreateMaybeMessage< ::TST::WidthHeightCacheFittingEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::WidthHeightCacheFittingEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::WidthHeightCache*
Arena::CreateMaybeMessage< ::TST::WidthHeightCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::WidthHeightCache >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::LayoutEngineArchive*
Arena::CreateMaybeMessage< ::TST::LayoutEngineArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::LayoutEngineArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CollaboratorTableCursorSubselectionArchive*
Arena::CreateMaybeMessage< ::TST::CollaboratorTableCursorSubselectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CollaboratorTableCursorSubselectionArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
