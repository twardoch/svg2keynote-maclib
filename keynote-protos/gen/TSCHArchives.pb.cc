// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.proto

#include "TSCHArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSCH {
PROTOBUF_CONSTEXPR ChartDrawableArchive::ChartDrawableArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ChartDrawableArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartDrawableArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartDrawableArchiveDefaultTypeInternal() {}
  union {
    ChartDrawableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartDrawableArchiveDefaultTypeInternal _ChartDrawableArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartArchive::ChartArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_axis_styles_)*/{}
  , /*decltype(_impl_.value_axis_nonstyles_)*/{}
  , /*decltype(_impl_.category_axis_styles_)*/{}
  , /*decltype(_impl_.category_axis_nonstyles_)*/{}
  , /*decltype(_impl_.series_theme_styles_)*/{}
  , /*decltype(_impl_.paragraph_styles_)*/{}
  , /*decltype(_impl_.legend_frame_)*/nullptr
  , /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_.grid_)*/nullptr
  , /*decltype(_impl_.mediator_)*/nullptr
  , /*decltype(_impl_.chart_style_)*/nullptr
  , /*decltype(_impl_.chart_non_style_)*/nullptr
  , /*decltype(_impl_.legend_style_)*/nullptr
  , /*decltype(_impl_.legend_non_style_)*/nullptr
  , /*decltype(_impl_.series_private_styles_)*/nullptr
  , /*decltype(_impl_.series_non_styles_)*/nullptr
  , /*decltype(_impl_.owned_preset_)*/nullptr
  , /*decltype(_impl_.chart_type_)*/0
  , /*decltype(_impl_.scatter_format_)*/0
  , /*decltype(_impl_.series_direction_)*/0
  , /*decltype(_impl_.contains_default_data_)*/false
  , /*decltype(_impl_.needs_calc_engine_deferred_import_action_)*/false
  , /*decltype(_impl_.is_dirty_)*/false
  , /*decltype(_impl_.multidataset_index_)*/0u} {}
struct ChartArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartArchiveDefaultTypeInternal() {}
  union {
    ChartArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartArchiveDefaultTypeInternal _ChartArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartMultiDataIndexUpgrade::ChartMultiDataIndexUpgrade(
    ::_pbi::ConstantInitialized) {}
struct ChartMultiDataIndexUpgradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartMultiDataIndexUpgradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartMultiDataIndexUpgradeDefaultTypeInternal() {}
  union {
    ChartMultiDataIndexUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartMultiDataIndexUpgradeDefaultTypeInternal _ChartMultiDataIndexUpgrade_default_instance_;
PROTOBUF_CONSTEXPR ChartGarlicMinMaxUpgrade::ChartGarlicMinMaxUpgrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.horizontal_min_)*/0
  , /*decltype(_impl_.horizontal_max_)*/0
  , /*decltype(_impl_.value_min_)*/0
  , /*decltype(_impl_.value_max_)*/0} {}
struct ChartGarlicMinMaxUpgradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGarlicMinMaxUpgradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGarlicMinMaxUpgradeDefaultTypeInternal() {}
  union {
    ChartGarlicMinMaxUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGarlicMinMaxUpgradeDefaultTypeInternal _ChartGarlicMinMaxUpgrade_default_instance_;
PROTOBUF_CONSTEXPR ChartGarlicLabelFormatUpgrade::ChartGarlicLabelFormatUpgrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_suffix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.horizontal_prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.horizontal_suffix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_use_separator_)*/false
  , /*decltype(_impl_.horizontal_use_separator_)*/false} {}
struct ChartGarlicLabelFormatUpgradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGarlicLabelFormatUpgradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGarlicLabelFormatUpgradeDefaultTypeInternal() {}
  union {
    ChartGarlicLabelFormatUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGarlicLabelFormatUpgradeDefaultTypeInternal _ChartGarlicLabelFormatUpgrade_default_instance_;
PROTOBUF_CONSTEXPR ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(
    ::_pbi::ConstantInitialized) {}
struct ChartPasteboardAdditionsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartPasteboardAdditionsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartPasteboardAdditionsArchiveDefaultTypeInternal() {}
  union {
    ChartPasteboardAdditionsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartPasteboardAdditionsArchiveDefaultTypeInternal _ChartPasteboardAdditionsArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartPreserveAppearanceForPresetArchive::ChartPreserveAppearanceForPresetArchive(
    ::_pbi::ConstantInitialized) {}
struct ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal() {}
  union {
    ChartPreserveAppearanceForPresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal _ChartPreserveAppearanceForPresetArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSupportsProportionalBendedCalloutLinesArchive::ChartSupportsProportionalBendedCalloutLinesArchive(
    ::_pbi::ConstantInitialized) {}
struct ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal() {}
  union {
    ChartSupportsProportionalBendedCalloutLinesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal _ChartSupportsProportionalBendedCalloutLinesArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSupportsRoundedCornersArchive::ChartSupportsRoundedCornersArchive(
    ::_pbi::ConstantInitialized) {}
struct ChartSupportsRoundedCornersArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSupportsRoundedCornersArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSupportsRoundedCornersArchiveDefaultTypeInternal() {}
  union {
    ChartSupportsRoundedCornersArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSupportsRoundedCornersArchiveDefaultTypeInternal _ChartSupportsRoundedCornersArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSupportsSeriesPropertySpacingArchive::ChartSupportsSeriesPropertySpacingArchive(
    ::_pbi::ConstantInitialized) {}
struct ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal() {}
  union {
    ChartSupportsSeriesPropertySpacingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal _ChartSupportsSeriesPropertySpacingArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartGridArchive_ChartGridRowColumnIdMap_Entry::ChartGridArchive_ChartGridRowColumnIdMap_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uniqueid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0u} {}
struct ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal() {}
  union {
    ChartGridArchive_ChartGridRowColumnIdMap_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal _ChartGridArchive_ChartGridRowColumnIdMap_Entry_default_instance_;
PROTOBUF_CONSTEXPR ChartGridArchive_ChartGridRowColumnIdMap::ChartGridArchive_ChartGridRowColumnIdMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.row_id_map_)*/{}
  , /*decltype(_impl_.column_id_map_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal() {}
  union {
    ChartGridArchive_ChartGridRowColumnIdMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal _ChartGridArchive_ChartGridRowColumnIdMap_default_instance_;
PROTOBUF_CONSTEXPR ChartGridArchive::ChartGridArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_name_)*/{}
  , /*decltype(_impl_.column_name_)*/{}
  , /*decltype(_impl_.grid_row_)*/{}
  , /*decltype(_impl_.idmap_)*/nullptr} {}
struct ChartGridArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGridArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGridArchiveDefaultTypeInternal() {}
  union {
    ChartGridArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGridArchiveDefaultTypeInternal _ChartGridArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartMediatorArchive::ChartMediatorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.local_series_indexes_)*/{}
  , /*decltype(_impl_.remote_series_indexes_)*/{}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct ChartMediatorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartMediatorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartMediatorArchiveDefaultTypeInternal() {}
  union {
    ChartMediatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartMediatorArchiveDefaultTypeInternal _ChartMediatorArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartFillSetArchive::ChartFillSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.series_styles_)*/{}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lookup_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.number_of_theme_series_styles_)*/0u} {}
struct ChartFillSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartFillSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartFillSetArchiveDefaultTypeInternal() {}
  union {
    ChartFillSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartFillSetArchiveDefaultTypeInternal _ChartFillSetArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartStylePreset::ChartStylePreset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_axis_styles_)*/{}
  , /*decltype(_impl_.category_axis_styles_)*/{}
  , /*decltype(_impl_.series_styles_)*/{}
  , /*decltype(_impl_.paragraph_styles_)*/{}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chart_style_)*/nullptr
  , /*decltype(_impl_.legend_style_)*/nullptr} {}
struct ChartStylePresetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartStylePresetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartStylePresetDefaultTypeInternal() {}
  union {
    ChartStylePreset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartStylePresetDefaultTypeInternal _ChartStylePreset_default_instance_;
PROTOBUF_CONSTEXPR ChartPresetsArchive::ChartPresetsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chart_presets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChartPresetsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartPresetsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartPresetsArchiveDefaultTypeInternal() {}
  union {
    ChartPresetsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartPresetsArchiveDefaultTypeInternal _ChartPresetsArchive_default_instance_;
PROTOBUF_CONSTEXPR PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chart_style_)*/nullptr
  , /*decltype(_impl_.chart_nonstyle_)*/nullptr
  , /*decltype(_impl_.legend_style_)*/nullptr
  , /*decltype(_impl_.legend_nonstyle_)*/nullptr
  , /*decltype(_impl_.value_axis_styles_)*/nullptr
  , /*decltype(_impl_.value_axis_nonstyles_)*/nullptr
  , /*decltype(_impl_.category_axis_styles_)*/nullptr
  , /*decltype(_impl_.category_axis_nonstyles_)*/nullptr
  , /*decltype(_impl_.series_theme_styles_)*/nullptr
  , /*decltype(_impl_.series_private_styles_)*/nullptr
  , /*decltype(_impl_.series_nonstyles_)*/nullptr
  , /*decltype(_impl_.paragraph_styles_)*/nullptr} {}
struct PropertyValueStorageContainerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyValueStorageContainerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyValueStorageContainerArchiveDefaultTypeInternal() {}
  union {
    PropertyValueStorageContainerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyValueStorageContainerArchiveDefaultTypeInternal _PropertyValueStorageContainerArchive_default_instance_;
PROTOBUF_CONSTEXPR StylePasteboardDataArchive::StylePasteboardDataArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.style_network_)*/nullptr
  , /*decltype(_impl_.copied_from_entire_chart_)*/false} {}
struct StylePasteboardDataArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StylePasteboardDataArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StylePasteboardDataArchiveDefaultTypeInternal() {}
  union {
    StylePasteboardDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StylePasteboardDataArchiveDefaultTypeInternal _StylePasteboardDataArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ChartSelectionPathTypeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSelectionPathTypeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSelectionPathTypeArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionPathTypeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSelectionPathTypeArchiveDefaultTypeInternal _ChartSelectionPathTypeArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisIDArchive::ChartAxisIDArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.axis_type_)*/0
  , /*decltype(_impl_.ordinal_)*/0u} {}
struct ChartAxisIDArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisIDArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisIDArchiveDefaultTypeInternal() {}
  union {
    ChartAxisIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisIDArchiveDefaultTypeInternal _ChartAxisIDArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.axis_id_)*/nullptr
  , /*decltype(_impl_.number_)*/0u} {}
struct ChartSelectionPathArgumentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSelectionPathArgumentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSelectionPathArgumentArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionPathArgumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSelectionPathArgumentArchiveDefaultTypeInternal _ChartSelectionPathArgumentArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSelectionPathArchive::ChartSelectionPathArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.path_type_)*/nullptr
  , /*decltype(_impl_.sub_selection_)*/nullptr} {}
struct ChartSelectionPathArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSelectionPathArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSelectionPathArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionPathArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSelectionPathArchiveDefaultTypeInternal _ChartSelectionPathArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSelectionArchive::ChartSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_.chart_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ChartSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSelectionArchiveDefaultTypeInternal() {}
  union {
    ChartSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSelectionArchiveDefaultTypeInternal _ChartSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartCDESelectionArchive::ChartCDESelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chart_)*/nullptr
  , /*decltype(_impl_.selection_type_)*/0
  , /*decltype(_impl_.row_location_)*/0u
  , /*decltype(_impl_.row_length_)*/0u
  , /*decltype(_impl_.column_location_)*/0u
  , /*decltype(_impl_.column_length_)*/0u} {}
struct ChartCDESelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartCDESelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartCDESelectionArchiveDefaultTypeInternal() {}
  union {
    ChartCDESelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartCDESelectionArchiveDefaultTypeInternal _ChartCDESelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartUIState::ChartUIState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chart_)*/nullptr
  , /*decltype(_impl_.cde_last_row_selected_)*/0
  , /*decltype(_impl_.cde_last_col_selected_)*/0
  , /*decltype(_impl_.cde_last_row_count_)*/0
  , /*decltype(_impl_.cde_last_col_count_)*/0
  , /*decltype(_impl_.multi_data_set_index_)*/0
  , /*decltype(_impl_.cde_use_full_keyboard_)*/false
  , /*decltype(_impl_.is_valid_multi_data_set_index_)*/false} {}
struct ChartUIStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartUIStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartUIStateDefaultTypeInternal() {}
  union {
    ChartUIState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartUIStateDefaultTypeInternal _ChartUIState_default_instance_;
PROTOBUF_CONSTEXPR ChartUIStateMultiDataIndexUpgrade::ChartUIStateMultiDataIndexUpgrade(
    ::_pbi::ConstantInitialized) {}
struct ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal() {}
  union {
    ChartUIStateMultiDataIndexUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal _ChartUIStateMultiDataIndexUpgrade_default_instance_;
PROTOBUF_CONSTEXPR ChartFormatStructExtensions::ChartFormatStructExtensions(
    ::_pbi::ConstantInitialized) {}
struct ChartFormatStructExtensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartFormatStructExtensionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartFormatStructExtensionsDefaultTypeInternal() {}
  union {
    ChartFormatStructExtensions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartFormatStructExtensionsDefaultTypeInternal _ChartFormatStructExtensions_default_instance_;
PROTOBUF_CONSTEXPR ChartReferenceLineNonStyleItem::ChartReferenceLineNonStyleItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.non_style_)*/nullptr
  , /*decltype(_impl_.uuid_)*/nullptr} {}
struct ChartReferenceLineNonStyleItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartReferenceLineNonStyleItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartReferenceLineNonStyleItemDefaultTypeInternal() {}
  union {
    ChartReferenceLineNonStyleItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartReferenceLineNonStyleItemDefaultTypeInternal _ChartReferenceLineNonStyleItem_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisReferenceLineNonStylesArchive::ChartAxisReferenceLineNonStylesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_line_non_style_items_)*/{}
  , /*decltype(_impl_.axis_id_)*/nullptr} {}
struct ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal() {}
  union {
    ChartAxisReferenceLineNonStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal _ChartAxisReferenceLineNonStylesArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisReferenceLineStylesArchive::ChartAxisReferenceLineStylesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.axis_id_)*/nullptr
  , /*decltype(_impl_.reference_line_styles_)*/nullptr} {}
struct ChartAxisReferenceLineStylesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisReferenceLineStylesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisReferenceLineStylesArchiveDefaultTypeInternal() {}
  union {
    ChartAxisReferenceLineStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisReferenceLineStylesArchiveDefaultTypeInternal _ChartAxisReferenceLineStylesArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartReferenceLinesArchive::ChartReferenceLinesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_line_non_styles_map_)*/{}
  , /*decltype(_impl_.reference_line_styles_map_)*/{}
  , /*decltype(_impl_.theme_preset_reference_line_style_)*/nullptr} {}
struct ChartReferenceLinesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartReferenceLinesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartReferenceLinesArchiveDefaultTypeInternal() {}
  union {
    ChartReferenceLinesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartReferenceLinesArchiveDefaultTypeInternal _ChartReferenceLinesArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartPresetReferenceLineStylesArchive::ChartPresetReferenceLineStylesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reference_line_styles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChartPresetReferenceLineStylesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartPresetReferenceLineStylesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartPresetReferenceLineStylesArchiveDefaultTypeInternal() {}
  union {
    ChartPresetReferenceLineStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartPresetReferenceLineStylesArchiveDefaultTypeInternal _ChartPresetReferenceLineStylesArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisReferenceLineSparseNonStylesArchive::ChartAxisReferenceLineSparseNonStylesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_line_non_style_items_)*/{}
  , /*decltype(_impl_.axis_id_)*/nullptr} {}
struct ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal() {}
  union {
    ChartAxisReferenceLineSparseNonStylesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal _ChartAxisReferenceLineSparseNonStylesArchive_default_instance_;
PROTOBUF_CONSTEXPR PropertyValueStorageContainerReferenceLinesArchive::PropertyValueStorageContainerReferenceLinesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_line_non_styles_map_)*/{}
  , /*decltype(_impl_.reference_line_styles_map_)*/{}
  , /*decltype(_impl_.theme_preset_reference_line_style_)*/nullptr} {}
struct PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal() {}
  union {
    PropertyValueStorageContainerReferenceLinesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal _PropertyValueStorageContainerReferenceLinesArchive_default_instance_;
PROTOBUF_CONSTEXPR CollaboratorCDECursorSubselectionArchive::CollaboratorCDECursorSubselectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_location_)*/0
  , /*decltype(_impl_.row_length_)*/0
  , /*decltype(_impl_.column_location_)*/0
  , /*decltype(_impl_.column_length_)*/0} {}
struct CollaboratorCDECursorSubselectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaboratorCDECursorSubselectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaboratorCDECursorSubselectionArchiveDefaultTypeInternal() {}
  union {
    CollaboratorCDECursorSubselectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaboratorCDECursorSubselectionArchiveDefaultTypeInternal _CollaboratorCDECursorSubselectionArchive_default_instance_;
PROTOBUF_CONSTEXPR CollaboratorChartTitleCursorSubselectionArchive::CollaboratorChartTitleCursorSubselectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chart_title_selected_)*/false} {}
struct CollaboratorChartTitleCursorSubselectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaboratorChartTitleCursorSubselectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaboratorChartTitleCursorSubselectionArchiveDefaultTypeInternal() {}
  union {
    CollaboratorChartTitleCursorSubselectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaboratorChartTitleCursorSubselectionArchiveDefaultTypeInternal _CollaboratorChartTitleCursorSubselectionArchive_default_instance_;
}  // namespace TSCH
static ::_pb::Metadata file_level_metadata_TSCHArchives_2eproto[37];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TSCHArchives_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSCHArchives_2eproto = nullptr;

const uint32_t TableStruct_TSCHArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartDrawableArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.chart_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.scatter_format_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.legend_frame_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.series_direction_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.contains_default_data_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.grid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.mediator_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.chart_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.chart_non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.legend_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.legend_non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.value_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.category_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.series_theme_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.series_private_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.series_non_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.multidataset_index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.needs_calc_engine_deferred_import_action_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.owned_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartArchive, _impl_.is_dirty_),
  11,
  12,
  0,
  1,
  13,
  14,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  ~0u,
  17,
  15,
  10,
  16,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMultiDataIndexUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, _impl_.horizontal_min_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, _impl_.horizontal_max_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, _impl_.value_min_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicMinMaxUpgrade, _impl_.value_max_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _impl_.value_prefix_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _impl_.value_suffix_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _impl_.value_use_separator_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _impl_.horizontal_prefix_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _impl_.horizontal_suffix_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGarlicLabelFormatUpgrade, _impl_.horizontal_use_separator_),
  0,
  1,
  4,
  2,
  3,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPasteboardAdditionsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPreserveAppearanceForPresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSupportsRoundedCornersArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSupportsSeriesPropertySpacingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry, _impl_.uniqueid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry, _impl_.index_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap, _impl_.row_id_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap, _impl_.column_id_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _impl_.row_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _impl_.grid_row_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartGridArchive, _impl_.idmap_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _impl_.local_series_indexes_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartMediatorArchive, _impl_.remote_series_indexes_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, _impl_.lookup_string_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, _impl_.number_of_theme_series_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFillSetArchive, _impl_.series_styles_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.chart_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.legend_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.series_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartStylePreset, _impl_.uuid_),
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetsArchive, _impl_.chart_presets_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.chart_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.chart_nonstyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.legend_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.legend_nonstyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.value_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.category_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.series_theme_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.series_private_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.series_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerArchive, _impl_.paragraph_styles_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _impl_.style_network_),
  PROTOBUF_FIELD_OFFSET(::TSCH::StylePasteboardDataArchive, _impl_.copied_from_entire_chart_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _impl_.path_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathTypeArchive, _impl_.path_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _impl_.axis_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisIDArchive, _impl_.ordinal_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArgumentArchive, _impl_.axis_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _impl_.path_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _impl_.sub_selection_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionPathArchive, _impl_.arguments_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _impl_.chart_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartSelectionArchive, _impl_.paths_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _impl_.chart_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _impl_.selection_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _impl_.row_location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _impl_.row_length_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _impl_.column_location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartCDESelectionArchive, _impl_.column_length_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.chart_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.cde_last_row_selected_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.cde_last_col_selected_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.cde_last_row_count_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.cde_last_col_count_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.cde_use_full_keyboard_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.multi_data_set_index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIState, _impl_.is_valid_multi_data_set_index_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartUIStateMultiDataIndexUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartFormatStructExtensions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLineNonStyleItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLineNonStyleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLineNonStyleItem, _impl_.non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLineNonStyleItem, _impl_.uuid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineNonStylesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineNonStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineNonStylesArchive, _impl_.axis_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineNonStylesArchive, _impl_.reference_line_non_style_items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineStylesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineStylesArchive, _impl_.axis_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineStylesArchive, _impl_.reference_line_styles_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, _impl_.reference_line_non_styles_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, _impl_.reference_line_styles_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartReferenceLinesArchive, _impl_.theme_preset_reference_line_style_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetReferenceLineStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartPresetReferenceLineStylesArchive, _impl_.reference_line_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive, _impl_.axis_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive, _impl_.reference_line_non_style_items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, _impl_.reference_line_non_styles_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, _impl_.reference_line_styles_map_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PropertyValueStorageContainerReferenceLinesArchive, _impl_.theme_preset_reference_line_style_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::CollaboratorCDECursorSubselectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CollaboratorCDECursorSubselectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CollaboratorCDECursorSubselectionArchive, _impl_.row_location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CollaboratorCDECursorSubselectionArchive, _impl_.row_length_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CollaboratorCDECursorSubselectionArchive, _impl_.column_location_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CollaboratorCDECursorSubselectionArchive, _impl_.column_length_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::CollaboratorChartTitleCursorSubselectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::CollaboratorChartTitleCursorSubselectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::CollaboratorChartTitleCursorSubselectionArchive, _impl_.chart_title_selected_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::TSCH::ChartDrawableArchive)},
  { 8, 38, -1, sizeof(::TSCH::ChartArchive)},
  { 62, -1, -1, sizeof(::TSCH::ChartMultiDataIndexUpgrade)},
  { 68, 78, -1, sizeof(::TSCH::ChartGarlicMinMaxUpgrade)},
  { 82, 94, -1, sizeof(::TSCH::ChartGarlicLabelFormatUpgrade)},
  { 100, -1, -1, sizeof(::TSCH::ChartPasteboardAdditionsArchive)},
  { 106, -1, -1, sizeof(::TSCH::ChartPreserveAppearanceForPresetArchive)},
  { 112, -1, -1, sizeof(::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive)},
  { 118, -1, -1, sizeof(::TSCH::ChartSupportsRoundedCornersArchive)},
  { 124, -1, -1, sizeof(::TSCH::ChartSupportsSeriesPropertySpacingArchive)},
  { 130, 138, -1, sizeof(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry)},
  { 140, -1, -1, sizeof(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap)},
  { 148, 158, -1, sizeof(::TSCH::ChartGridArchive)},
  { 162, 171, -1, sizeof(::TSCH::ChartMediatorArchive)},
  { 174, 184, -1, sizeof(::TSCH::ChartFillSetArchive)},
  { 188, 201, -1, sizeof(::TSCH::ChartStylePreset)},
  { 208, -1, -1, sizeof(::TSCH::ChartPresetsArchive)},
  { 215, 233, -1, sizeof(::TSCH::PropertyValueStorageContainerArchive)},
  { 245, 254, -1, sizeof(::TSCH::StylePasteboardDataArchive)},
  { 257, 265, -1, sizeof(::TSCH::ChartSelectionPathTypeArchive)},
  { 267, 275, -1, sizeof(::TSCH::ChartAxisIDArchive)},
  { 277, 285, -1, sizeof(::TSCH::ChartSelectionPathArgumentArchive)},
  { 287, 296, -1, sizeof(::TSCH::ChartSelectionPathArchive)},
  { 299, 308, -1, sizeof(::TSCH::ChartSelectionArchive)},
  { 311, 323, -1, sizeof(::TSCH::ChartCDESelectionArchive)},
  { 329, 343, -1, sizeof(::TSCH::ChartUIState)},
  { 351, -1, -1, sizeof(::TSCH::ChartUIStateMultiDataIndexUpgrade)},
  { 357, -1, -1, sizeof(::TSCH::ChartFormatStructExtensions)},
  { 363, 371, -1, sizeof(::TSCH::ChartReferenceLineNonStyleItem)},
  { 373, 381, -1, sizeof(::TSCH::ChartAxisReferenceLineNonStylesArchive)},
  { 383, 391, -1, sizeof(::TSCH::ChartAxisReferenceLineStylesArchive)},
  { 393, 402, -1, sizeof(::TSCH::ChartReferenceLinesArchive)},
  { 405, -1, -1, sizeof(::TSCH::ChartPresetReferenceLineStylesArchive)},
  { 412, 420, -1, sizeof(::TSCH::ChartAxisReferenceLineSparseNonStylesArchive)},
  { 422, 431, -1, sizeof(::TSCH::PropertyValueStorageContainerReferenceLinesArchive)},
  { 434, 444, -1, sizeof(::TSCH::CollaboratorCDECursorSubselectionArchive)},
  { 448, 455, -1, sizeof(::TSCH::CollaboratorChartTitleCursorSubselectionArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSCH::_ChartDrawableArchive_default_instance_._instance,
  &::TSCH::_ChartArchive_default_instance_._instance,
  &::TSCH::_ChartMultiDataIndexUpgrade_default_instance_._instance,
  &::TSCH::_ChartGarlicMinMaxUpgrade_default_instance_._instance,
  &::TSCH::_ChartGarlicLabelFormatUpgrade_default_instance_._instance,
  &::TSCH::_ChartPasteboardAdditionsArchive_default_instance_._instance,
  &::TSCH::_ChartPreserveAppearanceForPresetArchive_default_instance_._instance,
  &::TSCH::_ChartSupportsProportionalBendedCalloutLinesArchive_default_instance_._instance,
  &::TSCH::_ChartSupportsRoundedCornersArchive_default_instance_._instance,
  &::TSCH::_ChartSupportsSeriesPropertySpacingArchive_default_instance_._instance,
  &::TSCH::_ChartGridArchive_ChartGridRowColumnIdMap_Entry_default_instance_._instance,
  &::TSCH::_ChartGridArchive_ChartGridRowColumnIdMap_default_instance_._instance,
  &::TSCH::_ChartGridArchive_default_instance_._instance,
  &::TSCH::_ChartMediatorArchive_default_instance_._instance,
  &::TSCH::_ChartFillSetArchive_default_instance_._instance,
  &::TSCH::_ChartStylePreset_default_instance_._instance,
  &::TSCH::_ChartPresetsArchive_default_instance_._instance,
  &::TSCH::_PropertyValueStorageContainerArchive_default_instance_._instance,
  &::TSCH::_StylePasteboardDataArchive_default_instance_._instance,
  &::TSCH::_ChartSelectionPathTypeArchive_default_instance_._instance,
  &::TSCH::_ChartAxisIDArchive_default_instance_._instance,
  &::TSCH::_ChartSelectionPathArgumentArchive_default_instance_._instance,
  &::TSCH::_ChartSelectionPathArchive_default_instance_._instance,
  &::TSCH::_ChartSelectionArchive_default_instance_._instance,
  &::TSCH::_ChartCDESelectionArchive_default_instance_._instance,
  &::TSCH::_ChartUIState_default_instance_._instance,
  &::TSCH::_ChartUIStateMultiDataIndexUpgrade_default_instance_._instance,
  &::TSCH::_ChartFormatStructExtensions_default_instance_._instance,
  &::TSCH::_ChartReferenceLineNonStyleItem_default_instance_._instance,
  &::TSCH::_ChartAxisReferenceLineNonStylesArchive_default_instance_._instance,
  &::TSCH::_ChartAxisReferenceLineStylesArchive_default_instance_._instance,
  &::TSCH::_ChartReferenceLinesArchive_default_instance_._instance,
  &::TSCH::_ChartPresetReferenceLineStylesArchive_default_instance_._instance,
  &::TSCH::_ChartAxisReferenceLineSparseNonStylesArchive_default_instance_._instance,
  &::TSCH::_PropertyValueStorageContainerReferenceLinesArchive_default_instance_._instance,
  &::TSCH::_CollaboratorCDECursorSubselectionArchive_default_instance_._instance,
  &::TSCH::_CollaboratorChartTitleCursorSubselectionArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSCHArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TSCHArchives.proto\022\004TSCH\032\021TSPMessages."
  "proto\032\021TSKArchives.proto\032\021TSDArchives.pr"
  "oto\032\021TSSArchives.proto\032\031TSCHArchives.Com"
  "mon.proto\032\026TSCHArchives.GEN.proto\032\024TSCH3"
  "DArchives.proto\032\030TSCHPreUFFArchives.prot"
  "o\"F\n\024ChartDrawableArchive\022#\n\005super\030\001 \001(\013"
  "2\024.TSD.DrawableArchive*\t\010\220N\020\200\200\200\200\002\"\257\010\n\014Ch"
  "artArchive\022#\n\nchart_type\030\001 \001(\0162\017.TSCH.Ch"
  "artType\022+\n\016scatter_format\030\002 \001(\0162\023.TSCH.S"
  "catterFormat\022\'\n\014legend_frame\030\003 \001(\0132\021.TSC"
  "H.RectArchive\022\036\n\006preset\030\004 \001(\0132\016.TSP.Refe"
  "rence\022/\n\020series_direction\030\005 \001(\0162\025.TSCH.S"
  "eriesDirection\022\035\n\025contains_default_data\030"
  "\006 \001(\010\022$\n\004grid\030\007 \001(\0132\026.TSCH.ChartGridArch"
  "ive\022 \n\010mediator\030\010 \001(\0132\016.TSP.Reference\022#\n"
  "\013chart_style\030\t \001(\0132\016.TSP.Reference\022\'\n\017ch"
  "art_non_style\030\n \001(\0132\016.TSP.Reference\022$\n\014l"
  "egend_style\030\013 \001(\0132\016.TSP.Reference\022(\n\020leg"
  "end_non_style\030\014 \001(\0132\016.TSP.Reference\022)\n\021v"
  "alue_axis_styles\030\r \003(\0132\016.TSP.Reference\022,"
  "\n\024value_axis_nonstyles\030\016 \003(\0132\016.TSP.Refer"
  "ence\022,\n\024category_axis_styles\030\017 \003(\0132\016.TSP"
  ".Reference\022/\n\027category_axis_nonstyles\030\020 "
  "\003(\0132\016.TSP.Reference\022+\n\023series_theme_styl"
  "es\030\021 \003(\0132\016.TSP.Reference\0228\n\025series_priva"
  "te_styles\030\022 \001(\0132\031.TSP.SparseReferenceArr"
  "ay\0224\n\021series_non_styles\030\023 \001(\0132\031.TSP.Spar"
  "seReferenceArray\022(\n\020paragraph_styles\030\024 \003"
  "(\0132\016.TSP.Reference\022\032\n\022multidataset_index"
  "\030\025 \001(\r\0220\n(needs_calc_engine_deferred_imp"
  "ort_action\030\026 \001(\010\022$\n\014owned_preset\030\027 \001(\0132\016"
  ".TSP.Reference\022\020\n\010is_dirty\030\030 \001(\010*\t\010\220N\020\200\200"
  "\200\200\0022>\n\005unity\022\032.TSCH.ChartDrawableArchive"
  "\030\220N \001(\0132\022.TSCH.ChartArchive\"O\n\032ChartMult"
  "iDataIndexUpgrade21\n\024upgraded_to_ui_stat"
  "e\022\022.TSCH.ChartArchive\030\245N \001(\010\"\305\001\n\030ChartGa"
  "rlicMinMaxUpgrade\022\026\n\016horizontal_min\030\001 \001("
  "\001\022\026\n\016horizontal_max\030\002 \001(\001\022\021\n\tvalue_min\030\003"
  " \001(\001\022\021\n\tvalue_max\030\004 \001(\0012S\n\026garlic_min_ma"
  "x_upgrade\022\022.TSCH.ChartArchive\030\232N \001(\0132\036.T"
  "SCH.ChartGarlicMinMaxUpgrade\"\237\002\n\035ChartGa"
  "rlicLabelFormatUpgrade\022\024\n\014value_prefix\030\001"
  " \001(\t\022\024\n\014value_suffix\030\002 \001(\t\022\033\n\023value_use_"
  "separator\030\003 \001(\010\022\031\n\021horizontal_prefix\030\004 \001"
  "(\t\022\031\n\021horizontal_suffix\030\005 \001(\t\022 \n\030horizon"
  "tal_use_separator\030\006 \001(\0102]\n\033garlic_label_"
  "format_upgrade\022\022.TSCH.ChartArchive\030\233N \001("
  "\0132#.TSCH.ChartGarlicLabelFormatUpgrade\"\344"
  "\001\n\037ChartPasteboardAdditionsArchive28\n\033pr"
  "eset_index_for_pasteboard\022\022.TSCH.ChartAr"
  "chive\030\220N \001(\r27\n\032preset_uuid_for_pasteboa"
  "rd\022\022.TSCH.ChartArchive\030\221N \001(\0142N\n!custom_"
  "format_list_for_pasteboard\022\022.TSCH.ChartA"
  "rchive\030\223N \001(\0132\016.TSP.Reference\"g\n\'ChartPr"
  "eserveAppearanceForPresetArchive2<\n\037appe"
  "arance_preserved_for_preset\022\022.TSCH.Chart"
  "Archive\030\247N \001(\010\"}\n2ChartSupportsProportio"
  "nalBendedCalloutLinesArchive2G\n*supports"
  "_proportional_bended_callout_lines\022\022.TSC"
  "H.ChartArchive\030\250N \001(\010\"\235\001\n\"ChartSupportsR"
  "oundedCornersArchive2@\n#deprecated_suppo"
  "rts_rounded_corners\022\022.TSCH.ChartArchive\030"
  "\251N \001(\01025\n\030supports_rounded_corners\022\022.TSC"
  "H.ChartArchive\030\252N \001(\010\"\255\001\n)ChartSupportsS"
  "eriesPropertySpacingArchive2@\n#supports_"
  "series_value_label_spacing\022\022.TSCH.ChartA"
  "rchive\030\253N \001(\0102>\n!supports_series_error_b"
  "ar_spacing\022\022.TSCH.ChartArchive\030\254N \001(\010\"\366\002"
  "\n\020ChartGridArchive\022\020\n\010row_name\030\001 \003(\t\022\023\n\013"
  "column_name\030\002 \003(\t\022\037\n\010grid_row\030\003 \003(\0132\r.TS"
  "CH.GridRow\022=\n\005idMap\030\004 \001(\0132..TSCH.ChartGr"
  "idArchive.ChartGridRowColumnIdMap\032\332\001\n\027Ch"
  "artGridRowColumnIdMap\022H\n\nrow_id_map\030\001 \003("
  "\01324.TSCH.ChartGridArchive.ChartGridRowCo"
  "lumnIdMap.Entry\022K\n\rcolumn_id_map\030\002 \003(\01324"
  ".TSCH.ChartGridArchive.ChartGridRowColum"
  "nIdMap.Entry\032(\n\005Entry\022\020\n\010uniqueId\030\001 \002(\t\022"
  "\r\n\005index\030\002 \002(\r\"q\n\024ChartMediatorArchive\022\034"
  "\n\004info\030\001 \001(\0132\016.TSP.Reference\022\034\n\024local_se"
  "ries_indexes\030\002 \003(\r\022\035\n\025remote_series_inde"
  "xes\030\003 \003(\r\"\216\001\n\023ChartFillSetArchive\022\022\n\nide"
  "ntifier\030\001 \002(\t\022\025\n\rlookup_string\030\002 \002(\t\022%\n\035"
  "number_of_theme_series_styles\030\003 \001(\r\022%\n\rs"
  "eries_styles\030\004 \003(\0132\016.TSP.Reference\"\240\002\n\020C"
  "hartStylePreset\022#\n\013chart_style\030\001 \001(\0132\016.T"
  "SP.Reference\022$\n\014legend_style\030\002 \001(\0132\016.TSP"
  ".Reference\022)\n\021value_axis_styles\030\003 \003(\0132\016."
  "TSP.Reference\022,\n\024category_axis_styles\030\004 "
  "\003(\0132\016.TSP.Reference\022%\n\rseries_styles\030\005 \003"
  "(\0132\016.TSP.Reference\022(\n\020paragraph_styles\030\006"
  " \003(\0132\016.TSP.Reference\022\014\n\004uuid\030\007 \001(\014*\t\010\220N\020"
  "\200\200\200\200\002\"}\n\023ChartPresetsArchive\022%\n\rchart_pr"
  "esets\030\001 \003(\0132\016.TSP.Reference2\?\n\textension"
  "\022\021.TSS.ThemeArchive\030x \001(\0132\031.TSCH.ChartPr"
  "esetsArchive\"\215\005\n$PropertyValueStorageCon"
  "tainerArchive\022#\n\013chart_style\030\001 \001(\0132\016.TSP"
  ".Reference\022&\n\016chart_nonstyle\030\002 \001(\0132\016.TSP"
  ".Reference\022$\n\014legend_style\030\003 \001(\0132\016.TSP.R"
  "eference\022\'\n\017legend_nonstyle\030\004 \001(\0132\016.TSP."
  "Reference\0224\n\021value_axis_styles\030\005 \001(\0132\031.T"
  "SP.SparseReferenceArray\0227\n\024value_axis_no"
  "nstyles\030\006 \001(\0132\031.TSP.SparseReferenceArray"
  "\0227\n\024category_axis_styles\030\007 \001(\0132\031.TSP.Spa"
  "rseReferenceArray\022:\n\027category_axis_nonst"
  "yles\030\010 \001(\0132\031.TSP.SparseReferenceArray\0226\n"
  "\023series_theme_styles\030\t \001(\0132\031.TSP.SparseR"
  "eferenceArray\0228\n\025series_private_styles\030\n"
  " \001(\0132\031.TSP.SparseReferenceArray\0223\n\020serie"
  "s_nonstyles\030\013 \001(\0132\031.TSP.SparseReferenceA"
  "rray\0223\n\020paragraph_styles\030\014 \001(\0132\031.TSP.Spa"
  "rseReferenceArray*\t\010\220N\020\200\200\200\200\002\"\243\001\n\032StylePa"
  "steboardDataArchive\022 \n\005super\030\001 \001(\0132\021.TSS"
  ".StyleArchive\022A\n\rstyle_network\030\002 \001(\0132*.T"
  "SCH.PropertyValueStorageContainerArchive"
  "\022 \n\030copied_from_entire_chart\030\003 \001(\010\"E\n\035Ch"
  "artSelectionPathTypeArchive\022\021\n\tpath_type"
  "\030\001 \001(\t\022\021\n\tpath_name\030\002 \001(\t\"H\n\022ChartAxisID"
  "Archive\022!\n\taxis_type\030\001 \001(\0162\016.TSCH.AxisTy"
  "pe\022\017\n\007ordinal\030\002 \001(\r\"^\n!ChartSelectionPat"
  "hArgumentArchive\022\016\n\006number\030\001 \001(\r\022)\n\007axis"
  "_id\030\002 \001(\0132\030.TSCH.ChartAxisIDArchive\"\307\001\n\031"
  "ChartSelectionPathArchive\0226\n\tpath_type\030\001"
  " \001(\0132#.TSCH.ChartSelectionPathTypeArchiv"
  "e\0226\n\rsub_selection\030\002 \001(\0132\037.TSCH.ChartSel"
  "ectionPathArchive\022:\n\targuments\030\003 \003(\0132\'.T"
  "SCH.ChartSelectionPathArgumentArchive\"\224\001"
  "\n\025ChartSelectionArchive\022,\n\005super\030\003 \001(\0132\035"
  ".TSD.DrawableSelectionArchive\022\035\n\005chart\030\001"
  " \001(\0132\016.TSP.Reference\022.\n\005paths\030\002 \003(\0132\037.TS"
  "CH.ChartSelectionPathArchive\"\253\001\n\030ChartCD"
  "ESelectionArchive\022\035\n\005chart\030\001 \001(\0132\016.TSP.R"
  "eference\022\026\n\016selection_type\030\002 \001(\005\022\024\n\014row_"
  "location\030\003 \001(\r\022\022\n\nrow_length\030\004 \001(\r\022\027\n\017co"
  "lumn_location\030\005 \001(\r\022\025\n\rcolumn_length\030\006 \001"
  "(\r\"\222\002\n\014ChartUIState\022\035\n\005chart\030\001 \001(\0132\016.TSP"
  ".Reference\022\035\n\025cde_last_row_selected\030\002 \001("
  "\005\022\035\n\025cde_last_col_selected\030\003 \001(\005\022\032\n\022cde_"
  "last_row_count\030\004 \001(\005\022\032\n\022cde_last_col_cou"
  "nt\030\005 \001(\005\022\035\n\025cde_use_full_keyboard\030\006 \001(\010\022"
  "\034\n\024multi_data_set_index\030\007 \001(\005\022%\n\035is_vali"
  "d_multi_data_set_index\030\010 \001(\010*\t\010\220N\020\200\200\200\200\002\""
  "U\n!ChartUIStateMultiDataIndexUpgrade20\n\023"
  "upgraded_from_model\022\022.TSCH.ChartUIState\030"
  "\246N \001(\010\"s\n\033ChartFormatStructExtensions2)\n"
  "\006prefix\022\030.TSK.FormatStructArchive\030\220N \001(\t"
  "2)\n\006suffix\022\030.TSK.FormatStructArchive\030\221N "
  "\001(\t\"\\\n\036ChartReferenceLineNonStyleItem\022!\n"
  "\tnon_style\030\001 \002(\0132\016.TSP.Reference\022\027\n\004uuid"
  "\030\002 \002(\0132\t.TSP.UUID\"\241\001\n&ChartAxisReference"
  "LineNonStylesArchive\022)\n\007axis_id\030\001 \002(\0132\030."
  "TSCH.ChartAxisIDArchive\022L\n\036reference_lin"
  "e_non_style_items\030\002 \003(\0132$.TSCH.ChartRefe"
  "renceLineNonStyleItem\"\212\001\n#ChartAxisRefer"
  "enceLineStylesArchive\022)\n\007axis_id\030\001 \002(\0132\030"
  ".TSCH.ChartAxisIDArchive\0228\n\025reference_li"
  "ne_styles\030\002 \001(\0132\031.TSP.SparseReferenceArr"
  "ay\"\372\001\n\032ChartReferenceLinesArchive\022S\n\035ref"
  "erence_line_non_styles_map\030\001 \003(\0132,.TSCH."
  "ChartAxisReferenceLineNonStylesArchive\022L"
  "\n\031reference_line_styles_map\030\002 \003(\0132).TSCH"
  ".ChartAxisReferenceLineStylesArchive\0229\n!"
  "theme_preset_reference_line_style\030\003 \001(\0132"
  "\016.TSP.Reference\"V\n%ChartPresetReferenceL"
  "ineStylesArchive\022-\n\025reference_line_style"
  "s\030\001 \003(\0132\016.TSP.Reference\"\247\001\n,ChartAxisRef"
  "erenceLineSparseNonStylesArchive\022)\n\007axis"
  "_id\030\001 \002(\0132\030.TSCH.ChartAxisIDArchive\022L\n\036r"
  "eference_line_non_style_items\030\002 \003(\0132$.TS"
  "CH.ChartReferenceLineNonStyleItem\"\230\002\n2Pr"
  "opertyValueStorageContainerReferenceLine"
  "sArchive\022Y\n\035reference_line_non_styles_ma"
  "p\030\001 \003(\01322.TSCH.ChartAxisReferenceLineSpa"
  "rseNonStylesArchive\022L\n\031reference_line_st"
  "yles_map\030\002 \003(\0132).TSCH.ChartAxisReference"
  "LineStylesArchive\0229\n!theme_preset_refere"
  "nce_line_style\030\003 \001(\0132\016.TSP.Reference\"\366\001\n"
  "(CollaboratorCDECursorSubselectionArchiv"
  "e\022\024\n\014row_location\030\001 \001(\005\022\022\n\nrow_length\030\002 "
  "\001(\005\022\027\n\017column_location\030\003 \001(\005\022\025\n\rcolumn_l"
  "ength\030\004 \001(\0052p\n\027cde_cursor_subselection\022\036"
  ".TSK.CollaboratorCursorArchive\030\254\002 \001(\0132.."
  "TSCH.CollaboratorCDECursorSubselectionAr"
  "chive\"\320\001\n/CollaboratorChartTitleCursorSu"
  "bselectionArchive\022\034\n\024chart_title_selecte"
  "d\030\001 \001(\0102\177\n\037chart_title_cursor_subselecti"
  "on\022\036.TSK.CollaboratorCursorArchive\030\255\002 \001("
  "\01325.TSCH.CollaboratorChartTitleCursorSub"
  "selectionArchive:<\n\037scene3d_settings_con"
  "stant_depth\022\022.TSCH.ChartArchive\030\222N \001(\010:@"
  "\n#last_applied_fill_set_lookup_string\022\022."
  "TSCH.ChartArchive\030\224N \001(\t:=\n\025series_suppo"
  "rts_donut\022\035.TSCH.ChartSeriesStyleArchive"
  "\030\221N \001(\010:=\n\025series_supports_radar\022\035.TSCH."
  "ChartSeriesStyleArchive\030\222N \001(\010:O\n$series"
  "_supports_custom_number_format\022 .TSCH.Ch"
  "artSeriesNonStyleArchive\030\221N \001(\010:M\n\"serie"
  "s_supports_custom_date_format\022 .TSCH.Cha"
  "rtSeriesNonStyleArchive\030\222N \001(\010:H\n\035series"
  "_supports_callout_lines\022 .TSCH.ChartSeri"
  "esNonStyleArchive\030\223N \001(\010:9\n\023axis_support"
  "s_radar\022\033.TSCH.ChartAxisStyleArchive\030\221N "
  "\001(\010:K\n\"axis_supports_custom_number_forma"
  "t\022\036.TSCH.ChartAxisNonStyleArchive\030\221N \001(\010"
  ":I\n axis_supports_custom_date_format\022\036.T"
  "SCH.ChartAxisNonStyleArchive\030\222N \001(\010:N\n\017r"
  "eference_lines\022\022.TSCH.ChartArchive\030\225N \001("
  "\0132 .TSCH.ChartReferenceLinesArchive:j\n\034p"
  "reset_reference_line_styles\022\026.TSCH.Chart"
  "StylePreset\030\220N \001(\0132+.TSCH.ChartPresetRef"
  "erenceLineStylesArchive:\237\001\n0property_val"
  "ue_storage_container_reference_lines\022*.T"
  "SCH.PropertyValueStorageContainerArchive"
  "\030\220N \001(\01328.TSCH.PropertyValueStorageConta"
  "inerReferenceLinesArchive"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSCHArchives_2eproto_deps[8] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSCHArchives_2eGEN_2eproto,
  &::descriptor_table_TSCHPreUFFArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSCHArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSCHArchives_2eproto = {
    false, false, 8545, descriptor_table_protodef_TSCHArchives_2eproto,
    "TSCHArchives.proto",
    &descriptor_table_TSCHArchives_2eproto_once, descriptor_table_TSCHArchives_2eproto_deps, 8, 37,
    schemas, file_default_instances, TableStruct_TSCHArchives_2eproto::offsets,
    file_level_metadata_TSCHArchives_2eproto, file_level_enum_descriptors_TSCHArchives_2eproto,
    file_level_service_descriptors_TSCHArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSCHArchives_2eproto_getter() {
  return &descriptor_table_TSCHArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSCHArchives_2eproto(&descriptor_table_TSCHArchives_2eproto);
namespace TSCH {

// ===================================================================

class ChartDrawableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartDrawableArchive>()._impl_._has_bits_);
  static const ::TSD::DrawableArchive& super(const ChartDrawableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSD::DrawableArchive&
ChartDrawableArchive::_Internal::super(const ChartDrawableArchive* msg) {
  return *msg->_impl_.super_;
}
void ChartDrawableArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartDrawableArchive::ChartDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartDrawableArchive)
}
ChartDrawableArchive::ChartDrawableArchive(const ChartDrawableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartDrawableArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::DrawableArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartDrawableArchive)
}

inline void ChartDrawableArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ChartDrawableArchive::~ChartDrawableArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartDrawableArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartDrawableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ChartDrawableArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartDrawableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartDrawableArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartDrawableArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((80000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartDrawableArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartDrawableArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // Extension range [10000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartDrawableArchive)
  return target;
}

size_t ChartDrawableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartDrawableArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSD.DrawableArchive super = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartDrawableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartDrawableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartDrawableArchive::GetClassData() const { return &_class_data_; }


void ChartDrawableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartDrawableArchive*>(&to_msg);
  auto& from = static_cast<const ChartDrawableArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartDrawableArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(
        from._internal_super());
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartDrawableArchive::CopyFrom(const ChartDrawableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartDrawableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartDrawableArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ChartDrawableArchive::InternalSwap(ChartDrawableArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartDrawableArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[0]);
}

// ===================================================================

class ChartArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartArchive>()._impl_._has_bits_);
  static void set_has_chart_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_scatter_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCH::RectArchive& legend_frame(const ChartArchive* msg);
  static void set_has_legend_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& preset(const ChartArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_series_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_contains_default_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCH::ChartGridArchive& grid(const ChartArchive* msg);
  static void set_has_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& mediator(const ChartArchive* msg);
  static void set_has_mediator(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& chart_style(const ChartArchive* msg);
  static void set_has_chart_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& chart_non_style(const ChartArchive* msg);
  static void set_has_chart_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& legend_style(const ChartArchive* msg);
  static void set_has_legend_style(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& legend_non_style(const ChartArchive* msg);
  static void set_has_legend_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::SparseReferenceArray& series_private_styles(const ChartArchive* msg);
  static void set_has_series_private_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::SparseReferenceArray& series_non_styles(const ChartArchive* msg);
  static void set_has_series_non_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_multidataset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_needs_calc_engine_deferred_import_action(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& owned_preset(const ChartArchive* msg);
  static void set_has_owned_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_dirty(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::TSCH::RectArchive&
ChartArchive::_Internal::legend_frame(const ChartArchive* msg) {
  return *msg->_impl_.legend_frame_;
}
const ::TSP::Reference&
ChartArchive::_Internal::preset(const ChartArchive* msg) {
  return *msg->_impl_.preset_;
}
const ::TSCH::ChartGridArchive&
ChartArchive::_Internal::grid(const ChartArchive* msg) {
  return *msg->_impl_.grid_;
}
const ::TSP::Reference&
ChartArchive::_Internal::mediator(const ChartArchive* msg) {
  return *msg->_impl_.mediator_;
}
const ::TSP::Reference&
ChartArchive::_Internal::chart_style(const ChartArchive* msg) {
  return *msg->_impl_.chart_style_;
}
const ::TSP::Reference&
ChartArchive::_Internal::chart_non_style(const ChartArchive* msg) {
  return *msg->_impl_.chart_non_style_;
}
const ::TSP::Reference&
ChartArchive::_Internal::legend_style(const ChartArchive* msg) {
  return *msg->_impl_.legend_style_;
}
const ::TSP::Reference&
ChartArchive::_Internal::legend_non_style(const ChartArchive* msg) {
  return *msg->_impl_.legend_non_style_;
}
const ::TSP::SparseReferenceArray&
ChartArchive::_Internal::series_private_styles(const ChartArchive* msg) {
  return *msg->_impl_.series_private_styles_;
}
const ::TSP::SparseReferenceArray&
ChartArchive::_Internal::series_non_styles(const ChartArchive* msg) {
  return *msg->_impl_.series_non_styles_;
}
const ::TSP::Reference&
ChartArchive::_Internal::owned_preset(const ChartArchive* msg) {
  return *msg->_impl_.owned_preset_;
}
void ChartArchive::clear_legend_frame() {
  if (_impl_.legend_frame_ != nullptr) _impl_.legend_frame_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartArchive::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartArchive::clear_mediator() {
  if (_impl_.mediator_ != nullptr) _impl_.mediator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartArchive::clear_chart_style() {
  if (_impl_.chart_style_ != nullptr) _impl_.chart_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartArchive::clear_chart_non_style() {
  if (_impl_.chart_non_style_ != nullptr) _impl_.chart_non_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartArchive::clear_legend_style() {
  if (_impl_.legend_style_ != nullptr) _impl_.legend_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartArchive::clear_legend_non_style() {
  if (_impl_.legend_non_style_ != nullptr) _impl_.legend_non_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartArchive::clear_value_axis_styles() {
  _impl_.value_axis_styles_.Clear();
}
void ChartArchive::clear_value_axis_nonstyles() {
  _impl_.value_axis_nonstyles_.Clear();
}
void ChartArchive::clear_category_axis_styles() {
  _impl_.category_axis_styles_.Clear();
}
void ChartArchive::clear_category_axis_nonstyles() {
  _impl_.category_axis_nonstyles_.Clear();
}
void ChartArchive::clear_series_theme_styles() {
  _impl_.series_theme_styles_.Clear();
}
void ChartArchive::clear_series_private_styles() {
  if (_impl_.series_private_styles_ != nullptr) _impl_.series_private_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartArchive::clear_series_non_styles() {
  if (_impl_.series_non_styles_ != nullptr) _impl_.series_non_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartArchive::clear_paragraph_styles() {
  _impl_.paragraph_styles_.Clear();
}
void ChartArchive::clear_owned_preset() {
  if (_impl_.owned_preset_ != nullptr) _impl_.owned_preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
ChartArchive::ChartArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartArchive)
}
ChartArchive::ChartArchive(const ChartArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){from._impl_.value_axis_styles_}
    , decltype(_impl_.value_axis_nonstyles_){from._impl_.value_axis_nonstyles_}
    , decltype(_impl_.category_axis_styles_){from._impl_.category_axis_styles_}
    , decltype(_impl_.category_axis_nonstyles_){from._impl_.category_axis_nonstyles_}
    , decltype(_impl_.series_theme_styles_){from._impl_.series_theme_styles_}
    , decltype(_impl_.paragraph_styles_){from._impl_.paragraph_styles_}
    , decltype(_impl_.legend_frame_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.mediator_){nullptr}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.chart_non_style_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
    , decltype(_impl_.legend_non_style_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_non_styles_){nullptr}
    , decltype(_impl_.owned_preset_){nullptr}
    , decltype(_impl_.chart_type_){}
    , decltype(_impl_.scatter_format_){}
    , decltype(_impl_.series_direction_){}
    , decltype(_impl_.contains_default_data_){}
    , decltype(_impl_.needs_calc_engine_deferred_import_action_){}
    , decltype(_impl_.is_dirty_){}
    , decltype(_impl_.multidataset_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if (from._internal_has_legend_frame()) {
    _this->_impl_.legend_frame_ = new ::TSCH::RectArchive(*from._impl_.legend_frame_);
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  if (from._internal_has_grid()) {
    _this->_impl_.grid_ = new ::TSCH::ChartGridArchive(*from._impl_.grid_);
  }
  if (from._internal_has_mediator()) {
    _this->_impl_.mediator_ = new ::TSP::Reference(*from._impl_.mediator_);
  }
  if (from._internal_has_chart_style()) {
    _this->_impl_.chart_style_ = new ::TSP::Reference(*from._impl_.chart_style_);
  }
  if (from._internal_has_chart_non_style()) {
    _this->_impl_.chart_non_style_ = new ::TSP::Reference(*from._impl_.chart_non_style_);
  }
  if (from._internal_has_legend_style()) {
    _this->_impl_.legend_style_ = new ::TSP::Reference(*from._impl_.legend_style_);
  }
  if (from._internal_has_legend_non_style()) {
    _this->_impl_.legend_non_style_ = new ::TSP::Reference(*from._impl_.legend_non_style_);
  }
  if (from._internal_has_series_private_styles()) {
    _this->_impl_.series_private_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.series_private_styles_);
  }
  if (from._internal_has_series_non_styles()) {
    _this->_impl_.series_non_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.series_non_styles_);
  }
  if (from._internal_has_owned_preset()) {
    _this->_impl_.owned_preset_ = new ::TSP::Reference(*from._impl_.owned_preset_);
  }
  ::memcpy(&_impl_.chart_type_, &from._impl_.chart_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.multidataset_index_) -
    reinterpret_cast<char*>(&_impl_.chart_type_)) + sizeof(_impl_.multidataset_index_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartArchive)
}

inline void ChartArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){arena}
    , decltype(_impl_.value_axis_nonstyles_){arena}
    , decltype(_impl_.category_axis_styles_){arena}
    , decltype(_impl_.category_axis_nonstyles_){arena}
    , decltype(_impl_.series_theme_styles_){arena}
    , decltype(_impl_.paragraph_styles_){arena}
    , decltype(_impl_.legend_frame_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.mediator_){nullptr}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.chart_non_style_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
    , decltype(_impl_.legend_non_style_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_non_styles_){nullptr}
    , decltype(_impl_.owned_preset_){nullptr}
    , decltype(_impl_.chart_type_){0}
    , decltype(_impl_.scatter_format_){0}
    , decltype(_impl_.series_direction_){0}
    , decltype(_impl_.contains_default_data_){false}
    , decltype(_impl_.needs_calc_engine_deferred_import_action_){false}
    , decltype(_impl_.is_dirty_){false}
    , decltype(_impl_.multidataset_index_){0u}
  };
}

ChartArchive::~ChartArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.value_axis_styles_.~RepeatedPtrField();
  _impl_.value_axis_nonstyles_.~RepeatedPtrField();
  _impl_.category_axis_styles_.~RepeatedPtrField();
  _impl_.category_axis_nonstyles_.~RepeatedPtrField();
  _impl_.series_theme_styles_.~RepeatedPtrField();
  _impl_.paragraph_styles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.legend_frame_;
  if (this != internal_default_instance()) delete _impl_.preset_;
  if (this != internal_default_instance()) delete _impl_.grid_;
  if (this != internal_default_instance()) delete _impl_.mediator_;
  if (this != internal_default_instance()) delete _impl_.chart_style_;
  if (this != internal_default_instance()) delete _impl_.chart_non_style_;
  if (this != internal_default_instance()) delete _impl_.legend_style_;
  if (this != internal_default_instance()) delete _impl_.legend_non_style_;
  if (this != internal_default_instance()) delete _impl_.series_private_styles_;
  if (this != internal_default_instance()) delete _impl_.series_non_styles_;
  if (this != internal_default_instance()) delete _impl_.owned_preset_;
}

void ChartArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.value_axis_styles_.Clear();
  _impl_.value_axis_nonstyles_.Clear();
  _impl_.category_axis_styles_.Clear();
  _impl_.category_axis_nonstyles_.Clear();
  _impl_.series_theme_styles_.Clear();
  _impl_.paragraph_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.legend_frame_ != nullptr);
      _impl_.legend_frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.grid_ != nullptr);
      _impl_.grid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.mediator_ != nullptr);
      _impl_.mediator_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.chart_style_ != nullptr);
      _impl_.chart_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.chart_non_style_ != nullptr);
      _impl_.chart_non_style_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.legend_style_ != nullptr);
      _impl_.legend_style_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.legend_non_style_ != nullptr);
      _impl_.legend_non_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.series_private_styles_ != nullptr);
      _impl_.series_private_styles_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.series_non_styles_ != nullptr);
      _impl_.series_non_styles_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.owned_preset_ != nullptr);
      _impl_.owned_preset_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.chart_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.needs_calc_engine_deferred_import_action_) -
        reinterpret_cast<char*>(&_impl_.chart_type_)) + sizeof(_impl_.needs_calc_engine_deferred_import_action_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.is_dirty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.multidataset_index_) -
        reinterpret_cast<char*>(&_impl_.is_dirty_)) + sizeof(_impl_.multidataset_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.ChartType chart_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_chart_type(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ScatterFormat scatter_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ScatterFormat_IsValid(val))) {
            _internal_set_scatter_format(static_cast<::TSCH::ScatterFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.RectArchive legend_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.SeriesDirection series_direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::SeriesDirection_IsValid(val))) {
            _internal_set_series_direction(static_cast<::TSCH::SeriesDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool contains_default_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_contains_default_data(&has_bits);
          _impl_.contains_default_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartGridArchive grid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference mediator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_style = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_non_style = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_non_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_style = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_non_style = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_non_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_styles = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_nonstyles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_styles = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_nonstyles = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_category_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_theme_styles = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_series_theme_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_private_styles = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_private_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_non_styles = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_non_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 multidataset_index = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_multidataset_index(&has_bits);
          _impl_.multidataset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_calc_engine_deferred_import_action = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_needs_calc_engine_deferred_import_action(&has_bits);
          _impl_.needs_calc_engine_deferred_import_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference owned_preset = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_owned_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_dirty = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_is_dirty(&has_bits);
          _impl_.is_dirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((80000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.ChartType chart_type = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chart_type(), target);
  }

  // optional .TSCH.ScatterFormat scatter_format = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scatter_format(), target);
  }

  // optional .TSCH.RectArchive legend_frame = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::legend_frame(this),
        _Internal::legend_frame(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference preset = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.SeriesDirection series_direction = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_series_direction(), target);
  }

  // optional bool contains_default_data = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_contains_default_data(), target);
  }

  // optional .TSCH.ChartGridArchive grid = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::grid(this),
        _Internal::grid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference mediator = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::mediator(this),
        _Internal::mediator(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference chart_style = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::chart_style(this),
        _Internal::chart_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference chart_non_style = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::chart_non_style(this),
        _Internal::chart_non_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_style = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::legend_style(this),
        _Internal::legend_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_non_style = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::legend_non_style(this),
        _Internal::legend_non_style(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference value_axis_styles = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_axis_nonstyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_axis_nonstyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference category_axis_styles = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_axis_nonstyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_axis_nonstyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference series_theme_styles = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_series_theme_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_series_theme_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_private_styles = 18;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::series_private_styles(this),
        _Internal::series_private_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_non_styles = 19;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::series_non_styles(this),
        _Internal::series_non_styles(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paragraph_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_paragraph_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 multidataset_index = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_multidataset_index(), target);
  }

  // optional bool needs_calc_engine_deferred_import_action = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_needs_calc_engine_deferred_import_action(), target);
  }

  // optional .TSP.Reference owned_preset = 23;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::owned_preset(this),
        _Internal::owned_preset(this).GetCachedSize(), target, stream);
  }

  // optional bool is_dirty = 24;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_is_dirty(), target);
  }

  // Extension range [10000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartArchive)
  return target;
}

size_t ChartArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference value_axis_styles = 13;
  total_size += 1UL * this->_internal_value_axis_styles_size();
  for (const auto& msg : this->_impl_.value_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  total_size += 1UL * this->_internal_value_axis_nonstyles_size();
  for (const auto& msg : this->_impl_.value_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_styles = 15;
  total_size += 1UL * this->_internal_category_axis_styles_size();
  for (const auto& msg : this->_impl_.category_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  total_size += 2UL * this->_internal_category_axis_nonstyles_size();
  for (const auto& msg : this->_impl_.category_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference series_theme_styles = 17;
  total_size += 2UL * this->_internal_series_theme_styles_size();
  for (const auto& msg : this->_impl_.series_theme_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_styles = 20;
  total_size += 2UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->_impl_.paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSCH.RectArchive legend_frame = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_frame_);
    }

    // optional .TSP.Reference preset = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preset_);
    }

    // optional .TSCH.ChartGridArchive grid = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grid_);
    }

    // optional .TSP.Reference mediator = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mediator_);
    }

    // optional .TSP.Reference chart_style = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_style_);
    }

    // optional .TSP.Reference chart_non_style = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_non_style_);
    }

    // optional .TSP.Reference legend_style = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_style_);
    }

    // optional .TSP.Reference legend_non_style = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_non_style_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.SparseReferenceArray series_private_styles = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_private_styles_);
    }

    // optional .TSP.SparseReferenceArray series_non_styles = 19;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_non_styles_);
    }

    // optional .TSP.Reference owned_preset = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.owned_preset_);
    }

    // optional .TSCH.ChartType chart_type = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_chart_type());
    }

    // optional .TSCH.ScatterFormat scatter_format = 2;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_scatter_format());
    }

    // optional .TSCH.SeriesDirection series_direction = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_series_direction());
    }

    // optional bool contains_default_data = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool needs_calc_engine_deferred_import_action = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool is_dirty = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint32 multidataset_index = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_multidataset_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartArchive::GetClassData() const { return &_class_data_; }


void ChartArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartArchive*>(&to_msg);
  auto& from = static_cast<const ChartArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_axis_styles_.MergeFrom(from._impl_.value_axis_styles_);
  _this->_impl_.value_axis_nonstyles_.MergeFrom(from._impl_.value_axis_nonstyles_);
  _this->_impl_.category_axis_styles_.MergeFrom(from._impl_.category_axis_styles_);
  _this->_impl_.category_axis_nonstyles_.MergeFrom(from._impl_.category_axis_nonstyles_);
  _this->_impl_.series_theme_styles_.MergeFrom(from._impl_.series_theme_styles_);
  _this->_impl_.paragraph_styles_.MergeFrom(from._impl_.paragraph_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_legend_frame()->::TSCH::RectArchive::MergeFrom(
          from._internal_legend_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_grid()->::TSCH::ChartGridArchive::MergeFrom(
          from._internal_grid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_mediator()->::TSP::Reference::MergeFrom(
          from._internal_mediator());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_chart_style()->::TSP::Reference::MergeFrom(
          from._internal_chart_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_chart_non_style()->::TSP::Reference::MergeFrom(
          from._internal_chart_non_style());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_legend_style()->::TSP::Reference::MergeFrom(
          from._internal_legend_style());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_legend_non_style()->::TSP::Reference::MergeFrom(
          from._internal_legend_non_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_series_private_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_series_private_styles());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_series_non_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_series_non_styles());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_owned_preset()->::TSP::Reference::MergeFrom(
          from._internal_owned_preset());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.chart_type_ = from._impl_.chart_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.scatter_format_ = from._impl_.scatter_format_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.series_direction_ = from._impl_.series_direction_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.contains_default_data_ = from._impl_.contains_default_data_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.needs_calc_engine_deferred_import_action_ = from._impl_.needs_calc_engine_deferred_import_action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.is_dirty_ = from._impl_.is_dirty_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.multidataset_index_ = from._impl_.multidataset_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartArchive::CopyFrom(const ChartArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.value_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.value_axis_nonstyles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_axis_nonstyles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.series_theme_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.paragraph_styles_))
    return false;
  if (_internal_has_legend_frame()) {
    if (!_impl_.legend_frame_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  if (_internal_has_grid()) {
    if (!_impl_.grid_->IsInitialized()) return false;
  }
  if (_internal_has_mediator()) {
    if (!_impl_.mediator_->IsInitialized()) return false;
  }
  if (_internal_has_chart_style()) {
    if (!_impl_.chart_style_->IsInitialized()) return false;
  }
  if (_internal_has_chart_non_style()) {
    if (!_impl_.chart_non_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_style()) {
    if (!_impl_.legend_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_non_style()) {
    if (!_impl_.legend_non_style_->IsInitialized()) return false;
  }
  if (_internal_has_series_private_styles()) {
    if (!_impl_.series_private_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_non_styles()) {
    if (!_impl_.series_non_styles_->IsInitialized()) return false;
  }
  if (_internal_has_owned_preset()) {
    if (!_impl_.owned_preset_->IsInitialized()) return false;
  }
  return true;
}

void ChartArchive::InternalSwap(ChartArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.value_axis_styles_.InternalSwap(&other->_impl_.value_axis_styles_);
  _impl_.value_axis_nonstyles_.InternalSwap(&other->_impl_.value_axis_nonstyles_);
  _impl_.category_axis_styles_.InternalSwap(&other->_impl_.category_axis_styles_);
  _impl_.category_axis_nonstyles_.InternalSwap(&other->_impl_.category_axis_nonstyles_);
  _impl_.series_theme_styles_.InternalSwap(&other->_impl_.series_theme_styles_);
  _impl_.paragraph_styles_.InternalSwap(&other->_impl_.paragraph_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartArchive, _impl_.multidataset_index_)
      + sizeof(ChartArchive::_impl_.multidataset_index_)
      - PROTOBUF_FIELD_OFFSET(ChartArchive, _impl_.legend_frame_)>(
          reinterpret_cast<char*>(&_impl_.legend_frame_),
          reinterpret_cast<char*>(&other->_impl_.legend_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[1]);
}

// ===================================================================

class ChartMultiDataIndexUpgrade::_Internal {
 public:
};

ChartMultiDataIndexUpgrade::ChartMultiDataIndexUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartMultiDataIndexUpgrade)
}
ChartMultiDataIndexUpgrade::ChartMultiDataIndexUpgrade(const ChartMultiDataIndexUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartMultiDataIndexUpgrade* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartMultiDataIndexUpgrade)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartMultiDataIndexUpgrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartMultiDataIndexUpgrade::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartMultiDataIndexUpgrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[2]);
}

// ===================================================================

class ChartGarlicMinMaxUpgrade::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGarlicMinMaxUpgrade>()._impl_._has_bits_);
  static void set_has_horizontal_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_horizontal_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChartGarlicMinMaxUpgrade::ChartGarlicMinMaxUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGarlicMinMaxUpgrade)
}
ChartGarlicMinMaxUpgrade::ChartGarlicMinMaxUpgrade(const ChartGarlicMinMaxUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGarlicMinMaxUpgrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.horizontal_min_){}
    , decltype(_impl_.horizontal_max_){}
    , decltype(_impl_.value_min_){}
    , decltype(_impl_.value_max_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.horizontal_min_, &from._impl_.horizontal_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_max_) -
    reinterpret_cast<char*>(&_impl_.horizontal_min_)) + sizeof(_impl_.value_max_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGarlicMinMaxUpgrade)
}

inline void ChartGarlicMinMaxUpgrade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.horizontal_min_){0}
    , decltype(_impl_.horizontal_max_){0}
    , decltype(_impl_.value_min_){0}
    , decltype(_impl_.value_max_){0}
  };
}

ChartGarlicMinMaxUpgrade::~ChartGarlicMinMaxUpgrade() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGarlicMinMaxUpgrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGarlicMinMaxUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChartGarlicMinMaxUpgrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGarlicMinMaxUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGarlicMinMaxUpgrade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.horizontal_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_max_) -
        reinterpret_cast<char*>(&_impl_.horizontal_min_)) + sizeof(_impl_.value_max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGarlicMinMaxUpgrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double horizontal_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_horizontal_min(&has_bits);
          _impl_.horizontal_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double horizontal_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_horizontal_max(&has_bits);
          _impl_.horizontal_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double value_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_value_min(&has_bits);
          _impl_.value_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double value_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_value_max(&has_bits);
          _impl_.value_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGarlicMinMaxUpgrade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGarlicMinMaxUpgrade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double horizontal_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_horizontal_min(), target);
  }

  // optional double horizontal_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_horizontal_max(), target);
  }

  // optional double value_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_value_min(), target);
  }

  // optional double value_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_value_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGarlicMinMaxUpgrade)
  return target;
}

size_t ChartGarlicMinMaxUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGarlicMinMaxUpgrade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double horizontal_min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double horizontal_max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double value_min = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double value_max = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGarlicMinMaxUpgrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGarlicMinMaxUpgrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGarlicMinMaxUpgrade::GetClassData() const { return &_class_data_; }


void ChartGarlicMinMaxUpgrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGarlicMinMaxUpgrade*>(&to_msg);
  auto& from = static_cast<const ChartGarlicMinMaxUpgrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGarlicMinMaxUpgrade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.horizontal_min_ = from._impl_.horizontal_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.horizontal_max_ = from._impl_.horizontal_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_min_ = from._impl_.value_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_max_ = from._impl_.value_max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGarlicMinMaxUpgrade::CopyFrom(const ChartGarlicMinMaxUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGarlicMinMaxUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGarlicMinMaxUpgrade::IsInitialized() const {
  return true;
}

void ChartGarlicMinMaxUpgrade::InternalSwap(ChartGarlicMinMaxUpgrade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartGarlicMinMaxUpgrade, _impl_.value_max_)
      + sizeof(ChartGarlicMinMaxUpgrade::_impl_.value_max_)
      - PROTOBUF_FIELD_OFFSET(ChartGarlicMinMaxUpgrade, _impl_.horizontal_min_)>(
          reinterpret_cast<char*>(&_impl_.horizontal_min_),
          reinterpret_cast<char*>(&other->_impl_.horizontal_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGarlicMinMaxUpgrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[3]);
}

// ===================================================================

class ChartGarlicLabelFormatUpgrade::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGarlicLabelFormatUpgrade>()._impl_._has_bits_);
  static void set_has_value_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_use_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_horizontal_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_horizontal_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_horizontal_use_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ChartGarlicLabelFormatUpgrade::ChartGarlicLabelFormatUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGarlicLabelFormatUpgrade)
}
ChartGarlicLabelFormatUpgrade::ChartGarlicLabelFormatUpgrade(const ChartGarlicLabelFormatUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGarlicLabelFormatUpgrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_prefix_){}
    , decltype(_impl_.value_suffix_){}
    , decltype(_impl_.horizontal_prefix_){}
    , decltype(_impl_.horizontal_suffix_){}
    , decltype(_impl_.value_use_separator_){}
    , decltype(_impl_.horizontal_use_separator_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_prefix()) {
    _this->_impl_.value_prefix_.Set(from._internal_value_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_suffix()) {
    _this->_impl_.value_suffix_.Set(from._internal_value_suffix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.horizontal_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_horizontal_prefix()) {
    _this->_impl_.horizontal_prefix_.Set(from._internal_horizontal_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.horizontal_suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_horizontal_suffix()) {
    _this->_impl_.horizontal_suffix_.Set(from._internal_horizontal_suffix(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_use_separator_, &from._impl_.value_use_separator_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.horizontal_use_separator_) -
    reinterpret_cast<char*>(&_impl_.value_use_separator_)) + sizeof(_impl_.horizontal_use_separator_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGarlicLabelFormatUpgrade)
}

inline void ChartGarlicLabelFormatUpgrade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_prefix_){}
    , decltype(_impl_.value_suffix_){}
    , decltype(_impl_.horizontal_prefix_){}
    , decltype(_impl_.horizontal_suffix_){}
    , decltype(_impl_.value_use_separator_){false}
    , decltype(_impl_.horizontal_use_separator_){false}
  };
  _impl_.value_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.horizontal_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.horizontal_suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartGarlicLabelFormatUpgrade::~ChartGarlicLabelFormatUpgrade() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGarlicLabelFormatUpgrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGarlicLabelFormatUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_prefix_.Destroy();
  _impl_.value_suffix_.Destroy();
  _impl_.horizontal_prefix_.Destroy();
  _impl_.horizontal_suffix_.Destroy();
}

void ChartGarlicLabelFormatUpgrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGarlicLabelFormatUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGarlicLabelFormatUpgrade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_suffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.horizontal_prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.horizontal_suffix_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.value_use_separator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.horizontal_use_separator_) -
      reinterpret_cast<char*>(&_impl_.value_use_separator_)) + sizeof(_impl_.horizontal_use_separator_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGarlicLabelFormatUpgrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartGarlicLabelFormatUpgrade.value_prefix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value_suffix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value_suffix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartGarlicLabelFormatUpgrade.value_suffix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool value_use_separator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value_use_separator(&has_bits);
          _impl_.value_use_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string horizontal_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_horizontal_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartGarlicLabelFormatUpgrade.horizontal_prefix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string horizontal_suffix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_horizontal_suffix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartGarlicLabelFormatUpgrade.horizontal_suffix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool horizontal_use_separator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_horizontal_use_separator(&has_bits);
          _impl_.horizontal_use_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGarlicLabelFormatUpgrade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGarlicLabelFormatUpgrade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string value_prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_prefix().data(), static_cast<int>(this->_internal_value_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGarlicLabelFormatUpgrade.value_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value_prefix(), target);
  }

  // optional string value_suffix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_suffix().data(), static_cast<int>(this->_internal_value_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGarlicLabelFormatUpgrade.value_suffix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_suffix(), target);
  }

  // optional bool value_use_separator = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_value_use_separator(), target);
  }

  // optional string horizontal_prefix = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_horizontal_prefix().data(), static_cast<int>(this->_internal_horizontal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGarlicLabelFormatUpgrade.horizontal_prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_horizontal_prefix(), target);
  }

  // optional string horizontal_suffix = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_horizontal_suffix().data(), static_cast<int>(this->_internal_horizontal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGarlicLabelFormatUpgrade.horizontal_suffix");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_horizontal_suffix(), target);
  }

  // optional bool horizontal_use_separator = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_horizontal_use_separator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGarlicLabelFormatUpgrade)
  return target;
}

size_t ChartGarlicLabelFormatUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGarlicLabelFormatUpgrade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string value_prefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_prefix());
    }

    // optional string value_suffix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_suffix());
    }

    // optional string horizontal_prefix = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_horizontal_prefix());
    }

    // optional string horizontal_suffix = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_horizontal_suffix());
    }

    // optional bool value_use_separator = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool horizontal_use_separator = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGarlicLabelFormatUpgrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGarlicLabelFormatUpgrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGarlicLabelFormatUpgrade::GetClassData() const { return &_class_data_; }


void ChartGarlicLabelFormatUpgrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGarlicLabelFormatUpgrade*>(&to_msg);
  auto& from = static_cast<const ChartGarlicLabelFormatUpgrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGarlicLabelFormatUpgrade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value_prefix(from._internal_value_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value_suffix(from._internal_value_suffix());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_horizontal_prefix(from._internal_horizontal_prefix());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_horizontal_suffix(from._internal_horizontal_suffix());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.value_use_separator_ = from._impl_.value_use_separator_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.horizontal_use_separator_ = from._impl_.horizontal_use_separator_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGarlicLabelFormatUpgrade::CopyFrom(const ChartGarlicLabelFormatUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGarlicLabelFormatUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGarlicLabelFormatUpgrade::IsInitialized() const {
  return true;
}

void ChartGarlicLabelFormatUpgrade::InternalSwap(ChartGarlicLabelFormatUpgrade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_prefix_, lhs_arena,
      &other->_impl_.value_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_suffix_, lhs_arena,
      &other->_impl_.value_suffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.horizontal_prefix_, lhs_arena,
      &other->_impl_.horizontal_prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.horizontal_suffix_, lhs_arena,
      &other->_impl_.horizontal_suffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartGarlicLabelFormatUpgrade, _impl_.horizontal_use_separator_)
      + sizeof(ChartGarlicLabelFormatUpgrade::_impl_.horizontal_use_separator_)
      - PROTOBUF_FIELD_OFFSET(ChartGarlicLabelFormatUpgrade, _impl_.value_use_separator_)>(
          reinterpret_cast<char*>(&_impl_.value_use_separator_),
          reinterpret_cast<char*>(&other->_impl_.value_use_separator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGarlicLabelFormatUpgrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[4]);
}

// ===================================================================

class ChartPasteboardAdditionsArchive::_Internal {
 public:
};

ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPasteboardAdditionsArchive)
}
ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(const ChartPasteboardAdditionsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartPasteboardAdditionsArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPasteboardAdditionsArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartPasteboardAdditionsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartPasteboardAdditionsArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartPasteboardAdditionsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[5]);
}

// ===================================================================

class ChartPreserveAppearanceForPresetArchive::_Internal {
 public:
};

ChartPreserveAppearanceForPresetArchive::ChartPreserveAppearanceForPresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPreserveAppearanceForPresetArchive)
}
ChartPreserveAppearanceForPresetArchive::ChartPreserveAppearanceForPresetArchive(const ChartPreserveAppearanceForPresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartPreserveAppearanceForPresetArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPreserveAppearanceForPresetArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartPreserveAppearanceForPresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartPreserveAppearanceForPresetArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartPreserveAppearanceForPresetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[6]);
}

// ===================================================================

class ChartSupportsProportionalBendedCalloutLinesArchive::_Internal {
 public:
};

ChartSupportsProportionalBendedCalloutLinesArchive::ChartSupportsProportionalBendedCalloutLinesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
}
ChartSupportsProportionalBendedCalloutLinesArchive::ChartSupportsProportionalBendedCalloutLinesArchive(const ChartSupportsProportionalBendedCalloutLinesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartSupportsProportionalBendedCalloutLinesArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSupportsProportionalBendedCalloutLinesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSupportsProportionalBendedCalloutLinesArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartSupportsProportionalBendedCalloutLinesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[7]);
}

// ===================================================================

class ChartSupportsRoundedCornersArchive::_Internal {
 public:
};

ChartSupportsRoundedCornersArchive::ChartSupportsRoundedCornersArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSupportsRoundedCornersArchive)
}
ChartSupportsRoundedCornersArchive::ChartSupportsRoundedCornersArchive(const ChartSupportsRoundedCornersArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartSupportsRoundedCornersArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSupportsRoundedCornersArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSupportsRoundedCornersArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSupportsRoundedCornersArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartSupportsRoundedCornersArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[8]);
}

// ===================================================================

class ChartSupportsSeriesPropertySpacingArchive::_Internal {
 public:
};

ChartSupportsSeriesPropertySpacingArchive::ChartSupportsSeriesPropertySpacingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSupportsSeriesPropertySpacingArchive)
}
ChartSupportsSeriesPropertySpacingArchive::ChartSupportsSeriesPropertySpacingArchive(const ChartSupportsSeriesPropertySpacingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartSupportsSeriesPropertySpacingArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSupportsSeriesPropertySpacingArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSupportsSeriesPropertySpacingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSupportsSeriesPropertySpacingArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartSupportsSeriesPropertySpacingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[9]);
}

// ===================================================================

class ChartGridArchive_ChartGridRowColumnIdMap_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGridArchive_ChartGridRowColumnIdMap_Entry>()._impl_._has_bits_);
  static void set_has_uniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ChartGridArchive_ChartGridRowColumnIdMap_Entry::ChartGridArchive_ChartGridRowColumnIdMap_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
}
ChartGridArchive_ChartGridRowColumnIdMap_Entry::ChartGridArchive_ChartGridRowColumnIdMap_Entry(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGridArchive_ChartGridRowColumnIdMap_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uniqueid_){}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uniqueid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uniqueid()) {
    _this->_impl_.uniqueid_.Set(from._internal_uniqueid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
}

inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uniqueid_){}
    , decltype(_impl_.index_){0u}
  };
  _impl_.uniqueid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartGridArchive_ChartGridRowColumnIdMap_Entry::~ChartGridArchive_ChartGridRowColumnIdMap_Entry() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uniqueid_.Destroy();
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.uniqueid_.ClearNonDefaultToEmpty();
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive_ChartGridRowColumnIdMap_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string uniqueId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uniqueid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.uniqueId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGridArchive_ChartGridRowColumnIdMap_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string uniqueId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uniqueid().data(), static_cast<int>(this->_internal_uniqueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.uniqueId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uniqueid(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  return target;
}

size_t ChartGridArchive_ChartGridRowColumnIdMap_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  size_t total_size = 0;

  if (_internal_has_uniqueid()) {
    // required string uniqueId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uniqueid());
  }

  if (_internal_has_index()) {
    // required uint32 index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t ChartGridArchive_ChartGridRowColumnIdMap_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string uniqueId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uniqueid());

    // required uint32 index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGridArchive_ChartGridRowColumnIdMap_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGridArchive_ChartGridRowColumnIdMap_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGridArchive_ChartGridRowColumnIdMap_Entry::GetClassData() const { return &_class_data_; }


void ChartGridArchive_ChartGridRowColumnIdMap_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGridArchive_ChartGridRowColumnIdMap_Entry*>(&to_msg);
  auto& from = static_cast<const ChartGridArchive_ChartGridRowColumnIdMap_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uniqueid(from._internal_uniqueid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::InternalSwap(ChartGridArchive_ChartGridRowColumnIdMap_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uniqueid_, lhs_arena,
      &other->_impl_.uniqueid_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive_ChartGridRowColumnIdMap_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[10]);
}

// ===================================================================

class ChartGridArchive_ChartGridRowColumnIdMap::_Internal {
 public:
};

ChartGridArchive_ChartGridRowColumnIdMap::ChartGridArchive_ChartGridRowColumnIdMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
}
ChartGridArchive_ChartGridRowColumnIdMap::ChartGridArchive_ChartGridRowColumnIdMap(const ChartGridArchive_ChartGridRowColumnIdMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGridArchive_ChartGridRowColumnIdMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.row_id_map_){from._impl_.row_id_map_}
    , decltype(_impl_.column_id_map_){from._impl_.column_id_map_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
}

inline void ChartGridArchive_ChartGridRowColumnIdMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.row_id_map_){arena}
    , decltype(_impl_.column_id_map_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChartGridArchive_ChartGridRowColumnIdMap::~ChartGridArchive_ChartGridRowColumnIdMap() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGridArchive_ChartGridRowColumnIdMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_id_map_.~RepeatedPtrField();
  _impl_.column_id_map_.~RepeatedPtrField();
}

void ChartGridArchive_ChartGridRowColumnIdMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGridArchive_ChartGridRowColumnIdMap::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_id_map_.Clear();
  _impl_.column_id_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive_ChartGridRowColumnIdMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_id_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_id_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGridArchive_ChartGridRowColumnIdMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_id_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_id_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_id_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_id_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  return target;
}

size_t ChartGridArchive_ChartGridRowColumnIdMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
  total_size += 1UL * this->_internal_row_id_map_size();
  for (const auto& msg : this->_impl_.row_id_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
  total_size += 1UL * this->_internal_column_id_map_size();
  for (const auto& msg : this->_impl_.column_id_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGridArchive_ChartGridRowColumnIdMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGridArchive_ChartGridRowColumnIdMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGridArchive_ChartGridRowColumnIdMap::GetClassData() const { return &_class_data_; }


void ChartGridArchive_ChartGridRowColumnIdMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGridArchive_ChartGridRowColumnIdMap*>(&to_msg);
  auto& from = static_cast<const ChartGridArchive_ChartGridRowColumnIdMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_id_map_.MergeFrom(from._impl_.row_id_map_);
  _this->_impl_.column_id_map_.MergeFrom(from._impl_.column_id_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGridArchive_ChartGridRowColumnIdMap::CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_ChartGridRowColumnIdMap::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_id_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_id_map_))
    return false;
  return true;
}

void ChartGridArchive_ChartGridRowColumnIdMap::InternalSwap(ChartGridArchive_ChartGridRowColumnIdMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.row_id_map_.InternalSwap(&other->_impl_.row_id_map_);
  _impl_.column_id_map_.InternalSwap(&other->_impl_.column_id_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive_ChartGridRowColumnIdMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[11]);
}

// ===================================================================

class ChartGridArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGridArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap& idmap(const ChartGridArchive* msg);
  static void set_has_idmap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap&
ChartGridArchive::_Internal::idmap(const ChartGridArchive* msg) {
  return *msg->_impl_.idmap_;
}
void ChartGridArchive::clear_grid_row() {
  _impl_.grid_row_.Clear();
}
ChartGridArchive::ChartGridArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartGridArchive)
}
ChartGridArchive::ChartGridArchive(const ChartGridArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGridArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_name_){from._impl_.row_name_}
    , decltype(_impl_.column_name_){from._impl_.column_name_}
    , decltype(_impl_.grid_row_){from._impl_.grid_row_}
    , decltype(_impl_.idmap_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_idmap()) {
    _this->_impl_.idmap_ = new ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap(*from._impl_.idmap_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartGridArchive)
}

inline void ChartGridArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_name_){arena}
    , decltype(_impl_.column_name_){arena}
    , decltype(_impl_.grid_row_){arena}
    , decltype(_impl_.idmap_){nullptr}
  };
}

ChartGridArchive::~ChartGridArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartGridArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGridArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_name_.~RepeatedPtrField();
  _impl_.column_name_.~RepeatedPtrField();
  _impl_.grid_row_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.idmap_;
}

void ChartGridArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGridArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartGridArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_name_.Clear();
  _impl_.column_name_.Clear();
  _impl_.grid_row_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.idmap_ != nullptr);
    _impl_.idmap_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string row_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_row_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.ChartGridArchive.row_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.ChartGridArchive.column_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.GridRow grid_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grid_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_idmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGridArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartGridArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string row_name = 1;
  for (int i = 0, n = this->_internal_row_name_size(); i < n; i++) {
    const auto& s = this->_internal_row_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGridArchive.row_name");
    target = stream->WriteString(1, s, target);
  }

  // repeated string column_name = 2;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartGridArchive.column_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated .TSCH.GridRow grid_row = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grid_row_size()); i < n; i++) {
    const auto& repfield = this->_internal_grid_row(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::idmap(this),
        _Internal::idmap(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartGridArchive)
  return target;
}

size_t ChartGridArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartGridArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string row_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.row_name_.size());
  for (int i = 0, n = _impl_.row_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.row_name_.Get(i));
  }

  // repeated string column_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_name_.size());
  for (int i = 0, n = _impl_.column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_name_.Get(i));
  }

  // repeated .TSCH.GridRow grid_row = 3;
  total_size += 1UL * this->_internal_grid_row_size();
  for (const auto& msg : this->_impl_.grid_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.idmap_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGridArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGridArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGridArchive::GetClassData() const { return &_class_data_; }


void ChartGridArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGridArchive*>(&to_msg);
  auto& from = static_cast<const ChartGridArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartGridArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_name_.MergeFrom(from._impl_.row_name_);
  _this->_impl_.column_name_.MergeFrom(from._impl_.column_name_);
  _this->_impl_.grid_row_.MergeFrom(from._impl_.grid_row_);
  if (from._internal_has_idmap()) {
    _this->_internal_mutable_idmap()->::TSCH::ChartGridArchive_ChartGridRowColumnIdMap::MergeFrom(
        from._internal_idmap());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGridArchive::CopyFrom(const ChartGridArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartGridArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive::IsInitialized() const {
  if (_internal_has_idmap()) {
    if (!_impl_.idmap_->IsInitialized()) return false;
  }
  return true;
}

void ChartGridArchive::InternalSwap(ChartGridArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_name_.InternalSwap(&other->_impl_.row_name_);
  _impl_.column_name_.InternalSwap(&other->_impl_.column_name_);
  _impl_.grid_row_.InternalSwap(&other->_impl_.grid_row_);
  swap(_impl_.idmap_, other->_impl_.idmap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[12]);
}

// ===================================================================

class ChartMediatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartMediatorArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& info(const ChartMediatorArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartMediatorArchive::_Internal::info(const ChartMediatorArchive* msg) {
  return *msg->_impl_.info_;
}
void ChartMediatorArchive::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartMediatorArchive::ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartMediatorArchive)
}
ChartMediatorArchive::ChartMediatorArchive(const ChartMediatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartMediatorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_series_indexes_){from._impl_.local_series_indexes_}
    , decltype(_impl_.remote_series_indexes_){from._impl_.remote_series_indexes_}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartMediatorArchive)
}

inline void ChartMediatorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_series_indexes_){arena}
    , decltype(_impl_.remote_series_indexes_){arena}
    , decltype(_impl_.info_){nullptr}
  };
}

ChartMediatorArchive::~ChartMediatorArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartMediatorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartMediatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_series_indexes_.~RepeatedField();
  _impl_.remote_series_indexes_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void ChartMediatorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartMediatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartMediatorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_series_indexes_.Clear();
  _impl_.remote_series_indexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartMediatorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 local_series_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_local_series_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_local_series_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 remote_series_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_remote_series_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_remote_series_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartMediatorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartMediatorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 local_series_indexes = 2;
  for (int i = 0, n = this->_internal_local_series_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_series_indexes(i), target);
  }

  // repeated uint32 remote_series_indexes = 3;
  for (int i = 0, n = this->_internal_remote_series_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_remote_series_indexes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartMediatorArchive)
  return target;
}

size_t ChartMediatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartMediatorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 local_series_indexes = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.local_series_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_local_series_indexes_size());
    total_size += data_size;
  }

  // repeated uint32 remote_series_indexes = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.remote_series_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_remote_series_indexes_size());
    total_size += data_size;
  }

  // optional .TSP.Reference info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartMediatorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartMediatorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartMediatorArchive::GetClassData() const { return &_class_data_; }


void ChartMediatorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartMediatorArchive*>(&to_msg);
  auto& from = static_cast<const ChartMediatorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartMediatorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.local_series_indexes_.MergeFrom(from._impl_.local_series_indexes_);
  _this->_impl_.remote_series_indexes_.MergeFrom(from._impl_.remote_series_indexes_);
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartMediatorArchive::CopyFrom(const ChartMediatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartMediatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorArchive::IsInitialized() const {
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void ChartMediatorArchive::InternalSwap(ChartMediatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.local_series_indexes_.InternalSwap(&other->_impl_.local_series_indexes_);
  _impl_.remote_series_indexes_.InternalSwap(&other->_impl_.remote_series_indexes_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartMediatorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[13]);
}

// ===================================================================

class ChartFillSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartFillSetArchive>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lookup_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_of_theme_series_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

void ChartFillSetArchive::clear_series_styles() {
  _impl_.series_styles_.Clear();
}
ChartFillSetArchive::ChartFillSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartFillSetArchive)
}
ChartFillSetArchive::ChartFillSetArchive(const ChartFillSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartFillSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.series_styles_){from._impl_.series_styles_}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.lookup_string_){}
    , decltype(_impl_.number_of_theme_series_styles_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lookup_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lookup_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lookup_string()) {
    _this->_impl_.lookup_string_.Set(from._internal_lookup_string(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.number_of_theme_series_styles_ = from._impl_.number_of_theme_series_styles_;
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartFillSetArchive)
}

inline void ChartFillSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.series_styles_){arena}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.lookup_string_){}
    , decltype(_impl_.number_of_theme_series_styles_){0u}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lookup_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lookup_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartFillSetArchive::~ChartFillSetArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartFillSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartFillSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.series_styles_.~RepeatedPtrField();
  _impl_.identifier_.Destroy();
  _impl_.lookup_string_.Destroy();
}

void ChartFillSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartFillSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartFillSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.series_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.lookup_string_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.number_of_theme_series_styles_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartFillSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartFillSetArchive.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string lookup_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lookup_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartFillSetArchive.lookup_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_theme_series_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_theme_series_styles(&has_bits);
          _impl_.number_of_theme_series_styles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartFillSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartFillSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartFillSetArchive.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // required string lookup_string = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lookup_string().data(), static_cast<int>(this->_internal_lookup_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartFillSetArchive.lookup_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lookup_string(), target);
  }

  // optional uint32 number_of_theme_series_styles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_theme_series_styles(), target);
  }

  // repeated .TSP.Reference series_styles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_series_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_series_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartFillSetArchive)
  return target;
}

size_t ChartFillSetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.ChartFillSetArchive)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_lookup_string()) {
    // required string lookup_string = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lookup_string());
  }

  return total_size;
}
size_t ChartFillSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartFillSetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required string lookup_string = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lookup_string());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference series_styles = 4;
  total_size += 1UL * this->_internal_series_styles_size();
  for (const auto& msg : this->_impl_.series_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 number_of_theme_series_styles = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_theme_series_styles());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartFillSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartFillSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartFillSetArchive::GetClassData() const { return &_class_data_; }


void ChartFillSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartFillSetArchive*>(&to_msg);
  auto& from = static_cast<const ChartFillSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartFillSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.series_styles_.MergeFrom(from._impl_.series_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_lookup_string(from._internal_lookup_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.number_of_theme_series_styles_ = from._impl_.number_of_theme_series_styles_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartFillSetArchive::CopyFrom(const ChartFillSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartFillSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartFillSetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.series_styles_))
    return false;
  return true;
}

void ChartFillSetArchive::InternalSwap(ChartFillSetArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.series_styles_.InternalSwap(&other->_impl_.series_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lookup_string_, lhs_arena,
      &other->_impl_.lookup_string_, rhs_arena
  );
  swap(_impl_.number_of_theme_series_styles_, other->_impl_.number_of_theme_series_styles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartFillSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[14]);
}

// ===================================================================

class ChartStylePreset::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartStylePreset>()._impl_._has_bits_);
  static const ::TSP::Reference& chart_style(const ChartStylePreset* msg);
  static void set_has_chart_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& legend_style(const ChartStylePreset* msg);
  static void set_has_legend_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartStylePreset::_Internal::chart_style(const ChartStylePreset* msg) {
  return *msg->_impl_.chart_style_;
}
const ::TSP::Reference&
ChartStylePreset::_Internal::legend_style(const ChartStylePreset* msg) {
  return *msg->_impl_.legend_style_;
}
void ChartStylePreset::clear_chart_style() {
  if (_impl_.chart_style_ != nullptr) _impl_.chart_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartStylePreset::clear_legend_style() {
  if (_impl_.legend_style_ != nullptr) _impl_.legend_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartStylePreset::clear_value_axis_styles() {
  _impl_.value_axis_styles_.Clear();
}
void ChartStylePreset::clear_category_axis_styles() {
  _impl_.category_axis_styles_.Clear();
}
void ChartStylePreset::clear_series_styles() {
  _impl_.series_styles_.Clear();
}
void ChartStylePreset::clear_paragraph_styles() {
  _impl_.paragraph_styles_.Clear();
}
ChartStylePreset::ChartStylePreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartStylePreset)
}
ChartStylePreset::ChartStylePreset(const ChartStylePreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartStylePreset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){from._impl_.value_axis_styles_}
    , decltype(_impl_.category_axis_styles_){from._impl_.category_axis_styles_}
    , decltype(_impl_.series_styles_){from._impl_.series_styles_}
    , decltype(_impl_.paragraph_styles_){from._impl_.paragraph_styles_}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_chart_style()) {
    _this->_impl_.chart_style_ = new ::TSP::Reference(*from._impl_.chart_style_);
  }
  if (from._internal_has_legend_style()) {
    _this->_impl_.legend_style_ = new ::TSP::Reference(*from._impl_.legend_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartStylePreset)
}

inline void ChartStylePreset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){arena}
    , decltype(_impl_.category_axis_styles_){arena}
    , decltype(_impl_.series_styles_){arena}
    , decltype(_impl_.paragraph_styles_){arena}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartStylePreset::~ChartStylePreset() {
  // @@protoc_insertion_point(destructor:TSCH.ChartStylePreset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartStylePreset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.value_axis_styles_.~RepeatedPtrField();
  _impl_.category_axis_styles_.~RepeatedPtrField();
  _impl_.series_styles_.~RepeatedPtrField();
  _impl_.paragraph_styles_.~RepeatedPtrField();
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chart_style_;
  if (this != internal_default_instance()) delete _impl_.legend_style_;
}

void ChartStylePreset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartStylePreset::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartStylePreset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.value_axis_styles_.Clear();
  _impl_.category_axis_styles_.Clear();
  _impl_.series_styles_.Clear();
  _impl_.paragraph_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chart_style_ != nullptr);
      _impl_.chart_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.legend_style_ != nullptr);
      _impl_.legend_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartStylePreset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((80000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartStylePreset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartStylePreset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart_style = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart_style(this),
        _Internal::chart_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_style = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::legend_style(this),
        _Internal::legend_style(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference value_axis_styles = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference category_axis_styles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference series_styles = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_series_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_series_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paragraph_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_paragraph_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes uuid = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_uuid(), target);
  }

  // Extension range [10000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartStylePreset)
  return target;
}

size_t ChartStylePreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartStylePreset)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference value_axis_styles = 3;
  total_size += 1UL * this->_internal_value_axis_styles_size();
  for (const auto& msg : this->_impl_.value_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_styles = 4;
  total_size += 1UL * this->_internal_category_axis_styles_size();
  for (const auto& msg : this->_impl_.category_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference series_styles = 5;
  total_size += 1UL * this->_internal_series_styles_size();
  for (const auto& msg : this->_impl_.series_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  total_size += 1UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->_impl_.paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes uuid = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid());
    }

    // optional .TSP.Reference chart_style = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_style_);
    }

    // optional .TSP.Reference legend_style = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_style_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartStylePreset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartStylePreset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartStylePreset::GetClassData() const { return &_class_data_; }


void ChartStylePreset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartStylePreset*>(&to_msg);
  auto& from = static_cast<const ChartStylePreset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartStylePreset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_axis_styles_.MergeFrom(from._impl_.value_axis_styles_);
  _this->_impl_.category_axis_styles_.MergeFrom(from._impl_.category_axis_styles_);
  _this->_impl_.series_styles_.MergeFrom(from._impl_.series_styles_);
  _this->_impl_.paragraph_styles_.MergeFrom(from._impl_.paragraph_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chart_style()->::TSP::Reference::MergeFrom(
          from._internal_chart_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_legend_style()->::TSP::Reference::MergeFrom(
          from._internal_legend_style());
    }
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartStylePreset::CopyFrom(const ChartStylePreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartStylePreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStylePreset::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.value_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.series_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.paragraph_styles_))
    return false;
  if (_internal_has_chart_style()) {
    if (!_impl_.chart_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_style()) {
    if (!_impl_.legend_style_->IsInitialized()) return false;
  }
  return true;
}

void ChartStylePreset::InternalSwap(ChartStylePreset* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.value_axis_styles_.InternalSwap(&other->_impl_.value_axis_styles_);
  _impl_.category_axis_styles_.InternalSwap(&other->_impl_.category_axis_styles_);
  _impl_.series_styles_.InternalSwap(&other->_impl_.series_styles_);
  _impl_.paragraph_styles_.InternalSwap(&other->_impl_.paragraph_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartStylePreset, _impl_.legend_style_)
      + sizeof(ChartStylePreset::_impl_.legend_style_)
      - PROTOBUF_FIELD_OFFSET(ChartStylePreset, _impl_.chart_style_)>(
          reinterpret_cast<char*>(&_impl_.chart_style_),
          reinterpret_cast<char*>(&other->_impl_.chart_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartStylePreset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[15]);
}

// ===================================================================

class ChartPresetsArchive::_Internal {
 public:
};

void ChartPresetsArchive::clear_chart_presets() {
  _impl_.chart_presets_.Clear();
}
ChartPresetsArchive::ChartPresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPresetsArchive)
}
ChartPresetsArchive::ChartPresetsArchive(const ChartPresetsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartPresetsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chart_presets_){from._impl_.chart_presets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPresetsArchive)
}

inline void ChartPresetsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chart_presets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChartPresetsArchive::~ChartPresetsArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartPresetsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartPresetsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chart_presets_.~RepeatedPtrField();
}

void ChartPresetsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartPresetsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartPresetsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chart_presets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartPresetsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference chart_presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartPresetsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartPresetsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference chart_presets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chart_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_chart_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartPresetsArchive)
  return target;
}

size_t ChartPresetsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartPresetsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference chart_presets = 1;
  total_size += 1UL * this->_internal_chart_presets_size();
  for (const auto& msg : this->_impl_.chart_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartPresetsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartPresetsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartPresetsArchive::GetClassData() const { return &_class_data_; }


void ChartPresetsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartPresetsArchive*>(&to_msg);
  auto& from = static_cast<const ChartPresetsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartPresetsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chart_presets_.MergeFrom(from._impl_.chart_presets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartPresetsArchive::CopyFrom(const ChartPresetsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartPresetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartPresetsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chart_presets_))
    return false;
  return true;
}

void ChartPresetsArchive::InternalSwap(ChartPresetsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chart_presets_.InternalSwap(&other->_impl_.chart_presets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartPresetsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[16]);
}

// ===================================================================

class PropertyValueStorageContainerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyValueStorageContainerArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& chart_style(const PropertyValueStorageContainerArchive* msg);
  static void set_has_chart_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& chart_nonstyle(const PropertyValueStorageContainerArchive* msg);
  static void set_has_chart_nonstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& legend_style(const PropertyValueStorageContainerArchive* msg);
  static void set_has_legend_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& legend_nonstyle(const PropertyValueStorageContainerArchive* msg);
  static void set_has_legend_nonstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::SparseReferenceArray& value_axis_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_value_axis_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::SparseReferenceArray& value_axis_nonstyles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_value_axis_nonstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::SparseReferenceArray& category_axis_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_category_axis_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::SparseReferenceArray& category_axis_nonstyles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_category_axis_nonstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::SparseReferenceArray& series_theme_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_series_theme_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::SparseReferenceArray& series_private_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_series_private_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::SparseReferenceArray& series_nonstyles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_series_nonstyles(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::SparseReferenceArray& paragraph_styles(const PropertyValueStorageContainerArchive* msg);
  static void set_has_paragraph_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::chart_style(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.chart_style_;
}
const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::chart_nonstyle(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.chart_nonstyle_;
}
const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::legend_style(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.legend_style_;
}
const ::TSP::Reference&
PropertyValueStorageContainerArchive::_Internal::legend_nonstyle(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.legend_nonstyle_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::value_axis_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.value_axis_styles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::value_axis_nonstyles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.value_axis_nonstyles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::category_axis_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.category_axis_styles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::category_axis_nonstyles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.category_axis_nonstyles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::series_theme_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.series_theme_styles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::series_private_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.series_private_styles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::series_nonstyles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.series_nonstyles_;
}
const ::TSP::SparseReferenceArray&
PropertyValueStorageContainerArchive::_Internal::paragraph_styles(const PropertyValueStorageContainerArchive* msg) {
  return *msg->_impl_.paragraph_styles_;
}
void PropertyValueStorageContainerArchive::clear_chart_style() {
  if (_impl_.chart_style_ != nullptr) _impl_.chart_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PropertyValueStorageContainerArchive::clear_chart_nonstyle() {
  if (_impl_.chart_nonstyle_ != nullptr) _impl_.chart_nonstyle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PropertyValueStorageContainerArchive::clear_legend_style() {
  if (_impl_.legend_style_ != nullptr) _impl_.legend_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PropertyValueStorageContainerArchive::clear_legend_nonstyle() {
  if (_impl_.legend_nonstyle_ != nullptr) _impl_.legend_nonstyle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void PropertyValueStorageContainerArchive::clear_value_axis_styles() {
  if (_impl_.value_axis_styles_ != nullptr) _impl_.value_axis_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void PropertyValueStorageContainerArchive::clear_value_axis_nonstyles() {
  if (_impl_.value_axis_nonstyles_ != nullptr) _impl_.value_axis_nonstyles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void PropertyValueStorageContainerArchive::clear_category_axis_styles() {
  if (_impl_.category_axis_styles_ != nullptr) _impl_.category_axis_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void PropertyValueStorageContainerArchive::clear_category_axis_nonstyles() {
  if (_impl_.category_axis_nonstyles_ != nullptr) _impl_.category_axis_nonstyles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void PropertyValueStorageContainerArchive::clear_series_theme_styles() {
  if (_impl_.series_theme_styles_ != nullptr) _impl_.series_theme_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void PropertyValueStorageContainerArchive::clear_series_private_styles() {
  if (_impl_.series_private_styles_ != nullptr) _impl_.series_private_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void PropertyValueStorageContainerArchive::clear_series_nonstyles() {
  if (_impl_.series_nonstyles_ != nullptr) _impl_.series_nonstyles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void PropertyValueStorageContainerArchive::clear_paragraph_styles() {
  if (_impl_.paragraph_styles_ != nullptr) _impl_.paragraph_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PropertyValueStorageContainerArchive)
}
PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(const PropertyValueStorageContainerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyValueStorageContainerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.chart_nonstyle_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
    , decltype(_impl_.legend_nonstyle_){nullptr}
    , decltype(_impl_.value_axis_styles_){nullptr}
    , decltype(_impl_.value_axis_nonstyles_){nullptr}
    , decltype(_impl_.category_axis_styles_){nullptr}
    , decltype(_impl_.category_axis_nonstyles_){nullptr}
    , decltype(_impl_.series_theme_styles_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_nonstyles_){nullptr}
    , decltype(_impl_.paragraph_styles_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if (from._internal_has_chart_style()) {
    _this->_impl_.chart_style_ = new ::TSP::Reference(*from._impl_.chart_style_);
  }
  if (from._internal_has_chart_nonstyle()) {
    _this->_impl_.chart_nonstyle_ = new ::TSP::Reference(*from._impl_.chart_nonstyle_);
  }
  if (from._internal_has_legend_style()) {
    _this->_impl_.legend_style_ = new ::TSP::Reference(*from._impl_.legend_style_);
  }
  if (from._internal_has_legend_nonstyle()) {
    _this->_impl_.legend_nonstyle_ = new ::TSP::Reference(*from._impl_.legend_nonstyle_);
  }
  if (from._internal_has_value_axis_styles()) {
    _this->_impl_.value_axis_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.value_axis_styles_);
  }
  if (from._internal_has_value_axis_nonstyles()) {
    _this->_impl_.value_axis_nonstyles_ = new ::TSP::SparseReferenceArray(*from._impl_.value_axis_nonstyles_);
  }
  if (from._internal_has_category_axis_styles()) {
    _this->_impl_.category_axis_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.category_axis_styles_);
  }
  if (from._internal_has_category_axis_nonstyles()) {
    _this->_impl_.category_axis_nonstyles_ = new ::TSP::SparseReferenceArray(*from._impl_.category_axis_nonstyles_);
  }
  if (from._internal_has_series_theme_styles()) {
    _this->_impl_.series_theme_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.series_theme_styles_);
  }
  if (from._internal_has_series_private_styles()) {
    _this->_impl_.series_private_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.series_private_styles_);
  }
  if (from._internal_has_series_nonstyles()) {
    _this->_impl_.series_nonstyles_ = new ::TSP::SparseReferenceArray(*from._impl_.series_nonstyles_);
  }
  if (from._internal_has_paragraph_styles()) {
    _this->_impl_.paragraph_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.paragraph_styles_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.PropertyValueStorageContainerArchive)
}

inline void PropertyValueStorageContainerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_style_){nullptr}
    , decltype(_impl_.chart_nonstyle_){nullptr}
    , decltype(_impl_.legend_style_){nullptr}
    , decltype(_impl_.legend_nonstyle_){nullptr}
    , decltype(_impl_.value_axis_styles_){nullptr}
    , decltype(_impl_.value_axis_nonstyles_){nullptr}
    , decltype(_impl_.category_axis_styles_){nullptr}
    , decltype(_impl_.category_axis_nonstyles_){nullptr}
    , decltype(_impl_.series_theme_styles_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_nonstyles_){nullptr}
    , decltype(_impl_.paragraph_styles_){nullptr}
  };
}

PropertyValueStorageContainerArchive::~PropertyValueStorageContainerArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PropertyValueStorageContainerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyValueStorageContainerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  if (this != internal_default_instance()) delete _impl_.chart_style_;
  if (this != internal_default_instance()) delete _impl_.chart_nonstyle_;
  if (this != internal_default_instance()) delete _impl_.legend_style_;
  if (this != internal_default_instance()) delete _impl_.legend_nonstyle_;
  if (this != internal_default_instance()) delete _impl_.value_axis_styles_;
  if (this != internal_default_instance()) delete _impl_.value_axis_nonstyles_;
  if (this != internal_default_instance()) delete _impl_.category_axis_styles_;
  if (this != internal_default_instance()) delete _impl_.category_axis_nonstyles_;
  if (this != internal_default_instance()) delete _impl_.series_theme_styles_;
  if (this != internal_default_instance()) delete _impl_.series_private_styles_;
  if (this != internal_default_instance()) delete _impl_.series_nonstyles_;
  if (this != internal_default_instance()) delete _impl_.paragraph_styles_;
}

void PropertyValueStorageContainerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyValueStorageContainerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PropertyValueStorageContainerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.chart_style_ != nullptr);
      _impl_.chart_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chart_nonstyle_ != nullptr);
      _impl_.chart_nonstyle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.legend_style_ != nullptr);
      _impl_.legend_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.legend_nonstyle_ != nullptr);
      _impl_.legend_nonstyle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.value_axis_styles_ != nullptr);
      _impl_.value_axis_styles_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.value_axis_nonstyles_ != nullptr);
      _impl_.value_axis_nonstyles_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.category_axis_styles_ != nullptr);
      _impl_.category_axis_styles_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.category_axis_nonstyles_ != nullptr);
      _impl_.category_axis_nonstyles_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.series_theme_styles_ != nullptr);
      _impl_.series_theme_styles_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.series_private_styles_ != nullptr);
      _impl_.series_private_styles_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.series_nonstyles_ != nullptr);
      _impl_.series_nonstyles_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.paragraph_styles_ != nullptr);
      _impl_.paragraph_styles_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyValueStorageContainerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_nonstyle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_nonstyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference legend_nonstyle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_nonstyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray value_axis_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_axis_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray value_axis_nonstyles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_axis_nonstyles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray category_axis_styles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_axis_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray category_axis_nonstyles = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_axis_nonstyles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_theme_styles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_theme_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_private_styles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_private_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_nonstyles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_nonstyles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray paragraph_styles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_paragraph_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((80000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyValueStorageContainerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PropertyValueStorageContainerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart_style(this),
        _Internal::chart_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference chart_nonstyle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chart_nonstyle(this),
        _Internal::chart_nonstyle(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::legend_style(this),
        _Internal::legend_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference legend_nonstyle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::legend_nonstyle(this),
        _Internal::legend_nonstyle(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray value_axis_styles = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::value_axis_styles(this),
        _Internal::value_axis_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray value_axis_nonstyles = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::value_axis_nonstyles(this),
        _Internal::value_axis_nonstyles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray category_axis_styles = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::category_axis_styles(this),
        _Internal::category_axis_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray category_axis_nonstyles = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::category_axis_nonstyles(this),
        _Internal::category_axis_nonstyles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_theme_styles = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::series_theme_styles(this),
        _Internal::series_theme_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_private_styles = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::series_private_styles(this),
        _Internal::series_private_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_nonstyles = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::series_nonstyles(this),
        _Internal::series_nonstyles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray paragraph_styles = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::paragraph_styles(this),
        _Internal::paragraph_styles(this).GetCachedSize(), target, stream);
  }

  // Extension range [10000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PropertyValueStorageContainerArchive)
  return target;
}

size_t PropertyValueStorageContainerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PropertyValueStorageContainerArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference chart_style = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_style_);
    }

    // optional .TSP.Reference chart_nonstyle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_nonstyle_);
    }

    // optional .TSP.Reference legend_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_style_);
    }

    // optional .TSP.Reference legend_nonstyle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_nonstyle_);
    }

    // optional .TSP.SparseReferenceArray value_axis_styles = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_axis_styles_);
    }

    // optional .TSP.SparseReferenceArray value_axis_nonstyles = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_axis_nonstyles_);
    }

    // optional .TSP.SparseReferenceArray category_axis_styles = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_axis_styles_);
    }

    // optional .TSP.SparseReferenceArray category_axis_nonstyles = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_axis_nonstyles_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSP.SparseReferenceArray series_theme_styles = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_theme_styles_);
    }

    // optional .TSP.SparseReferenceArray series_private_styles = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_private_styles_);
    }

    // optional .TSP.SparseReferenceArray series_nonstyles = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_nonstyles_);
    }

    // optional .TSP.SparseReferenceArray paragraph_styles = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.paragraph_styles_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyValueStorageContainerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyValueStorageContainerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyValueStorageContainerArchive::GetClassData() const { return &_class_data_; }


void PropertyValueStorageContainerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyValueStorageContainerArchive*>(&to_msg);
  auto& from = static_cast<const PropertyValueStorageContainerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PropertyValueStorageContainerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_chart_style()->::TSP::Reference::MergeFrom(
          from._internal_chart_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chart_nonstyle()->::TSP::Reference::MergeFrom(
          from._internal_chart_nonstyle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_legend_style()->::TSP::Reference::MergeFrom(
          from._internal_legend_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_legend_nonstyle()->::TSP::Reference::MergeFrom(
          from._internal_legend_nonstyle());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_value_axis_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_value_axis_styles());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_value_axis_nonstyles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_value_axis_nonstyles());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_category_axis_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_category_axis_styles());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_category_axis_nonstyles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_category_axis_nonstyles());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_series_theme_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_series_theme_styles());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_series_private_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_series_private_styles());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_series_nonstyles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_series_nonstyles());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_paragraph_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_paragraph_styles());
    }
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyValueStorageContainerArchive::CopyFrom(const PropertyValueStorageContainerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PropertyValueStorageContainerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValueStorageContainerArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_chart_style()) {
    if (!_impl_.chart_style_->IsInitialized()) return false;
  }
  if (_internal_has_chart_nonstyle()) {
    if (!_impl_.chart_nonstyle_->IsInitialized()) return false;
  }
  if (_internal_has_legend_style()) {
    if (!_impl_.legend_style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_nonstyle()) {
    if (!_impl_.legend_nonstyle_->IsInitialized()) return false;
  }
  if (_internal_has_value_axis_styles()) {
    if (!_impl_.value_axis_styles_->IsInitialized()) return false;
  }
  if (_internal_has_value_axis_nonstyles()) {
    if (!_impl_.value_axis_nonstyles_->IsInitialized()) return false;
  }
  if (_internal_has_category_axis_styles()) {
    if (!_impl_.category_axis_styles_->IsInitialized()) return false;
  }
  if (_internal_has_category_axis_nonstyles()) {
    if (!_impl_.category_axis_nonstyles_->IsInitialized()) return false;
  }
  if (_internal_has_series_theme_styles()) {
    if (!_impl_.series_theme_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_private_styles()) {
    if (!_impl_.series_private_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_nonstyles()) {
    if (!_impl_.series_nonstyles_->IsInitialized()) return false;
  }
  if (_internal_has_paragraph_styles()) {
    if (!_impl_.paragraph_styles_->IsInitialized()) return false;
  }
  return true;
}

void PropertyValueStorageContainerArchive::InternalSwap(PropertyValueStorageContainerArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropertyValueStorageContainerArchive, _impl_.paragraph_styles_)
      + sizeof(PropertyValueStorageContainerArchive::_impl_.paragraph_styles_)
      - PROTOBUF_FIELD_OFFSET(PropertyValueStorageContainerArchive, _impl_.chart_style_)>(
          reinterpret_cast<char*>(&_impl_.chart_style_),
          reinterpret_cast<char*>(&other->_impl_.chart_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyValueStorageContainerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[17]);
}

// ===================================================================

class StylePasteboardDataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StylePasteboardDataArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const StylePasteboardDataArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::PropertyValueStorageContainerArchive& style_network(const StylePasteboardDataArchive* msg);
  static void set_has_style_network(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_copied_from_entire_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSS::StyleArchive&
StylePasteboardDataArchive::_Internal::super(const StylePasteboardDataArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCH::PropertyValueStorageContainerArchive&
StylePasteboardDataArchive::_Internal::style_network(const StylePasteboardDataArchive* msg) {
  return *msg->_impl_.style_network_;
}
void StylePasteboardDataArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StylePasteboardDataArchive::StylePasteboardDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.StylePasteboardDataArchive)
}
StylePasteboardDataArchive::StylePasteboardDataArchive(const StylePasteboardDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StylePasteboardDataArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.style_network_){nullptr}
    , decltype(_impl_.copied_from_entire_chart_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_style_network()) {
    _this->_impl_.style_network_ = new ::TSCH::PropertyValueStorageContainerArchive(*from._impl_.style_network_);
  }
  _this->_impl_.copied_from_entire_chart_ = from._impl_.copied_from_entire_chart_;
  // @@protoc_insertion_point(copy_constructor:TSCH.StylePasteboardDataArchive)
}

inline void StylePasteboardDataArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.style_network_){nullptr}
    , decltype(_impl_.copied_from_entire_chart_){false}
  };
}

StylePasteboardDataArchive::~StylePasteboardDataArchive() {
  // @@protoc_insertion_point(destructor:TSCH.StylePasteboardDataArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StylePasteboardDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.style_network_;
}

void StylePasteboardDataArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StylePasteboardDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.StylePasteboardDataArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.style_network_ != nullptr);
      _impl_.style_network_->Clear();
    }
  }
  _impl_.copied_from_entire_chart_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StylePasteboardDataArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_network(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool copied_from_entire_chart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_copied_from_entire_chart(&has_bits);
          _impl_.copied_from_entire_chart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StylePasteboardDataArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.StylePasteboardDataArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::style_network(this),
        _Internal::style_network(this).GetCachedSize(), target, stream);
  }

  // optional bool copied_from_entire_chart = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_copied_from_entire_chart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.StylePasteboardDataArchive)
  return target;
}

size_t StylePasteboardDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.StylePasteboardDataArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSS.StyleArchive super = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

    // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_network_);
    }

    // optional bool copied_from_entire_chart = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StylePasteboardDataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StylePasteboardDataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StylePasteboardDataArchive::GetClassData() const { return &_class_data_; }


void StylePasteboardDataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StylePasteboardDataArchive*>(&to_msg);
  auto& from = static_cast<const StylePasteboardDataArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.StylePasteboardDataArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_style_network()->::TSCH::PropertyValueStorageContainerArchive::MergeFrom(
          from._internal_style_network());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.copied_from_entire_chart_ = from._impl_.copied_from_entire_chart_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StylePasteboardDataArchive::CopyFrom(const StylePasteboardDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.StylePasteboardDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylePasteboardDataArchive::IsInitialized() const {
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_style_network()) {
    if (!_impl_.style_network_->IsInitialized()) return false;
  }
  return true;
}

void StylePasteboardDataArchive::InternalSwap(StylePasteboardDataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StylePasteboardDataArchive, _impl_.copied_from_entire_chart_)
      + sizeof(StylePasteboardDataArchive::_impl_.copied_from_entire_chart_)
      - PROTOBUF_FIELD_OFFSET(StylePasteboardDataArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StylePasteboardDataArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[18]);
}

// ===================================================================

class ChartSelectionPathTypeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionPathTypeArchive>()._impl_._has_bits_);
  static void set_has_path_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionPathTypeArchive)
}
ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(const ChartSelectionPathTypeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSelectionPathTypeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_type_){}
    , decltype(_impl_.path_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path_type()) {
    _this->_impl_.path_type_.Set(from._internal_path_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path_name()) {
    _this->_impl_.path_name_.Set(from._internal_path_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionPathTypeArchive)
}

inline void ChartSelectionPathTypeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_type_){}
    , decltype(_impl_.path_name_){}
  };
  _impl_.path_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartSelectionPathTypeArchive::~ChartSelectionPathTypeArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionPathTypeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSelectionPathTypeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_type_.Destroy();
  _impl_.path_name_.Destroy();
}

void ChartSelectionPathTypeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSelectionPathTypeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionPathTypeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.path_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionPathTypeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartSelectionPathTypeArchive.path_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string path_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.ChartSelectionPathTypeArchive.path_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSelectionPathTypeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionPathTypeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string path_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_type().data(), static_cast<int>(this->_internal_path_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartSelectionPathTypeArchive.path_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path_type(), target);
  }

  // optional string path_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_name().data(), static_cast<int>(this->_internal_path_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.ChartSelectionPathTypeArchive.path_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionPathTypeArchive)
  return target;
}

size_t ChartSelectionPathTypeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionPathTypeArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string path_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_type());
    }

    // optional string path_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSelectionPathTypeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSelectionPathTypeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSelectionPathTypeArchive::GetClassData() const { return &_class_data_; }


void ChartSelectionPathTypeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSelectionPathTypeArchive*>(&to_msg);
  auto& from = static_cast<const ChartSelectionPathTypeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionPathTypeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_path_type(from._internal_path_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path_name(from._internal_path_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSelectionPathTypeArchive::CopyFrom(const ChartSelectionPathTypeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionPathTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathTypeArchive::IsInitialized() const {
  return true;
}

void ChartSelectionPathTypeArchive::InternalSwap(ChartSelectionPathTypeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_type_, lhs_arena,
      &other->_impl_.path_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_name_, lhs_arena,
      &other->_impl_.path_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionPathTypeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[19]);
}

// ===================================================================

class ChartAxisIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisIDArchive>()._impl_._has_bits_);
  static void set_has_axis_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChartAxisIDArchive::ChartAxisIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartAxisIDArchive)
}
ChartAxisIDArchive::ChartAxisIDArchive(const ChartAxisIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisIDArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_type_){}
    , decltype(_impl_.ordinal_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.axis_type_, &from._impl_.axis_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ordinal_) -
    reinterpret_cast<char*>(&_impl_.axis_type_)) + sizeof(_impl_.ordinal_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartAxisIDArchive)
}

inline void ChartAxisIDArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_type_){0}
    , decltype(_impl_.ordinal_){0u}
  };
}

ChartAxisIDArchive::~ChartAxisIDArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartAxisIDArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChartAxisIDArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartAxisIDArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.axis_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ordinal_) -
        reinterpret_cast<char*>(&_impl_.axis_type_)) + sizeof(_impl_.ordinal_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisIDArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.AxisType axis_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::AxisType_IsValid(val))) {
            _internal_set_axis_type(static_cast<::TSCH::AxisType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ordinal(&has_bits);
          _impl_.ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisIDArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartAxisIDArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.AxisType axis_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_axis_type(), target);
  }

  // optional uint32 ordinal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartAxisIDArchive)
  return target;
}

size_t ChartAxisIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartAxisIDArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.AxisType axis_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_axis_type());
    }

    // optional uint32 ordinal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisIDArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisIDArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisIDArchive::GetClassData() const { return &_class_data_; }


void ChartAxisIDArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisIDArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisIDArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartAxisIDArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.axis_type_ = from._impl_.axis_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ordinal_ = from._impl_.ordinal_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisIDArchive::CopyFrom(const ChartAxisIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartAxisIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisIDArchive::IsInitialized() const {
  return true;
}

void ChartAxisIDArchive::InternalSwap(ChartAxisIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisIDArchive, _impl_.ordinal_)
      + sizeof(ChartAxisIDArchive::_impl_.ordinal_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisIDArchive, _impl_.axis_type_)>(
          reinterpret_cast<char*>(&_impl_.axis_type_),
          reinterpret_cast<char*>(&other->_impl_.axis_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisIDArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[20]);
}

// ===================================================================

class ChartSelectionPathArgumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionPathArgumentArchive>()._impl_._has_bits_);
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::ChartAxisIDArchive& axis_id(const ChartSelectionPathArgumentArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCH::ChartAxisIDArchive&
ChartSelectionPathArgumentArchive::_Internal::axis_id(const ChartSelectionPathArgumentArchive* msg) {
  return *msg->_impl_.axis_id_;
}
ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionPathArgumentArchive)
}
ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(const ChartSelectionPathArgumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSelectionPathArgumentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_id_){nullptr}
    , decltype(_impl_.number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_axis_id()) {
    _this->_impl_.axis_id_ = new ::TSCH::ChartAxisIDArchive(*from._impl_.axis_id_);
  }
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionPathArgumentArchive)
}

inline void ChartSelectionPathArgumentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_id_){nullptr}
    , decltype(_impl_.number_){0u}
  };
}

ChartSelectionPathArgumentArchive::~ChartSelectionPathArgumentArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionPathArgumentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSelectionPathArgumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.axis_id_;
}

void ChartSelectionPathArgumentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSelectionPathArgumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionPathArgumentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.axis_id_ != nullptr);
    _impl_.axis_id_->Clear();
  }
  _impl_.number_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionPathArgumentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_number(&has_bits);
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartAxisIDArchive axis_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSelectionPathArgumentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionPathArgumentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // optional .TSCH.ChartAxisIDArchive axis_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::axis_id(this),
        _Internal::axis_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionPathArgumentArchive)
  return target;
}

size_t ChartSelectionPathArgumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionPathArgumentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.ChartAxisIDArchive axis_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.axis_id_);
    }

    // optional uint32 number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSelectionPathArgumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSelectionPathArgumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSelectionPathArgumentArchive::GetClassData() const { return &_class_data_; }


void ChartSelectionPathArgumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSelectionPathArgumentArchive*>(&to_msg);
  auto& from = static_cast<const ChartSelectionPathArgumentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionPathArgumentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(
          from._internal_axis_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.number_ = from._impl_.number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSelectionPathArgumentArchive::CopyFrom(const ChartSelectionPathArgumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionPathArgumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathArgumentArchive::IsInitialized() const {
  return true;
}

void ChartSelectionPathArgumentArchive::InternalSwap(ChartSelectionPathArgumentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionPathArgumentArchive, _impl_.number_)
      + sizeof(ChartSelectionPathArgumentArchive::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionPathArgumentArchive, _impl_.axis_id_)>(
          reinterpret_cast<char*>(&_impl_.axis_id_),
          reinterpret_cast<char*>(&other->_impl_.axis_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionPathArgumentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[21]);
}

// ===================================================================

class ChartSelectionPathArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionPathArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartSelectionPathTypeArchive& path_type(const ChartSelectionPathArchive* msg);
  static void set_has_path_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::ChartSelectionPathArchive& sub_selection(const ChartSelectionPathArchive* msg);
  static void set_has_sub_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCH::ChartSelectionPathTypeArchive&
ChartSelectionPathArchive::_Internal::path_type(const ChartSelectionPathArchive* msg) {
  return *msg->_impl_.path_type_;
}
const ::TSCH::ChartSelectionPathArchive&
ChartSelectionPathArchive::_Internal::sub_selection(const ChartSelectionPathArchive* msg) {
  return *msg->_impl_.sub_selection_;
}
ChartSelectionPathArchive::ChartSelectionPathArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionPathArchive)
}
ChartSelectionPathArchive::ChartSelectionPathArchive(const ChartSelectionPathArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSelectionPathArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.path_type_){nullptr}
    , decltype(_impl_.sub_selection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_type()) {
    _this->_impl_.path_type_ = new ::TSCH::ChartSelectionPathTypeArchive(*from._impl_.path_type_);
  }
  if (from._internal_has_sub_selection()) {
    _this->_impl_.sub_selection_ = new ::TSCH::ChartSelectionPathArchive(*from._impl_.sub_selection_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionPathArchive)
}

inline void ChartSelectionPathArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arguments_){arena}
    , decltype(_impl_.path_type_){nullptr}
    , decltype(_impl_.sub_selection_){nullptr}
  };
}

ChartSelectionPathArchive::~ChartSelectionPathArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionPathArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSelectionPathArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arguments_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.path_type_;
  if (this != internal_default_instance()) delete _impl_.sub_selection_;
}

void ChartSelectionPathArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSelectionPathArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionPathArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arguments_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.path_type_ != nullptr);
      _impl_.path_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sub_selection_ != nullptr);
      _impl_.sub_selection_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionPathArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arguments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSelectionPathArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionPathArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path_type(this),
        _Internal::path_type(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sub_selection(this),
        _Internal::sub_selection(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arguments_size()); i < n; i++) {
    const auto& repfield = this->_internal_arguments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionPathArchive)
  return target;
}

size_t ChartSelectionPathArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionPathArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  total_size += 1UL * this->_internal_arguments_size();
  for (const auto& msg : this->_impl_.arguments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_type_);
    }

    // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sub_selection_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSelectionPathArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSelectionPathArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSelectionPathArchive::GetClassData() const { return &_class_data_; }


void ChartSelectionPathArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSelectionPathArchive*>(&to_msg);
  auto& from = static_cast<const ChartSelectionPathArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionPathArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_path_type()->::TSCH::ChartSelectionPathTypeArchive::MergeFrom(
          from._internal_path_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sub_selection()->::TSCH::ChartSelectionPathArchive::MergeFrom(
          from._internal_sub_selection());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSelectionPathArchive::CopyFrom(const ChartSelectionPathArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionPathArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathArchive::IsInitialized() const {
  return true;
}

void ChartSelectionPathArchive::InternalSwap(ChartSelectionPathArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionPathArchive, _impl_.sub_selection_)
      + sizeof(ChartSelectionPathArchive::_impl_.sub_selection_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionPathArchive, _impl_.path_type_)>(
          reinterpret_cast<char*>(&_impl_.path_type_),
          reinterpret_cast<char*>(&other->_impl_.path_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionPathArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[22]);
}

// ===================================================================

class ChartSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSelectionArchive>()._impl_._has_bits_);
  static const ::TSD::DrawableSelectionArchive& super(const ChartSelectionArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& chart(const ChartSelectionArchive* msg);
  static void set_has_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSD::DrawableSelectionArchive&
ChartSelectionArchive::_Internal::super(const ChartSelectionArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ChartSelectionArchive::_Internal::chart(const ChartSelectionArchive* msg) {
  return *msg->_impl_.chart_;
}
void ChartSelectionArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartSelectionArchive::clear_chart() {
  if (_impl_.chart_ != nullptr) _impl_.chart_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartSelectionArchive::ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartSelectionArchive)
}
ChartSelectionArchive::ChartSelectionArchive(const ChartSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paths_){from._impl_.paths_}
    , decltype(_impl_.chart_){nullptr}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart()) {
    _this->_impl_.chart_ = new ::TSP::Reference(*from._impl_.chart_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::DrawableSelectionArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartSelectionArchive)
}

inline void ChartSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.paths_){arena}
    , decltype(_impl_.chart_){nullptr}
    , decltype(_impl_.super_){nullptr}
  };
}

ChartSelectionArchive::~ChartSelectionArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paths_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.chart_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ChartSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paths_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.chart_ != nullptr);
      _impl_.chart_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartSelectionPathArchive paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.DrawableSelectionArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart(this),
        _Internal::chart(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paths_size()); i < n; i++) {
    const auto& repfield = this->_internal_paths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSD.DrawableSelectionArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartSelectionArchive)
  return target;
}

size_t ChartSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->_impl_.paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference chart = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_);
    }

    // optional .TSD.DrawableSelectionArchive super = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSelectionArchive::GetClassData() const { return &_class_data_; }


void ChartSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSelectionArchive*>(&to_msg);
  auto& from = static_cast<const ChartSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paths_.MergeFrom(from._impl_.paths_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_chart()->::TSP::Reference::MergeFrom(
          from._internal_chart());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSD::DrawableSelectionArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSelectionArchive::CopyFrom(const ChartSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionArchive::IsInitialized() const {
  if (_internal_has_chart()) {
    if (!_impl_.chart_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ChartSelectionArchive::InternalSwap(ChartSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.paths_.InternalSwap(&other->_impl_.paths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSelectionArchive, _impl_.super_)
      + sizeof(ChartSelectionArchive::_impl_.super_)
      - PROTOBUF_FIELD_OFFSET(ChartSelectionArchive, _impl_.chart_)>(
          reinterpret_cast<char*>(&_impl_.chart_),
          reinterpret_cast<char*>(&other->_impl_.chart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[23]);
}

// ===================================================================

class ChartCDESelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartCDESelectionArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& chart(const ChartCDESelectionArchive* msg);
  static void set_has_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_row_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_column_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_column_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSP::Reference&
ChartCDESelectionArchive::_Internal::chart(const ChartCDESelectionArchive* msg) {
  return *msg->_impl_.chart_;
}
void ChartCDESelectionArchive::clear_chart() {
  if (_impl_.chart_ != nullptr) _impl_.chart_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartCDESelectionArchive::ChartCDESelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartCDESelectionArchive)
}
ChartCDESelectionArchive::ChartCDESelectionArchive(const ChartCDESelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartCDESelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_){nullptr}
    , decltype(_impl_.selection_type_){}
    , decltype(_impl_.row_location_){}
    , decltype(_impl_.row_length_){}
    , decltype(_impl_.column_location_){}
    , decltype(_impl_.column_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chart()) {
    _this->_impl_.chart_ = new ::TSP::Reference(*from._impl_.chart_);
  }
  ::memcpy(&_impl_.selection_type_, &from._impl_.selection_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_length_) -
    reinterpret_cast<char*>(&_impl_.selection_type_)) + sizeof(_impl_.column_length_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartCDESelectionArchive)
}

inline void ChartCDESelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_){nullptr}
    , decltype(_impl_.selection_type_){0}
    , decltype(_impl_.row_location_){0u}
    , decltype(_impl_.row_length_){0u}
    , decltype(_impl_.column_location_){0u}
    , decltype(_impl_.column_length_){0u}
  };
}

ChartCDESelectionArchive::~ChartCDESelectionArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartCDESelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartCDESelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chart_;
}

void ChartCDESelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartCDESelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartCDESelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.chart_ != nullptr);
    _impl_.chart_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.selection_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.column_length_) -
        reinterpret_cast<char*>(&_impl_.selection_type_)) + sizeof(_impl_.column_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartCDESelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 selection_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_selection_type(&has_bits);
          _impl_.selection_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 row_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_row_location(&has_bits);
          _impl_.row_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 row_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_row_length(&has_bits);
          _impl_.row_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 column_location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_column_location(&has_bits);
          _impl_.column_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 column_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_column_length(&has_bits);
          _impl_.column_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartCDESelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartCDESelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart(this),
        _Internal::chart(this).GetCachedSize(), target, stream);
  }

  // optional int32 selection_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_selection_type(), target);
  }

  // optional uint32 row_location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_location(), target);
  }

  // optional uint32 row_length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_row_length(), target);
  }

  // optional uint32 column_location = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_column_location(), target);
  }

  // optional uint32 column_length = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_column_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartCDESelectionArchive)
  return target;
}

size_t ChartCDESelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartCDESelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSP.Reference chart = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_);
    }

    // optional int32 selection_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_selection_type());
    }

    // optional uint32 row_location = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_location());
    }

    // optional uint32 row_length = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_length());
    }

    // optional uint32 column_location = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_location());
    }

    // optional uint32 column_length = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartCDESelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartCDESelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartCDESelectionArchive::GetClassData() const { return &_class_data_; }


void ChartCDESelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartCDESelectionArchive*>(&to_msg);
  auto& from = static_cast<const ChartCDESelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartCDESelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_chart()->::TSP::Reference::MergeFrom(
          from._internal_chart());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.selection_type_ = from._impl_.selection_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_location_ = from._impl_.row_location_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.row_length_ = from._impl_.row_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.column_location_ = from._impl_.column_location_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.column_length_ = from._impl_.column_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartCDESelectionArchive::CopyFrom(const ChartCDESelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartCDESelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartCDESelectionArchive::IsInitialized() const {
  if (_internal_has_chart()) {
    if (!_impl_.chart_->IsInitialized()) return false;
  }
  return true;
}

void ChartCDESelectionArchive::InternalSwap(ChartCDESelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartCDESelectionArchive, _impl_.column_length_)
      + sizeof(ChartCDESelectionArchive::_impl_.column_length_)
      - PROTOBUF_FIELD_OFFSET(ChartCDESelectionArchive, _impl_.chart_)>(
          reinterpret_cast<char*>(&_impl_.chart_),
          reinterpret_cast<char*>(&other->_impl_.chart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartCDESelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[24]);
}

// ===================================================================

class ChartUIState::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartUIState>()._impl_._has_bits_);
  static const ::TSP::Reference& chart(const ChartUIState* msg);
  static void set_has_chart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cde_last_row_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cde_last_col_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cde_last_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cde_last_col_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cde_use_full_keyboard(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_multi_data_set_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_valid_multi_data_set_index(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::TSP::Reference&
ChartUIState::_Internal::chart(const ChartUIState* msg) {
  return *msg->_impl_.chart_;
}
void ChartUIState::clear_chart() {
  if (_impl_.chart_ != nullptr) _impl_.chart_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartUIState::ChartUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartUIState)
}
ChartUIState::ChartUIState(const ChartUIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartUIState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_){nullptr}
    , decltype(_impl_.cde_last_row_selected_){}
    , decltype(_impl_.cde_last_col_selected_){}
    , decltype(_impl_.cde_last_row_count_){}
    , decltype(_impl_.cde_last_col_count_){}
    , decltype(_impl_.multi_data_set_index_){}
    , decltype(_impl_.cde_use_full_keyboard_){}
    , decltype(_impl_.is_valid_multi_data_set_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if (from._internal_has_chart()) {
    _this->_impl_.chart_ = new ::TSP::Reference(*from._impl_.chart_);
  }
  ::memcpy(&_impl_.cde_last_row_selected_, &from._impl_.cde_last_row_selected_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_valid_multi_data_set_index_) -
    reinterpret_cast<char*>(&_impl_.cde_last_row_selected_)) + sizeof(_impl_.is_valid_multi_data_set_index_));
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartUIState)
}

inline void ChartUIState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_){nullptr}
    , decltype(_impl_.cde_last_row_selected_){0}
    , decltype(_impl_.cde_last_col_selected_){0}
    , decltype(_impl_.cde_last_row_count_){0}
    , decltype(_impl_.cde_last_col_count_){0}
    , decltype(_impl_.multi_data_set_index_){0}
    , decltype(_impl_.cde_use_full_keyboard_){false}
    , decltype(_impl_.is_valid_multi_data_set_index_){false}
  };
}

ChartUIState::~ChartUIState() {
  // @@protoc_insertion_point(destructor:TSCH.ChartUIState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartUIState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  if (this != internal_default_instance()) delete _impl_.chart_;
}

void ChartUIState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartUIState::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartUIState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.chart_ != nullptr);
    _impl_.chart_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.cde_last_row_selected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_valid_multi_data_set_index_) -
        reinterpret_cast<char*>(&_impl_.cde_last_row_selected_)) + sizeof(_impl_.is_valid_multi_data_set_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartUIState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference chart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cde_last_row_selected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cde_last_row_selected(&has_bits);
          _impl_.cde_last_row_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cde_last_col_selected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cde_last_col_selected(&has_bits);
          _impl_.cde_last_col_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cde_last_row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cde_last_row_count(&has_bits);
          _impl_.cde_last_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cde_last_col_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cde_last_col_count(&has_bits);
          _impl_.cde_last_col_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cde_use_full_keyboard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cde_use_full_keyboard(&has_bits);
          _impl_.cde_use_full_keyboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 multi_data_set_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_multi_data_set_index(&has_bits);
          _impl_.multi_data_set_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_valid_multi_data_set_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_valid_multi_data_set_index(&has_bits);
          _impl_.is_valid_multi_data_set_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((80000u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartUIState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartUIState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference chart = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chart(this),
        _Internal::chart(this).GetCachedSize(), target, stream);
  }

  // optional int32 cde_last_row_selected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cde_last_row_selected(), target);
  }

  // optional int32 cde_last_col_selected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_cde_last_col_selected(), target);
  }

  // optional int32 cde_last_row_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cde_last_row_count(), target);
  }

  // optional int32 cde_last_col_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cde_last_col_count(), target);
  }

  // optional bool cde_use_full_keyboard = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_cde_use_full_keyboard(), target);
  }

  // optional int32 multi_data_set_index = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_multi_data_set_index(), target);
  }

  // optional bool is_valid_multi_data_set_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_valid_multi_data_set_index(), target);
  }

  // Extension range [10000, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 10000, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartUIState)
  return target;
}

size_t ChartUIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartUIState)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference chart = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_);
    }

    // optional int32 cde_last_row_selected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cde_last_row_selected());
    }

    // optional int32 cde_last_col_selected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cde_last_col_selected());
    }

    // optional int32 cde_last_row_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cde_last_row_count());
    }

    // optional int32 cde_last_col_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cde_last_col_count());
    }

    // optional int32 multi_data_set_index = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_multi_data_set_index());
    }

    // optional bool cde_use_full_keyboard = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_valid_multi_data_set_index = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartUIState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartUIState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartUIState::GetClassData() const { return &_class_data_; }


void ChartUIState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartUIState*>(&to_msg);
  auto& from = static_cast<const ChartUIState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartUIState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_chart()->::TSP::Reference::MergeFrom(
          from._internal_chart());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cde_last_row_selected_ = from._impl_.cde_last_row_selected_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cde_last_col_selected_ = from._impl_.cde_last_col_selected_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cde_last_row_count_ = from._impl_.cde_last_row_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cde_last_col_count_ = from._impl_.cde_last_col_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.multi_data_set_index_ = from._impl_.multi_data_set_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.cde_use_full_keyboard_ = from._impl_.cde_use_full_keyboard_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_valid_multi_data_set_index_ = from._impl_.is_valid_multi_data_set_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartUIState::CopyFrom(const ChartUIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartUIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartUIState::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_chart()) {
    if (!_impl_.chart_->IsInitialized()) return false;
  }
  return true;
}

void ChartUIState::InternalSwap(ChartUIState* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartUIState, _impl_.is_valid_multi_data_set_index_)
      + sizeof(ChartUIState::_impl_.is_valid_multi_data_set_index_)
      - PROTOBUF_FIELD_OFFSET(ChartUIState, _impl_.chart_)>(
          reinterpret_cast<char*>(&_impl_.chart_),
          reinterpret_cast<char*>(&other->_impl_.chart_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartUIState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[25]);
}

// ===================================================================

class ChartUIStateMultiDataIndexUpgrade::_Internal {
 public:
};

ChartUIStateMultiDataIndexUpgrade::ChartUIStateMultiDataIndexUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartUIStateMultiDataIndexUpgrade)
}
ChartUIStateMultiDataIndexUpgrade::ChartUIStateMultiDataIndexUpgrade(const ChartUIStateMultiDataIndexUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartUIStateMultiDataIndexUpgrade* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartUIStateMultiDataIndexUpgrade)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartUIStateMultiDataIndexUpgrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartUIStateMultiDataIndexUpgrade::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartUIStateMultiDataIndexUpgrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[26]);
}

// ===================================================================

class ChartFormatStructExtensions::_Internal {
 public:
};

ChartFormatStructExtensions::ChartFormatStructExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartFormatStructExtensions)
}
ChartFormatStructExtensions::ChartFormatStructExtensions(const ChartFormatStructExtensions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ChartFormatStructExtensions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartFormatStructExtensions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartFormatStructExtensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartFormatStructExtensions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChartFormatStructExtensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[27]);
}

// ===================================================================

class ChartReferenceLineNonStyleItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartReferenceLineNonStyleItem>()._impl_._has_bits_);
  static const ::TSP::Reference& non_style(const ChartReferenceLineNonStyleItem* msg);
  static void set_has_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& uuid(const ChartReferenceLineNonStyleItem* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
ChartReferenceLineNonStyleItem::_Internal::non_style(const ChartReferenceLineNonStyleItem* msg) {
  return *msg->_impl_.non_style_;
}
const ::TSP::UUID&
ChartReferenceLineNonStyleItem::_Internal::uuid(const ChartReferenceLineNonStyleItem* msg) {
  return *msg->_impl_.uuid_;
}
void ChartReferenceLineNonStyleItem::clear_non_style() {
  if (_impl_.non_style_ != nullptr) _impl_.non_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartReferenceLineNonStyleItem::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ChartReferenceLineNonStyleItem::ChartReferenceLineNonStyleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartReferenceLineNonStyleItem)
}
ChartReferenceLineNonStyleItem::ChartReferenceLineNonStyleItem(const ChartReferenceLineNonStyleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartReferenceLineNonStyleItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.non_style_){nullptr}
    , decltype(_impl_.uuid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_non_style()) {
    _this->_impl_.non_style_ = new ::TSP::Reference(*from._impl_.non_style_);
  }
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_ = new ::TSP::UUID(*from._impl_.uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartReferenceLineNonStyleItem)
}

inline void ChartReferenceLineNonStyleItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.non_style_){nullptr}
    , decltype(_impl_.uuid_){nullptr}
  };
}

ChartReferenceLineNonStyleItem::~ChartReferenceLineNonStyleItem() {
  // @@protoc_insertion_point(destructor:TSCH.ChartReferenceLineNonStyleItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartReferenceLineNonStyleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.non_style_;
  if (this != internal_default_instance()) delete _impl_.uuid_;
}

void ChartReferenceLineNonStyleItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartReferenceLineNonStyleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartReferenceLineNonStyleItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.non_style_ != nullptr);
      _impl_.non_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.uuid_ != nullptr);
      _impl_.uuid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartReferenceLineNonStyleItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference non_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartReferenceLineNonStyleItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartReferenceLineNonStyleItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference non_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::non_style(this),
        _Internal::non_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID uuid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartReferenceLineNonStyleItem)
  return target;
}

size_t ChartReferenceLineNonStyleItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.ChartReferenceLineNonStyleItem)
  size_t total_size = 0;

  if (_internal_has_non_style()) {
    // required .TSP.Reference non_style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.non_style_);
  }

  if (_internal_has_uuid()) {
    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);
  }

  return total_size;
}
size_t ChartReferenceLineNonStyleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartReferenceLineNonStyleItem)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference non_style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.non_style_);

    // required .TSP.UUID uuid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartReferenceLineNonStyleItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartReferenceLineNonStyleItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartReferenceLineNonStyleItem::GetClassData() const { return &_class_data_; }


void ChartReferenceLineNonStyleItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartReferenceLineNonStyleItem*>(&to_msg);
  auto& from = static_cast<const ChartReferenceLineNonStyleItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartReferenceLineNonStyleItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_non_style()->::TSP::Reference::MergeFrom(
          from._internal_non_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_uuid()->::TSP::UUID::MergeFrom(
          from._internal_uuid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartReferenceLineNonStyleItem::CopyFrom(const ChartReferenceLineNonStyleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartReferenceLineNonStyleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartReferenceLineNonStyleItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_non_style()) {
    if (!_impl_.non_style_->IsInitialized()) return false;
  }
  if (_internal_has_uuid()) {
    if (!_impl_.uuid_->IsInitialized()) return false;
  }
  return true;
}

void ChartReferenceLineNonStyleItem::InternalSwap(ChartReferenceLineNonStyleItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartReferenceLineNonStyleItem, _impl_.uuid_)
      + sizeof(ChartReferenceLineNonStyleItem::_impl_.uuid_)
      - PROTOBUF_FIELD_OFFSET(ChartReferenceLineNonStyleItem, _impl_.non_style_)>(
          reinterpret_cast<char*>(&_impl_.non_style_),
          reinterpret_cast<char*>(&other->_impl_.non_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartReferenceLineNonStyleItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[28]);
}

// ===================================================================

class ChartAxisReferenceLineNonStylesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisReferenceLineNonStylesArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartAxisIDArchive& axis_id(const ChartAxisReferenceLineNonStylesArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartAxisIDArchive&
ChartAxisReferenceLineNonStylesArchive::_Internal::axis_id(const ChartAxisReferenceLineNonStylesArchive* msg) {
  return *msg->_impl_.axis_id_;
}
ChartAxisReferenceLineNonStylesArchive::ChartAxisReferenceLineNonStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartAxisReferenceLineNonStylesArchive)
}
ChartAxisReferenceLineNonStylesArchive::ChartAxisReferenceLineNonStylesArchive(const ChartAxisReferenceLineNonStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisReferenceLineNonStylesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_line_non_style_items_){from._impl_.reference_line_non_style_items_}
    , decltype(_impl_.axis_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_axis_id()) {
    _this->_impl_.axis_id_ = new ::TSCH::ChartAxisIDArchive(*from._impl_.axis_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartAxisReferenceLineNonStylesArchive)
}

inline void ChartAxisReferenceLineNonStylesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_line_non_style_items_){arena}
    , decltype(_impl_.axis_id_){nullptr}
  };
}

ChartAxisReferenceLineNonStylesArchive::~ChartAxisReferenceLineNonStylesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartAxisReferenceLineNonStylesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisReferenceLineNonStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_line_non_style_items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.axis_id_;
}

void ChartAxisReferenceLineNonStylesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisReferenceLineNonStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reference_line_non_style_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.axis_id_ != nullptr);
    _impl_.axis_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisReferenceLineNonStylesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartAxisIDArchive axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_non_style_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisReferenceLineNonStylesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::axis_id(this),
        _Internal::axis_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reference_line_non_style_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_reference_line_non_style_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartAxisReferenceLineNonStylesArchive)
  return target;
}

size_t ChartAxisReferenceLineNonStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  size_t total_size = 0;

  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (_internal_has_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.axis_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  total_size += 1UL * this->_internal_reference_line_non_style_items_size();
  for (const auto& msg : this->_impl_.reference_line_non_style_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisReferenceLineNonStylesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisReferenceLineNonStylesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisReferenceLineNonStylesArchive::GetClassData() const { return &_class_data_; }


void ChartAxisReferenceLineNonStylesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisReferenceLineNonStylesArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisReferenceLineNonStylesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_line_non_style_items_.MergeFrom(from._impl_.reference_line_non_style_items_);
  if (from._internal_has_axis_id()) {
    _this->_internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(
        from._internal_axis_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisReferenceLineNonStylesArchive::CopyFrom(const ChartAxisReferenceLineNonStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartAxisReferenceLineNonStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisReferenceLineNonStylesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.reference_line_non_style_items_))
    return false;
  return true;
}

void ChartAxisReferenceLineNonStylesArchive::InternalSwap(ChartAxisReferenceLineNonStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reference_line_non_style_items_.InternalSwap(&other->_impl_.reference_line_non_style_items_);
  swap(_impl_.axis_id_, other->_impl_.axis_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisReferenceLineNonStylesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[29]);
}

// ===================================================================

class ChartAxisReferenceLineStylesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisReferenceLineStylesArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartAxisIDArchive& axis_id(const ChartAxisReferenceLineStylesArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::SparseReferenceArray& reference_line_styles(const ChartAxisReferenceLineStylesArchive* msg);
  static void set_has_reference_line_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartAxisIDArchive&
ChartAxisReferenceLineStylesArchive::_Internal::axis_id(const ChartAxisReferenceLineStylesArchive* msg) {
  return *msg->_impl_.axis_id_;
}
const ::TSP::SparseReferenceArray&
ChartAxisReferenceLineStylesArchive::_Internal::reference_line_styles(const ChartAxisReferenceLineStylesArchive* msg) {
  return *msg->_impl_.reference_line_styles_;
}
void ChartAxisReferenceLineStylesArchive::clear_reference_line_styles() {
  if (_impl_.reference_line_styles_ != nullptr) _impl_.reference_line_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ChartAxisReferenceLineStylesArchive::ChartAxisReferenceLineStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartAxisReferenceLineStylesArchive)
}
ChartAxisReferenceLineStylesArchive::ChartAxisReferenceLineStylesArchive(const ChartAxisReferenceLineStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisReferenceLineStylesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_id_){nullptr}
    , decltype(_impl_.reference_line_styles_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_axis_id()) {
    _this->_impl_.axis_id_ = new ::TSCH::ChartAxisIDArchive(*from._impl_.axis_id_);
  }
  if (from._internal_has_reference_line_styles()) {
    _this->_impl_.reference_line_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.reference_line_styles_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartAxisReferenceLineStylesArchive)
}

inline void ChartAxisReferenceLineStylesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axis_id_){nullptr}
    , decltype(_impl_.reference_line_styles_){nullptr}
  };
}

ChartAxisReferenceLineStylesArchive::~ChartAxisReferenceLineStylesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartAxisReferenceLineStylesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisReferenceLineStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.axis_id_;
  if (this != internal_default_instance()) delete _impl_.reference_line_styles_;
}

void ChartAxisReferenceLineStylesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisReferenceLineStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartAxisReferenceLineStylesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.axis_id_ != nullptr);
      _impl_.axis_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.reference_line_styles_ != nullptr);
      _impl_.reference_line_styles_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisReferenceLineStylesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartAxisIDArchive axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray reference_line_styles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_line_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisReferenceLineStylesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartAxisReferenceLineStylesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::axis_id(this),
        _Internal::axis_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray reference_line_styles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reference_line_styles(this),
        _Internal::reference_line_styles(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartAxisReferenceLineStylesArchive)
  return target;
}

size_t ChartAxisReferenceLineStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartAxisReferenceLineStylesArchive)
  size_t total_size = 0;

  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (_internal_has_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.axis_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.SparseReferenceArray reference_line_styles = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_line_styles_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisReferenceLineStylesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisReferenceLineStylesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisReferenceLineStylesArchive::GetClassData() const { return &_class_data_; }


void ChartAxisReferenceLineStylesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisReferenceLineStylesArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisReferenceLineStylesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartAxisReferenceLineStylesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(
          from._internal_axis_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_reference_line_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_reference_line_styles());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisReferenceLineStylesArchive::CopyFrom(const ChartAxisReferenceLineStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartAxisReferenceLineStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisReferenceLineStylesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_reference_line_styles()) {
    if (!_impl_.reference_line_styles_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisReferenceLineStylesArchive::InternalSwap(ChartAxisReferenceLineStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisReferenceLineStylesArchive, _impl_.reference_line_styles_)
      + sizeof(ChartAxisReferenceLineStylesArchive::_impl_.reference_line_styles_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisReferenceLineStylesArchive, _impl_.axis_id_)>(
          reinterpret_cast<char*>(&_impl_.axis_id_),
          reinterpret_cast<char*>(&other->_impl_.axis_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisReferenceLineStylesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[30]);
}

// ===================================================================

class ChartReferenceLinesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartReferenceLinesArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& theme_preset_reference_line_style(const ChartReferenceLinesArchive* msg);
  static void set_has_theme_preset_reference_line_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ChartReferenceLinesArchive::_Internal::theme_preset_reference_line_style(const ChartReferenceLinesArchive* msg) {
  return *msg->_impl_.theme_preset_reference_line_style_;
}
void ChartReferenceLinesArchive::clear_theme_preset_reference_line_style() {
  if (_impl_.theme_preset_reference_line_style_ != nullptr) _impl_.theme_preset_reference_line_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChartReferenceLinesArchive::ChartReferenceLinesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartReferenceLinesArchive)
}
ChartReferenceLinesArchive::ChartReferenceLinesArchive(const ChartReferenceLinesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartReferenceLinesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_line_non_styles_map_){from._impl_.reference_line_non_styles_map_}
    , decltype(_impl_.reference_line_styles_map_){from._impl_.reference_line_styles_map_}
    , decltype(_impl_.theme_preset_reference_line_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_theme_preset_reference_line_style()) {
    _this->_impl_.theme_preset_reference_line_style_ = new ::TSP::Reference(*from._impl_.theme_preset_reference_line_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartReferenceLinesArchive)
}

inline void ChartReferenceLinesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_line_non_styles_map_){arena}
    , decltype(_impl_.reference_line_styles_map_){arena}
    , decltype(_impl_.theme_preset_reference_line_style_){nullptr}
  };
}

ChartReferenceLinesArchive::~ChartReferenceLinesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartReferenceLinesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartReferenceLinesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_line_non_styles_map_.~RepeatedPtrField();
  _impl_.reference_line_styles_map_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.theme_preset_reference_line_style_;
}

void ChartReferenceLinesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartReferenceLinesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartReferenceLinesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reference_line_non_styles_map_.Clear();
  _impl_.reference_line_styles_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.theme_preset_reference_line_style_ != nullptr);
    _impl_.theme_preset_reference_line_style_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartReferenceLinesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCH.ChartAxisReferenceLineNonStylesArchive reference_line_non_styles_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_non_styles_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_styles_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference theme_preset_reference_line_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme_preset_reference_line_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartReferenceLinesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartReferenceLinesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCH.ChartAxisReferenceLineNonStylesArchive reference_line_non_styles_map = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reference_line_non_styles_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_reference_line_non_styles_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reference_line_styles_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_reference_line_styles_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::theme_preset_reference_line_style(this),
        _Internal::theme_preset_reference_line_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartReferenceLinesArchive)
  return target;
}

size_t ChartReferenceLinesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartReferenceLinesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartAxisReferenceLineNonStylesArchive reference_line_non_styles_map = 1;
  total_size += 1UL * this->_internal_reference_line_non_styles_map_size();
  for (const auto& msg : this->_impl_.reference_line_non_styles_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  total_size += 1UL * this->_internal_reference_line_styles_map_size();
  for (const auto& msg : this->_impl_.reference_line_styles_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_preset_reference_line_style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartReferenceLinesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartReferenceLinesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartReferenceLinesArchive::GetClassData() const { return &_class_data_; }


void ChartReferenceLinesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartReferenceLinesArchive*>(&to_msg);
  auto& from = static_cast<const ChartReferenceLinesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartReferenceLinesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_line_non_styles_map_.MergeFrom(from._impl_.reference_line_non_styles_map_);
  _this->_impl_.reference_line_styles_map_.MergeFrom(from._impl_.reference_line_styles_map_);
  if (from._internal_has_theme_preset_reference_line_style()) {
    _this->_internal_mutable_theme_preset_reference_line_style()->::TSP::Reference::MergeFrom(
        from._internal_theme_preset_reference_line_style());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartReferenceLinesArchive::CopyFrom(const ChartReferenceLinesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartReferenceLinesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartReferenceLinesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.reference_line_non_styles_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.reference_line_styles_map_))
    return false;
  if (_internal_has_theme_preset_reference_line_style()) {
    if (!_impl_.theme_preset_reference_line_style_->IsInitialized()) return false;
  }
  return true;
}

void ChartReferenceLinesArchive::InternalSwap(ChartReferenceLinesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reference_line_non_styles_map_.InternalSwap(&other->_impl_.reference_line_non_styles_map_);
  _impl_.reference_line_styles_map_.InternalSwap(&other->_impl_.reference_line_styles_map_);
  swap(_impl_.theme_preset_reference_line_style_, other->_impl_.theme_preset_reference_line_style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartReferenceLinesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[31]);
}

// ===================================================================

class ChartPresetReferenceLineStylesArchive::_Internal {
 public:
};

void ChartPresetReferenceLineStylesArchive::clear_reference_line_styles() {
  _impl_.reference_line_styles_.Clear();
}
ChartPresetReferenceLineStylesArchive::ChartPresetReferenceLineStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartPresetReferenceLineStylesArchive)
}
ChartPresetReferenceLineStylesArchive::ChartPresetReferenceLineStylesArchive(const ChartPresetReferenceLineStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartPresetReferenceLineStylesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reference_line_styles_){from._impl_.reference_line_styles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartPresetReferenceLineStylesArchive)
}

inline void ChartPresetReferenceLineStylesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reference_line_styles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChartPresetReferenceLineStylesArchive::~ChartPresetReferenceLineStylesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartPresetReferenceLineStylesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartPresetReferenceLineStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_line_styles_.~RepeatedPtrField();
}

void ChartPresetReferenceLineStylesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartPresetReferenceLineStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartPresetReferenceLineStylesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reference_line_styles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartPresetReferenceLineStylesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference reference_line_styles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartPresetReferenceLineStylesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartPresetReferenceLineStylesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference reference_line_styles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reference_line_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_reference_line_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartPresetReferenceLineStylesArchive)
  return target;
}

size_t ChartPresetReferenceLineStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartPresetReferenceLineStylesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference reference_line_styles = 1;
  total_size += 1UL * this->_internal_reference_line_styles_size();
  for (const auto& msg : this->_impl_.reference_line_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartPresetReferenceLineStylesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartPresetReferenceLineStylesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartPresetReferenceLineStylesArchive::GetClassData() const { return &_class_data_; }


void ChartPresetReferenceLineStylesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartPresetReferenceLineStylesArchive*>(&to_msg);
  auto& from = static_cast<const ChartPresetReferenceLineStylesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartPresetReferenceLineStylesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_line_styles_.MergeFrom(from._impl_.reference_line_styles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartPresetReferenceLineStylesArchive::CopyFrom(const ChartPresetReferenceLineStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartPresetReferenceLineStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartPresetReferenceLineStylesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.reference_line_styles_))
    return false;
  return true;
}

void ChartPresetReferenceLineStylesArchive::InternalSwap(ChartPresetReferenceLineStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.reference_line_styles_.InternalSwap(&other->_impl_.reference_line_styles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartPresetReferenceLineStylesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[32]);
}

// ===================================================================

class ChartAxisReferenceLineSparseNonStylesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisReferenceLineSparseNonStylesArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartAxisIDArchive& axis_id(const ChartAxisReferenceLineSparseNonStylesArchive* msg);
  static void set_has_axis_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::ChartAxisIDArchive&
ChartAxisReferenceLineSparseNonStylesArchive::_Internal::axis_id(const ChartAxisReferenceLineSparseNonStylesArchive* msg) {
  return *msg->_impl_.axis_id_;
}
ChartAxisReferenceLineSparseNonStylesArchive::ChartAxisReferenceLineSparseNonStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
}
ChartAxisReferenceLineSparseNonStylesArchive::ChartAxisReferenceLineSparseNonStylesArchive(const ChartAxisReferenceLineSparseNonStylesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisReferenceLineSparseNonStylesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_line_non_style_items_){from._impl_.reference_line_non_style_items_}
    , decltype(_impl_.axis_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_axis_id()) {
    _this->_impl_.axis_id_ = new ::TSCH::ChartAxisIDArchive(*from._impl_.axis_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
}

inline void ChartAxisReferenceLineSparseNonStylesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_line_non_style_items_){arena}
    , decltype(_impl_.axis_id_){nullptr}
  };
}

ChartAxisReferenceLineSparseNonStylesArchive::~ChartAxisReferenceLineSparseNonStylesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisReferenceLineSparseNonStylesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_line_non_style_items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.axis_id_;
}

void ChartAxisReferenceLineSparseNonStylesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisReferenceLineSparseNonStylesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reference_line_non_style_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.axis_id_ != nullptr);
    _impl_.axis_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisReferenceLineSparseNonStylesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.ChartAxisIDArchive axis_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_non_style_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisReferenceLineSparseNonStylesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::axis_id(this),
        _Internal::axis_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reference_line_non_style_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_reference_line_non_style_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  return target;
}

size_t ChartAxisReferenceLineSparseNonStylesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  size_t total_size = 0;

  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  if (_internal_has_axis_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.axis_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  total_size += 1UL * this->_internal_reference_line_non_style_items_size();
  for (const auto& msg : this->_impl_.reference_line_non_style_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisReferenceLineSparseNonStylesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisReferenceLineSparseNonStylesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisReferenceLineSparseNonStylesArchive::GetClassData() const { return &_class_data_; }


void ChartAxisReferenceLineSparseNonStylesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisReferenceLineSparseNonStylesArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisReferenceLineSparseNonStylesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_line_non_style_items_.MergeFrom(from._impl_.reference_line_non_style_items_);
  if (from._internal_has_axis_id()) {
    _this->_internal_mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(
        from._internal_axis_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisReferenceLineSparseNonStylesArchive::CopyFrom(const ChartAxisReferenceLineSparseNonStylesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisReferenceLineSparseNonStylesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.reference_line_non_style_items_))
    return false;
  return true;
}

void ChartAxisReferenceLineSparseNonStylesArchive::InternalSwap(ChartAxisReferenceLineSparseNonStylesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reference_line_non_style_items_.InternalSwap(&other->_impl_.reference_line_non_style_items_);
  swap(_impl_.axis_id_, other->_impl_.axis_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisReferenceLineSparseNonStylesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[33]);
}

// ===================================================================

class PropertyValueStorageContainerReferenceLinesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PropertyValueStorageContainerReferenceLinesArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& theme_preset_reference_line_style(const PropertyValueStorageContainerReferenceLinesArchive* msg);
  static void set_has_theme_preset_reference_line_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
PropertyValueStorageContainerReferenceLinesArchive::_Internal::theme_preset_reference_line_style(const PropertyValueStorageContainerReferenceLinesArchive* msg) {
  return *msg->_impl_.theme_preset_reference_line_style_;
}
void PropertyValueStorageContainerReferenceLinesArchive::clear_theme_preset_reference_line_style() {
  if (_impl_.theme_preset_reference_line_style_ != nullptr) _impl_.theme_preset_reference_line_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PropertyValueStorageContainerReferenceLinesArchive::PropertyValueStorageContainerReferenceLinesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
}
PropertyValueStorageContainerReferenceLinesArchive::PropertyValueStorageContainerReferenceLinesArchive(const PropertyValueStorageContainerReferenceLinesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyValueStorageContainerReferenceLinesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_line_non_styles_map_){from._impl_.reference_line_non_styles_map_}
    , decltype(_impl_.reference_line_styles_map_){from._impl_.reference_line_styles_map_}
    , decltype(_impl_.theme_preset_reference_line_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_theme_preset_reference_line_style()) {
    _this->_impl_.theme_preset_reference_line_style_ = new ::TSP::Reference(*from._impl_.theme_preset_reference_line_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
}

inline void PropertyValueStorageContainerReferenceLinesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_line_non_styles_map_){arena}
    , decltype(_impl_.reference_line_styles_map_){arena}
    , decltype(_impl_.theme_preset_reference_line_style_){nullptr}
  };
}

PropertyValueStorageContainerReferenceLinesArchive::~PropertyValueStorageContainerReferenceLinesArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyValueStorageContainerReferenceLinesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_line_non_styles_map_.~RepeatedPtrField();
  _impl_.reference_line_styles_map_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.theme_preset_reference_line_style_;
}

void PropertyValueStorageContainerReferenceLinesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyValueStorageContainerReferenceLinesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reference_line_non_styles_map_.Clear();
  _impl_.reference_line_styles_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.theme_preset_reference_line_style_ != nullptr);
    _impl_.theme_preset_reference_line_style_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyValueStorageContainerReferenceLinesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCH.ChartAxisReferenceLineSparseNonStylesArchive reference_line_non_styles_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_non_styles_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reference_line_styles_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference theme_preset_reference_line_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme_preset_reference_line_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyValueStorageContainerReferenceLinesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCH.ChartAxisReferenceLineSparseNonStylesArchive reference_line_non_styles_map = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reference_line_non_styles_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_reference_line_non_styles_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reference_line_styles_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_reference_line_styles_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::theme_preset_reference_line_style(this),
        _Internal::theme_preset_reference_line_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  return target;
}

size_t PropertyValueStorageContainerReferenceLinesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.ChartAxisReferenceLineSparseNonStylesArchive reference_line_non_styles_map = 1;
  total_size += 1UL * this->_internal_reference_line_non_styles_map_size();
  for (const auto& msg : this->_impl_.reference_line_non_styles_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  total_size += 1UL * this->_internal_reference_line_styles_map_size();
  for (const auto& msg : this->_impl_.reference_line_styles_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_preset_reference_line_style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyValueStorageContainerReferenceLinesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyValueStorageContainerReferenceLinesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyValueStorageContainerReferenceLinesArchive::GetClassData() const { return &_class_data_; }


void PropertyValueStorageContainerReferenceLinesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyValueStorageContainerReferenceLinesArchive*>(&to_msg);
  auto& from = static_cast<const PropertyValueStorageContainerReferenceLinesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_line_non_styles_map_.MergeFrom(from._impl_.reference_line_non_styles_map_);
  _this->_impl_.reference_line_styles_map_.MergeFrom(from._impl_.reference_line_styles_map_);
  if (from._internal_has_theme_preset_reference_line_style()) {
    _this->_internal_mutable_theme_preset_reference_line_style()->::TSP::Reference::MergeFrom(
        from._internal_theme_preset_reference_line_style());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyValueStorageContainerReferenceLinesArchive::CopyFrom(const PropertyValueStorageContainerReferenceLinesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValueStorageContainerReferenceLinesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.reference_line_non_styles_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.reference_line_styles_map_))
    return false;
  if (_internal_has_theme_preset_reference_line_style()) {
    if (!_impl_.theme_preset_reference_line_style_->IsInitialized()) return false;
  }
  return true;
}

void PropertyValueStorageContainerReferenceLinesArchive::InternalSwap(PropertyValueStorageContainerReferenceLinesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reference_line_non_styles_map_.InternalSwap(&other->_impl_.reference_line_non_styles_map_);
  _impl_.reference_line_styles_map_.InternalSwap(&other->_impl_.reference_line_styles_map_);
  swap(_impl_.theme_preset_reference_line_style_, other->_impl_.theme_preset_reference_line_style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyValueStorageContainerReferenceLinesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[34]);
}

// ===================================================================

class CollaboratorCDECursorSubselectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaboratorCDECursorSubselectionArchive>()._impl_._has_bits_);
  static void set_has_row_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_row_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_column_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CollaboratorCDECursorSubselectionArchive::CollaboratorCDECursorSubselectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CollaboratorCDECursorSubselectionArchive)
}
CollaboratorCDECursorSubselectionArchive::CollaboratorCDECursorSubselectionArchive(const CollaboratorCDECursorSubselectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaboratorCDECursorSubselectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_location_){}
    , decltype(_impl_.row_length_){}
    , decltype(_impl_.column_location_){}
    , decltype(_impl_.column_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_location_, &from._impl_.row_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_length_) -
    reinterpret_cast<char*>(&_impl_.row_location_)) + sizeof(_impl_.column_length_));
  // @@protoc_insertion_point(copy_constructor:TSCH.CollaboratorCDECursorSubselectionArchive)
}

inline void CollaboratorCDECursorSubselectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_location_){0}
    , decltype(_impl_.row_length_){0}
    , decltype(_impl_.column_location_){0}
    , decltype(_impl_.column_length_){0}
  };
}

CollaboratorCDECursorSubselectionArchive::~CollaboratorCDECursorSubselectionArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CollaboratorCDECursorSubselectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaboratorCDECursorSubselectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollaboratorCDECursorSubselectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaboratorCDECursorSubselectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CollaboratorCDECursorSubselectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.row_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.column_length_) -
        reinterpret_cast<char*>(&_impl_.row_location_)) + sizeof(_impl_.column_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaboratorCDECursorSubselectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 row_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row_location(&has_bits);
          _impl_.row_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 row_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row_length(&has_bits);
          _impl_.row_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 column_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_column_location(&has_bits);
          _impl_.column_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 column_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_column_length(&has_bits);
          _impl_.column_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaboratorCDECursorSubselectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CollaboratorCDECursorSubselectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 row_location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_row_location(), target);
  }

  // optional int32 row_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_row_length(), target);
  }

  // optional int32 column_location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_column_location(), target);
  }

  // optional int32 column_length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_column_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CollaboratorCDECursorSubselectionArchive)
  return target;
}

size_t CollaboratorCDECursorSubselectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CollaboratorCDECursorSubselectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 row_location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_row_location());
    }

    // optional int32 row_length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_row_length());
    }

    // optional int32 column_location = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_column_location());
    }

    // optional int32 column_length = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_column_length());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaboratorCDECursorSubselectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaboratorCDECursorSubselectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaboratorCDECursorSubselectionArchive::GetClassData() const { return &_class_data_; }


void CollaboratorCDECursorSubselectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaboratorCDECursorSubselectionArchive*>(&to_msg);
  auto& from = static_cast<const CollaboratorCDECursorSubselectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CollaboratorCDECursorSubselectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.row_location_ = from._impl_.row_location_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.row_length_ = from._impl_.row_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.column_location_ = from._impl_.column_location_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.column_length_ = from._impl_.column_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaboratorCDECursorSubselectionArchive::CopyFrom(const CollaboratorCDECursorSubselectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CollaboratorCDECursorSubselectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaboratorCDECursorSubselectionArchive::IsInitialized() const {
  return true;
}

void CollaboratorCDECursorSubselectionArchive::InternalSwap(CollaboratorCDECursorSubselectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollaboratorCDECursorSubselectionArchive, _impl_.column_length_)
      + sizeof(CollaboratorCDECursorSubselectionArchive::_impl_.column_length_)
      - PROTOBUF_FIELD_OFFSET(CollaboratorCDECursorSubselectionArchive, _impl_.row_location_)>(
          reinterpret_cast<char*>(&_impl_.row_location_),
          reinterpret_cast<char*>(&other->_impl_.row_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaboratorCDECursorSubselectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[35]);
}

// ===================================================================

class CollaboratorChartTitleCursorSubselectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CollaboratorChartTitleCursorSubselectionArchive>()._impl_._has_bits_);
  static void set_has_chart_title_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CollaboratorChartTitleCursorSubselectionArchive::CollaboratorChartTitleCursorSubselectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
}
CollaboratorChartTitleCursorSubselectionArchive::CollaboratorChartTitleCursorSubselectionArchive(const CollaboratorChartTitleCursorSubselectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaboratorChartTitleCursorSubselectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_title_selected_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.chart_title_selected_ = from._impl_.chart_title_selected_;
  // @@protoc_insertion_point(copy_constructor:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
}

inline void CollaboratorChartTitleCursorSubselectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chart_title_selected_){false}
  };
}

CollaboratorChartTitleCursorSubselectionArchive::~CollaboratorChartTitleCursorSubselectionArchive() {
  // @@protoc_insertion_point(destructor:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaboratorChartTitleCursorSubselectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollaboratorChartTitleCursorSubselectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaboratorChartTitleCursorSubselectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chart_title_selected_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaboratorChartTitleCursorSubselectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool chart_title_selected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chart_title_selected(&has_bits);
          _impl_.chart_title_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaboratorChartTitleCursorSubselectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool chart_title_selected = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_chart_title_selected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
  return target;
}

size_t CollaboratorChartTitleCursorSubselectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool chart_title_selected = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaboratorChartTitleCursorSubselectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaboratorChartTitleCursorSubselectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaboratorChartTitleCursorSubselectionArchive::GetClassData() const { return &_class_data_; }


void CollaboratorChartTitleCursorSubselectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaboratorChartTitleCursorSubselectionArchive*>(&to_msg);
  auto& from = static_cast<const CollaboratorChartTitleCursorSubselectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chart_title_selected()) {
    _this->_internal_set_chart_title_selected(from._internal_chart_title_selected());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaboratorChartTitleCursorSubselectionArchive::CopyFrom(const CollaboratorChartTitleCursorSubselectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaboratorChartTitleCursorSubselectionArchive::IsInitialized() const {
  return true;
}

void CollaboratorChartTitleCursorSubselectionArchive::InternalSwap(CollaboratorChartTitleCursorSubselectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.chart_title_selected_, other->_impl_.chart_title_selected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaboratorChartTitleCursorSubselectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eproto_getter, &descriptor_table_TSCHArchives_2eproto_once,
      file_level_metadata_TSCHArchives_2eproto[36]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartArchive::kUnityFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartDrawableArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartArchive >, 11, false>
  ChartArchive::unity(kUnityFieldNumber, ::TSCH::ChartArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartMultiDataIndexUpgrade::kUpgradedToUiStateFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  ChartMultiDataIndexUpgrade::upgraded_to_ui_state(kUpgradedToUiStateFieldNumber, false, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartGarlicMinMaxUpgrade::kGarlicMinMaxUpgradeFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartGarlicMinMaxUpgrade >, 11, false>
  ChartGarlicMinMaxUpgrade::garlic_min_max_upgrade(kGarlicMinMaxUpgradeFieldNumber, ::TSCH::ChartGarlicMinMaxUpgrade::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartGarlicLabelFormatUpgrade::kGarlicLabelFormatUpgradeFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartGarlicLabelFormatUpgrade >, 11, false>
  ChartGarlicLabelFormatUpgrade::garlic_label_format_upgrade(kGarlicLabelFormatUpgradeFieldNumber, ::TSCH::ChartGarlicLabelFormatUpgrade::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartPasteboardAdditionsArchive::kPresetIndexForPasteboardFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  ChartPasteboardAdditionsArchive::preset_index_for_pasteboard(kPresetIndexForPasteboardFieldNumber, 0u, nullptr);
const std::string ChartPasteboardAdditionsArchive_preset_uuid_for_pasteboard_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartPasteboardAdditionsArchive::kPresetUuidForPasteboardFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false>
  ChartPasteboardAdditionsArchive::preset_uuid_for_pasteboard(kPresetUuidForPasteboardFieldNumber, ChartPasteboardAdditionsArchive_preset_uuid_for_pasteboard_default, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartPasteboardAdditionsArchive::kCustomFormatListForPasteboardFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSP::Reference >, 11, false>
  ChartPasteboardAdditionsArchive::custom_format_list_for_pasteboard(kCustomFormatListForPasteboardFieldNumber, ::TSP::Reference::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartPreserveAppearanceForPresetArchive::kAppearancePreservedForPresetFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  ChartPreserveAppearanceForPresetArchive::appearance_preserved_for_preset(kAppearancePreservedForPresetFieldNumber, false, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartSupportsProportionalBendedCalloutLinesArchive::kSupportsProportionalBendedCalloutLinesFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  ChartSupportsProportionalBendedCalloutLinesArchive::supports_proportional_bended_callout_lines(kSupportsProportionalBendedCalloutLinesFieldNumber, false, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartSupportsRoundedCornersArchive::kDeprecatedSupportsRoundedCornersFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  ChartSupportsRoundedCornersArchive::deprecated_supports_rounded_corners(kDeprecatedSupportsRoundedCornersFieldNumber, false, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartSupportsRoundedCornersArchive::kSupportsRoundedCornersFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  ChartSupportsRoundedCornersArchive::supports_rounded_corners(kSupportsRoundedCornersFieldNumber, false, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartSupportsSeriesPropertySpacingArchive::kSupportsSeriesValueLabelSpacingFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  ChartSupportsSeriesPropertySpacingArchive::supports_series_value_label_spacing(kSupportsSeriesValueLabelSpacingFieldNumber, false, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartSupportsSeriesPropertySpacingArchive::kSupportsSeriesErrorBarSpacingFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  ChartSupportsSeriesPropertySpacingArchive::supports_series_error_bar_spacing(kSupportsSeriesErrorBarSpacingFieldNumber, false, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartPresetsArchive::kExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartPresetsArchive >, 11, false>
  ChartPresetsArchive::extension(kExtensionFieldNumber, ::TSCH::ChartPresetsArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartUIStateMultiDataIndexUpgrade::kUpgradedFromModelFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartUIState,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  ChartUIStateMultiDataIndexUpgrade::upgraded_from_model(kUpgradedFromModelFieldNumber, false, nullptr);
const std::string ChartFormatStructExtensions_prefix_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartFormatStructExtensions::kPrefixFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  ChartFormatStructExtensions::prefix(kPrefixFieldNumber, ChartFormatStructExtensions_prefix_default, nullptr);
const std::string ChartFormatStructExtensions_suffix_default("");
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartFormatStructExtensions::kSuffixFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  ChartFormatStructExtensions::suffix(kSuffixFieldNumber, ChartFormatStructExtensions_suffix_default, nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int CollaboratorCDECursorSubselectionArchive::kCdeCursorSubselectionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::CollaboratorCursorArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::CollaboratorCDECursorSubselectionArchive >, 11, false>
  CollaboratorCDECursorSubselectionArchive::cde_cursor_subselection(kCdeCursorSubselectionFieldNumber, ::TSCH::CollaboratorCDECursorSubselectionArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int CollaboratorChartTitleCursorSubselectionArchive::kChartTitleCursorSubselectionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::CollaboratorCursorArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::CollaboratorChartTitleCursorSubselectionArchive >, 11, false>
  CollaboratorChartTitleCursorSubselectionArchive::chart_title_cursor_subselection(kChartTitleCursorSubselectionFieldNumber, ::TSCH::CollaboratorChartTitleCursorSubselectionArchive::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  scene3d_settings_constant_depth(kScene3DSettingsConstantDepthFieldNumber, false, nullptr);
const std::string last_applied_fill_set_lookup_string_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  last_applied_fill_set_lookup_string(kLastAppliedFillSetLookupStringFieldNumber, last_applied_fill_set_lookup_string_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  series_supports_donut(kSeriesSupportsDonutFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  series_supports_radar(kSeriesSupportsRadarFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  series_supports_custom_number_format(kSeriesSupportsCustomNumberFormatFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  series_supports_custom_date_format(kSeriesSupportsCustomDateFormatFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  series_supports_callout_lines(kSeriesSupportsCalloutLinesFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  axis_supports_radar(kAxisSupportsRadarFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  axis_supports_custom_number_format(kAxisSupportsCustomNumberFormatFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  axis_supports_custom_date_format(kAxisSupportsCustomDateFormatFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartReferenceLinesArchive >, 11, false>
  reference_lines(kReferenceLinesFieldNumber, ::TSCH::ChartReferenceLinesArchive::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartStylePreset,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartPresetReferenceLineStylesArchive >, 11, false>
  preset_reference_line_styles(kPresetReferenceLineStylesFieldNumber, ::TSCH::ChartPresetReferenceLineStylesArchive::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::PropertyValueStorageContainerArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::PropertyValueStorageContainerReferenceLinesArchive >, 11, false>
  property_value_storage_container_reference_lines(kPropertyValueStorageContainerReferenceLinesFieldNumber, ::TSCH::PropertyValueStorageContainerReferenceLinesArchive::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::ChartDrawableArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartDrawableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartDrawableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartMultiDataIndexUpgrade*
Arena::CreateMaybeMessage< ::TSCH::ChartMultiDataIndexUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartMultiDataIndexUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGarlicMinMaxUpgrade*
Arena::CreateMaybeMessage< ::TSCH::ChartGarlicMinMaxUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGarlicMinMaxUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGarlicLabelFormatUpgrade*
Arena::CreateMaybeMessage< ::TSCH::ChartGarlicLabelFormatUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGarlicLabelFormatUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPasteboardAdditionsArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartPasteboardAdditionsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPasteboardAdditionsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPreserveAppearanceForPresetArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartPreserveAppearanceForPresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPreserveAppearanceForPresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSupportsRoundedCornersArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSupportsRoundedCornersArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSupportsRoundedCornersArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSupportsSeriesPropertySpacingArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSupportsSeriesPropertySpacingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSupportsSeriesPropertySpacingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry*
Arena::CreateMaybeMessage< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap*
Arena::CreateMaybeMessage< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartGridArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartGridArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartGridArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartMediatorArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartMediatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartMediatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartFillSetArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartFillSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartFillSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartStylePreset*
Arena::CreateMaybeMessage< ::TSCH::ChartStylePreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartStylePreset >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPresetsArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartPresetsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPresetsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PropertyValueStorageContainerArchive*
Arena::CreateMaybeMessage< ::TSCH::PropertyValueStorageContainerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PropertyValueStorageContainerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::StylePasteboardDataArchive*
Arena::CreateMaybeMessage< ::TSCH::StylePasteboardDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::StylePasteboardDataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionPathTypeArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSelectionPathTypeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionPathTypeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartAxisIDArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartAxisIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartAxisIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionPathArgumentArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSelectionPathArgumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionPathArgumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionPathArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSelectionPathArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionPathArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartSelectionArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartCDESelectionArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartCDESelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartCDESelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartUIState*
Arena::CreateMaybeMessage< ::TSCH::ChartUIState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartUIState >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartUIStateMultiDataIndexUpgrade*
Arena::CreateMaybeMessage< ::TSCH::ChartUIStateMultiDataIndexUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartUIStateMultiDataIndexUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartFormatStructExtensions*
Arena::CreateMaybeMessage< ::TSCH::ChartFormatStructExtensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartFormatStructExtensions >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartReferenceLineNonStyleItem*
Arena::CreateMaybeMessage< ::TSCH::ChartReferenceLineNonStyleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartReferenceLineNonStyleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartAxisReferenceLineNonStylesArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartAxisReferenceLineNonStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartAxisReferenceLineNonStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartAxisReferenceLineStylesArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartAxisReferenceLineStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartAxisReferenceLineStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartReferenceLinesArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartReferenceLinesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartReferenceLinesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartPresetReferenceLineStylesArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartPresetReferenceLineStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartPresetReferenceLineStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive*
Arena::CreateMaybeMessage< ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PropertyValueStorageContainerReferenceLinesArchive*
Arena::CreateMaybeMessage< ::TSCH::PropertyValueStorageContainerReferenceLinesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PropertyValueStorageContainerReferenceLinesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CollaboratorCDECursorSubselectionArchive*
Arena::CreateMaybeMessage< ::TSCH::CollaboratorCDECursorSubselectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CollaboratorCDECursorSubselectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::CollaboratorChartTitleCursorSubselectionArchive*
Arena::CreateMaybeMessage< ::TSCH::CollaboratorChartTitleCursorSubselectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::CollaboratorChartTitleCursorSubselectionArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
