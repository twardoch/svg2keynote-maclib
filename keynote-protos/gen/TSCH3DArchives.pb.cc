// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCH3DArchives.proto

#include "TSCH3DArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSCH {
PROTOBUF_CONSTEXPR Chart3DEnvironmentPackageArchive::Chart3DEnvironmentPackageArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.materials_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Chart3DEnvironmentPackageArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DEnvironmentPackageArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DEnvironmentPackageArchiveDefaultTypeInternal() {}
  union {
    Chart3DEnvironmentPackageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DEnvironmentPackageArchiveDefaultTypeInternal _Chart3DEnvironmentPackageArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DFillArchive::Chart3DFillArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.textureset_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lightingmodel_)*/nullptr
  , /*decltype(_impl_.fill_type_)*/0
  , /*decltype(_impl_.series_index_)*/0u} {}
struct Chart3DFillArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DFillArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DFillArchiveDefaultTypeInternal() {}
  union {
    Chart3DFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DFillArchiveDefaultTypeInternal _Chart3DFillArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DPointLightArchive::Chart3DPointLightArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr} {}
struct Chart3DPointLightArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DPointLightArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DPointLightArchiveDefaultTypeInternal() {}
  union {
    Chart3DPointLightArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DPointLightArchiveDefaultTypeInternal _Chart3DPointLightArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DDirectionalLightArchive::Chart3DDirectionalLightArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.direction_)*/nullptr} {}
struct Chart3DDirectionalLightArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DDirectionalLightArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DDirectionalLightArchiveDefaultTypeInternal() {}
  union {
    Chart3DDirectionalLightArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DDirectionalLightArchiveDefaultTypeInternal _Chart3DDirectionalLightArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DSpotLightArchive::Chart3DSpotLightArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.direction_)*/nullptr
  , /*decltype(_impl_.cutoff_)*/0
  , /*decltype(_impl_.dropoff_)*/0} {}
struct Chart3DSpotLightArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DSpotLightArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DSpotLightArchiveDefaultTypeInternal() {}
  union {
    Chart3DSpotLightArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DSpotLightArchiveDefaultTypeInternal _Chart3DSpotLightArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DLightArchive::Chart3DLightArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ambient_color_)*/nullptr
  , /*decltype(_impl_.diffuse_color_)*/nullptr
  , /*decltype(_impl_.specular_color_)*/nullptr
  , /*decltype(_impl_.attenuation_)*/nullptr
  , /*decltype(_impl_.point_light_)*/nullptr
  , /*decltype(_impl_.directional_light_)*/nullptr
  , /*decltype(_impl_.spot_light_)*/nullptr
  , /*decltype(_impl_.intensity_)*/0
  , /*decltype(_impl_.coordinate_space_)*/0u
  , /*decltype(_impl_.enabled_)*/false} {}
struct Chart3DLightArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DLightArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DLightArchiveDefaultTypeInternal() {}
  union {
    Chart3DLightArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DLightArchiveDefaultTypeInternal _Chart3DLightArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DLightingModelArchive::Chart3DLightingModelArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.phong_)*/nullptr
  , /*decltype(_impl_.fixed_function_)*/nullptr
  , /*decltype(_impl_.environment_)*/nullptr} {}
struct Chart3DLightingModelArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DLightingModelArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DLightingModelArchiveDefaultTypeInternal() {}
  union {
    Chart3DLightingModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DLightingModelArchiveDefaultTypeInternal _Chart3DLightingModelArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DLightingPackageArchive::Chart3DLightingPackageArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lights_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Chart3DLightingPackageArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DLightingPackageArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DLightingPackageArchiveDefaultTypeInternal() {}
  union {
    Chart3DLightingPackageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DLightingPackageArchiveDefaultTypeInternal _Chart3DLightingPackageArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DTexturesMaterialArchive::Chart3DTexturesMaterialArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.textures_)*/{}
  , /*decltype(_impl_.color_)*/nullptr} {}
struct Chart3DTexturesMaterialArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DTexturesMaterialArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DTexturesMaterialArchiveDefaultTypeInternal() {}
  union {
    Chart3DTexturesMaterialArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DTexturesMaterialArchiveDefaultTypeInternal _Chart3DTexturesMaterialArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DEmissiveMaterialArchive::Chart3DEmissiveMaterialArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tilings_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct Chart3DEmissiveMaterialArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DEmissiveMaterialArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DEmissiveMaterialArchiveDefaultTypeInternal() {}
  union {
    Chart3DEmissiveMaterialArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DEmissiveMaterialArchiveDefaultTypeInternal _Chart3DEmissiveMaterialArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DDiffuseMaterialArchive::Chart3DDiffuseMaterialArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tilings_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct Chart3DDiffuseMaterialArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DDiffuseMaterialArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DDiffuseMaterialArchiveDefaultTypeInternal() {}
  union {
    Chart3DDiffuseMaterialArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DDiffuseMaterialArchiveDefaultTypeInternal _Chart3DDiffuseMaterialArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DModulateMaterialArchive::Chart3DModulateMaterialArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tilings_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct Chart3DModulateMaterialArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DModulateMaterialArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DModulateMaterialArchiveDefaultTypeInternal() {}
  union {
    Chart3DModulateMaterialArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DModulateMaterialArchiveDefaultTypeInternal _Chart3DModulateMaterialArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DSpecularMaterialArchive::Chart3DSpecularMaterialArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tilings_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct Chart3DSpecularMaterialArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DSpecularMaterialArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DSpecularMaterialArchiveDefaultTypeInternal() {}
  union {
    Chart3DSpecularMaterialArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DSpecularMaterialArchiveDefaultTypeInternal _Chart3DSpecularMaterialArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DShininessMaterialArchive::Chart3DShininessMaterialArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tilings_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct Chart3DShininessMaterialArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DShininessMaterialArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DShininessMaterialArchiveDefaultTypeInternal() {}
  union {
    Chart3DShininessMaterialArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DShininessMaterialArchiveDefaultTypeInternal _Chart3DShininessMaterialArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DEnvironmentMaterialArchive::Chart3DEnvironmentMaterialArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obsolete_tilings_)*/{}
  , /*decltype(_impl_.tilings_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.decalmode_)*/false} {}
struct Chart3DEnvironmentMaterialArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DEnvironmentMaterialArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DEnvironmentMaterialArchiveDefaultTypeInternal() {}
  union {
    Chart3DEnvironmentMaterialArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DEnvironmentMaterialArchiveDefaultTypeInternal _Chart3DEnvironmentMaterialArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DFixedFunctionLightingModelArchive::Chart3DFixedFunctionLightingModelArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.materials_)*/nullptr} {}
struct Chart3DFixedFunctionLightingModelArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DFixedFunctionLightingModelArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DFixedFunctionLightingModelArchiveDefaultTypeInternal() {}
  union {
    Chart3DFixedFunctionLightingModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DFixedFunctionLightingModelArchiveDefaultTypeInternal _Chart3DFixedFunctionLightingModelArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DPhongLightingModelArchive::Chart3DPhongLightingModelArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.materials_)*/nullptr} {}
struct Chart3DPhongLightingModelArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DPhongLightingModelArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DPhongLightingModelArchiveDefaultTypeInternal() {}
  union {
    Chart3DPhongLightingModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DPhongLightingModelArchiveDefaultTypeInternal _Chart3DPhongLightingModelArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DPhongMaterialPackageArchive::Chart3DPhongMaterialPackageArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.emissive_)*/nullptr
  , /*decltype(_impl_.diffuse_)*/nullptr
  , /*decltype(_impl_.modulate_)*/nullptr
  , /*decltype(_impl_.specular_)*/nullptr
  , /*decltype(_impl_.shininess_)*/nullptr} {}
struct Chart3DPhongMaterialPackageArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DPhongMaterialPackageArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DPhongMaterialPackageArchiveDefaultTypeInternal() {}
  union {
    Chart3DPhongMaterialPackageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DPhongMaterialPackageArchiveDefaultTypeInternal _Chart3DPhongMaterialPackageArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DTSPImageDataTextureArchive::Chart3DTSPImageDataTextureArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.database_data_)*/nullptr
  , /*decltype(_impl_.database_mipmapdata_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.mipmapdata_)*/nullptr} {}
struct Chart3DTSPImageDataTextureArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DTSPImageDataTextureArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DTSPImageDataTextureArchiveDefaultTypeInternal() {}
  union {
    Chart3DTSPImageDataTextureArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DTSPImageDataTextureArchiveDefaultTypeInternal _Chart3DTSPImageDataTextureArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DBaseImageTextureTilingArchive::Chart3DBaseImageTextureTilingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.scale_)*/nullptr
  , /*decltype(_impl_.rotation_)*/0} {}
struct Chart3DBaseImageTextureTilingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DBaseImageTextureTilingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DBaseImageTextureTilingArchiveDefaultTypeInternal() {}
  union {
    Chart3DBaseImageTextureTilingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DBaseImageTextureTilingArchiveDefaultTypeInternal _Chart3DBaseImageTextureTilingArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DImageTextureTilingArchive::Chart3DImageTextureTilingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.wrap_)*/0
  , /*decltype(_impl_.face_)*/0
  , /*decltype(_impl_.xposition_)*/0
  , /*decltype(_impl_.yposition_)*/0
  , /*decltype(_impl_.scontinuity_)*/0
  , /*decltype(_impl_.tcontinuity_)*/0
  , /*decltype(_impl_.reveal_)*/false} {}
struct Chart3DImageTextureTilingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DImageTextureTilingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DImageTextureTilingArchiveDefaultTypeInternal() {}
  union {
    Chart3DImageTextureTilingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DImageTextureTilingArchiveDefaultTypeInternal _Chart3DImageTextureTilingArchive_default_instance_;
PROTOBUF_CONSTEXPR Chart3DVectorArchive::Chart3DVectorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0} {}
struct Chart3DVectorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Chart3DVectorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Chart3DVectorArchiveDefaultTypeInternal() {}
  union {
    Chart3DVectorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Chart3DVectorArchiveDefaultTypeInternal _Chart3DVectorArchive_default_instance_;
}  // namespace TSCH
static ::_pb::Metadata file_level_metadata_TSCH3DArchives_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSCH3DArchives_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSCH3DArchives_2eproto = nullptr;

const uint32_t TableStruct_TSCH3DArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEnvironmentPackageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEnvironmentPackageArchive, _impl_.materials_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DFillArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DFillArchive, _impl_.lightingmodel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DFillArchive, _impl_.textureset_id_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DFillArchive, _impl_.fill_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DFillArchive, _impl_.series_index_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPointLightArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPointLightArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPointLightArchive, _impl_.position_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DDirectionalLightArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DDirectionalLightArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DDirectionalLightArchive, _impl_.direction_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpotLightArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpotLightArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpotLightArchive, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpotLightArchive, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpotLightArchive, _impl_.cutoff_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpotLightArchive, _impl_.dropoff_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.ambient_color_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.diffuse_color_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.specular_color_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.intensity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.attenuation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.coordinate_space_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.point_light_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.directional_light_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightArchive, _impl_.spot_light_),
  0,
  1,
  2,
  3,
  8,
  4,
  9,
  10,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightingModelArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightingModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightingModelArchive, _impl_.phong_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightingModelArchive, _impl_.fixed_function_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightingModelArchive, _impl_.environment_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightingPackageArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightingPackageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightingPackageArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DLightingPackageArchive, _impl_.lights_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTexturesMaterialArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTexturesMaterialArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTexturesMaterialArchive, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTexturesMaterialArchive, _impl_.textures_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEmissiveMaterialArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEmissiveMaterialArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEmissiveMaterialArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEmissiveMaterialArchive, _impl_.tilings_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DDiffuseMaterialArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DDiffuseMaterialArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DDiffuseMaterialArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DDiffuseMaterialArchive, _impl_.tilings_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DModulateMaterialArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DModulateMaterialArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DModulateMaterialArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DModulateMaterialArchive, _impl_.tilings_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpecularMaterialArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpecularMaterialArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpecularMaterialArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DSpecularMaterialArchive, _impl_.tilings_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DShininessMaterialArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DShininessMaterialArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DShininessMaterialArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DShininessMaterialArchive, _impl_.tilings_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEnvironmentMaterialArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEnvironmentMaterialArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEnvironmentMaterialArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEnvironmentMaterialArchive, _impl_.obsolete_tilings_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEnvironmentMaterialArchive, _impl_.decalmode_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DEnvironmentMaterialArchive, _impl_.tilings_),
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DFixedFunctionLightingModelArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DFixedFunctionLightingModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DFixedFunctionLightingModelArchive, _impl_.materials_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongLightingModelArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongLightingModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongLightingModelArchive, _impl_.materials_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongMaterialPackageArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongMaterialPackageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongMaterialPackageArchive, _impl_.emissive_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongMaterialPackageArchive, _impl_.diffuse_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongMaterialPackageArchive, _impl_.modulate_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongMaterialPackageArchive, _impl_.specular_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DPhongMaterialPackageArchive, _impl_.shininess_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTSPImageDataTextureArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTSPImageDataTextureArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTSPImageDataTextureArchive, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTSPImageDataTextureArchive, _impl_.mipmapdata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTSPImageDataTextureArchive, _impl_.database_data_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DTSPImageDataTextureArchive, _impl_.database_mipmapdata_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DBaseImageTextureTilingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DBaseImageTextureTilingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DBaseImageTextureTilingArchive, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DBaseImageTextureTilingArchive, _impl_.rotation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_.wrap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_.face_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_.xposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_.yposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_.scontinuity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_.tcontinuity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DImageTextureTilingArchive, _impl_.reveal_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DVectorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DVectorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DVectorArchive, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DVectorArchive, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DVectorArchive, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Chart3DVectorArchive, _impl_.w_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TSCH::Chart3DEnvironmentPackageArchive)},
  { 7, 17, -1, sizeof(::TSCH::Chart3DFillArchive)},
  { 21, 28, -1, sizeof(::TSCH::Chart3DPointLightArchive)},
  { 29, 36, -1, sizeof(::TSCH::Chart3DDirectionalLightArchive)},
  { 37, 47, -1, sizeof(::TSCH::Chart3DSpotLightArchive)},
  { 51, 68, -1, sizeof(::TSCH::Chart3DLightArchive)},
  { 79, 88, -1, sizeof(::TSCH::Chart3DLightingModelArchive)},
  { 91, 99, -1, sizeof(::TSCH::Chart3DLightingPackageArchive)},
  { 101, 109, -1, sizeof(::TSCH::Chart3DTexturesMaterialArchive)},
  { 111, 119, -1, sizeof(::TSCH::Chart3DEmissiveMaterialArchive)},
  { 121, 129, -1, sizeof(::TSCH::Chart3DDiffuseMaterialArchive)},
  { 131, 139, -1, sizeof(::TSCH::Chart3DModulateMaterialArchive)},
  { 141, 149, -1, sizeof(::TSCH::Chart3DSpecularMaterialArchive)},
  { 151, 159, -1, sizeof(::TSCH::Chart3DShininessMaterialArchive)},
  { 161, 171, -1, sizeof(::TSCH::Chart3DEnvironmentMaterialArchive)},
  { 175, 182, -1, sizeof(::TSCH::Chart3DFixedFunctionLightingModelArchive)},
  { 183, 190, -1, sizeof(::TSCH::Chart3DPhongLightingModelArchive)},
  { 191, 202, -1, sizeof(::TSCH::Chart3DPhongMaterialPackageArchive)},
  { 207, 217, -1, sizeof(::TSCH::Chart3DTSPImageDataTextureArchive)},
  { 221, 229, -1, sizeof(::TSCH::Chart3DBaseImageTextureTilingArchive)},
  { 231, 246, -1, sizeof(::TSCH::Chart3DImageTextureTilingArchive)},
  { 255, 265, -1, sizeof(::TSCH::Chart3DVectorArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSCH::_Chart3DEnvironmentPackageArchive_default_instance_._instance,
  &::TSCH::_Chart3DFillArchive_default_instance_._instance,
  &::TSCH::_Chart3DPointLightArchive_default_instance_._instance,
  &::TSCH::_Chart3DDirectionalLightArchive_default_instance_._instance,
  &::TSCH::_Chart3DSpotLightArchive_default_instance_._instance,
  &::TSCH::_Chart3DLightArchive_default_instance_._instance,
  &::TSCH::_Chart3DLightingModelArchive_default_instance_._instance,
  &::TSCH::_Chart3DLightingPackageArchive_default_instance_._instance,
  &::TSCH::_Chart3DTexturesMaterialArchive_default_instance_._instance,
  &::TSCH::_Chart3DEmissiveMaterialArchive_default_instance_._instance,
  &::TSCH::_Chart3DDiffuseMaterialArchive_default_instance_._instance,
  &::TSCH::_Chart3DModulateMaterialArchive_default_instance_._instance,
  &::TSCH::_Chart3DSpecularMaterialArchive_default_instance_._instance,
  &::TSCH::_Chart3DShininessMaterialArchive_default_instance_._instance,
  &::TSCH::_Chart3DEnvironmentMaterialArchive_default_instance_._instance,
  &::TSCH::_Chart3DFixedFunctionLightingModelArchive_default_instance_._instance,
  &::TSCH::_Chart3DPhongLightingModelArchive_default_instance_._instance,
  &::TSCH::_Chart3DPhongMaterialPackageArchive_default_instance_._instance,
  &::TSCH::_Chart3DTSPImageDataTextureArchive_default_instance_._instance,
  &::TSCH::_Chart3DBaseImageTextureTilingArchive_default_instance_._instance,
  &::TSCH::_Chart3DImageTextureTilingArchive_default_instance_._instance,
  &::TSCH::_Chart3DVectorArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSCH3DArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024TSCH3DArchives.proto\022\004TSCH\032\021TSPMessage"
  "s.proto\032\021TSDArchives.proto\"^\n Chart3DEnv"
  "ironmentPackageArchive\022:\n\tmaterials\030\001 \003("
  "\0132\'.TSCH.Chart3DEnvironmentMaterialArchi"
  "ve\"\246\001\n\022Chart3DFillArchive\0228\n\rlightingmod"
  "el\030\001 \001(\0132!.TSCH.Chart3DLightingModelArch"
  "ive\022\025\n\rtextureset_id\030\002 \001(\t\022)\n\tfill_type\030"
  "\003 \001(\0162\026.TSCH.FillPropertyType\022\024\n\014series_"
  "index\030\004 \001(\r\"H\n\030Chart3DPointLightArchive\022"
  ",\n\010position\030\001 \002(\0132\032.TSCH.Chart3DVectorAr"
  "chive\"O\n\036Chart3DDirectionalLightArchive\022"
  "-\n\tdirection\030\001 \002(\0132\032.TSCH.Chart3DVectorA"
  "rchive\"\227\001\n\027Chart3DSpotLightArchive\022,\n\010po"
  "sition\030\001 \002(\0132\032.TSCH.Chart3DVectorArchive"
  "\022-\n\tdirection\030\002 \002(\0132\032.TSCH.Chart3DVector"
  "Archive\022\016\n\006cutoff\030\003 \002(\002\022\017\n\007dropoff\030\004 \002(\002"
  "\"\325\003\n\023Chart3DLightArchive\022\014\n\004name\030\001 \002(\t\0221"
  "\n\rambient_color\030\002 \002(\0132\032.TSCH.Chart3DVect"
  "orArchive\0221\n\rdiffuse_color\030\003 \002(\0132\032.TSCH."
  "Chart3DVectorArchive\0222\n\016specular_color\030\004"
  " \002(\0132\032.TSCH.Chart3DVectorArchive\022\021\n\tinte"
  "nsity\030\005 \002(\002\022/\n\013attenuation\030\006 \002(\0132\032.TSCH."
  "Chart3DVectorArchive\022\030\n\020coordinate_space"
  "\030\007 \002(\r\022\017\n\007enabled\030\010 \002(\010\0223\n\013point_light\030\t"
  " \001(\0132\036.TSCH.Chart3DPointLightArchive\022\?\n\021"
  "directional_light\030\n \001(\0132$.TSCH.Chart3DDi"
  "rectionalLightArchive\0221\n\nspot_light\030\013 \001("
  "\0132\035.TSCH.Chart3DSpotLightArchive\"\331\001\n\033Cha"
  "rt3DLightingModelArchive\0225\n\005phong\030\001 \001(\0132"
  "&.TSCH.Chart3DPhongLightingModelArchive\022"
  "F\n\016fixed_function\030\002 \001(\0132..TSCH.Chart3DFi"
  "xedFunctionLightingModelArchive\022;\n\013envir"
  "onment\030\003 \001(\0132&.TSCH.Chart3DEnvironmentPa"
  "ckageArchive\"X\n\035Chart3DLightingPackageAr"
  "chive\022\014\n\004name\030\001 \002(\t\022)\n\006lights\030\002 \003(\0132\031.TS"
  "CH.Chart3DLightArchive\"\206\001\n\036Chart3DTextur"
  "esMaterialArchive\022)\n\005color\030\001 \002(\0132\032.TSCH."
  "Chart3DVectorArchive\0229\n\010textures\030\002 \003(\0132\'"
  ".TSCH.Chart3DTSPImageDataTextureArchive\""
  "\216\001\n\036Chart3DEmissiveMaterialArchive\0223\n\005su"
  "per\030\001 \002(\0132$.TSCH.Chart3DTexturesMaterial"
  "Archive\0227\n\007tilings\030\002 \003(\0132&.TSCH.Chart3DI"
  "mageTextureTilingArchive\"\215\001\n\035Chart3DDiff"
  "useMaterialArchive\0223\n\005super\030\001 \002(\0132$.TSCH"
  ".Chart3DTexturesMaterialArchive\0227\n\007tilin"
  "gs\030\002 \003(\0132&.TSCH.Chart3DImageTextureTilin"
  "gArchive\"\216\001\n\036Chart3DModulateMaterialArch"
  "ive\0223\n\005super\030\001 \002(\0132$.TSCH.Chart3DTexture"
  "sMaterialArchive\0227\n\007tilings\030\002 \003(\0132&.TSCH"
  ".Chart3DImageTextureTilingArchive\"\216\001\n\036Ch"
  "art3DSpecularMaterialArchive\0223\n\005super\030\001 "
  "\002(\0132$.TSCH.Chart3DTexturesMaterialArchiv"
  "e\0227\n\007tilings\030\002 \003(\0132&.TSCH.Chart3DImageTe"
  "xtureTilingArchive\"\217\001\n\037Chart3DShininessM"
  "aterialArchive\0223\n\005super\030\001 \002(\0132$.TSCH.Cha"
  "rt3DTexturesMaterialArchive\0227\n\007tilings\030\002"
  " \003(\0132&.TSCH.Chart3DImageTextureTilingArc"
  "hive\"\352\001\n!Chart3DEnvironmentMaterialArchi"
  "ve\0223\n\005super\030\001 \002(\0132$.TSCH.Chart3DTextures"
  "MaterialArchive\022D\n\020OBSOLETE_tilings\030\002 \003("
  "\0132*.TSCH.Chart3DBaseImageTextureTilingAr"
  "chive\022\021\n\tdecalMode\030\003 \001(\010\0227\n\007tilings\030\004 \003("
  "\0132&.TSCH.Chart3DImageTextureTilingArchiv"
  "e\"g\n(Chart3DFixedFunctionLightingModelAr"
  "chive\022;\n\tmaterials\030\001 \002(\0132(.TSCH.Chart3DP"
  "hongMaterialPackageArchive\"_\n Chart3DPho"
  "ngLightingModelArchive\022;\n\tmaterials\030\001 \002("
  "\0132(.TSCH.Chart3DPhongMaterialPackageArch"
  "ive\"\274\002\n\"Chart3DPhongMaterialPackageArchi"
  "ve\0226\n\010emissive\030\001 \001(\0132$.TSCH.Chart3DEmiss"
  "iveMaterialArchive\0224\n\007diffuse\030\002 \001(\0132#.TS"
  "CH.Chart3DDiffuseMaterialArchive\0226\n\010modu"
  "late\030\003 \001(\0132$.TSCH.Chart3DModulateMateria"
  "lArchive\0226\n\010specular\030\004 \001(\0132$.TSCH.Chart3"
  "DSpecularMaterialArchive\0228\n\tshininess\030\005 "
  "\001(\0132%.TSCH.Chart3DShininessMaterialArchi"
  "ve\"\301\001\n!Chart3DTSPImageDataTextureArchive"
  "\022 \n\004data\030\003 \001(\0132\022.TSP.DataReference\022&\n\nmi"
  "pmapdata\030\004 \001(\0132\022.TSP.DataReference\022%\n\rda"
  "tabase_data\030\001 \001(\0132\016.TSP.Reference\022+\n\023dat"
  "abase_mipmapdata\030\002 \001(\0132\016.TSP.Reference\"c"
  "\n$Chart3DBaseImageTextureTilingArchive\022)"
  "\n\005scale\030\001 \001(\0132\032.TSCH.Chart3DVectorArchiv"
  "e\022\020\n\010rotation\030\002 \001(\002\"\254\003\n Chart3DImageText"
  "ureTilingArchive\0229\n\005super\030\001 \002(\0132*.TSCH.C"
  "hart3DBaseImageTextureTilingArchive\022%\n\004m"
  "ode\030\002 \001(\0162\027.TSCH.TextureTilingMode\022%\n\004wr"
  "ap\030\003 \001(\0162\027.TSCH.TextureTilingWrap\022%\n\004fac"
  "e\030\004 \001(\0162\027.TSCH.TextureTilingFace\022/\n\txpos"
  "ition\030\005 \001(\0162\034.TSCH.TextureTilingXPositio"
  "n\022/\n\typosition\030\006 \001(\0162\034.TSCH.TextureTilin"
  "gYPosition\0222\n\013scontinuity\030\007 \001(\0162\035.TSCH.T"
  "extureTilingContinuity\0222\n\013tcontinuity\030\010 "
  "\001(\0162\035.TSCH.TextureTilingContinuity\022\016\n\006re"
  "veal\030\t \001(\010\"B\n\024Chart3DVectorArchive\022\t\n\001x\030"
  "\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030\004 \002(\002*L"
  "\n\021TextureTilingMode\022\031\n\025textureTilingMode"
  "None\020\000\022\034\n\030textureTilingModeTallest\020\001*k\n\021"
  "TextureTilingFace\022\030\n\024textureTilingFaceAl"
  "l\020\000\022!\n\035textureTilingFaceTopAndBottom\020\001\022\031"
  "\n\025textureTilingFaceSide\020\002*R\n\021TextureTili"
  "ngWrap\022\036\n\032textureTilingWrapProjected\020\000\022\035"
  "\n\031textureTilingWrapFaceWrap\020\001*{\n\026Texture"
  "TilingXPosition\022\036\n\032textureTilingXPositio"
  "nLeft\020\000\022 \n\034textureTilingXPositionCenter\020"
  "\001\022\037\n\033textureTilingXPositionRight\020\002*{\n\026Te"
  "xtureTilingYPosition\022\035\n\031textureTilingYPo"
  "sitionTop\020\000\022 \n\034textureTilingYPositionMid"
  "dle\020\001\022 \n\034textureTilingYPositionBottom\020\002*"
  "\245\001\n\027TextureTilingContinuity\022\037\n\033textureTi"
  "lingContinuityNone\020\000\022!\n\035textureTilingCon"
  "tinuityGlobal\020\001\022!\n\035textureTilingContinui"
  "tySeries\020\002\022#\n\037textureTilingContinuityJit"
  "tered\020\003*\263\001\n\020FillPropertyType\022\035\n\031fillProp"
  "ertyTypeUndefined\020\000\022\030\n\024fillPropertyTypeA"
  "rea\020\001\022\027\n\023fillPropertyTypeBar\020\002\022\032\n\026fillPr"
  "opertyTypeColumn\020\003\022\030\n\024fillPropertyTypeLi"
  "ne\020\004\022\027\n\023fillPropertyTypePie\020\005::\n\006fill3d\022"
  "\020.TSD.FillArchive\030d \001(\0132\030.TSCH.Chart3DFi"
  "llArchive"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSCH3DArchives_2eproto_deps[2] = {
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSCH3DArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSCH3DArchives_2eproto = {
    false, false, 4769, descriptor_table_protodef_TSCH3DArchives_2eproto,
    "TSCH3DArchives.proto",
    &descriptor_table_TSCH3DArchives_2eproto_once, descriptor_table_TSCH3DArchives_2eproto_deps, 2, 22,
    schemas, file_default_instances, TableStruct_TSCH3DArchives_2eproto::offsets,
    file_level_metadata_TSCH3DArchives_2eproto, file_level_enum_descriptors_TSCH3DArchives_2eproto,
    file_level_service_descriptors_TSCH3DArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSCH3DArchives_2eproto_getter() {
  return &descriptor_table_TSCH3DArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSCH3DArchives_2eproto(&descriptor_table_TSCH3DArchives_2eproto);
namespace TSCH {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCH3DArchives_2eproto);
  return file_level_enum_descriptors_TSCH3DArchives_2eproto[0];
}
bool TextureTilingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingFace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCH3DArchives_2eproto);
  return file_level_enum_descriptors_TSCH3DArchives_2eproto[1];
}
bool TextureTilingFace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingWrap_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCH3DArchives_2eproto);
  return file_level_enum_descriptors_TSCH3DArchives_2eproto[2];
}
bool TextureTilingWrap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingXPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCH3DArchives_2eproto);
  return file_level_enum_descriptors_TSCH3DArchives_2eproto[3];
}
bool TextureTilingXPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingYPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCH3DArchives_2eproto);
  return file_level_enum_descriptors_TSCH3DArchives_2eproto[4];
}
bool TextureTilingYPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextureTilingContinuity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCH3DArchives_2eproto);
  return file_level_enum_descriptors_TSCH3DArchives_2eproto[5];
}
bool TextureTilingContinuity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillPropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCH3DArchives_2eproto);
  return file_level_enum_descriptors_TSCH3DArchives_2eproto[6];
}
bool FillPropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Chart3DEnvironmentPackageArchive::_Internal {
 public:
};

Chart3DEnvironmentPackageArchive::Chart3DEnvironmentPackageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DEnvironmentPackageArchive)
}
Chart3DEnvironmentPackageArchive::Chart3DEnvironmentPackageArchive(const Chart3DEnvironmentPackageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DEnvironmentPackageArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){from._impl_.materials_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DEnvironmentPackageArchive)
}

inline void Chart3DEnvironmentPackageArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.materials_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Chart3DEnvironmentPackageArchive::~Chart3DEnvironmentPackageArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DEnvironmentPackageArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DEnvironmentPackageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.materials_.~RepeatedPtrField();
}

void Chart3DEnvironmentPackageArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DEnvironmentPackageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DEnvironmentPackageArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.materials_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DEnvironmentPackageArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCH.Chart3DEnvironmentMaterialArchive materials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DEnvironmentPackageArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DEnvironmentPackageArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DEnvironmentMaterialArchive materials = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_materials_size()); i < n; i++) {
    const auto& repfield = this->_internal_materials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DEnvironmentPackageArchive)
  return target;
}

size_t Chart3DEnvironmentPackageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DEnvironmentPackageArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DEnvironmentMaterialArchive materials = 1;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->_impl_.materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DEnvironmentPackageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DEnvironmentPackageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DEnvironmentPackageArchive::GetClassData() const { return &_class_data_; }


void Chart3DEnvironmentPackageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DEnvironmentPackageArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DEnvironmentPackageArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DEnvironmentPackageArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.materials_.MergeFrom(from._impl_.materials_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DEnvironmentPackageArchive::CopyFrom(const Chart3DEnvironmentPackageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DEnvironmentPackageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DEnvironmentPackageArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.materials_))
    return false;
  return true;
}

void Chart3DEnvironmentPackageArchive::InternalSwap(Chart3DEnvironmentPackageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.materials_.InternalSwap(&other->_impl_.materials_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DEnvironmentPackageArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[0]);
}

// ===================================================================

class Chart3DFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DFillArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DLightingModelArchive& lightingmodel(const Chart3DFillArchive* msg);
  static void set_has_lightingmodel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_textureset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fill_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_series_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSCH::Chart3DLightingModelArchive&
Chart3DFillArchive::_Internal::lightingmodel(const Chart3DFillArchive* msg) {
  return *msg->_impl_.lightingmodel_;
}
Chart3DFillArchive::Chart3DFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DFillArchive)
}
Chart3DFillArchive::Chart3DFillArchive(const Chart3DFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DFillArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.textureset_id_){}
    , decltype(_impl_.lightingmodel_){nullptr}
    , decltype(_impl_.fill_type_){}
    , decltype(_impl_.series_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.textureset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textureset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_textureset_id()) {
    _this->_impl_.textureset_id_.Set(from._internal_textureset_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lightingmodel()) {
    _this->_impl_.lightingmodel_ = new ::TSCH::Chart3DLightingModelArchive(*from._impl_.lightingmodel_);
  }
  ::memcpy(&_impl_.fill_type_, &from._impl_.fill_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.series_index_) -
    reinterpret_cast<char*>(&_impl_.fill_type_)) + sizeof(_impl_.series_index_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DFillArchive)
}

inline void Chart3DFillArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.textureset_id_){}
    , decltype(_impl_.lightingmodel_){nullptr}
    , decltype(_impl_.fill_type_){0}
    , decltype(_impl_.series_index_){0u}
  };
  _impl_.textureset_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.textureset_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Chart3DFillArchive::~Chart3DFillArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DFillArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.textureset_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lightingmodel_;
}

void Chart3DFillArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DFillArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.textureset_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lightingmodel_ != nullptr);
      _impl_.lightingmodel_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.fill_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.series_index_) -
        reinterpret_cast<char*>(&_impl_.fill_type_)) + sizeof(_impl_.series_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DFillArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.Chart3DLightingModelArchive lightingmodel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lightingmodel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string textureset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_textureset_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Chart3DFillArchive.textureset_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.FillPropertyType fill_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::FillPropertyType_IsValid(val))) {
            _internal_set_fill_type(static_cast<::TSCH::FillPropertyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_series_index(&has_bits);
          _impl_.series_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DFillArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DFillArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.Chart3DLightingModelArchive lightingmodel = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lightingmodel(this),
        _Internal::lightingmodel(this).GetCachedSize(), target, stream);
  }

  // optional string textureset_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_textureset_id().data(), static_cast<int>(this->_internal_textureset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Chart3DFillArchive.textureset_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_textureset_id(), target);
  }

  // optional .TSCH.FillPropertyType fill_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_fill_type(), target);
  }

  // optional uint32 series_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_series_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DFillArchive)
  return target;
}

size_t Chart3DFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DFillArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string textureset_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_textureset_id());
    }

    // optional .TSCH.Chart3DLightingModelArchive lightingmodel = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lightingmodel_);
    }

    // optional .TSCH.FillPropertyType fill_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fill_type());
    }

    // optional uint32 series_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_series_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DFillArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DFillArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DFillArchive::GetClassData() const { return &_class_data_; }


void Chart3DFillArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DFillArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DFillArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DFillArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_textureset_id(from._internal_textureset_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_lightingmodel()->::TSCH::Chart3DLightingModelArchive::MergeFrom(
          from._internal_lightingmodel());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fill_type_ = from._impl_.fill_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.series_index_ = from._impl_.series_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DFillArchive::CopyFrom(const Chart3DFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DFillArchive::IsInitialized() const {
  if (_internal_has_lightingmodel()) {
    if (!_impl_.lightingmodel_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DFillArchive::InternalSwap(Chart3DFillArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.textureset_id_, lhs_arena,
      &other->_impl_.textureset_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DFillArchive, _impl_.series_index_)
      + sizeof(Chart3DFillArchive::_impl_.series_index_)
      - PROTOBUF_FIELD_OFFSET(Chart3DFillArchive, _impl_.lightingmodel_)>(
          reinterpret_cast<char*>(&_impl_.lightingmodel_),
          reinterpret_cast<char*>(&other->_impl_.lightingmodel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DFillArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[1]);
}

// ===================================================================

class Chart3DPointLightArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DPointLightArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DVectorArchive& position(const Chart3DPointLightArchive* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DVectorArchive&
Chart3DPointLightArchive::_Internal::position(const Chart3DPointLightArchive* msg) {
  return *msg->_impl_.position_;
}
Chart3DPointLightArchive::Chart3DPointLightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DPointLightArchive)
}
Chart3DPointLightArchive::Chart3DPointLightArchive(const Chart3DPointLightArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DPointLightArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DPointLightArchive)
}

inline void Chart3DPointLightArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
  };
}

Chart3DPointLightArchive::~Chart3DPointLightArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DPointLightArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DPointLightArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void Chart3DPointLightArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DPointLightArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DPointLightArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DPointLightArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DVectorArchive position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DPointLightArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DPointLightArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DVectorArchive position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DPointLightArchive)
  return target;
}

size_t Chart3DPointLightArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DPointLightArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DVectorArchive position = 1;
  if (_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DPointLightArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DPointLightArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DPointLightArchive::GetClassData() const { return &_class_data_; }


void Chart3DPointLightArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DPointLightArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DPointLightArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DPointLightArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::TSCH::Chart3DVectorArchive::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DPointLightArchive::CopyFrom(const Chart3DPointLightArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DPointLightArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DPointLightArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_position()) {
    if (!_impl_.position_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DPointLightArchive::InternalSwap(Chart3DPointLightArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.position_, other->_impl_.position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DPointLightArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[2]);
}

// ===================================================================

class Chart3DDirectionalLightArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DDirectionalLightArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DVectorArchive& direction(const Chart3DDirectionalLightArchive* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DVectorArchive&
Chart3DDirectionalLightArchive::_Internal::direction(const Chart3DDirectionalLightArchive* msg) {
  return *msg->_impl_.direction_;
}
Chart3DDirectionalLightArchive::Chart3DDirectionalLightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DDirectionalLightArchive)
}
Chart3DDirectionalLightArchive::Chart3DDirectionalLightArchive(const Chart3DDirectionalLightArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DDirectionalLightArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.direction_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    _this->_impl_.direction_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.direction_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DDirectionalLightArchive)
}

inline void Chart3DDirectionalLightArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.direction_){nullptr}
  };
}

Chart3DDirectionalLightArchive::~Chart3DDirectionalLightArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DDirectionalLightArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DDirectionalLightArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.direction_;
}

void Chart3DDirectionalLightArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DDirectionalLightArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DDirectionalLightArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.direction_ != nullptr);
    _impl_.direction_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DDirectionalLightArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DVectorArchive direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DDirectionalLightArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DDirectionalLightArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DVectorArchive direction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DDirectionalLightArchive)
  return target;
}

size_t Chart3DDirectionalLightArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DDirectionalLightArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DVectorArchive direction = 1;
  if (_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DDirectionalLightArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DDirectionalLightArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DDirectionalLightArchive::GetClassData() const { return &_class_data_; }


void Chart3DDirectionalLightArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DDirectionalLightArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DDirectionalLightArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DDirectionalLightArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_direction()) {
    _this->_internal_mutable_direction()->::TSCH::Chart3DVectorArchive::MergeFrom(
        from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DDirectionalLightArchive::CopyFrom(const Chart3DDirectionalLightArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DDirectionalLightArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DDirectionalLightArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_direction()) {
    if (!_impl_.direction_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DDirectionalLightArchive::InternalSwap(Chart3DDirectionalLightArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.direction_, other->_impl_.direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DDirectionalLightArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[3]);
}

// ===================================================================

class Chart3DSpotLightArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DSpotLightArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DVectorArchive& position(const Chart3DSpotLightArchive* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::Chart3DVectorArchive& direction(const Chart3DSpotLightArchive* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cutoff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dropoff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSCH::Chart3DVectorArchive&
Chart3DSpotLightArchive::_Internal::position(const Chart3DSpotLightArchive* msg) {
  return *msg->_impl_.position_;
}
const ::TSCH::Chart3DVectorArchive&
Chart3DSpotLightArchive::_Internal::direction(const Chart3DSpotLightArchive* msg) {
  return *msg->_impl_.direction_;
}
Chart3DSpotLightArchive::Chart3DSpotLightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DSpotLightArchive)
}
Chart3DSpotLightArchive::Chart3DSpotLightArchive(const Chart3DSpotLightArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DSpotLightArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.cutoff_){}
    , decltype(_impl_.dropoff_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.position_);
  }
  if (from._internal_has_direction()) {
    _this->_impl_.direction_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.direction_);
  }
  ::memcpy(&_impl_.cutoff_, &from._impl_.cutoff_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dropoff_) -
    reinterpret_cast<char*>(&_impl_.cutoff_)) + sizeof(_impl_.dropoff_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DSpotLightArchive)
}

inline void Chart3DSpotLightArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.cutoff_){0}
    , decltype(_impl_.dropoff_){0}
  };
}

Chart3DSpotLightArchive::~Chart3DSpotLightArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DSpotLightArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DSpotLightArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.direction_;
}

void Chart3DSpotLightArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DSpotLightArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DSpotLightArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.direction_ != nullptr);
      _impl_.direction_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.cutoff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dropoff_) -
        reinterpret_cast<char*>(&_impl_.cutoff_)) + sizeof(_impl_.dropoff_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DSpotLightArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DVectorArchive position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.Chart3DVectorArchive direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float cutoff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_cutoff(&has_bits);
          _impl_.cutoff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float dropoff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_dropoff(&has_bits);
          _impl_.dropoff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DSpotLightArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DSpotLightArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DVectorArchive position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.Chart3DVectorArchive direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // required float cutoff = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_cutoff(), target);
  }

  // required float dropoff = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_dropoff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DSpotLightArchive)
  return target;
}

size_t Chart3DSpotLightArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.Chart3DSpotLightArchive)
  size_t total_size = 0;

  if (_internal_has_position()) {
    // required .TSCH.Chart3DVectorArchive position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  if (_internal_has_direction()) {
    // required .TSCH.Chart3DVectorArchive direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);
  }

  if (_internal_has_cutoff()) {
    // required float cutoff = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_dropoff()) {
    // required float dropoff = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Chart3DSpotLightArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DSpotLightArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSCH.Chart3DVectorArchive position = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);

    // required .TSCH.Chart3DVectorArchive direction = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);

    // required float cutoff = 3;
    total_size += 1 + 4;

    // required float dropoff = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DSpotLightArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DSpotLightArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DSpotLightArchive::GetClassData() const { return &_class_data_; }


void Chart3DSpotLightArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DSpotLightArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DSpotLightArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DSpotLightArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_direction()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_direction());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cutoff_ = from._impl_.cutoff_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dropoff_ = from._impl_.dropoff_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DSpotLightArchive::CopyFrom(const Chart3DSpotLightArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DSpotLightArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DSpotLightArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_position()) {
    if (!_impl_.position_->IsInitialized()) return false;
  }
  if (_internal_has_direction()) {
    if (!_impl_.direction_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DSpotLightArchive::InternalSwap(Chart3DSpotLightArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DSpotLightArchive, _impl_.dropoff_)
      + sizeof(Chart3DSpotLightArchive::_impl_.dropoff_)
      - PROTOBUF_FIELD_OFFSET(Chart3DSpotLightArchive, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DSpotLightArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[4]);
}

// ===================================================================

class Chart3DLightArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DLightArchive>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::Chart3DVectorArchive& ambient_color(const Chart3DLightArchive* msg);
  static void set_has_ambient_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DVectorArchive& diffuse_color(const Chart3DLightArchive* msg);
  static void set_has_diffuse_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DVectorArchive& specular_color(const Chart3DLightArchive* msg);
  static void set_has_specular_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCH::Chart3DVectorArchive& attenuation(const Chart3DLightArchive* msg);
  static void set_has_attenuation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_coordinate_space(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCH::Chart3DPointLightArchive& point_light(const Chart3DLightArchive* msg);
  static void set_has_point_light(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::Chart3DDirectionalLightArchive& directional_light(const Chart3DLightArchive* msg);
  static void set_has_directional_light(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCH::Chart3DSpotLightArchive& spot_light(const Chart3DLightArchive* msg);
  static void set_has_spot_light(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000071f) ^ 0x0000071f) != 0;
  }
};

const ::TSCH::Chart3DVectorArchive&
Chart3DLightArchive::_Internal::ambient_color(const Chart3DLightArchive* msg) {
  return *msg->_impl_.ambient_color_;
}
const ::TSCH::Chart3DVectorArchive&
Chart3DLightArchive::_Internal::diffuse_color(const Chart3DLightArchive* msg) {
  return *msg->_impl_.diffuse_color_;
}
const ::TSCH::Chart3DVectorArchive&
Chart3DLightArchive::_Internal::specular_color(const Chart3DLightArchive* msg) {
  return *msg->_impl_.specular_color_;
}
const ::TSCH::Chart3DVectorArchive&
Chart3DLightArchive::_Internal::attenuation(const Chart3DLightArchive* msg) {
  return *msg->_impl_.attenuation_;
}
const ::TSCH::Chart3DPointLightArchive&
Chart3DLightArchive::_Internal::point_light(const Chart3DLightArchive* msg) {
  return *msg->_impl_.point_light_;
}
const ::TSCH::Chart3DDirectionalLightArchive&
Chart3DLightArchive::_Internal::directional_light(const Chart3DLightArchive* msg) {
  return *msg->_impl_.directional_light_;
}
const ::TSCH::Chart3DSpotLightArchive&
Chart3DLightArchive::_Internal::spot_light(const Chart3DLightArchive* msg) {
  return *msg->_impl_.spot_light_;
}
Chart3DLightArchive::Chart3DLightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DLightArchive)
}
Chart3DLightArchive::Chart3DLightArchive(const Chart3DLightArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DLightArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.ambient_color_){nullptr}
    , decltype(_impl_.diffuse_color_){nullptr}
    , decltype(_impl_.specular_color_){nullptr}
    , decltype(_impl_.attenuation_){nullptr}
    , decltype(_impl_.point_light_){nullptr}
    , decltype(_impl_.directional_light_){nullptr}
    , decltype(_impl_.spot_light_){nullptr}
    , decltype(_impl_.intensity_){}
    , decltype(_impl_.coordinate_space_){}
    , decltype(_impl_.enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ambient_color()) {
    _this->_impl_.ambient_color_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.ambient_color_);
  }
  if (from._internal_has_diffuse_color()) {
    _this->_impl_.diffuse_color_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.diffuse_color_);
  }
  if (from._internal_has_specular_color()) {
    _this->_impl_.specular_color_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.specular_color_);
  }
  if (from._internal_has_attenuation()) {
    _this->_impl_.attenuation_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.attenuation_);
  }
  if (from._internal_has_point_light()) {
    _this->_impl_.point_light_ = new ::TSCH::Chart3DPointLightArchive(*from._impl_.point_light_);
  }
  if (from._internal_has_directional_light()) {
    _this->_impl_.directional_light_ = new ::TSCH::Chart3DDirectionalLightArchive(*from._impl_.directional_light_);
  }
  if (from._internal_has_spot_light()) {
    _this->_impl_.spot_light_ = new ::TSCH::Chart3DSpotLightArchive(*from._impl_.spot_light_);
  }
  ::memcpy(&_impl_.intensity_, &from._impl_.intensity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enabled_) -
    reinterpret_cast<char*>(&_impl_.intensity_)) + sizeof(_impl_.enabled_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DLightArchive)
}

inline void Chart3DLightArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.ambient_color_){nullptr}
    , decltype(_impl_.diffuse_color_){nullptr}
    , decltype(_impl_.specular_color_){nullptr}
    , decltype(_impl_.attenuation_){nullptr}
    , decltype(_impl_.point_light_){nullptr}
    , decltype(_impl_.directional_light_){nullptr}
    , decltype(_impl_.spot_light_){nullptr}
    , decltype(_impl_.intensity_){0}
    , decltype(_impl_.coordinate_space_){0u}
    , decltype(_impl_.enabled_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Chart3DLightArchive::~Chart3DLightArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DLightArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DLightArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ambient_color_;
  if (this != internal_default_instance()) delete _impl_.diffuse_color_;
  if (this != internal_default_instance()) delete _impl_.specular_color_;
  if (this != internal_default_instance()) delete _impl_.attenuation_;
  if (this != internal_default_instance()) delete _impl_.point_light_;
  if (this != internal_default_instance()) delete _impl_.directional_light_;
  if (this != internal_default_instance()) delete _impl_.spot_light_;
}

void Chart3DLightArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DLightArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DLightArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ambient_color_ != nullptr);
      _impl_.ambient_color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.diffuse_color_ != nullptr);
      _impl_.diffuse_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.specular_color_ != nullptr);
      _impl_.specular_color_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.attenuation_ != nullptr);
      _impl_.attenuation_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.point_light_ != nullptr);
      _impl_.point_light_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.directional_light_ != nullptr);
      _impl_.directional_light_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.spot_light_ != nullptr);
      _impl_.spot_light_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.intensity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enabled_) -
        reinterpret_cast<char*>(&_impl_.intensity_)) + sizeof(_impl_.enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DLightArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Chart3DLightArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.Chart3DVectorArchive ambient_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ambient_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.Chart3DVectorArchive diffuse_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffuse_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.Chart3DVectorArchive specular_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_specular_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float intensity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_intensity(&has_bits);
          _impl_.intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.Chart3DVectorArchive attenuation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_attenuation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 coordinate_space = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_coordinate_space(&has_bits);
          _impl_.coordinate_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DPointLightArchive point_light = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_light(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DDirectionalLightArchive directional_light = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_directional_light(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DSpotLightArchive spot_light = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_spot_light(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DLightArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DLightArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Chart3DLightArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .TSCH.Chart3DVectorArchive ambient_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ambient_color(this),
        _Internal::ambient_color(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.Chart3DVectorArchive diffuse_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::diffuse_color(this),
        _Internal::diffuse_color(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.Chart3DVectorArchive specular_color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::specular_color(this),
        _Internal::specular_color(this).GetCachedSize(), target, stream);
  }

  // required float intensity = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_intensity(), target);
  }

  // required .TSCH.Chart3DVectorArchive attenuation = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::attenuation(this),
        _Internal::attenuation(this).GetCachedSize(), target, stream);
  }

  // required uint32 coordinate_space = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_coordinate_space(), target);
  }

  // required bool enabled = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_enabled(), target);
  }

  // optional .TSCH.Chart3DPointLightArchive point_light = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::point_light(this),
        _Internal::point_light(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DDirectionalLightArchive directional_light = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::directional_light(this),
        _Internal::directional_light(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DSpotLightArchive spot_light = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::spot_light(this),
        _Internal::spot_light(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DLightArchive)
  return target;
}

size_t Chart3DLightArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.Chart3DLightArchive)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_ambient_color()) {
    // required .TSCH.Chart3DVectorArchive ambient_color = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ambient_color_);
  }

  if (_internal_has_diffuse_color()) {
    // required .TSCH.Chart3DVectorArchive diffuse_color = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.diffuse_color_);
  }

  if (_internal_has_specular_color()) {
    // required .TSCH.Chart3DVectorArchive specular_color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.specular_color_);
  }

  if (_internal_has_attenuation()) {
    // required .TSCH.Chart3DVectorArchive attenuation = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attenuation_);
  }

  if (_internal_has_intensity()) {
    // required float intensity = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_coordinate_space()) {
    // required uint32 coordinate_space = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coordinate_space());
  }

  if (_internal_has_enabled()) {
    // required bool enabled = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Chart3DLightArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DLightArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000071f) ^ 0x0000071f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .TSCH.Chart3DVectorArchive ambient_color = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ambient_color_);

    // required .TSCH.Chart3DVectorArchive diffuse_color = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.diffuse_color_);

    // required .TSCH.Chart3DVectorArchive specular_color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.specular_color_);

    // required .TSCH.Chart3DVectorArchive attenuation = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attenuation_);

    // required float intensity = 5;
    total_size += 1 + 4;

    // required uint32 coordinate_space = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coordinate_space());

    // required bool enabled = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSCH.Chart3DPointLightArchive point_light = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.point_light_);
    }

    // optional .TSCH.Chart3DDirectionalLightArchive directional_light = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.directional_light_);
    }

    // optional .TSCH.Chart3DSpotLightArchive spot_light = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spot_light_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DLightArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DLightArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DLightArchive::GetClassData() const { return &_class_data_; }


void Chart3DLightArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DLightArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DLightArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DLightArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ambient_color()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_ambient_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_diffuse_color()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_diffuse_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_specular_color()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_specular_color());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_attenuation()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_attenuation());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_point_light()->::TSCH::Chart3DPointLightArchive::MergeFrom(
          from._internal_point_light());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_directional_light()->::TSCH::Chart3DDirectionalLightArchive::MergeFrom(
          from._internal_directional_light());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_spot_light()->::TSCH::Chart3DSpotLightArchive::MergeFrom(
          from._internal_spot_light());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.intensity_ = from._impl_.intensity_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.coordinate_space_ = from._impl_.coordinate_space_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.enabled_ = from._impl_.enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DLightArchive::CopyFrom(const Chart3DLightArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DLightArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DLightArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ambient_color()) {
    if (!_impl_.ambient_color_->IsInitialized()) return false;
  }
  if (_internal_has_diffuse_color()) {
    if (!_impl_.diffuse_color_->IsInitialized()) return false;
  }
  if (_internal_has_specular_color()) {
    if (!_impl_.specular_color_->IsInitialized()) return false;
  }
  if (_internal_has_attenuation()) {
    if (!_impl_.attenuation_->IsInitialized()) return false;
  }
  if (_internal_has_point_light()) {
    if (!_impl_.point_light_->IsInitialized()) return false;
  }
  if (_internal_has_directional_light()) {
    if (!_impl_.directional_light_->IsInitialized()) return false;
  }
  if (_internal_has_spot_light()) {
    if (!_impl_.spot_light_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DLightArchive::InternalSwap(Chart3DLightArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DLightArchive, _impl_.enabled_)
      + sizeof(Chart3DLightArchive::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(Chart3DLightArchive, _impl_.ambient_color_)>(
          reinterpret_cast<char*>(&_impl_.ambient_color_),
          reinterpret_cast<char*>(&other->_impl_.ambient_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DLightArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[5]);
}

// ===================================================================

class Chart3DLightingModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DLightingModelArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DPhongLightingModelArchive& phong(const Chart3DLightingModelArchive* msg);
  static void set_has_phong(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::Chart3DFixedFunctionLightingModelArchive& fixed_function(const Chart3DLightingModelArchive* msg);
  static void set_has_fixed_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DEnvironmentPackageArchive& environment(const Chart3DLightingModelArchive* msg);
  static void set_has_environment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSCH::Chart3DPhongLightingModelArchive&
Chart3DLightingModelArchive::_Internal::phong(const Chart3DLightingModelArchive* msg) {
  return *msg->_impl_.phong_;
}
const ::TSCH::Chart3DFixedFunctionLightingModelArchive&
Chart3DLightingModelArchive::_Internal::fixed_function(const Chart3DLightingModelArchive* msg) {
  return *msg->_impl_.fixed_function_;
}
const ::TSCH::Chart3DEnvironmentPackageArchive&
Chart3DLightingModelArchive::_Internal::environment(const Chart3DLightingModelArchive* msg) {
  return *msg->_impl_.environment_;
}
Chart3DLightingModelArchive::Chart3DLightingModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DLightingModelArchive)
}
Chart3DLightingModelArchive::Chart3DLightingModelArchive(const Chart3DLightingModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DLightingModelArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phong_){nullptr}
    , decltype(_impl_.fixed_function_){nullptr}
    , decltype(_impl_.environment_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phong()) {
    _this->_impl_.phong_ = new ::TSCH::Chart3DPhongLightingModelArchive(*from._impl_.phong_);
  }
  if (from._internal_has_fixed_function()) {
    _this->_impl_.fixed_function_ = new ::TSCH::Chart3DFixedFunctionLightingModelArchive(*from._impl_.fixed_function_);
  }
  if (from._internal_has_environment()) {
    _this->_impl_.environment_ = new ::TSCH::Chart3DEnvironmentPackageArchive(*from._impl_.environment_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DLightingModelArchive)
}

inline void Chart3DLightingModelArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phong_){nullptr}
    , decltype(_impl_.fixed_function_){nullptr}
    , decltype(_impl_.environment_){nullptr}
  };
}

Chart3DLightingModelArchive::~Chart3DLightingModelArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DLightingModelArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DLightingModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.phong_;
  if (this != internal_default_instance()) delete _impl_.fixed_function_;
  if (this != internal_default_instance()) delete _impl_.environment_;
}

void Chart3DLightingModelArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DLightingModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DLightingModelArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.phong_ != nullptr);
      _impl_.phong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.fixed_function_ != nullptr);
      _impl_.fixed_function_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.environment_ != nullptr);
      _impl_.environment_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DLightingModelArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.Chart3DPhongLightingModelArchive phong = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phong(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DFixedFunctionLightingModelArchive fixed_function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DEnvironmentPackageArchive environment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DLightingModelArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DLightingModelArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.Chart3DPhongLightingModelArchive phong = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::phong(this),
        _Internal::phong(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DFixedFunctionLightingModelArchive fixed_function = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fixed_function(this),
        _Internal::fixed_function(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DEnvironmentPackageArchive environment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::environment(this),
        _Internal::environment(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DLightingModelArchive)
  return target;
}

size_t Chart3DLightingModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DLightingModelArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSCH.Chart3DPhongLightingModelArchive phong = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.phong_);
    }

    // optional .TSCH.Chart3DFixedFunctionLightingModelArchive fixed_function = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fixed_function_);
    }

    // optional .TSCH.Chart3DEnvironmentPackageArchive environment = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.environment_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DLightingModelArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DLightingModelArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DLightingModelArchive::GetClassData() const { return &_class_data_; }


void Chart3DLightingModelArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DLightingModelArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DLightingModelArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DLightingModelArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_phong()->::TSCH::Chart3DPhongLightingModelArchive::MergeFrom(
          from._internal_phong());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fixed_function()->::TSCH::Chart3DFixedFunctionLightingModelArchive::MergeFrom(
          from._internal_fixed_function());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_environment()->::TSCH::Chart3DEnvironmentPackageArchive::MergeFrom(
          from._internal_environment());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DLightingModelArchive::CopyFrom(const Chart3DLightingModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DLightingModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DLightingModelArchive::IsInitialized() const {
  if (_internal_has_phong()) {
    if (!_impl_.phong_->IsInitialized()) return false;
  }
  if (_internal_has_fixed_function()) {
    if (!_impl_.fixed_function_->IsInitialized()) return false;
  }
  if (_internal_has_environment()) {
    if (!_impl_.environment_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DLightingModelArchive::InternalSwap(Chart3DLightingModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DLightingModelArchive, _impl_.environment_)
      + sizeof(Chart3DLightingModelArchive::_impl_.environment_)
      - PROTOBUF_FIELD_OFFSET(Chart3DLightingModelArchive, _impl_.phong_)>(
          reinterpret_cast<char*>(&_impl_.phong_),
          reinterpret_cast<char*>(&other->_impl_.phong_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DLightingModelArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[6]);
}

// ===================================================================

class Chart3DLightingPackageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DLightingPackageArchive>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Chart3DLightingPackageArchive::Chart3DLightingPackageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DLightingPackageArchive)
}
Chart3DLightingPackageArchive::Chart3DLightingPackageArchive(const Chart3DLightingPackageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DLightingPackageArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lights_){from._impl_.lights_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DLightingPackageArchive)
}

inline void Chart3DLightingPackageArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lights_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Chart3DLightingPackageArchive::~Chart3DLightingPackageArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DLightingPackageArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DLightingPackageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lights_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Chart3DLightingPackageArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DLightingPackageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DLightingPackageArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lights_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DLightingPackageArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Chart3DLightingPackageArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.Chart3DLightArchive lights = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DLightingPackageArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DLightingPackageArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Chart3DLightingPackageArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .TSCH.Chart3DLightArchive lights = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lights_size()); i < n; i++) {
    const auto& repfield = this->_internal_lights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DLightingPackageArchive)
  return target;
}

size_t Chart3DLightingPackageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DLightingPackageArchive)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DLightArchive lights = 2;
  total_size += 1UL * this->_internal_lights_size();
  for (const auto& msg : this->_impl_.lights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DLightingPackageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DLightingPackageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DLightingPackageArchive::GetClassData() const { return &_class_data_; }


void Chart3DLightingPackageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DLightingPackageArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DLightingPackageArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DLightingPackageArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lights_.MergeFrom(from._impl_.lights_);
  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DLightingPackageArchive::CopyFrom(const Chart3DLightingPackageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DLightingPackageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DLightingPackageArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.lights_))
    return false;
  return true;
}

void Chart3DLightingPackageArchive::InternalSwap(Chart3DLightingPackageArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lights_.InternalSwap(&other->_impl_.lights_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DLightingPackageArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[7]);
}

// ===================================================================

class Chart3DTexturesMaterialArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DTexturesMaterialArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DVectorArchive& color(const Chart3DTexturesMaterialArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DVectorArchive&
Chart3DTexturesMaterialArchive::_Internal::color(const Chart3DTexturesMaterialArchive* msg) {
  return *msg->_impl_.color_;
}
Chart3DTexturesMaterialArchive::Chart3DTexturesMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DTexturesMaterialArchive)
}
Chart3DTexturesMaterialArchive::Chart3DTexturesMaterialArchive(const Chart3DTexturesMaterialArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DTexturesMaterialArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.textures_){from._impl_.textures_}
    , decltype(_impl_.color_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.color_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DTexturesMaterialArchive)
}

inline void Chart3DTexturesMaterialArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.textures_){arena}
    , decltype(_impl_.color_){nullptr}
  };
}

Chart3DTexturesMaterialArchive::~Chart3DTexturesMaterialArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DTexturesMaterialArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DTexturesMaterialArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.textures_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.color_;
}

void Chart3DTexturesMaterialArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DTexturesMaterialArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DTexturesMaterialArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.textures_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.color_ != nullptr);
    _impl_.color_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DTexturesMaterialArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DVectorArchive color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.Chart3DTSPImageDataTextureArchive textures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_textures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DTexturesMaterialArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DTexturesMaterialArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DVectorArchive color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.Chart3DTSPImageDataTextureArchive textures = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_textures_size()); i < n; i++) {
    const auto& repfield = this->_internal_textures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DTexturesMaterialArchive)
  return target;
}

size_t Chart3DTexturesMaterialArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DTexturesMaterialArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DVectorArchive color = 1;
  if (_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DTSPImageDataTextureArchive textures = 2;
  total_size += 1UL * this->_internal_textures_size();
  for (const auto& msg : this->_impl_.textures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DTexturesMaterialArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DTexturesMaterialArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DTexturesMaterialArchive::GetClassData() const { return &_class_data_; }


void Chart3DTexturesMaterialArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DTexturesMaterialArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DTexturesMaterialArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DTexturesMaterialArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.textures_.MergeFrom(from._impl_.textures_);
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::TSCH::Chart3DVectorArchive::MergeFrom(
        from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DTexturesMaterialArchive::CopyFrom(const Chart3DTexturesMaterialArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DTexturesMaterialArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DTexturesMaterialArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.textures_))
    return false;
  if (_internal_has_color()) {
    if (!_impl_.color_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DTexturesMaterialArchive::InternalSwap(Chart3DTexturesMaterialArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.textures_.InternalSwap(&other->_impl_.textures_);
  swap(_impl_.color_, other->_impl_.color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DTexturesMaterialArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[8]);
}

// ===================================================================

class Chart3DEmissiveMaterialArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DEmissiveMaterialArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DTexturesMaterialArchive& super(const Chart3DEmissiveMaterialArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DTexturesMaterialArchive&
Chart3DEmissiveMaterialArchive::_Internal::super(const Chart3DEmissiveMaterialArchive* msg) {
  return *msg->_impl_.super_;
}
Chart3DEmissiveMaterialArchive::Chart3DEmissiveMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DEmissiveMaterialArchive)
}
Chart3DEmissiveMaterialArchive::Chart3DEmissiveMaterialArchive(const Chart3DEmissiveMaterialArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DEmissiveMaterialArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){from._impl_.tilings_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::Chart3DTexturesMaterialArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DEmissiveMaterialArchive)
}

inline void Chart3DEmissiveMaterialArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

Chart3DEmissiveMaterialArchive::~Chart3DEmissiveMaterialArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DEmissiveMaterialArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DEmissiveMaterialArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tilings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void Chart3DEmissiveMaterialArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DEmissiveMaterialArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DEmissiveMaterialArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tilings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DEmissiveMaterialArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tilings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DEmissiveMaterialArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DEmissiveMaterialArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tilings_size()); i < n; i++) {
    const auto& repfield = this->_internal_tilings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DEmissiveMaterialArchive)
  return target;
}

size_t Chart3DEmissiveMaterialArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DEmissiveMaterialArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  total_size += 1UL * this->_internal_tilings_size();
  for (const auto& msg : this->_impl_.tilings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DEmissiveMaterialArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DEmissiveMaterialArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DEmissiveMaterialArchive::GetClassData() const { return &_class_data_; }


void Chart3DEmissiveMaterialArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DEmissiveMaterialArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DEmissiveMaterialArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DEmissiveMaterialArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tilings_.MergeFrom(from._impl_.tilings_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSCH::Chart3DTexturesMaterialArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DEmissiveMaterialArchive::CopyFrom(const Chart3DEmissiveMaterialArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DEmissiveMaterialArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DEmissiveMaterialArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tilings_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DEmissiveMaterialArchive::InternalSwap(Chart3DEmissiveMaterialArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tilings_.InternalSwap(&other->_impl_.tilings_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DEmissiveMaterialArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[9]);
}

// ===================================================================

class Chart3DDiffuseMaterialArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DDiffuseMaterialArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DTexturesMaterialArchive& super(const Chart3DDiffuseMaterialArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DTexturesMaterialArchive&
Chart3DDiffuseMaterialArchive::_Internal::super(const Chart3DDiffuseMaterialArchive* msg) {
  return *msg->_impl_.super_;
}
Chart3DDiffuseMaterialArchive::Chart3DDiffuseMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DDiffuseMaterialArchive)
}
Chart3DDiffuseMaterialArchive::Chart3DDiffuseMaterialArchive(const Chart3DDiffuseMaterialArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DDiffuseMaterialArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){from._impl_.tilings_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::Chart3DTexturesMaterialArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DDiffuseMaterialArchive)
}

inline void Chart3DDiffuseMaterialArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

Chart3DDiffuseMaterialArchive::~Chart3DDiffuseMaterialArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DDiffuseMaterialArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DDiffuseMaterialArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tilings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void Chart3DDiffuseMaterialArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DDiffuseMaterialArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DDiffuseMaterialArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tilings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DDiffuseMaterialArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tilings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DDiffuseMaterialArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DDiffuseMaterialArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tilings_size()); i < n; i++) {
    const auto& repfield = this->_internal_tilings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DDiffuseMaterialArchive)
  return target;
}

size_t Chart3DDiffuseMaterialArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DDiffuseMaterialArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  total_size += 1UL * this->_internal_tilings_size();
  for (const auto& msg : this->_impl_.tilings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DDiffuseMaterialArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DDiffuseMaterialArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DDiffuseMaterialArchive::GetClassData() const { return &_class_data_; }


void Chart3DDiffuseMaterialArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DDiffuseMaterialArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DDiffuseMaterialArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DDiffuseMaterialArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tilings_.MergeFrom(from._impl_.tilings_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSCH::Chart3DTexturesMaterialArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DDiffuseMaterialArchive::CopyFrom(const Chart3DDiffuseMaterialArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DDiffuseMaterialArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DDiffuseMaterialArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tilings_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DDiffuseMaterialArchive::InternalSwap(Chart3DDiffuseMaterialArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tilings_.InternalSwap(&other->_impl_.tilings_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DDiffuseMaterialArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[10]);
}

// ===================================================================

class Chart3DModulateMaterialArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DModulateMaterialArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DTexturesMaterialArchive& super(const Chart3DModulateMaterialArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DTexturesMaterialArchive&
Chart3DModulateMaterialArchive::_Internal::super(const Chart3DModulateMaterialArchive* msg) {
  return *msg->_impl_.super_;
}
Chart3DModulateMaterialArchive::Chart3DModulateMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DModulateMaterialArchive)
}
Chart3DModulateMaterialArchive::Chart3DModulateMaterialArchive(const Chart3DModulateMaterialArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DModulateMaterialArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){from._impl_.tilings_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::Chart3DTexturesMaterialArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DModulateMaterialArchive)
}

inline void Chart3DModulateMaterialArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

Chart3DModulateMaterialArchive::~Chart3DModulateMaterialArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DModulateMaterialArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DModulateMaterialArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tilings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void Chart3DModulateMaterialArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DModulateMaterialArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DModulateMaterialArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tilings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DModulateMaterialArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tilings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DModulateMaterialArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DModulateMaterialArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tilings_size()); i < n; i++) {
    const auto& repfield = this->_internal_tilings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DModulateMaterialArchive)
  return target;
}

size_t Chart3DModulateMaterialArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DModulateMaterialArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  total_size += 1UL * this->_internal_tilings_size();
  for (const auto& msg : this->_impl_.tilings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DModulateMaterialArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DModulateMaterialArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DModulateMaterialArchive::GetClassData() const { return &_class_data_; }


void Chart3DModulateMaterialArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DModulateMaterialArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DModulateMaterialArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DModulateMaterialArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tilings_.MergeFrom(from._impl_.tilings_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSCH::Chart3DTexturesMaterialArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DModulateMaterialArchive::CopyFrom(const Chart3DModulateMaterialArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DModulateMaterialArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DModulateMaterialArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tilings_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DModulateMaterialArchive::InternalSwap(Chart3DModulateMaterialArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tilings_.InternalSwap(&other->_impl_.tilings_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DModulateMaterialArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[11]);
}

// ===================================================================

class Chart3DSpecularMaterialArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DSpecularMaterialArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DTexturesMaterialArchive& super(const Chart3DSpecularMaterialArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DTexturesMaterialArchive&
Chart3DSpecularMaterialArchive::_Internal::super(const Chart3DSpecularMaterialArchive* msg) {
  return *msg->_impl_.super_;
}
Chart3DSpecularMaterialArchive::Chart3DSpecularMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DSpecularMaterialArchive)
}
Chart3DSpecularMaterialArchive::Chart3DSpecularMaterialArchive(const Chart3DSpecularMaterialArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DSpecularMaterialArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){from._impl_.tilings_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::Chart3DTexturesMaterialArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DSpecularMaterialArchive)
}

inline void Chart3DSpecularMaterialArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

Chart3DSpecularMaterialArchive::~Chart3DSpecularMaterialArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DSpecularMaterialArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DSpecularMaterialArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tilings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void Chart3DSpecularMaterialArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DSpecularMaterialArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DSpecularMaterialArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tilings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DSpecularMaterialArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tilings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DSpecularMaterialArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DSpecularMaterialArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tilings_size()); i < n; i++) {
    const auto& repfield = this->_internal_tilings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DSpecularMaterialArchive)
  return target;
}

size_t Chart3DSpecularMaterialArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DSpecularMaterialArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  total_size += 1UL * this->_internal_tilings_size();
  for (const auto& msg : this->_impl_.tilings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DSpecularMaterialArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DSpecularMaterialArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DSpecularMaterialArchive::GetClassData() const { return &_class_data_; }


void Chart3DSpecularMaterialArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DSpecularMaterialArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DSpecularMaterialArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DSpecularMaterialArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tilings_.MergeFrom(from._impl_.tilings_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSCH::Chart3DTexturesMaterialArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DSpecularMaterialArchive::CopyFrom(const Chart3DSpecularMaterialArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DSpecularMaterialArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DSpecularMaterialArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tilings_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DSpecularMaterialArchive::InternalSwap(Chart3DSpecularMaterialArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tilings_.InternalSwap(&other->_impl_.tilings_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DSpecularMaterialArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[12]);
}

// ===================================================================

class Chart3DShininessMaterialArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DShininessMaterialArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DTexturesMaterialArchive& super(const Chart3DShininessMaterialArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DTexturesMaterialArchive&
Chart3DShininessMaterialArchive::_Internal::super(const Chart3DShininessMaterialArchive* msg) {
  return *msg->_impl_.super_;
}
Chart3DShininessMaterialArchive::Chart3DShininessMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DShininessMaterialArchive)
}
Chart3DShininessMaterialArchive::Chart3DShininessMaterialArchive(const Chart3DShininessMaterialArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DShininessMaterialArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){from._impl_.tilings_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::Chart3DTexturesMaterialArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DShininessMaterialArchive)
}

inline void Chart3DShininessMaterialArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tilings_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

Chart3DShininessMaterialArchive::~Chart3DShininessMaterialArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DShininessMaterialArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DShininessMaterialArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tilings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void Chart3DShininessMaterialArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DShininessMaterialArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DShininessMaterialArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tilings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DShininessMaterialArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tilings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DShininessMaterialArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DShininessMaterialArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tilings_size()); i < n; i++) {
    const auto& repfield = this->_internal_tilings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DShininessMaterialArchive)
  return target;
}

size_t Chart3DShininessMaterialArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DShininessMaterialArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 2;
  total_size += 1UL * this->_internal_tilings_size();
  for (const auto& msg : this->_impl_.tilings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DShininessMaterialArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DShininessMaterialArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DShininessMaterialArchive::GetClassData() const { return &_class_data_; }


void Chart3DShininessMaterialArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DShininessMaterialArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DShininessMaterialArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DShininessMaterialArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tilings_.MergeFrom(from._impl_.tilings_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSCH::Chart3DTexturesMaterialArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DShininessMaterialArchive::CopyFrom(const Chart3DShininessMaterialArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DShininessMaterialArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DShininessMaterialArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tilings_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DShininessMaterialArchive::InternalSwap(Chart3DShininessMaterialArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tilings_.InternalSwap(&other->_impl_.tilings_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DShininessMaterialArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[13]);
}

// ===================================================================

class Chart3DEnvironmentMaterialArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DEnvironmentMaterialArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DTexturesMaterialArchive& super(const Chart3DEnvironmentMaterialArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_decalmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DTexturesMaterialArchive&
Chart3DEnvironmentMaterialArchive::_Internal::super(const Chart3DEnvironmentMaterialArchive* msg) {
  return *msg->_impl_.super_;
}
Chart3DEnvironmentMaterialArchive::Chart3DEnvironmentMaterialArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DEnvironmentMaterialArchive)
}
Chart3DEnvironmentMaterialArchive::Chart3DEnvironmentMaterialArchive(const Chart3DEnvironmentMaterialArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DEnvironmentMaterialArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obsolete_tilings_){from._impl_.obsolete_tilings_}
    , decltype(_impl_.tilings_){from._impl_.tilings_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.decalmode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::Chart3DTexturesMaterialArchive(*from._impl_.super_);
  }
  _this->_impl_.decalmode_ = from._impl_.decalmode_;
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DEnvironmentMaterialArchive)
}

inline void Chart3DEnvironmentMaterialArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obsolete_tilings_){arena}
    , decltype(_impl_.tilings_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.decalmode_){false}
  };
}

Chart3DEnvironmentMaterialArchive::~Chart3DEnvironmentMaterialArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DEnvironmentMaterialArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DEnvironmentMaterialArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obsolete_tilings_.~RepeatedPtrField();
  _impl_.tilings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void Chart3DEnvironmentMaterialArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DEnvironmentMaterialArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DEnvironmentMaterialArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obsolete_tilings_.Clear();
  _impl_.tilings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.decalmode_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DEnvironmentMaterialArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.Chart3DBaseImageTextureTilingArchive OBSOLETE_tilings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obsolete_tilings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool decalMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_decalmode(&has_bits);
          _impl_.decalmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tilings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DEnvironmentMaterialArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DEnvironmentMaterialArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCH.Chart3DBaseImageTextureTilingArchive OBSOLETE_tilings = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obsolete_tilings_size()); i < n; i++) {
    const auto& repfield = this->_internal_obsolete_tilings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool decalMode = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_decalmode(), target);
  }

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tilings_size()); i < n; i++) {
    const auto& repfield = this->_internal_tilings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DEnvironmentMaterialArchive)
  return target;
}

size_t Chart3DEnvironmentMaterialArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DEnvironmentMaterialArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DTexturesMaterialArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCH.Chart3DBaseImageTextureTilingArchive OBSOLETE_tilings = 2;
  total_size += 1UL * this->_internal_obsolete_tilings_size();
  for (const auto& msg : this->_impl_.obsolete_tilings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.Chart3DImageTextureTilingArchive tilings = 4;
  total_size += 1UL * this->_internal_tilings_size();
  for (const auto& msg : this->_impl_.tilings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool decalMode = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DEnvironmentMaterialArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DEnvironmentMaterialArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DEnvironmentMaterialArchive::GetClassData() const { return &_class_data_; }


void Chart3DEnvironmentMaterialArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DEnvironmentMaterialArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DEnvironmentMaterialArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DEnvironmentMaterialArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.obsolete_tilings_.MergeFrom(from._impl_.obsolete_tilings_);
  _this->_impl_.tilings_.MergeFrom(from._impl_.tilings_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::Chart3DTexturesMaterialArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.decalmode_ = from._impl_.decalmode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DEnvironmentMaterialArchive::CopyFrom(const Chart3DEnvironmentMaterialArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DEnvironmentMaterialArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DEnvironmentMaterialArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.obsolete_tilings_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tilings_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DEnvironmentMaterialArchive::InternalSwap(Chart3DEnvironmentMaterialArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.obsolete_tilings_.InternalSwap(&other->_impl_.obsolete_tilings_);
  _impl_.tilings_.InternalSwap(&other->_impl_.tilings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DEnvironmentMaterialArchive, _impl_.decalmode_)
      + sizeof(Chart3DEnvironmentMaterialArchive::_impl_.decalmode_)
      - PROTOBUF_FIELD_OFFSET(Chart3DEnvironmentMaterialArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DEnvironmentMaterialArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[14]);
}

// ===================================================================

class Chart3DFixedFunctionLightingModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DFixedFunctionLightingModelArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DPhongMaterialPackageArchive& materials(const Chart3DFixedFunctionLightingModelArchive* msg);
  static void set_has_materials(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DPhongMaterialPackageArchive&
Chart3DFixedFunctionLightingModelArchive::_Internal::materials(const Chart3DFixedFunctionLightingModelArchive* msg) {
  return *msg->_impl_.materials_;
}
Chart3DFixedFunctionLightingModelArchive::Chart3DFixedFunctionLightingModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DFixedFunctionLightingModelArchive)
}
Chart3DFixedFunctionLightingModelArchive::Chart3DFixedFunctionLightingModelArchive(const Chart3DFixedFunctionLightingModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DFixedFunctionLightingModelArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.materials_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_materials()) {
    _this->_impl_.materials_ = new ::TSCH::Chart3DPhongMaterialPackageArchive(*from._impl_.materials_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DFixedFunctionLightingModelArchive)
}

inline void Chart3DFixedFunctionLightingModelArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.materials_){nullptr}
  };
}

Chart3DFixedFunctionLightingModelArchive::~Chart3DFixedFunctionLightingModelArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DFixedFunctionLightingModelArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DFixedFunctionLightingModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.materials_;
}

void Chart3DFixedFunctionLightingModelArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DFixedFunctionLightingModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DFixedFunctionLightingModelArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.materials_ != nullptr);
    _impl_.materials_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DFixedFunctionLightingModelArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_materials(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DFixedFunctionLightingModelArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DFixedFunctionLightingModelArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::materials(this),
        _Internal::materials(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DFixedFunctionLightingModelArchive)
  return target;
}

size_t Chart3DFixedFunctionLightingModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DFixedFunctionLightingModelArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
  if (_internal_has_materials()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.materials_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DFixedFunctionLightingModelArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DFixedFunctionLightingModelArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DFixedFunctionLightingModelArchive::GetClassData() const { return &_class_data_; }


void Chart3DFixedFunctionLightingModelArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DFixedFunctionLightingModelArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DFixedFunctionLightingModelArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DFixedFunctionLightingModelArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_materials()) {
    _this->_internal_mutable_materials()->::TSCH::Chart3DPhongMaterialPackageArchive::MergeFrom(
        from._internal_materials());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DFixedFunctionLightingModelArchive::CopyFrom(const Chart3DFixedFunctionLightingModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DFixedFunctionLightingModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DFixedFunctionLightingModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_materials()) {
    if (!_impl_.materials_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DFixedFunctionLightingModelArchive::InternalSwap(Chart3DFixedFunctionLightingModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.materials_, other->_impl_.materials_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DFixedFunctionLightingModelArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[15]);
}

// ===================================================================

class Chart3DPhongLightingModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DPhongLightingModelArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DPhongMaterialPackageArchive& materials(const Chart3DPhongLightingModelArchive* msg);
  static void set_has_materials(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DPhongMaterialPackageArchive&
Chart3DPhongLightingModelArchive::_Internal::materials(const Chart3DPhongLightingModelArchive* msg) {
  return *msg->_impl_.materials_;
}
Chart3DPhongLightingModelArchive::Chart3DPhongLightingModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DPhongLightingModelArchive)
}
Chart3DPhongLightingModelArchive::Chart3DPhongLightingModelArchive(const Chart3DPhongLightingModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DPhongLightingModelArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.materials_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_materials()) {
    _this->_impl_.materials_ = new ::TSCH::Chart3DPhongMaterialPackageArchive(*from._impl_.materials_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DPhongLightingModelArchive)
}

inline void Chart3DPhongLightingModelArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.materials_){nullptr}
  };
}

Chart3DPhongLightingModelArchive::~Chart3DPhongLightingModelArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DPhongLightingModelArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DPhongLightingModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.materials_;
}

void Chart3DPhongLightingModelArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DPhongLightingModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DPhongLightingModelArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.materials_ != nullptr);
    _impl_.materials_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DPhongLightingModelArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_materials(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DPhongLightingModelArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DPhongLightingModelArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::materials(this),
        _Internal::materials(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DPhongLightingModelArchive)
  return target;
}

size_t Chart3DPhongLightingModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DPhongLightingModelArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DPhongMaterialPackageArchive materials = 1;
  if (_internal_has_materials()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.materials_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DPhongLightingModelArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DPhongLightingModelArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DPhongLightingModelArchive::GetClassData() const { return &_class_data_; }


void Chart3DPhongLightingModelArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DPhongLightingModelArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DPhongLightingModelArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DPhongLightingModelArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_materials()) {
    _this->_internal_mutable_materials()->::TSCH::Chart3DPhongMaterialPackageArchive::MergeFrom(
        from._internal_materials());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DPhongLightingModelArchive::CopyFrom(const Chart3DPhongLightingModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DPhongLightingModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DPhongLightingModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_materials()) {
    if (!_impl_.materials_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DPhongLightingModelArchive::InternalSwap(Chart3DPhongLightingModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.materials_, other->_impl_.materials_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DPhongLightingModelArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[16]);
}

// ===================================================================

class Chart3DPhongMaterialPackageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DPhongMaterialPackageArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DEmissiveMaterialArchive& emissive(const Chart3DPhongMaterialPackageArchive* msg);
  static void set_has_emissive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::Chart3DDiffuseMaterialArchive& diffuse(const Chart3DPhongMaterialPackageArchive* msg);
  static void set_has_diffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DModulateMaterialArchive& modulate(const Chart3DPhongMaterialPackageArchive* msg);
  static void set_has_modulate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DSpecularMaterialArchive& specular(const Chart3DPhongMaterialPackageArchive* msg);
  static void set_has_specular(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DShininessMaterialArchive& shininess(const Chart3DPhongMaterialPackageArchive* msg);
  static void set_has_shininess(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSCH::Chart3DEmissiveMaterialArchive&
Chart3DPhongMaterialPackageArchive::_Internal::emissive(const Chart3DPhongMaterialPackageArchive* msg) {
  return *msg->_impl_.emissive_;
}
const ::TSCH::Chart3DDiffuseMaterialArchive&
Chart3DPhongMaterialPackageArchive::_Internal::diffuse(const Chart3DPhongMaterialPackageArchive* msg) {
  return *msg->_impl_.diffuse_;
}
const ::TSCH::Chart3DModulateMaterialArchive&
Chart3DPhongMaterialPackageArchive::_Internal::modulate(const Chart3DPhongMaterialPackageArchive* msg) {
  return *msg->_impl_.modulate_;
}
const ::TSCH::Chart3DSpecularMaterialArchive&
Chart3DPhongMaterialPackageArchive::_Internal::specular(const Chart3DPhongMaterialPackageArchive* msg) {
  return *msg->_impl_.specular_;
}
const ::TSCH::Chart3DShininessMaterialArchive&
Chart3DPhongMaterialPackageArchive::_Internal::shininess(const Chart3DPhongMaterialPackageArchive* msg) {
  return *msg->_impl_.shininess_;
}
Chart3DPhongMaterialPackageArchive::Chart3DPhongMaterialPackageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DPhongMaterialPackageArchive)
}
Chart3DPhongMaterialPackageArchive::Chart3DPhongMaterialPackageArchive(const Chart3DPhongMaterialPackageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DPhongMaterialPackageArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emissive_){nullptr}
    , decltype(_impl_.diffuse_){nullptr}
    , decltype(_impl_.modulate_){nullptr}
    , decltype(_impl_.specular_){nullptr}
    , decltype(_impl_.shininess_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_emissive()) {
    _this->_impl_.emissive_ = new ::TSCH::Chart3DEmissiveMaterialArchive(*from._impl_.emissive_);
  }
  if (from._internal_has_diffuse()) {
    _this->_impl_.diffuse_ = new ::TSCH::Chart3DDiffuseMaterialArchive(*from._impl_.diffuse_);
  }
  if (from._internal_has_modulate()) {
    _this->_impl_.modulate_ = new ::TSCH::Chart3DModulateMaterialArchive(*from._impl_.modulate_);
  }
  if (from._internal_has_specular()) {
    _this->_impl_.specular_ = new ::TSCH::Chart3DSpecularMaterialArchive(*from._impl_.specular_);
  }
  if (from._internal_has_shininess()) {
    _this->_impl_.shininess_ = new ::TSCH::Chart3DShininessMaterialArchive(*from._impl_.shininess_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DPhongMaterialPackageArchive)
}

inline void Chart3DPhongMaterialPackageArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.emissive_){nullptr}
    , decltype(_impl_.diffuse_){nullptr}
    , decltype(_impl_.modulate_){nullptr}
    , decltype(_impl_.specular_){nullptr}
    , decltype(_impl_.shininess_){nullptr}
  };
}

Chart3DPhongMaterialPackageArchive::~Chart3DPhongMaterialPackageArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DPhongMaterialPackageArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DPhongMaterialPackageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.emissive_;
  if (this != internal_default_instance()) delete _impl_.diffuse_;
  if (this != internal_default_instance()) delete _impl_.modulate_;
  if (this != internal_default_instance()) delete _impl_.specular_;
  if (this != internal_default_instance()) delete _impl_.shininess_;
}

void Chart3DPhongMaterialPackageArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DPhongMaterialPackageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DPhongMaterialPackageArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.emissive_ != nullptr);
      _impl_.emissive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.diffuse_ != nullptr);
      _impl_.diffuse_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.modulate_ != nullptr);
      _impl_.modulate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.specular_ != nullptr);
      _impl_.specular_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.shininess_ != nullptr);
      _impl_.shininess_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DPhongMaterialPackageArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.Chart3DEmissiveMaterialArchive emissive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_emissive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DDiffuseMaterialArchive diffuse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffuse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DModulateMaterialArchive modulate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modulate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DSpecularMaterialArchive specular = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_specular(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DShininessMaterialArchive shininess = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_shininess(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DPhongMaterialPackageArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DPhongMaterialPackageArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.Chart3DEmissiveMaterialArchive emissive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::emissive(this),
        _Internal::emissive(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DDiffuseMaterialArchive diffuse = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::diffuse(this),
        _Internal::diffuse(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DModulateMaterialArchive modulate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::modulate(this),
        _Internal::modulate(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DSpecularMaterialArchive specular = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::specular(this),
        _Internal::specular(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DShininessMaterialArchive shininess = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::shininess(this),
        _Internal::shininess(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DPhongMaterialPackageArchive)
  return target;
}

size_t Chart3DPhongMaterialPackageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DPhongMaterialPackageArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSCH.Chart3DEmissiveMaterialArchive emissive = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.emissive_);
    }

    // optional .TSCH.Chart3DDiffuseMaterialArchive diffuse = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.diffuse_);
    }

    // optional .TSCH.Chart3DModulateMaterialArchive modulate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.modulate_);
    }

    // optional .TSCH.Chart3DSpecularMaterialArchive specular = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specular_);
    }

    // optional .TSCH.Chart3DShininessMaterialArchive shininess = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shininess_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DPhongMaterialPackageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DPhongMaterialPackageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DPhongMaterialPackageArchive::GetClassData() const { return &_class_data_; }


void Chart3DPhongMaterialPackageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DPhongMaterialPackageArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DPhongMaterialPackageArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DPhongMaterialPackageArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_emissive()->::TSCH::Chart3DEmissiveMaterialArchive::MergeFrom(
          from._internal_emissive());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_diffuse()->::TSCH::Chart3DDiffuseMaterialArchive::MergeFrom(
          from._internal_diffuse());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_modulate()->::TSCH::Chart3DModulateMaterialArchive::MergeFrom(
          from._internal_modulate());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_specular()->::TSCH::Chart3DSpecularMaterialArchive::MergeFrom(
          from._internal_specular());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_shininess()->::TSCH::Chart3DShininessMaterialArchive::MergeFrom(
          from._internal_shininess());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DPhongMaterialPackageArchive::CopyFrom(const Chart3DPhongMaterialPackageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DPhongMaterialPackageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DPhongMaterialPackageArchive::IsInitialized() const {
  if (_internal_has_emissive()) {
    if (!_impl_.emissive_->IsInitialized()) return false;
  }
  if (_internal_has_diffuse()) {
    if (!_impl_.diffuse_->IsInitialized()) return false;
  }
  if (_internal_has_modulate()) {
    if (!_impl_.modulate_->IsInitialized()) return false;
  }
  if (_internal_has_specular()) {
    if (!_impl_.specular_->IsInitialized()) return false;
  }
  if (_internal_has_shininess()) {
    if (!_impl_.shininess_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DPhongMaterialPackageArchive::InternalSwap(Chart3DPhongMaterialPackageArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DPhongMaterialPackageArchive, _impl_.shininess_)
      + sizeof(Chart3DPhongMaterialPackageArchive::_impl_.shininess_)
      - PROTOBUF_FIELD_OFFSET(Chart3DPhongMaterialPackageArchive, _impl_.emissive_)>(
          reinterpret_cast<char*>(&_impl_.emissive_),
          reinterpret_cast<char*>(&other->_impl_.emissive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DPhongMaterialPackageArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[17]);
}

// ===================================================================

class Chart3DTSPImageDataTextureArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DTSPImageDataTextureArchive>()._impl_._has_bits_);
  static const ::TSP::DataReference& data(const Chart3DTSPImageDataTextureArchive* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& mipmapdata(const Chart3DTSPImageDataTextureArchive* msg);
  static void set_has_mipmapdata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& database_data(const Chart3DTSPImageDataTextureArchive* msg);
  static void set_has_database_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& database_mipmapdata(const Chart3DTSPImageDataTextureArchive* msg);
  static void set_has_database_mipmapdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::DataReference&
Chart3DTSPImageDataTextureArchive::_Internal::data(const Chart3DTSPImageDataTextureArchive* msg) {
  return *msg->_impl_.data_;
}
const ::TSP::DataReference&
Chart3DTSPImageDataTextureArchive::_Internal::mipmapdata(const Chart3DTSPImageDataTextureArchive* msg) {
  return *msg->_impl_.mipmapdata_;
}
const ::TSP::Reference&
Chart3DTSPImageDataTextureArchive::_Internal::database_data(const Chart3DTSPImageDataTextureArchive* msg) {
  return *msg->_impl_.database_data_;
}
const ::TSP::Reference&
Chart3DTSPImageDataTextureArchive::_Internal::database_mipmapdata(const Chart3DTSPImageDataTextureArchive* msg) {
  return *msg->_impl_.database_mipmapdata_;
}
void Chart3DTSPImageDataTextureArchive::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Chart3DTSPImageDataTextureArchive::clear_mipmapdata() {
  if (_impl_.mipmapdata_ != nullptr) _impl_.mipmapdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Chart3DTSPImageDataTextureArchive::clear_database_data() {
  if (_impl_.database_data_ != nullptr) _impl_.database_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Chart3DTSPImageDataTextureArchive::clear_database_mipmapdata() {
  if (_impl_.database_mipmapdata_ != nullptr) _impl_.database_mipmapdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Chart3DTSPImageDataTextureArchive::Chart3DTSPImageDataTextureArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DTSPImageDataTextureArchive)
}
Chart3DTSPImageDataTextureArchive::Chart3DTSPImageDataTextureArchive(const Chart3DTSPImageDataTextureArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DTSPImageDataTextureArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_data_){nullptr}
    , decltype(_impl_.database_mipmapdata_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.mipmapdata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_database_data()) {
    _this->_impl_.database_data_ = new ::TSP::Reference(*from._impl_.database_data_);
  }
  if (from._internal_has_database_mipmapdata()) {
    _this->_impl_.database_mipmapdata_ = new ::TSP::Reference(*from._impl_.database_mipmapdata_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::TSP::DataReference(*from._impl_.data_);
  }
  if (from._internal_has_mipmapdata()) {
    _this->_impl_.mipmapdata_ = new ::TSP::DataReference(*from._impl_.mipmapdata_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DTSPImageDataTextureArchive)
}

inline void Chart3DTSPImageDataTextureArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_data_){nullptr}
    , decltype(_impl_.database_mipmapdata_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.mipmapdata_){nullptr}
  };
}

Chart3DTSPImageDataTextureArchive::~Chart3DTSPImageDataTextureArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DTSPImageDataTextureArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DTSPImageDataTextureArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.database_data_;
  if (this != internal_default_instance()) delete _impl_.database_mipmapdata_;
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.mipmapdata_;
}

void Chart3DTSPImageDataTextureArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DTSPImageDataTextureArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DTSPImageDataTextureArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.database_data_ != nullptr);
      _impl_.database_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.database_mipmapdata_ != nullptr);
      _impl_.database_mipmapdata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.mipmapdata_ != nullptr);
      _impl_.mipmapdata_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DTSPImageDataTextureArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference database_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference database_mipmapdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_mipmapdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference mipmapdata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mipmapdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DTSPImageDataTextureArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DTSPImageDataTextureArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference database_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::database_data(this),
        _Internal::database_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference database_mipmapdata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::database_mipmapdata(this),
        _Internal::database_mipmapdata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference mipmapdata = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::mipmapdata(this),
        _Internal::mipmapdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DTSPImageDataTextureArchive)
  return target;
}

size_t Chart3DTSPImageDataTextureArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DTSPImageDataTextureArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference database_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_data_);
    }

    // optional .TSP.Reference database_mipmapdata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_mipmapdata_);
    }

    // optional .TSP.DataReference data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .TSP.DataReference mipmapdata = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mipmapdata_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DTSPImageDataTextureArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DTSPImageDataTextureArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DTSPImageDataTextureArchive::GetClassData() const { return &_class_data_; }


void Chart3DTSPImageDataTextureArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DTSPImageDataTextureArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DTSPImageDataTextureArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DTSPImageDataTextureArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_database_data()->::TSP::Reference::MergeFrom(
          from._internal_database_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_database_mipmapdata()->::TSP::Reference::MergeFrom(
          from._internal_database_mipmapdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_data()->::TSP::DataReference::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_mipmapdata()->::TSP::DataReference::MergeFrom(
          from._internal_mipmapdata());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DTSPImageDataTextureArchive::CopyFrom(const Chart3DTSPImageDataTextureArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DTSPImageDataTextureArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DTSPImageDataTextureArchive::IsInitialized() const {
  if (_internal_has_database_data()) {
    if (!_impl_.database_data_->IsInitialized()) return false;
  }
  if (_internal_has_database_mipmapdata()) {
    if (!_impl_.database_mipmapdata_->IsInitialized()) return false;
  }
  if (_internal_has_data()) {
    if (!_impl_.data_->IsInitialized()) return false;
  }
  if (_internal_has_mipmapdata()) {
    if (!_impl_.mipmapdata_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DTSPImageDataTextureArchive::InternalSwap(Chart3DTSPImageDataTextureArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DTSPImageDataTextureArchive, _impl_.mipmapdata_)
      + sizeof(Chart3DTSPImageDataTextureArchive::_impl_.mipmapdata_)
      - PROTOBUF_FIELD_OFFSET(Chart3DTSPImageDataTextureArchive, _impl_.database_data_)>(
          reinterpret_cast<char*>(&_impl_.database_data_),
          reinterpret_cast<char*>(&other->_impl_.database_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DTSPImageDataTextureArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[18]);
}

// ===================================================================

class Chart3DBaseImageTextureTilingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DBaseImageTextureTilingArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DVectorArchive& scale(const Chart3DBaseImageTextureTilingArchive* msg);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCH::Chart3DVectorArchive&
Chart3DBaseImageTextureTilingArchive::_Internal::scale(const Chart3DBaseImageTextureTilingArchive* msg) {
  return *msg->_impl_.scale_;
}
Chart3DBaseImageTextureTilingArchive::Chart3DBaseImageTextureTilingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DBaseImageTextureTilingArchive)
}
Chart3DBaseImageTextureTilingArchive::Chart3DBaseImageTextureTilingArchive(const Chart3DBaseImageTextureTilingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DBaseImageTextureTilingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.rotation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scale()) {
    _this->_impl_.scale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.scale_);
  }
  _this->_impl_.rotation_ = from._impl_.rotation_;
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DBaseImageTextureTilingArchive)
}

inline void Chart3DBaseImageTextureTilingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.rotation_){0}
  };
}

Chart3DBaseImageTextureTilingArchive::~Chart3DBaseImageTextureTilingArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DBaseImageTextureTilingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DBaseImageTextureTilingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.scale_;
}

void Chart3DBaseImageTextureTilingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DBaseImageTextureTilingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DBaseImageTextureTilingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.scale_ != nullptr);
    _impl_.scale_->Clear();
  }
  _impl_.rotation_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DBaseImageTextureTilingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.Chart3DVectorArchive scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_rotation(&has_bits);
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DBaseImageTextureTilingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DBaseImageTextureTilingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.Chart3DVectorArchive scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // optional float rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DBaseImageTextureTilingArchive)
  return target;
}

size_t Chart3DBaseImageTextureTilingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DBaseImageTextureTilingArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCH.Chart3DVectorArchive scale = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scale_);
    }

    // optional float rotation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DBaseImageTextureTilingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DBaseImageTextureTilingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DBaseImageTextureTilingArchive::GetClassData() const { return &_class_data_; }


void Chart3DBaseImageTextureTilingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DBaseImageTextureTilingArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DBaseImageTextureTilingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DBaseImageTextureTilingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_scale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_scale());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rotation_ = from._impl_.rotation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DBaseImageTextureTilingArchive::CopyFrom(const Chart3DBaseImageTextureTilingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DBaseImageTextureTilingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DBaseImageTextureTilingArchive::IsInitialized() const {
  if (_internal_has_scale()) {
    if (!_impl_.scale_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DBaseImageTextureTilingArchive::InternalSwap(Chart3DBaseImageTextureTilingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DBaseImageTextureTilingArchive, _impl_.rotation_)
      + sizeof(Chart3DBaseImageTextureTilingArchive::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(Chart3DBaseImageTextureTilingArchive, _impl_.scale_)>(
          reinterpret_cast<char*>(&_impl_.scale_),
          reinterpret_cast<char*>(&other->_impl_.scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DBaseImageTextureTilingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[19]);
}

// ===================================================================

class Chart3DImageTextureTilingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DImageTextureTilingArchive>()._impl_._has_bits_);
  static const ::TSCH::Chart3DBaseImageTextureTilingArchive& super(const Chart3DImageTextureTilingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_face(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_xposition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_yposition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scontinuity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tcontinuity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reveal(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCH::Chart3DBaseImageTextureTilingArchive&
Chart3DImageTextureTilingArchive::_Internal::super(const Chart3DImageTextureTilingArchive* msg) {
  return *msg->_impl_.super_;
}
Chart3DImageTextureTilingArchive::Chart3DImageTextureTilingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DImageTextureTilingArchive)
}
Chart3DImageTextureTilingArchive::Chart3DImageTextureTilingArchive(const Chart3DImageTextureTilingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DImageTextureTilingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.wrap_){}
    , decltype(_impl_.face_){}
    , decltype(_impl_.xposition_){}
    , decltype(_impl_.yposition_){}
    , decltype(_impl_.scontinuity_){}
    , decltype(_impl_.tcontinuity_){}
    , decltype(_impl_.reveal_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSCH::Chart3DBaseImageTextureTilingArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reveal_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.reveal_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DImageTextureTilingArchive)
}

inline void Chart3DImageTextureTilingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.wrap_){0}
    , decltype(_impl_.face_){0}
    , decltype(_impl_.xposition_){0}
    , decltype(_impl_.yposition_){0}
    , decltype(_impl_.scontinuity_){0}
    , decltype(_impl_.tcontinuity_){0}
    , decltype(_impl_.reveal_){false}
  };
}

Chart3DImageTextureTilingArchive::~Chart3DImageTextureTilingArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DImageTextureTilingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DImageTextureTilingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void Chart3DImageTextureTilingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DImageTextureTilingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DImageTextureTilingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tcontinuity_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.tcontinuity_));
  }
  _impl_.reveal_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DImageTextureTilingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.Chart3DBaseImageTextureTilingArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.TextureTilingMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::TextureTilingMode_IsValid(val))) {
            _internal_set_mode(static_cast<::TSCH::TextureTilingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.TextureTilingWrap wrap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::TextureTilingWrap_IsValid(val))) {
            _internal_set_wrap(static_cast<::TSCH::TextureTilingWrap>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.TextureTilingFace face = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::TextureTilingFace_IsValid(val))) {
            _internal_set_face(static_cast<::TSCH::TextureTilingFace>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.TextureTilingXPosition xposition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::TextureTilingXPosition_IsValid(val))) {
            _internal_set_xposition(static_cast<::TSCH::TextureTilingXPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.TextureTilingYPosition yposition = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::TextureTilingYPosition_IsValid(val))) {
            _internal_set_yposition(static_cast<::TSCH::TextureTilingYPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.TextureTilingContinuity scontinuity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::TextureTilingContinuity_IsValid(val))) {
            _internal_set_scontinuity(static_cast<::TSCH::TextureTilingContinuity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.TextureTilingContinuity tcontinuity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::TextureTilingContinuity_IsValid(val))) {
            _internal_set_tcontinuity(static_cast<::TSCH::TextureTilingContinuity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool reveal = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_reveal(&has_bits);
          _impl_.reveal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DImageTextureTilingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DImageTextureTilingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.Chart3DBaseImageTextureTilingArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.TextureTilingMode mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // optional .TSCH.TextureTilingWrap wrap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_wrap(), target);
  }

  // optional .TSCH.TextureTilingFace face = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_face(), target);
  }

  // optional .TSCH.TextureTilingXPosition xposition = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_xposition(), target);
  }

  // optional .TSCH.TextureTilingYPosition yposition = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_yposition(), target);
  }

  // optional .TSCH.TextureTilingContinuity scontinuity = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_scontinuity(), target);
  }

  // optional .TSCH.TextureTilingContinuity tcontinuity = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_tcontinuity(), target);
  }

  // optional bool reveal = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_reveal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DImageTextureTilingArchive)
  return target;
}

size_t Chart3DImageTextureTilingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DImageTextureTilingArchive)
  size_t total_size = 0;

  // required .TSCH.Chart3DBaseImageTextureTilingArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSCH.TextureTilingMode mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional .TSCH.TextureTilingWrap wrap = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wrap());
    }

    // optional .TSCH.TextureTilingFace face = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_face());
    }

    // optional .TSCH.TextureTilingXPosition xposition = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_xposition());
    }

    // optional .TSCH.TextureTilingYPosition yposition = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_yposition());
    }

    // optional .TSCH.TextureTilingContinuity scontinuity = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_scontinuity());
    }

    // optional .TSCH.TextureTilingContinuity tcontinuity = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_tcontinuity());
    }

  }
  // optional bool reveal = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DImageTextureTilingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DImageTextureTilingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DImageTextureTilingArchive::GetClassData() const { return &_class_data_; }


void Chart3DImageTextureTilingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DImageTextureTilingArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DImageTextureTilingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DImageTextureTilingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSCH::Chart3DBaseImageTextureTilingArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.wrap_ = from._impl_.wrap_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.face_ = from._impl_.face_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.xposition_ = from._impl_.xposition_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.yposition_ = from._impl_.yposition_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.scontinuity_ = from._impl_.scontinuity_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tcontinuity_ = from._impl_.tcontinuity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_reveal(from._internal_reveal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DImageTextureTilingArchive::CopyFrom(const Chart3DImageTextureTilingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DImageTextureTilingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DImageTextureTilingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void Chart3DImageTextureTilingArchive::InternalSwap(Chart3DImageTextureTilingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DImageTextureTilingArchive, _impl_.reveal_)
      + sizeof(Chart3DImageTextureTilingArchive::_impl_.reveal_)
      - PROTOBUF_FIELD_OFFSET(Chart3DImageTextureTilingArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DImageTextureTilingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[20]);
}

// ===================================================================

class Chart3DVectorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Chart3DVectorArchive>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Chart3DVectorArchive::Chart3DVectorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Chart3DVectorArchive)
}
Chart3DVectorArchive::Chart3DVectorArchive(const Chart3DVectorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Chart3DVectorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Chart3DVectorArchive)
}

inline void Chart3DVectorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
  };
}

Chart3DVectorArchive::~Chart3DVectorArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Chart3DVectorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Chart3DVectorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Chart3DVectorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Chart3DVectorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Chart3DVectorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.w_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chart3DVectorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_w(&has_bits);
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chart3DVectorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Chart3DVectorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // required float w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Chart3DVectorArchive)
  return target;
}

size_t Chart3DVectorArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.Chart3DVectorArchive)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Chart3DVectorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Chart3DVectorArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chart3DVectorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Chart3DVectorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chart3DVectorArchive::GetClassData() const { return &_class_data_; }


void Chart3DVectorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Chart3DVectorArchive*>(&to_msg);
  auto& from = static_cast<const Chart3DVectorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Chart3DVectorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.w_ = from._impl_.w_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chart3DVectorArchive::CopyFrom(const Chart3DVectorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Chart3DVectorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart3DVectorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Chart3DVectorArchive::InternalSwap(Chart3DVectorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chart3DVectorArchive, _impl_.w_)
      + sizeof(Chart3DVectorArchive::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Chart3DVectorArchive, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chart3DVectorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCH3DArchives_2eproto_getter, &descriptor_table_TSCH3DArchives_2eproto_once,
      file_level_metadata_TSCH3DArchives_2eproto[21]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::FillArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Chart3DFillArchive >, 11, false>
  fill3d(kFill3DFieldNumber, ::TSCH::Chart3DFillArchive::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DEnvironmentPackageArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DEnvironmentPackageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DEnvironmentPackageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DFillArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DFillArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DPointLightArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DPointLightArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DPointLightArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DDirectionalLightArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DDirectionalLightArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DDirectionalLightArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DSpotLightArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DSpotLightArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DSpotLightArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DLightArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DLightArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DLightArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DLightingModelArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DLightingModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DLightingModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DLightingPackageArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DLightingPackageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DLightingPackageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DTexturesMaterialArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DTexturesMaterialArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DTexturesMaterialArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DEmissiveMaterialArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DEmissiveMaterialArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DEmissiveMaterialArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DDiffuseMaterialArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DDiffuseMaterialArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DDiffuseMaterialArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DModulateMaterialArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DModulateMaterialArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DModulateMaterialArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DSpecularMaterialArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DSpecularMaterialArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DSpecularMaterialArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DShininessMaterialArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DShininessMaterialArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DShininessMaterialArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DEnvironmentMaterialArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DEnvironmentMaterialArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DEnvironmentMaterialArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DFixedFunctionLightingModelArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DFixedFunctionLightingModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DFixedFunctionLightingModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DPhongLightingModelArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DPhongLightingModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DPhongLightingModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DPhongMaterialPackageArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DPhongMaterialPackageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DPhongMaterialPackageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DTSPImageDataTextureArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DTSPImageDataTextureArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DTSPImageDataTextureArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DBaseImageTextureTilingArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DBaseImageTextureTilingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DBaseImageTextureTilingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DImageTextureTilingArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DImageTextureTilingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DImageTextureTilingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Chart3DVectorArchive*
Arena::CreateMaybeMessage< ::TSCH::Chart3DVectorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Chart3DVectorArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
