// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSDCommandArchives.proto

#include "TSDCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSD {
PROTOBUF_CONSTEXPR UndoObjectArchive::UndoObjectArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.objects_)*/{}
  , /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.counts_)*/{}
  , /*decltype(_impl_.stylesheet_)*/nullptr} {}
struct UndoObjectArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoObjectArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoObjectArchiveDefaultTypeInternal() {}
  union {
    UndoObjectArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoObjectArchiveDefaultTypeInternal _UndoObjectArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupDrawablesCommandArchive::GroupDrawablesCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.group_)*/nullptr} {}
struct GroupDrawablesCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupDrawablesCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    GroupDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupDrawablesCommandArchiveDefaultTypeInternal _GroupDrawablesCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR UngroupGroupCommandArchive::UngroupGroupCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.group_)*/nullptr} {}
struct UngroupGroupCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UngroupGroupCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UngroupGroupCommandArchiveDefaultTypeInternal() {}
  union {
    UngroupGroupCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UngroupGroupCommandArchiveDefaultTypeInternal _UngroupGroupCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ContainerRemoveChildrenCommandArchive::ContainerRemoveChildrenCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.args_list_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.container_id_path_)*/nullptr} {}
struct ContainerRemoveChildrenCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerRemoveChildrenCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerRemoveChildrenCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerRemoveChildrenCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerRemoveChildrenCommandArchiveDefaultTypeInternal _ContainerRemoveChildrenCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ContainerRemoveDrawablesCommandArchive::ContainerRemoveDrawablesCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerRemoveDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerRemoveDrawablesCommandArchiveDefaultTypeInternal _ContainerRemoveDrawablesCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ContainerInsertChildrenCommandArchive::ContainerInsertChildrenCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.args_list_)*/{}
  , /*decltype(_impl_.custom_format_keys_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.container_id_path_)*/nullptr
  , /*decltype(_impl_.undo_object_)*/nullptr} {}
struct ContainerInsertChildrenCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerInsertChildrenCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerInsertChildrenCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerInsertChildrenCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerInsertChildrenCommandArchiveDefaultTypeInternal _ContainerInsertChildrenCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ContainerInsertDrawablesCommandArchive::ContainerInsertDrawablesCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ContainerInsertDrawablesCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerInsertDrawablesCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerInsertDrawablesCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerInsertDrawablesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerInsertDrawablesCommandArchiveDefaultTypeInternal _ContainerInsertDrawablesCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ContainerReorderChildrenCommandArchive::ContainerReorderChildrenCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.args_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.container_id_path_)*/nullptr} {}
struct ContainerReorderChildrenCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerReorderChildrenCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerReorderChildrenCommandArchiveDefaultTypeInternal() {}
  union {
    ContainerReorderChildrenCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerReorderChildrenCommandArchiveDefaultTypeInternal _ContainerReorderChildrenCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupUngroupInformativeCommandArchive::GroupUngroupInformativeCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.removed_infos_)*/{}
  , /*decltype(_impl_.inserted_infos_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.command_type_)*/0} {}
struct GroupUngroupInformativeCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupUngroupInformativeCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupUngroupInformativeCommandArchiveDefaultTypeInternal() {}
  union {
    GroupUngroupInformativeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupUngroupInformativeCommandArchiveDefaultTypeInternal _GroupUngroupInformativeCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR InfoCommandArchive::InfoCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.info_id_path_)*/nullptr} {}
struct InfoCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoCommandArchiveDefaultTypeInternal() {}
  union {
    InfoCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoCommandArchiveDefaultTypeInternal _InfoCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ConnectionLineConnectCommandArchive::ConnectionLineConnectCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.connected_from_id_)*/nullptr
  , /*decltype(_impl_.connected_to_id_)*/nullptr
  , /*decltype(_impl_.old_connected_to_id_)*/nullptr
  , /*decltype(_impl_.old_connected_from_id_)*/nullptr} {}
struct ConnectionLineConnectCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionLineConnectCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionLineConnectCommandArchiveDefaultTypeInternal() {}
  union {
    ConnectionLineConnectCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionLineConnectCommandArchiveDefaultTypeInternal _ConnectionLineConnectCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR InfoGeometryCommandArchive::InfoGeometryCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.newgeometry_)*/nullptr
  , /*decltype(_impl_.oldgeometry_)*/nullptr
  , /*decltype(_impl_.matchobjectplaceholdergeometry_)*/false
  , /*decltype(_impl_.oldmatchobjectplaceholdergeometry_)*/false
  , /*decltype(_impl_.shouldtriggerrtuanimation_)*/false
  , /*decltype(_impl_.initiatedonweb_)*/false} {}
struct InfoGeometryCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoGeometryCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    InfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoGeometryCommandArchiveDefaultTypeInternal _InfoGeometryCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawablePathSourceCommandArchive::DrawablePathSourceCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_path_source_)*/nullptr
  , /*decltype(_impl_.new_path_source_)*/nullptr} {}
struct DrawablePathSourceCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawablePathSourceCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawablePathSourceCommandArchiveDefaultTypeInternal() {}
  union {
    DrawablePathSourceCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawablePathSourceCommandArchiveDefaultTypeInternal _DrawablePathSourceCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR InstantAlphaCommandArchive::InstantAlphaCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.oldpath_)*/nullptr
  , /*decltype(_impl_.newpath_)*/nullptr} {}
struct InstantAlphaCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstantAlphaCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstantAlphaCommandArchiveDefaultTypeInternal() {}
  union {
    InstantAlphaCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstantAlphaCommandArchiveDefaultTypeInternal _InstantAlphaCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawableApplyThemeCommandArchive::DrawableApplyThemeCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.style_)*/nullptr} {}
struct DrawableApplyThemeCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawableApplyThemeCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawableApplyThemeCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableApplyThemeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawableApplyThemeCommandArchiveDefaultTypeInternal _DrawableApplyThemeCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR AbstractStyleCommandArchive::AbstractStyleCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct AbstractStyleCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbstractStyleCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbstractStyleCommandArchiveDefaultTypeInternal() {}
  union {
    AbstractStyleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbstractStyleCommandArchiveDefaultTypeInternal _AbstractStyleCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR StyledInfoSetStyleCommandArchive::StyledInfoSetStyleCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_style_)*/nullptr
  , /*decltype(_impl_.rollback_style_)*/nullptr} {}
struct StyledInfoSetStyleCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyledInfoSetStyleCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyledInfoSetStyleCommandArchiveDefaultTypeInternal() {}
  union {
    StyledInfoSetStyleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyledInfoSetStyleCommandArchiveDefaultTypeInternal _StyledInfoSetStyleCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR BaseApplyPresetCommandArchive::BaseApplyPresetCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.preset_style_)*/nullptr
  , /*decltype(_impl_.rollback_style_)*/nullptr} {}
struct BaseApplyPresetCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseApplyPresetCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseApplyPresetCommandArchiveDefaultTypeInternal() {}
  union {
    BaseApplyPresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseApplyPresetCommandArchiveDefaultTypeInternal _BaseApplyPresetCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ShapeApplyPresetCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShapeApplyPresetCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShapeApplyPresetCommandArchiveDefaultTypeInternal() {}
  union {
    ShapeApplyPresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShapeApplyPresetCommandArchiveDefaultTypeInternal _ShapeApplyPresetCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR MediaApplyPresetCommandArchive::MediaApplyPresetCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct MediaApplyPresetCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaApplyPresetCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaApplyPresetCommandArchiveDefaultTypeInternal() {}
  union {
    MediaApplyPresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaApplyPresetCommandArchiveDefaultTypeInternal _MediaApplyPresetCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.change_)*/nullptr} {}
struct ShapeStyleSetValueCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShapeStyleSetValueCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShapeStyleSetValueCommandArchiveDefaultTypeInternal() {}
  union {
    ShapeStyleSetValueCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShapeStyleSetValueCommandArchiveDefaultTypeInternal _ShapeStyleSetValueCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR BaseStyleSetValueCommandArchive::BaseStyleSetValueCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_style_)*/nullptr
  , /*decltype(_impl_.is_border_change_)*/false} {}
struct BaseStyleSetValueCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseStyleSetValueCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseStyleSetValueCommandArchiveDefaultTypeInternal() {}
  union {
    BaseStyleSetValueCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseStyleSetValueCommandArchiveDefaultTypeInternal _BaseStyleSetValueCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR MovieSetValueCommandArchive_PropertyValue::MovieSetValueCommandArchive_PropertyValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.posterimagedata_)*/nullptr
  , /*decltype(_impl_.media_)*/nullptr
  , /*decltype(_impl_.starttime_)*/0
  , /*decltype(_impl_.endtime_)*/0
  , /*decltype(_impl_.postertime_)*/0
  , /*decltype(_impl_.loopoption_)*/0
  , /*decltype(_impl_.volume_)*/0
  , /*decltype(_impl_.autoplay_)*/false
  , /*decltype(_impl_.playsacrossslides_)*/false} {}
struct MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal() {}
  union {
    MovieSetValueCommandArchive_PropertyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovieSetValueCommandArchive_PropertyValueDefaultTypeInternal _MovieSetValueCommandArchive_PropertyValue_default_instance_;
PROTOBUF_CONSTEXPR MovieSetValueCommandArchive::MovieSetValueCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.oldvalue_)*/nullptr
  , /*decltype(_impl_.importedauxiliarymedia_)*/nullptr
  , /*decltype(_impl_.oldimportedauxiliarymedia_)*/nullptr
  , /*decltype(_impl_.property_)*/0} {}
struct MovieSetValueCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovieSetValueCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovieSetValueCommandArchiveDefaultTypeInternal() {}
  union {
    MovieSetValueCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovieSetValueCommandArchiveDefaultTypeInternal _MovieSetValueCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR MediaStyleSetValueCommandArchive::MediaStyleSetValueCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.change_)*/nullptr} {}
struct MediaStyleSetValueCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaStyleSetValueCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaStyleSetValueCommandArchiveDefaultTypeInternal() {}
  union {
    MediaStyleSetValueCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaStyleSetValueCommandArchiveDefaultTypeInternal _MediaStyleSetValueCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ImageMediaCommandArchive::ImageMediaCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.database_newimagedata_)*/nullptr
  , /*decltype(_impl_.database_oldimagedata_)*/nullptr
  , /*decltype(_impl_.database_oldoriginalimagedata_)*/nullptr
  , /*decltype(_impl_.oldnaturalsize_)*/nullptr
  , /*decltype(_impl_.database_neworiginalimagedata_)*/nullptr
  , /*decltype(_impl_.newimagedata_)*/nullptr
  , /*decltype(_impl_.oldimagedata_)*/nullptr
  , /*decltype(_impl_.oldoriginalimagedata_)*/nullptr
  , /*decltype(_impl_.neworiginalimagedata_)*/nullptr
  , /*decltype(_impl_.oldimageadjustments_)*/nullptr
  , /*decltype(_impl_.oldadjustedimagedata_)*/nullptr
  , /*decltype(_impl_.oldenhancedimagedata_)*/nullptr
  , /*decltype(_impl_.imageadjustments_)*/nullptr
  , /*decltype(_impl_.adjustedimagedata_)*/nullptr
  , /*decltype(_impl_.enhancedimagedata_)*/nullptr
  , /*decltype(_impl_.newthumbnailimagedata_)*/nullptr
  , /*decltype(_impl_.oldthumbnailimagedata_)*/nullptr
  , /*decltype(_impl_.thumbnailadjustedimagedata_)*/nullptr
  , /*decltype(_impl_.oldthumbnailadjustedimagedata_)*/nullptr} {}
struct ImageMediaCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageMediaCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageMediaCommandArchiveDefaultTypeInternal() {}
  union {
    ImageMediaCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageMediaCommandArchiveDefaultTypeInternal _ImageMediaCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR MediaOriginalSizeCommandArchive::MediaOriginalSizeCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.propertyname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.neworiginalsize_)*/nullptr
  , /*decltype(_impl_.oldoriginalsize_)*/nullptr} {}
struct MediaOriginalSizeCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaOriginalSizeCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaOriginalSizeCommandArchiveDefaultTypeInternal() {}
  union {
    MediaOriginalSizeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaOriginalSizeCommandArchiveDefaultTypeInternal _MediaOriginalSizeCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR MediaInfoGeometryCommandArchive::MediaInfoGeometryCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.neworiginalsize_)*/nullptr
  , /*decltype(_impl_.oldoriginalsize_)*/nullptr} {}
struct MediaInfoGeometryCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaInfoGeometryCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaInfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    MediaInfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaInfoGeometryCommandArchiveDefaultTypeInternal _MediaInfoGeometryCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ImageNaturalSizeCommandArchive::ImageNaturalSizeCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_natural_size_)*/nullptr
  , /*decltype(_impl_.old_natural_size_)*/nullptr} {}
struct ImageNaturalSizeCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageNaturalSizeCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageNaturalSizeCommandArchiveDefaultTypeInternal() {}
  union {
    ImageNaturalSizeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageNaturalSizeCommandArchiveDefaultTypeInternal _ImageNaturalSizeCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ImageMaskCommandArchive::ImageMaskCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.newmaskinfo_)*/nullptr
  , /*decltype(_impl_.oldmaskinfo_)*/nullptr
  , /*decltype(_impl_.background_removed_)*/false
  , /*decltype(_impl_.old_background_removed_)*/false} {}
struct ImageMaskCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageMaskCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageMaskCommandArchiveDefaultTypeInternal() {}
  union {
    ImageMaskCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageMaskCommandArchiveDefaultTypeInternal _ImageMaskCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ImageAdjustmentsCommandArchive::ImageAdjustmentsCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_image_adjustments_)*/nullptr
  , /*decltype(_impl_.new_image_adjustments_)*/nullptr
  , /*decltype(_impl_.adjustedimagedata_)*/nullptr
  , /*decltype(_impl_.replacedadjustedimagedata_)*/nullptr
  , /*decltype(_impl_.enhancedimagedata_)*/nullptr
  , /*decltype(_impl_.replacedenhancedimagedata_)*/nullptr
  , /*decltype(_impl_.thumbnailadjustedimagedata_)*/nullptr
  , /*decltype(_impl_.replacedthumbnailadjustedimagedata_)*/nullptr} {}
struct ImageAdjustmentsCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageAdjustmentsCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageAdjustmentsCommandArchiveDefaultTypeInternal() {}
  union {
    ImageAdjustmentsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageAdjustmentsCommandArchiveDefaultTypeInternal _ImageAdjustmentsCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR MediaFlagsCommandArchive::MediaFlagsCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.was_media_replaced_)*/false
  , /*decltype(_impl_.is_placeholder_)*/false
  , /*decltype(_impl_.old_was_media_replaced_)*/false
  , /*decltype(_impl_.old_is_placeholder_)*/false} {}
struct MediaFlagsCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaFlagsCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaFlagsCommandArchiveDefaultTypeInternal() {}
  union {
    MediaFlagsCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaFlagsCommandArchiveDefaultTypeInternal _MediaFlagsCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawablesCommandGroupArchive::DrawablesCommandGroupArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.obsolete_selection_)*/nullptr
  , /*decltype(_impl_.modelforselection_)*/nullptr
  , /*decltype(_impl_.archivedselection_)*/nullptr
  , /*decltype(_impl_.fordrag_)*/false
  , /*decltype(_impl_.type_)*/1} {}
struct DrawablesCommandGroupArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawablesCommandGroupArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawablesCommandGroupArchiveDefaultTypeInternal() {}
  union {
    DrawablesCommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawablesCommandGroupArchiveDefaultTypeInternal _DrawablesCommandGroupArchive_default_instance_;
PROTOBUF_CONSTEXPR ExteriorTextWrapCommandArchive::ExteriorTextWrapCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_exterior_text_wrap_)*/nullptr
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.direction_)*/0u
  , /*decltype(_impl_.fit_type_)*/0u
  , /*decltype(_impl_.margin_)*/0
  , /*decltype(_impl_.alpha_threshold_)*/0
  , /*decltype(_impl_.is_html_wrap_)*/false} {}
struct ExteriorTextWrapCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExteriorTextWrapCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExteriorTextWrapCommandArchiveDefaultTypeInternal() {}
  union {
    ExteriorTextWrapCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExteriorTextWrapCommandArchiveDefaultTypeInternal _ExteriorTextWrapCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawableHyperlinkCommandArchive::DrawableHyperlinkCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.oldhyperlink_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newhyperlink_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct DrawableHyperlinkCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawableHyperlinkCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawableHyperlinkCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableHyperlinkCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawableHyperlinkCommandArchiveDefaultTypeInternal _DrawableHyperlinkCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR CommentInvalidatingCommandSelectionBehaviorArchive::CommentInvalidatingCommandSelectionBehaviorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.annotation_displaying_command_)*/nullptr
  , /*decltype(_impl_.begin_editing_on_undo_)*/false
  , /*decltype(_impl_.begin_editing_on_redo_)*/false
  , /*decltype(_impl_.should_invalidate_on_undo_)*/false
  , /*decltype(_impl_.should_invalidate_on_redo_)*/false} {}
struct CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    CommentInvalidatingCommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommentInvalidatingCommandSelectionBehaviorArchiveDefaultTypeInternal _CommentInvalidatingCommandSelectionBehaviorArchive_default_instance_;
PROTOBUF_CONSTEXPR ImageReplaceCommandArchive::ImageReplaceCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_image_data_)*/nullptr
  , /*decltype(_impl_.new_original_image_data_)*/nullptr
  , /*decltype(_impl_.old_image_data_)*/nullptr
  , /*decltype(_impl_.old_original_image_data_)*/nullptr
  , /*decltype(_impl_.instant_alpha_path_)*/nullptr
  , /*decltype(_impl_.old_instant_alpha_path_)*/nullptr
  , /*decltype(_impl_.natural_size_for_iapath_)*/nullptr
  , /*decltype(_impl_.old_natural_size_for_iapath_)*/nullptr
  , /*decltype(_impl_.target_image_geometry_)*/nullptr
  , /*decltype(_impl_.old_target_image_geometry_)*/nullptr
  , /*decltype(_impl_.target_mask_geometry_)*/nullptr
  , /*decltype(_impl_.old_target_mask_geometry_)*/nullptr
  , /*decltype(_impl_.image_adjustments_)*/nullptr
  , /*decltype(_impl_.adjusted_image_data_)*/nullptr
  , /*decltype(_impl_.enhanced_image_data_)*/nullptr
  , /*decltype(_impl_.old_image_adjustments_)*/nullptr
  , /*decltype(_impl_.old_adjusted_image_data_)*/nullptr
  , /*decltype(_impl_.old_enhanced_image_data_)*/nullptr
  , /*decltype(_impl_.thumbnail_image_data_)*/nullptr
  , /*decltype(_impl_.old_thumbnail_image_data_)*/nullptr
  , /*decltype(_impl_.thumbnail_adjusted_image_data_)*/nullptr
  , /*decltype(_impl_.old_thumbnail_adjusted_image_data_)*/nullptr
  , /*decltype(_impl_.natural_size_)*/nullptr
  , /*decltype(_impl_.old_natural_size_)*/nullptr} {}
struct ImageReplaceCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageReplaceCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageReplaceCommandArchiveDefaultTypeInternal() {}
  union {
    ImageReplaceCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageReplaceCommandArchiveDefaultTypeInternal _ImageReplaceCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawableLockCommandArchive::DrawableLockCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.locked_)*/false
  , /*decltype(_impl_.was_locked_)*/false} {}
struct DrawableLockCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawableLockCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawableLockCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableLockCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawableLockCommandArchiveDefaultTypeInternal _DrawableLockCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawableInfoCommentCommandArchive::DrawableInfoCommentCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_comment_)*/nullptr
  , /*decltype(_impl_.new_comment_)*/nullptr
  , /*decltype(_impl_.forward_variant_)*/0
  , /*decltype(_impl_.inverse_variant_)*/0} {}
struct DrawableInfoCommentCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawableInfoCommentCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawableInfoCommentCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableInfoCommentCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawableInfoCommentCommandArchiveDefaultTypeInternal _DrawableInfoCommentCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawablePencilAnnotationCommandArchive::DrawablePencilAnnotationCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.pencil_annotation_to_add_)*/nullptr
  , /*decltype(_impl_.pencil_annotation_to_remove_)*/nullptr} {}
struct DrawablePencilAnnotationCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawablePencilAnnotationCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawablePencilAnnotationCommandArchiveDefaultTypeInternal() {}
  union {
    DrawablePencilAnnotationCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawablePencilAnnotationCommandArchiveDefaultTypeInternal _DrawablePencilAnnotationCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR AbstractGuideCommandArchive::AbstractGuideCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_guides_)*/{}
  , /*decltype(_impl_.new_guides_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct AbstractGuideCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbstractGuideCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbstractGuideCommandArchiveDefaultTypeInternal() {}
  union {
    AbstractGuideCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbstractGuideCommandArchiveDefaultTypeInternal _AbstractGuideCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR GuideCommandArchive::GuideCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.storage_id_path_)*/nullptr} {}
struct GuideCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuideCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuideCommandArchiveDefaultTypeInternal() {}
  union {
    GuideCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuideCommandArchiveDefaultTypeInternal _GuideCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawableAspectRatioLockedCommandArchive::DrawableAspectRatioLockedCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.aspect_ratio_locked_)*/false
  , /*decltype(_impl_.was_aspect_ratio_locked_)*/false} {}
struct DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableAspectRatioLockedCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawableAspectRatioLockedCommandArchiveDefaultTypeInternal _DrawableAspectRatioLockedCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawableAccessibilityDescriptionCommandArchive::DrawableAccessibilityDescriptionCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accessibility_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_accessibility_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal() {}
  union {
    DrawableAccessibilityDescriptionCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawableAccessibilityDescriptionCommandArchiveDefaultTypeInternal _DrawableAccessibilityDescriptionCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR PasteStyleCommandArchive::PasteStyleCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_style_)*/nullptr
  , /*decltype(_impl_.rollback_style_)*/nullptr
  , /*decltype(_impl_.tail_end_on_left_)*/false} {}
struct PasteStyleCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasteStyleCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasteStyleCommandArchiveDefaultTypeInternal() {}
  union {
    PasteStyleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasteStyleCommandArchiveDefaultTypeInternal _PasteStyleCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ImageInfoAbstractGeometryCommandArchive::ImageInfoAbstractGeometryCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_image_geometry_)*/nullptr
  , /*decltype(_impl_.old_image_geometry_)*/nullptr
  , /*decltype(_impl_.new_mask_geometry_)*/nullptr
  , /*decltype(_impl_.old_mask_geometry_)*/nullptr
  , /*decltype(_impl_.new_mask_path_source_)*/nullptr
  , /*decltype(_impl_.old_mask_path_source_)*/nullptr
  , /*decltype(_impl_.new_image_original_size_)*/nullptr
  , /*decltype(_impl_.old_image_original_size_)*/nullptr
  , /*decltype(_impl_.background_removed_)*/false
  , /*decltype(_impl_.old_background_removed_)*/false} {}
struct ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    ImageInfoAbstractGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageInfoAbstractGeometryCommandArchiveDefaultTypeInternal _ImageInfoAbstractGeometryCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ImageInfoGeometryCommandArchive::ImageInfoGeometryCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ImageInfoGeometryCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageInfoGeometryCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageInfoGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    ImageInfoGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageInfoGeometryCommandArchiveDefaultTypeInternal _ImageInfoGeometryCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ImageInfoMaskGeometryCommandArchive::ImageInfoMaskGeometryCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal() {}
  union {
    ImageInfoMaskGeometryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageInfoMaskGeometryCommandArchiveDefaultTypeInternal _ImageInfoMaskGeometryCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR InfoCollectionSelectionTransformerHelperArchive::InfoCollectionSelectionTransformerHelperArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_uuid_path_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal() {}
  union {
    InfoCollectionSelectionTransformerHelperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoCollectionSelectionTransformerHelperArchiveDefaultTypeInternal _InfoCollectionSelectionTransformerHelperArchive_default_instance_;
PROTOBUF_CONSTEXPR DrawableSelectionTransformerArchive::DrawableSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transformer_helper_)*/nullptr
  , /*decltype(_impl_.untransformed_drawable_selection_)*/nullptr} {}
struct DrawableSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawableSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawableSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    DrawableSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawableSelectionTransformerArchiveDefaultTypeInternal _DrawableSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR InfoHyperlinkSelectionTransformerArchive::InfoHyperlinkSelectionTransformerArchive(
    ::_pbi::ConstantInitialized) {}
struct InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    InfoHyperlinkSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoHyperlinkSelectionTransformerArchiveDefaultTypeInternal _InfoHyperlinkSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.transformer_helper_)*/nullptr} {}
struct CanvasSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanvasSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanvasSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanvasSelectionTransformerArchiveDefaultTypeInternal _CanvasSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR PathSelectionTransformerArchive::PathSelectionTransformerArchive(
    ::_pbi::ConstantInitialized) {}
struct PathSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    PathSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathSelectionTransformerArchiveDefaultTypeInternal _PathSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR ShapeSelectionTransformerArchive::ShapeSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct ShapeSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShapeSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShapeSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ShapeSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShapeSelectionTransformerArchiveDefaultTypeInternal _ShapeSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupSelectionTransformerArchive::GroupSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct GroupSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    GroupSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupSelectionTransformerArchiveDefaultTypeInternal _GroupSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR PencilAnnotationSelectionTransformerArchive::PencilAnnotationSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pencil_annotation_uuid_)*/nullptr} {}
struct PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    PencilAnnotationSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PencilAnnotationSelectionTransformerArchiveDefaultTypeInternal _PencilAnnotationSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR FreehandDrawingOpacityCommandArchive::FreehandDrawingOpacityCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.opacity_)*/0
  , /*decltype(_impl_.old_opacity_)*/0} {}
struct FreehandDrawingOpacityCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FreehandDrawingOpacityCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FreehandDrawingOpacityCommandArchiveDefaultTypeInternal() {}
  union {
    FreehandDrawingOpacityCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FreehandDrawingOpacityCommandArchiveDefaultTypeInternal _FreehandDrawingOpacityCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR FreehandDrawingAnimationCommandArchive::FreehandDrawingAnimationCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.animation_)*/nullptr
  , /*decltype(_impl_.old_animation_)*/nullptr} {}
struct FreehandDrawingAnimationCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FreehandDrawingAnimationCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FreehandDrawingAnimationCommandArchiveDefaultTypeInternal() {}
  union {
    FreehandDrawingAnimationCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FreehandDrawingAnimationCommandArchiveDefaultTypeInternal _FreehandDrawingAnimationCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR InsertCaptionOrTitleCommandArchive::InsertCaptionOrTitleCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.drawable_info_id_path_)*/nullptr
  , /*decltype(_impl_.caption_or_title_info_)*/nullptr
  , /*decltype(_impl_.added_caption_or_title_uuid_)*/nullptr
  , /*decltype(_impl_.undo_object_)*/nullptr
  , /*decltype(_impl_.caption_or_title_kind_)*/1} {}
struct InsertCaptionOrTitleCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertCaptionOrTitleCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertCaptionOrTitleCommandArchiveDefaultTypeInternal() {}
  union {
    InsertCaptionOrTitleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertCaptionOrTitleCommandArchiveDefaultTypeInternal _InsertCaptionOrTitleCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR RemoveCaptionOrTitleCommandArchive::RemoveCaptionOrTitleCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.drawable_info_id_path_)*/nullptr
  , /*decltype(_impl_.removed_caption_or_title_info_)*/nullptr
  , /*decltype(_impl_.removed_caption_or_title_uuid_)*/nullptr
  , /*decltype(_impl_.caption_or_title_kind_)*/1} {}
struct RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal() {}
  union {
    RemoveCaptionOrTitleCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveCaptionOrTitleCommandArchiveDefaultTypeInternal _RemoveCaptionOrTitleCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR SetCaptionOrTitleVisibilityCommandArchive::SetCaptionOrTitleVisibilityCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.hidden_)*/false
  , /*decltype(_impl_.was_hidden_)*/false
  , /*decltype(_impl_.caption_or_title_kind_)*/1} {}
struct SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal() {}
  union {
    SetCaptionOrTitleVisibilityCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCaptionOrTitleVisibilityCommandArchiveDefaultTypeInternal _SetCaptionOrTitleVisibilityCommandArchive_default_instance_;
}  // namespace TSD
static ::_pb::Metadata file_level_metadata_TSDCommandArchives_2eproto[61];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSDCommandArchives_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSDCommandArchives_2eproto = nullptr;

const uint32_t TableStruct_TSDCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, _impl_.stylesheet_),
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, _impl_.objects_),
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::TSD::UndoObjectArchive, _impl_.counts_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, _impl_.drawables_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupDrawablesCommandArchive, _impl_.group_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, _impl_.drawables_),
  PROTOBUF_FIELD_OFFSET(::TSD::UngroupGroupCommandArchive, _impl_.group_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, _impl_.container_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, _impl_.args_list_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveChildrenCommandArchive, _impl_.children_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveDrawablesCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerRemoveDrawablesCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _impl_.container_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _impl_.args_list_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _impl_.custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertChildrenCommandArchive, _impl_.undo_object_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertDrawablesCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertDrawablesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertDrawablesCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerInsertDrawablesCommandArchive, _impl_.drawables_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, _impl_.container_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ContainerReorderChildrenCommandArchive, _impl_.args_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, _impl_.removed_infos_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, _impl_.inserted_infos_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupUngroupInformativeCommandArchive, _impl_.command_type_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCommandArchive, _impl_.info_id_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, _impl_.connected_from_id_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, _impl_.connected_to_id_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, _impl_.old_connected_to_id_),
  PROTOBUF_FIELD_OFFSET(::TSD::ConnectionLineConnectCommandArchive, _impl_.old_connected_from_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _impl_.newgeometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _impl_.oldgeometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _impl_.matchobjectplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _impl_.oldmatchobjectplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _impl_.shouldtriggerrtuanimation_),
  PROTOBUF_FIELD_OFFSET(::TSD::InfoGeometryCommandArchive, _impl_.initiatedonweb_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, _impl_.old_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePathSourceCommandArchive, _impl_.new_path_source_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, _impl_.oldpath_),
  PROTOBUF_FIELD_OFFSET(::TSD::InstantAlphaCommandArchive, _impl_.newpath_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableApplyThemeCommandArchive, _impl_.style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractStyleCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractStyleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractStyleCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, _impl_.new_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::StyledInfoSetStyleCommandArchive, _impl_.rollback_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, _impl_.preset_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseApplyPresetCommandArchive, _impl_.rollback_style_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeApplyPresetCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeApplyPresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeApplyPresetCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaApplyPresetCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaApplyPresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaApplyPresetCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleSetValueCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleSetValueCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleSetValueCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeStyleSetValueCommandArchive, _impl_.change_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, _impl_.old_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::BaseStyleSetValueCommandArchive, _impl_.is_border_change_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_.postertime_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_.posterimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_.autoplay_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_.loopoption_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_.media_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive_PropertyValue, _impl_.playsacrossslides_),
  2,
  3,
  4,
  0,
  7,
  5,
  6,
  1,
  8,
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _impl_.oldvalue_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _impl_.importedauxiliarymedia_),
  PROTOBUF_FIELD_OFFSET(::TSD::MovieSetValueCommandArchive, _impl_.oldimportedauxiliarymedia_),
  0,
  5,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleSetValueCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleSetValueCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleSetValueCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaStyleSetValueCommandArchive, _impl_.change_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.newimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.oldimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.oldoriginalimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.oldnaturalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.neworiginalimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.oldimageadjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.oldadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.oldenhancedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.imageadjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.adjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.enhancedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.newthumbnailimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.oldthumbnailimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.thumbnailadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.oldthumbnailadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.database_newimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.database_oldimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.database_oldoriginalimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMediaCommandArchive, _impl_.database_neworiginalimagedata_),
  0,
  6,
  7,
  8,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, _impl_.neworiginalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, _impl_.oldoriginalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaOriginalSizeCommandArchive, _impl_.propertyname_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, _impl_.neworiginalsize_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaInfoGeometryCommandArchive, _impl_.oldoriginalsize_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, _impl_.new_natural_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageNaturalSizeCommandArchive, _impl_.old_natural_size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, _impl_.newmaskinfo_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, _impl_.oldmaskinfo_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, _impl_.background_removed_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageMaskCommandArchive, _impl_.old_background_removed_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_.old_image_adjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_.new_image_adjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_.adjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_.replacedadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_.enhancedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_.replacedenhancedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_.thumbnailadjustedimagedata_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageAdjustmentsCommandArchive, _impl_.replacedthumbnailadjustedimagedata_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _impl_.was_media_replaced_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _impl_.is_placeholder_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _impl_.old_was_media_replaced_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _impl_.old_is_placeholder_),
  PROTOBUF_FIELD_OFFSET(::TSD::MediaFlagsCommandArchive, _impl_.property_name_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _impl_.obsolete_selection_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _impl_.modelforselection_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _impl_.fordrag_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablesCommandGroupArchive, _impl_.archivedselection_),
  0,
  1,
  2,
  5,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _impl_.old_exterior_text_wrap_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _impl_.fit_type_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _impl_.margin_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _impl_.alpha_threshold_),
  PROTOBUF_FIELD_OFFSET(::TSD::ExteriorTextWrapCommandArchive, _impl_.is_html_wrap_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, _impl_.oldhyperlink_url_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableHyperlinkCommandArchive, _impl_.newhyperlink_url_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _impl_.annotation_displaying_command_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _impl_.begin_editing_on_undo_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _impl_.begin_editing_on_redo_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _impl_.should_invalidate_on_undo_),
  PROTOBUF_FIELD_OFFSET(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive, _impl_.should_invalidate_on_redo_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.new_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.new_original_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_original_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.instant_alpha_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_instant_alpha_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.natural_size_for_iapath_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_natural_size_for_iapath_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.target_image_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_target_image_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.target_mask_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_target_mask_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.image_adjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.adjusted_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.enhanced_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_image_adjustments_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_adjusted_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_enhanced_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.thumbnail_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_thumbnail_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.thumbnail_adjusted_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_thumbnail_adjusted_image_data_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.natural_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageReplaceCommandArchive, _impl_.old_natural_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, _impl_.locked_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableLockCommandArchive, _impl_.was_locked_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, _impl_.old_comment_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, _impl_.new_comment_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, _impl_.forward_variant_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableInfoCommentCommandArchive, _impl_.inverse_variant_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, _impl_.pencil_annotation_to_add_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawablePencilAnnotationCommandArchive, _impl_.pencil_annotation_to_remove_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, _impl_.old_guides_),
  PROTOBUF_FIELD_OFFSET(::TSD::AbstractGuideCommandArchive, _impl_.new_guides_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSD::GuideCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::GuideCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::GuideCommandArchive, _impl_.storage_id_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, _impl_.aspect_ratio_locked_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAspectRatioLockedCommandArchive, _impl_.was_aspect_ratio_locked_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, _impl_.accessibility_description_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableAccessibilityDescriptionCommandArchive, _impl_.old_accessibility_description_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, _impl_.new_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, _impl_.rollback_style_),
  PROTOBUF_FIELD_OFFSET(::TSD::PasteStyleCommandArchive, _impl_.tail_end_on_left_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.new_image_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.old_image_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.new_mask_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.old_mask_geometry_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.new_mask_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.old_mask_path_source_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.new_image_original_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.old_image_original_size_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.background_removed_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoAbstractGeometryCommandArchive, _impl_.old_background_removed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoGeometryCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoGeometryCommandArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoMaskGeometryCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoMaskGeometryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ImageInfoMaskGeometryCommandArchive, _impl_.super_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCollectionSelectionTransformerHelperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoCollectionSelectionTransformerHelperArchive, _impl_.info_uuid_path_list_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionTransformerArchive, _impl_.transformer_helper_),
  PROTOBUF_FIELD_OFFSET(::TSD::DrawableSelectionTransformerArchive, _impl_.untransformed_drawable_selection_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::InfoHyperlinkSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::CanvasSelectionTransformerArchive, _impl_.transformer_helper_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSD::PathSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::ShapeSelectionTransformerArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::GroupSelectionTransformerArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::PencilAnnotationSelectionTransformerArchive, _impl_.pencil_annotation_uuid_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, _impl_.opacity_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingOpacityCommandArchive, _impl_.old_opacity_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, _impl_.animation_),
  PROTOBUF_FIELD_OFFSET(::TSD::FreehandDrawingAnimationCommandArchive, _impl_.old_animation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _impl_.drawable_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _impl_.caption_or_title_info_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _impl_.added_caption_or_title_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _impl_.caption_or_title_kind_),
  PROTOBUF_FIELD_OFFSET(::TSD::InsertCaptionOrTitleCommandArchive, _impl_.undo_object_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, _impl_.drawable_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, _impl_.removed_caption_or_title_info_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, _impl_.removed_caption_or_title_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSD::RemoveCaptionOrTitleCommandArchive, _impl_.caption_or_title_kind_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, _impl_.caption_or_title_kind_),
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, _impl_.hidden_),
  PROTOBUF_FIELD_OFFSET(::TSD::SetCaptionOrTitleVisibilityCommandArchive, _impl_.was_hidden_),
  0,
  3,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::TSD::UndoObjectArchive)},
  { 14, 23, -1, sizeof(::TSD::GroupDrawablesCommandArchive)},
  { 26, 35, -1, sizeof(::TSD::UngroupGroupCommandArchive)},
  { 38, 48, -1, sizeof(::TSD::ContainerRemoveChildrenCommandArchive)},
  { 52, 59, -1, sizeof(::TSD::ContainerRemoveDrawablesCommandArchive)},
  { 60, 72, -1, sizeof(::TSD::ContainerInsertChildrenCommandArchive)},
  { 78, 86, -1, sizeof(::TSD::ContainerInsertDrawablesCommandArchive)},
  { 88, 97, -1, sizeof(::TSD::ContainerReorderChildrenCommandArchive)},
  { 100, 110, -1, sizeof(::TSD::GroupUngroupInformativeCommandArchive)},
  { 114, 122, -1, sizeof(::TSD::InfoCommandArchive)},
  { 124, 135, -1, sizeof(::TSD::ConnectionLineConnectCommandArchive)},
  { 140, 153, -1, sizeof(::TSD::InfoGeometryCommandArchive)},
  { 160, 169, -1, sizeof(::TSD::DrawablePathSourceCommandArchive)},
  { 172, 181, -1, sizeof(::TSD::InstantAlphaCommandArchive)},
  { 184, 193, -1, sizeof(::TSD::DrawableApplyThemeCommandArchive)},
  { 196, 203, -1, sizeof(::TSD::AbstractStyleCommandArchive)},
  { 204, 213, -1, sizeof(::TSD::StyledInfoSetStyleCommandArchive)},
  { 216, 225, -1, sizeof(::TSD::BaseApplyPresetCommandArchive)},
  { 228, 235, -1, sizeof(::TSD::ShapeApplyPresetCommandArchive)},
  { 236, 243, -1, sizeof(::TSD::MediaApplyPresetCommandArchive)},
  { 244, 252, -1, sizeof(::TSD::ShapeStyleSetValueCommandArchive)},
  { 254, 263, -1, sizeof(::TSD::BaseStyleSetValueCommandArchive)},
  { 266, 281, -1, sizeof(::TSD::MovieSetValueCommandArchive_PropertyValue)},
  { 290, 302, -1, sizeof(::TSD::MovieSetValueCommandArchive)},
  { 308, 316, -1, sizeof(::TSD::MediaStyleSetValueCommandArchive)},
  { 318, 344, -1, sizeof(::TSD::ImageMediaCommandArchive)},
  { 364, 374, -1, sizeof(::TSD::MediaOriginalSizeCommandArchive)},
  { 378, 387, -1, sizeof(::TSD::MediaInfoGeometryCommandArchive)},
  { 390, 399, -1, sizeof(::TSD::ImageNaturalSizeCommandArchive)},
  { 402, 413, -1, sizeof(::TSD::ImageMaskCommandArchive)},
  { 418, 433, -1, sizeof(::TSD::ImageAdjustmentsCommandArchive)},
  { 442, 454, -1, sizeof(::TSD::MediaFlagsCommandArchive)},
  { 460, 472, -1, sizeof(::TSD::DrawablesCommandGroupArchive)},
  { 478, 492, -1, sizeof(::TSD::ExteriorTextWrapCommandArchive)},
  { 500, 509, -1, sizeof(::TSD::DrawableHyperlinkCommandArchive)},
  { 512, 524, -1, sizeof(::TSD::CommentInvalidatingCommandSelectionBehaviorArchive)},
  { 530, 561, -1, sizeof(::TSD::ImageReplaceCommandArchive)},
  { 586, 595, -1, sizeof(::TSD::DrawableLockCommandArchive)},
  { 598, 609, -1, sizeof(::TSD::DrawableInfoCommentCommandArchive)},
  { 614, 623, -1, sizeof(::TSD::DrawablePencilAnnotationCommandArchive)},
  { 626, 635, -1, sizeof(::TSD::AbstractGuideCommandArchive)},
  { 638, 646, -1, sizeof(::TSD::GuideCommandArchive)},
  { 648, 657, -1, sizeof(::TSD::DrawableAspectRatioLockedCommandArchive)},
  { 660, 669, -1, sizeof(::TSD::DrawableAccessibilityDescriptionCommandArchive)},
  { 672, 682, -1, sizeof(::TSD::PasteStyleCommandArchive)},
  { 686, 703, -1, sizeof(::TSD::ImageInfoAbstractGeometryCommandArchive)},
  { 714, 721, -1, sizeof(::TSD::ImageInfoGeometryCommandArchive)},
  { 722, 729, -1, sizeof(::TSD::ImageInfoMaskGeometryCommandArchive)},
  { 730, -1, -1, sizeof(::TSD::InfoCollectionSelectionTransformerHelperArchive)},
  { 737, 745, -1, sizeof(::TSD::DrawableSelectionTransformerArchive)},
  { 747, -1, -1, sizeof(::TSD::InfoHyperlinkSelectionTransformerArchive)},
  { 753, 760, -1, sizeof(::TSD::CanvasSelectionTransformerArchive)},
  { 761, -1, -1, sizeof(::TSD::PathSelectionTransformerArchive)},
  { 767, 774, -1, sizeof(::TSD::ShapeSelectionTransformerArchive)},
  { 775, 782, -1, sizeof(::TSD::GroupSelectionTransformerArchive)},
  { 783, 790, -1, sizeof(::TSD::PencilAnnotationSelectionTransformerArchive)},
  { 791, 800, -1, sizeof(::TSD::FreehandDrawingOpacityCommandArchive)},
  { 803, 812, -1, sizeof(::TSD::FreehandDrawingAnimationCommandArchive)},
  { 815, 827, -1, sizeof(::TSD::InsertCaptionOrTitleCommandArchive)},
  { 833, 844, -1, sizeof(::TSD::RemoveCaptionOrTitleCommandArchive)},
  { 849, 859, -1, sizeof(::TSD::SetCaptionOrTitleVisibilityCommandArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSD::_UndoObjectArchive_default_instance_._instance,
  &::TSD::_GroupDrawablesCommandArchive_default_instance_._instance,
  &::TSD::_UngroupGroupCommandArchive_default_instance_._instance,
  &::TSD::_ContainerRemoveChildrenCommandArchive_default_instance_._instance,
  &::TSD::_ContainerRemoveDrawablesCommandArchive_default_instance_._instance,
  &::TSD::_ContainerInsertChildrenCommandArchive_default_instance_._instance,
  &::TSD::_ContainerInsertDrawablesCommandArchive_default_instance_._instance,
  &::TSD::_ContainerReorderChildrenCommandArchive_default_instance_._instance,
  &::TSD::_GroupUngroupInformativeCommandArchive_default_instance_._instance,
  &::TSD::_InfoCommandArchive_default_instance_._instance,
  &::TSD::_ConnectionLineConnectCommandArchive_default_instance_._instance,
  &::TSD::_InfoGeometryCommandArchive_default_instance_._instance,
  &::TSD::_DrawablePathSourceCommandArchive_default_instance_._instance,
  &::TSD::_InstantAlphaCommandArchive_default_instance_._instance,
  &::TSD::_DrawableApplyThemeCommandArchive_default_instance_._instance,
  &::TSD::_AbstractStyleCommandArchive_default_instance_._instance,
  &::TSD::_StyledInfoSetStyleCommandArchive_default_instance_._instance,
  &::TSD::_BaseApplyPresetCommandArchive_default_instance_._instance,
  &::TSD::_ShapeApplyPresetCommandArchive_default_instance_._instance,
  &::TSD::_MediaApplyPresetCommandArchive_default_instance_._instance,
  &::TSD::_ShapeStyleSetValueCommandArchive_default_instance_._instance,
  &::TSD::_BaseStyleSetValueCommandArchive_default_instance_._instance,
  &::TSD::_MovieSetValueCommandArchive_PropertyValue_default_instance_._instance,
  &::TSD::_MovieSetValueCommandArchive_default_instance_._instance,
  &::TSD::_MediaStyleSetValueCommandArchive_default_instance_._instance,
  &::TSD::_ImageMediaCommandArchive_default_instance_._instance,
  &::TSD::_MediaOriginalSizeCommandArchive_default_instance_._instance,
  &::TSD::_MediaInfoGeometryCommandArchive_default_instance_._instance,
  &::TSD::_ImageNaturalSizeCommandArchive_default_instance_._instance,
  &::TSD::_ImageMaskCommandArchive_default_instance_._instance,
  &::TSD::_ImageAdjustmentsCommandArchive_default_instance_._instance,
  &::TSD::_MediaFlagsCommandArchive_default_instance_._instance,
  &::TSD::_DrawablesCommandGroupArchive_default_instance_._instance,
  &::TSD::_ExteriorTextWrapCommandArchive_default_instance_._instance,
  &::TSD::_DrawableHyperlinkCommandArchive_default_instance_._instance,
  &::TSD::_CommentInvalidatingCommandSelectionBehaviorArchive_default_instance_._instance,
  &::TSD::_ImageReplaceCommandArchive_default_instance_._instance,
  &::TSD::_DrawableLockCommandArchive_default_instance_._instance,
  &::TSD::_DrawableInfoCommentCommandArchive_default_instance_._instance,
  &::TSD::_DrawablePencilAnnotationCommandArchive_default_instance_._instance,
  &::TSD::_AbstractGuideCommandArchive_default_instance_._instance,
  &::TSD::_GuideCommandArchive_default_instance_._instance,
  &::TSD::_DrawableAspectRatioLockedCommandArchive_default_instance_._instance,
  &::TSD::_DrawableAccessibilityDescriptionCommandArchive_default_instance_._instance,
  &::TSD::_PasteStyleCommandArchive_default_instance_._instance,
  &::TSD::_ImageInfoAbstractGeometryCommandArchive_default_instance_._instance,
  &::TSD::_ImageInfoGeometryCommandArchive_default_instance_._instance,
  &::TSD::_ImageInfoMaskGeometryCommandArchive_default_instance_._instance,
  &::TSD::_InfoCollectionSelectionTransformerHelperArchive_default_instance_._instance,
  &::TSD::_DrawableSelectionTransformerArchive_default_instance_._instance,
  &::TSD::_InfoHyperlinkSelectionTransformerArchive_default_instance_._instance,
  &::TSD::_CanvasSelectionTransformerArchive_default_instance_._instance,
  &::TSD::_PathSelectionTransformerArchive_default_instance_._instance,
  &::TSD::_ShapeSelectionTransformerArchive_default_instance_._instance,
  &::TSD::_GroupSelectionTransformerArchive_default_instance_._instance,
  &::TSD::_PencilAnnotationSelectionTransformerArchive_default_instance_._instance,
  &::TSD::_FreehandDrawingOpacityCommandArchive_default_instance_._instance,
  &::TSD::_FreehandDrawingAnimationCommandArchive_default_instance_._instance,
  &::TSD::_InsertCaptionOrTitleCommandArchive_default_instance_._instance,
  &::TSD::_RemoveCaptionOrTitleCommandArchive_default_instance_._instance,
  &::TSD::_SetCaptionOrTitleVisibilityCommandArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSDCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TSDCommandArchives.proto\022\003TSD\032\021TSPMess"
  "ages.proto\032\021TSKArchives.proto\032\021TSSArchiv"
  "es.proto\032\021TSDArchives.proto\032\025TSDArchives"
  ".sos.proto\"v\n\021UndoObjectArchive\022\"\n\nstyle"
  "sheet\030\002 \001(\0132\016.TSP.Reference\022\037\n\007objects\030\001"
  " \003(\0132\016.TSP.Reference\022\014\n\004keys\030\003 \003(\t\022\016\n\006co"
  "unts\030\004 \003(\r\"\204\001\n\034GroupDrawablesCommandArch"
  "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
  "!\n\tdrawables\030\002 \003(\0132\016.TSP.Reference\022\035\n\005gr"
  "oup\030\003 \001(\0132\016.TSP.Reference\"\202\001\n\032UngroupGro"
  "upCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Co"
  "mmandArchive\022!\n\tdrawables\030\002 \003(\0132\016.TSP.Re"
  "ference\022\035\n\005group\030\003 \001(\0132\016.TSP.Reference\"\306"
  "\001\n%ContainerRemoveChildrenCommandArchive"
  "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022(\n\021"
  "container_id_path\030\002 \001(\0132\r.TSP.UUIDPath\022-"
  "\n\targs_list\030\003 \003(\0132\032.TSK.RemoveIdOperatio"
  "nArgs\022 \n\010children\030\004 \003(\0132\016.TSP.Reference\""
  "c\n&ContainerRemoveDrawablesCommandArchiv"
  "e\0229\n\005super\030\001 \002(\0132*.TSD.ContainerRemoveCh"
  "ildrenCommandArchive\"\217\002\n%ContainerInsert"
  "ChildrenCommandArchive\022\"\n\005super\030\001 \002(\0132\023."
  "TSK.CommandArchive\022(\n\021container_id_path\030"
  "\002 \001(\0132\r.TSP.UUIDPath\022 \n\010children\030\003 \003(\0132\016"
  ".TSP.Reference\022*\n\targs_list\030\004 \003(\0132\027.TSK."
  "AddIdOperationArgs\022%\n\022custom_format_keys"
  "\030\005 \003(\0132\t.TSP.UUID\022#\n\013undo_object\030\006 \001(\0132\016"
  ".TSP.Reference\"\206\001\n&ContainerInsertDrawab"
  "lesCommandArchive\0229\n\005super\030\001 \002(\0132*.TSD.C"
  "ontainerInsertChildrenCommandArchive\022!\n\t"
  "drawables\030\002 \003(\0132\016.TSP.Reference\"\250\001\n&Cont"
  "ainerReorderChildrenCommandArchive\022\"\n\005su"
  "per\030\001 \002(\0132\023.TSK.CommandArchive\022(\n\021contai"
  "ner_id_path\030\002 \001(\0132\r.TSP.UUIDPath\0220\n\targs"
  "_list\030\003 \003(\0132\035.TSK.RearrangeIdOperationAr"
  "gs\"\217\002\n%GroupUngroupInformativeCommandArc"
  "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
  "\022%\n\rremoved_infos\030\002 \003(\0132\016.TSP.Reference\022"
  "&\n\016inserted_infos\030\003 \003(\0132\016.TSP.Reference\022"
  "L\n\014command_type\030\004 \001(\01626.TSD.GroupUngroup"
  "InformativeCommandArchive.CommandType\"%\n"
  "\013CommandType\022\t\n\005Group\020\000\022\013\n\007Ungroup\020\001\"]\n\022"
  "InfoCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
  "CommandArchive\022#\n\014info_id_path\030\002 \001(\0132\r.T"
  "SP.UUIDPath\"\351\001\n#ConnectionLineConnectCom"
  "mandArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoCom"
  "mandArchive\022$\n\021connected_from_id\030\004 \001(\0132\t"
  ".TSP.UUID\022\"\n\017connected_to_id\030\005 \001(\0132\t.TSP"
  ".UUID\022&\n\023old_connected_to_id\030\006 \001(\0132\t.TSP"
  ".UUID\022(\n\025old_connected_from_id\030\007 \001(\0132\t.T"
  "SP.UUID\"\250\002\n\032InfoGeometryCommandArchive\022&"
  "\n\005super\030\001 \002(\0132\027.TSD.InfoCommandArchive\022)"
  "\n\013newGeometry\030\002 \001(\0132\024.TSD.GeometryArchiv"
  "e\022)\n\013oldGeometry\030\003 \001(\0132\024.TSD.GeometryArc"
  "hive\022&\n\036matchObjectPlaceholderGeometry\030\004"
  " \001(\010\022)\n!oldMatchObjectPlaceholderGeometr"
  "y\030\005 \001(\010\022!\n\031shouldTriggerRtuAnimation\030\006 \001"
  "(\010\022\026\n\016initiatedOnWeb\030\007 \001(\010\"\254\001\n DrawableP"
  "athSourceCommandArchive\022&\n\005super\030\001 \002(\0132\027"
  ".TSD.InfoCommandArchive\022/\n\017old_path_sour"
  "ce\030\002 \001(\0132\026.TSD.PathSourceArchive\022/\n\017new_"
  "path_source\030\003 \001(\0132\026.TSD.PathSourceArchiv"
  "e\"|\n\032InstantAlphaCommandArchive\022&\n\005super"
  "\030\001 \002(\0132\027.TSD.InfoCommandArchive\022\032\n\007oldpa"
  "th\030\002 \001(\0132\t.TSP.Path\022\032\n\007newpath\030\003 \001(\0132\t.T"
  "SP.Path\"\222\001\n DrawableApplyThemeCommandArc"
  "hive\0221\n\005super\030\001 \002(\0132\".TSS.ApplyThemeChil"
  "dCommandArchive\022\034\n\004info\030\002 \001(\0132\016.TSP.Refe"
  "rence\022\035\n\005style\030\003 \001(\0132\016.TSP.Reference\"E\n\033"
  "AbstractStyleCommandArchive\022&\n\005super\030\001 \002"
  "(\0132\027.TSD.InfoCommandArchive\"\236\001\n StyledIn"
  "foSetStyleCommandArchive\022/\n\005super\030\001 \002(\0132"
  " .TSD.AbstractStyleCommandArchive\022!\n\tnew"
  "_style\030\002 \001(\0132\016.TSP.Reference\022&\n\016rollback"
  "_style\030\004 \001(\0132\016.TSP.Reference\"\236\001\n\035BaseApp"
  "lyPresetCommandArchive\022/\n\005super\030\001 \002(\0132 ."
  "TSD.AbstractStyleCommandArchive\022$\n\014prese"
  "t_style\030\002 \001(\0132\016.TSP.Reference\022&\n\016rollbac"
  "k_style\030\004 \001(\0132\016.TSP.Reference\"S\n\036ShapeAp"
  "plyPresetCommandArchive\0221\n\005super\030\001 \002(\0132\""
  ".TSD.BaseApplyPresetCommandArchive\"S\n\036Me"
  "diaApplyPresetCommandArchive\0221\n\005super\030\001 "
  "\002(\0132\".TSD.BaseApplyPresetCommandArchive\""
  "\227\001\n ShapeStyleSetValueCommandArchive\0223\n\005"
  "super\030\001 \002(\0132$.TSD.BaseStyleSetValueComma"
  "ndArchive\022>\n\006change\030\004 \001(\0132..TSDSOS.BaseS"
  "hapeStylePropertyChangeSetArchive\"\217\001\n\037Ba"
  "seStyleSetValueCommandArchive\022/\n\005super\030\001"
  " \002(\0132 .TSD.AbstractStyleCommandArchive\022!"
  "\n\told_style\030\004 \001(\0132\016.TSP.Reference\022\030\n\020is_"
  "border_change\030\005 \002(\010\"\221\005\n\033MovieSetValueCom"
  "mandArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoCom"
  "mandArchive\022\020\n\010property\030\002 \001(\005\022=\n\005value\030\003"
  " \001(\0132..TSD.MovieSetValueCommandArchive.P"
  "ropertyValue\022@\n\010oldValue\030\004 \001(\0132..TSD.Mov"
  "ieSetValueCommandArchive.PropertyValue\0222"
  "\n\026importedauxiliarymedia\030\005 \001(\0132\022.TSP.Dat"
  "aReference\0225\n\031oldimportedauxiliarymedia\030"
  "\006 \001(\0132\022.TSP.DataReference\032\225\002\n\rPropertyVa"
  "lue\022\021\n\tstarttime\030\001 \001(\001\022\017\n\007endtime\030\002 \001(\001\022"
  "\022\n\npostertime\030\003 \001(\001\022+\n\017posterimagedata\030\004"
  " \001(\0132\022.TSP.DataReference\022\020\n\010autoplay\030\005 \001"
  "(\010\022\?\n\nloopOption\030\006 \001(\0162+.TSD.MovieSetVal"
  "ueCommandArchive.LoopOption\022\016\n\006volume\030\007 "
  "\001(\002\022!\n\005media\030\010 \001(\0132\022.TSP.DataReference\022\031"
  "\n\021playsAcrossSlides\030\t \001(\010\"4\n\nLoopOption\022"
  "\010\n\004None\020\000\022\n\n\006Repeat\020\001\022\020\n\014BackAndForth\020\002\""
  "\223\001\n MediaStyleSetValueCommandArchive\0223\n\005"
  "super\030\001 \002(\0132$.TSD.BaseStyleSetValueComma"
  "ndArchive\022:\n\006change\030\004 \001(\0132*.TSDSOS.Media"
  "StylePropertyChangeSetArchive\"\367\007\n\030ImageM"
  "ediaCommandArchive\022&\n\005super\030\001 \002(\0132\027.TSD."
  "InfoCommandArchive\022(\n\014newImageData\030\010 \001(\013"
  "2\022.TSP.DataReference\022(\n\014oldImageData\030\t \001"
  "(\0132\022.TSP.DataReference\0220\n\024oldOriginalIma"
  "geData\030\n \001(\0132\022.TSP.DataReference\022!\n\016oldN"
  "aturalSize\030\006 \001(\0132\t.TSP.Size\0220\n\024newOrigin"
  "alImageData\030\013 \001(\0132\022.TSP.DataReference\0229\n"
  "\023oldImageAdjustments\030\014 \001(\0132\034.TSD.ImageAd"
  "justmentsArchive\0220\n\024oldAdjustedImageData"
  "\030\r \001(\0132\022.TSP.DataReference\0220\n\024oldEnhance"
  "dImageData\030\016 \001(\0132\022.TSP.DataReference\0226\n\020"
  "imageAdjustments\030\017 \001(\0132\034.TSD.ImageAdjust"
  "mentsArchive\022-\n\021adjustedImageData\030\020 \001(\0132"
  "\022.TSP.DataReference\022-\n\021enhancedImageData"
  "\030\021 \001(\0132\022.TSP.DataReference\0221\n\025newThumbna"
  "ilImageData\030\022 \001(\0132\022.TSP.DataReference\0221\n"
  "\025oldThumbnailImageData\030\023 \001(\0132\022.TSP.DataR"
  "eference\0226\n\032thumbnailAdjustedImageData\030\024"
  " \001(\0132\022.TSP.DataReference\0229\n\035oldThumbnail"
  "AdjustedImageData\030\025 \001(\0132\022.TSP.DataRefere"
  "nce\022-\n\025database_newImageData\030\003 \001(\0132\016.TSP"
  ".Reference\022-\n\025database_oldImageData\030\004 \001("
  "\0132\016.TSP.Reference\0225\n\035database_oldOrigina"
  "lImageData\030\005 \001(\0132\016.TSP.Reference\0225\n\035data"
  "base_newOriginalImageData\030\007 \001(\0132\016.TSP.Re"
  "ference\"\247\001\n\037MediaOriginalSizeCommandArch"
  "ive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoCommandArch"
  "ive\022\"\n\017newOriginalSize\030\002 \001(\0132\t.TSP.Size\022"
  "\"\n\017oldOriginalSize\030\003 \001(\0132\t.TSP.Size\022\024\n\014p"
  "ropertyName\030\004 \002(\t\"\231\001\n\037MediaInfoGeometryC"
  "ommandArchive\022.\n\005super\030\001 \002(\0132\037.TSD.InfoG"
  "eometryCommandArchive\022\"\n\017newOriginalSize"
  "\030\002 \002(\0132\t.TSP.Size\022\"\n\017oldOriginalSize\030\003 \002"
  "(\0132\t.TSP.Size\"\222\001\n\036ImageNaturalSizeComman"
  "dArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoComman"
  "dArchive\022#\n\020new_natural_size\030\002 \001(\0132\t.TSP"
  ".Size\022#\n\020old_natural_size\030\003 \001(\0132\t.TSP.Si"
  "ze\"\307\001\n\027ImageMaskCommandArchive\022&\n\005super\030"
  "\001 \002(\0132\027.TSD.InfoCommandArchive\022#\n\013newMas"
  "kInfo\030\002 \001(\0132\016.TSP.Reference\022#\n\013oldMaskIn"
  "fo\030\003 \001(\0132\016.TSP.Reference\022\032\n\022background_r"
  "emoved\030\004 \001(\010\022\036\n\026old_background_removed\030\005"
  " \001(\010\"\206\004\n\036ImageAdjustmentsCommandArchive\022"
  "&\n\005super\030\001 \002(\0132\027.TSD.InfoCommandArchive\022"
  ";\n\025old_image_adjustments\030\002 \001(\0132\034.TSD.Ima"
  "geAdjustmentsArchive\022;\n\025new_image_adjust"
  "ments\030\003 \001(\0132\034.TSD.ImageAdjustmentsArchiv"
  "e\022-\n\021adjustedImageData\030\004 \001(\0132\022.TSP.DataR"
  "eference\0225\n\031replacedAdjustedImageData\030\005 "
  "\001(\0132\022.TSP.DataReference\022-\n\021enhancedImage"
  "Data\030\006 \001(\0132\022.TSP.DataReference\0225\n\031replac"
  "edEnhancedImageData\030\007 \001(\0132\022.TSP.DataRefe"
  "rence\0226\n\032thumbnailAdjustedImageData\030\010 \001("
  "\0132\022.TSP.DataReference\022>\n\"replacedThumbna"
  "ilAdjustedImageData\030\t \001(\0132\022.TSP.DataRefe"
  "rence\"\311\001\n\030MediaFlagsCommandArchive\022&\n\005su"
  "per\030\001 \002(\0132\027.TSD.InfoCommandArchive\022\032\n\022wa"
  "s_media_replaced\030\005 \001(\010\022\026\n\016is_placeholder"
  "\030\006 \001(\010\022\036\n\026old_was_media_replaced\030\007 \001(\010\022\032"
  "\n\022old_is_placeholder\030\010 \001(\010\022\025\n\rproperty_n"
  "ame\030\004 \002(\t\"\377\002\n\034DrawablesCommandGroupArchi"
  "ve\022\'\n\005super\030\001 \002(\0132\030.TSK.CommandGroupArch"
  "ive\0227\n\022obsolete_selection\030\002 \001(\0132\033.TSD.Ca"
  "nvasSelectionArchive\022)\n\021modelforselectio"
  "n\030\003 \001(\0132\016.TSP.Reference\022I\n\004type\030\004 \001(\0162;."
  "TSD.DrawablesCommandGroupArchive.Drawabl"
  "esCommandGroupType\022\017\n\007forDrag\030\005 \001(\010\022)\n\021a"
  "rchivedselection\030\006 \001(\0132\016.TSP.Reference\"K"
  "\n\031DrawablesCommandGroupType\022\020\n\014Construct"
  "ive\020\001\022\017\n\013Destructive\020\002\022\013\n\007InPlace\020\003\"\370\001\n\036"
  "ExteriorTextWrapCommandArchive\022&\n\005super\030"
  "\001 \002(\0132\027.TSD.InfoCommandArchive\022<\n\026old_ex"
  "terior_text_wrap\030\003 \001(\0132\034.TSD.ExteriorTex"
  "tWrapArchive\022\014\n\004type\030\004 \001(\r\022\021\n\tdirection\030"
  "\005 \001(\r\022\020\n\010fit_type\030\006 \001(\r\022\016\n\006margin\030\007 \001(\002\022"
  "\027\n\017alpha_threshold\030\010 \001(\002\022\024\n\014is_html_wrap"
  "\030\t \001(\010\"}\n\037DrawableHyperlinkCommandArchiv"
  "e\022&\n\005super\030\001 \002(\0132\027.TSD.InfoCommandArchiv"
  "e\022\030\n\020oldhyperlink_url\030\002 \001(\t\022\030\n\020newhyperl"
  "ink_url\030\003 \001(\t\"\244\002\n2CommentInvalidatingCom"
  "mandSelectionBehaviorArchive\0223\n\005super\030\001 "
  "\002(\0132$.TSK.CommandSelectionBehaviorArchiv"
  "e\0225\n\035annotation_displaying_command\030\002 \001(\013"
  "2\016.TSP.Reference\022\035\n\025begin_editing_on_und"
  "o\030\003 \001(\010\022\035\n\025begin_editing_on_redo\030\004 \001(\010\022!"
  "\n\031should_invalidate_on_undo\030\005 \001(\010\022!\n\031sho"
  "uld_invalidate_on_redo\030\006 \001(\010\"\370\t\n\032ImageRe"
  "placeCommandArchive\022&\n\005super\030\001 \002(\0132\027.TSD"
  ".InfoCommandArchive\022*\n\016new_image_data\030\002 "
  "\001(\0132\022.TSP.DataReference\0223\n\027new_original_"
  "image_data\030\003 \001(\0132\022.TSP.DataReference\022*\n\016"
  "old_image_data\030\004 \001(\0132\022.TSP.DataReference"
  "\0223\n\027old_original_image_data\030\005 \001(\0132\022.TSP."
  "DataReference\022%\n\022instant_alpha_path\030\006 \001("
  "\0132\t.TSP.Path\022)\n\026old_instant_alpha_path\030\007"
  " \001(\0132\t.TSP.Path\022*\n\027natural_size_for_IAPa"
  "th\030\010 \001(\0132\t.TSP.Size\022.\n\033old_natural_size_"
  "for_IAPath\030\t \001(\0132\t.TSP.Size\0223\n\025target_im"
  "age_geometry\030\n \001(\0132\024.TSD.GeometryArchive"
  "\0227\n\031old_target_image_geometry\030\014 \001(\0132\024.TS"
  "D.GeometryArchive\0222\n\024target_mask_geometr"
  "y\030\r \001(\0132\024.TSD.GeometryArchive\0226\n\030old_tar"
  "get_mask_geometry\030\016 \001(\0132\024.TSD.GeometryAr"
  "chive\0227\n\021image_adjustments\030\017 \001(\0132\034.TSD.I"
  "mageAdjustmentsArchive\022/\n\023adjusted_image"
  "_data\030\020 \001(\0132\022.TSP.DataReference\022/\n\023enhan"
  "ced_image_data\030\021 \001(\0132\022.TSP.DataReference"
  "\022;\n\025old_image_adjustments\030\022 \001(\0132\034.TSD.Im"
  "ageAdjustmentsArchive\0223\n\027old_adjusted_im"
  "age_data\030\023 \001(\0132\022.TSP.DataReference\0223\n\027ol"
  "d_enhanced_image_data\030\024 \001(\0132\022.TSP.DataRe"
  "ference\0220\n\024thumbnail_image_data\030\025 \001(\0132\022."
  "TSP.DataReference\0224\n\030old_thumbnail_image"
  "_data\030\026 \001(\0132\022.TSP.DataReference\0229\n\035thumb"
  "nail_adjusted_image_data\030\027 \001(\0132\022.TSP.Dat"
  "aReference\022=\n!old_thumbnail_adjusted_ima"
  "ge_data\030\030 \001(\0132\022.TSP.DataReference\022\037\n\014nat"
  "ural_size\030\031 \001(\0132\t.TSP.Size\022#\n\020old_natura"
  "l_size\030\032 \001(\0132\t.TSP.Size\"h\n\032DrawableLockC"
  "ommandArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoC"
  "ommandArchive\022\016\n\006locked\030\002 \001(\010\022\022\n\nwas_loc"
  "ked\030\003 \001(\010\"\377\001\n!DrawableInfoCommentCommand"
  "Archive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoCommand"
  "Archive\022#\n\013old_comment\030\002 \001(\0132\016.TSP.Refer"
  "ence\022#\n\013new_comment\030\003 \001(\0132\016.TSP.Referenc"
  "e\0223\n\017forward_variant\030\004 \001(\0162\032.TSD.Comment"
  "CommandVariant\0223\n\017inverse_variant\030\005 \001(\0162"
  "\032.TSD.CommentCommandVariant\"\267\001\n&Drawable"
  "PencilAnnotationCommandArchive\022&\n\005super\030"
  "\001 \002(\0132\027.TSD.InfoCommandArchive\0220\n\030pencil"
  "_annotation_to_add\030\002 \001(\0132\016.TSP.Reference"
  "\0223\n\033pencil_annotation_to_remove\030\003 \001(\0132\016."
  "TSP.Reference\"\245\001\n\033AbstractGuideCommandAr"
  "chive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchiv"
  "e\0220\n\nold_guides\030\007 \003(\0132\034.TSD.UserDefinedG"
  "uideArchive\0220\n\nnew_guides\030\010 \003(\0132\034.TSD.Us"
  "erDefinedGuideArchive\"n\n\023GuideCommandArc"
  "hive\022/\n\005super\030\001 \002(\0132 .TSD.AbstractGuideC"
  "ommandArchive\022&\n\017storage_id_path\030\002 \002(\0132\r"
  ".TSP.UUIDPath\"\217\001\n\'DrawableAspectRatioLoc"
  "kedCommandArchive\022&\n\005super\030\001 \002(\0132\027.TSD.I"
  "nfoCommandArchive\022\033\n\023aspect_ratio_locked"
  "\030\002 \001(\010\022\037\n\027was_aspect_ratio_locked\030\003 \001(\010\""
  "\242\001\n.DrawableAccessibilityDescriptionComm"
  "andArchive\022&\n\005super\030\001 \002(\0132\027.TSD.InfoComm"
  "andArchive\022!\n\031accessibility_description\030"
  "\002 \001(\t\022%\n\035old_accessibility_description\030\003"
  " \001(\t\"\260\001\n\030PasteStyleCommandArchive\022/\n\005sup"
  "er\030\001 \002(\0132 .TSD.AbstractStyleCommandArchi"
  "ve\022!\n\tnew_style\030\002 \001(\0132\016.TSP.Reference\022&\n"
  "\016rollback_style\030\005 \001(\0132\016.TSP.Reference\022\030\n"
  "\020tail_end_on_left\030\004 \001(\010\"\227\004\n\'ImageInfoAbs"
  "tractGeometryCommandArchive\022&\n\005super\030\001 \002"
  "(\0132\027.TSD.InfoCommandArchive\0220\n\022new_image"
  "_geometry\030\002 \001(\0132\024.TSD.GeometryArchive\0220\n"
  "\022old_image_geometry\030\003 \001(\0132\024.TSD.Geometry"
  "Archive\022/\n\021new_mask_geometry\030\004 \001(\0132\024.TSD"
  ".GeometryArchive\022/\n\021old_mask_geometry\030\005 "
  "\001(\0132\024.TSD.GeometryArchive\0224\n\024new_mask_pa"
  "th_source\030\006 \001(\0132\026.TSD.PathSourceArchive\022"
  "4\n\024old_mask_path_source\030\007 \001(\0132\026.TSD.Path"
  "SourceArchive\022*\n\027new_image_original_size"
  "\030\010 \001(\0132\t.TSP.Size\022*\n\027old_image_original_"
  "size\030\t \001(\0132\t.TSP.Size\022\032\n\022background_remo"
  "ved\030\n \001(\010\022\036\n\026old_background_removed\030\013 \001("
  "\010\"^\n\037ImageInfoGeometryCommandArchive\022;\n\005"
  "super\030\001 \002(\0132,.TSD.ImageInfoAbstractGeome"
  "tryCommandArchive\"b\n#ImageInfoMaskGeomet"
  "ryCommandArchive\022;\n\005super\030\001 \002(\0132,.TSD.Im"
  "ageInfoAbstractGeometryCommandArchive\"]\n"
  "/InfoCollectionSelectionTransformerHelpe"
  "rArchive\022*\n\023info_uuid_path_list\030\001 \003(\0132\r."
  "TSP.UUIDPath\"\261\001\n#DrawableSelectionTransf"
  "ormerArchive\022P\n\022transformer_helper\030\001 \002(\013"
  "24.TSD.InfoCollectionSelectionTransforme"
  "rHelperArchive\0228\n untransformed_drawable"
  "_selection\030\002 \002(\0132\016.TSP.Reference\"*\n(Info"
  "HyperlinkSelectionTransformerArchive\"u\n!"
  "CanvasSelectionTransformerArchive\022P\n\022tra"
  "nsformer_helper\030\001 \002(\01324.TSD.InfoCollecti"
  "onSelectionTransformerHelperArchive\"!\n\037P"
  "athSelectionTransformerArchive\"[\n ShapeS"
  "electionTransformerArchive\0227\n\005super\030\001 \002("
  "\0132(.TSD.DrawableSelectionTransformerArch"
  "ive\"[\n GroupSelectionTransformerArchive\022"
  "7\n\005super\030\001 \002(\0132(.TSD.DrawableSelectionTr"
  "ansformerArchive\"X\n+PencilAnnotationSele"
  "ctionTransformerArchive\022)\n\026pencil_annota"
  "tion_uuid\030\001 \002(\0132\t.TSP.UUID\"t\n$FreehandDr"
  "awingOpacityCommandArchive\022&\n\005super\030\001 \002("
  "\0132\027.TSD.InfoCommandArchive\022\017\n\007opacity\030\002 "
  "\001(\001\022\023\n\013old_opacity\030\003 \001(\001\"\306\001\n&FreehandDra"
  "wingAnimationCommandArchive\022&\n\005super\030\001 \002"
  "(\0132\027.TSD.InfoCommandArchive\0227\n\tanimation"
  "\030\002 \001(\0132$.TSD.FreehandDrawingAnimationArc"
  "hive\022;\n\rold_animation\030\003 \001(\0132$.TSD.Freeha"
  "ndDrawingAnimationArchive\"\262\002\n\"InsertCapt"
  "ionOrTitleCommandArchive\022\"\n\005super\030\001 \002(\0132"
  "\023.TSK.CommandArchive\022,\n\025drawable_info_id"
  "_path\030\002 \001(\0132\r.TSP.UUIDPath\022-\n\025caption_or"
  "_title_info\030\003 \001(\0132\016.TSP.Reference\022.\n\033add"
  "ed_caption_or_title_uuid\030\004 \001(\0132\t.TSP.UUI"
  "D\0226\n\025caption_or_title_kind\030\005 \001(\0162\027.TSD.C"
  "aptionOrTitleKind\022#\n\013undo_object\030\006 \001(\0132\016"
  ".TSP.Reference\"\227\002\n\"RemoveCaptionOrTitleC"
  "ommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
  "ndArchive\022,\n\025drawable_info_id_path\030\002 \001(\013"
  "2\r.TSP.UUIDPath\0225\n\035removed_caption_or_ti"
  "tle_info\030\003 \001(\0132\016.TSP.Reference\0220\n\035remove"
  "d_caption_or_title_uuid\030\004 \001(\0132\t.TSP.UUID"
  "\0226\n\025caption_or_title_kind\030\005 \001(\0162\027.TSD.Ca"
  "ptionOrTitleKind\"\257\001\n)SetCaptionOrTitleVi"
  "sibilityCommandArchive\022&\n\005super\030\001 \002(\0132\027."
  "TSD.InfoCommandArchive\0226\n\025caption_or_tit"
  "le_kind\030\002 \001(\0162\027.TSD.CaptionOrTitleKind\022\016"
  "\n\006hidden\030\003 \001(\010\022\022\n\nwas_hidden\030\004 \001(\010*V\n\025Co"
  "mmentCommandVariant\022\017\n\013BaseComment\020\000\022\014\n\010"
  "AddReply\020\001\022\r\n\tEditReply\020\002\022\017\n\013DeleteReply"
  "\020\003*,\n\022CaptionOrTitleKind\022\013\n\007Caption\020\001\022\t\n"
  "\005Title\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSDCommandArchives_2eproto_deps[5] = {
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDArchives_2esos_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSDCommandArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSDCommandArchives_2eproto = {
    false, false, 13208, descriptor_table_protodef_TSDCommandArchives_2eproto,
    "TSDCommandArchives.proto",
    &descriptor_table_TSDCommandArchives_2eproto_once, descriptor_table_TSDCommandArchives_2eproto_deps, 5, 61,
    schemas, file_default_instances, TableStruct_TSDCommandArchives_2eproto::offsets,
    file_level_metadata_TSDCommandArchives_2eproto, file_level_enum_descriptors_TSDCommandArchives_2eproto,
    file_level_service_descriptors_TSDCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSDCommandArchives_2eproto_getter() {
  return &descriptor_table_TSDCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSDCommandArchives_2eproto(&descriptor_table_TSDCommandArchives_2eproto);
namespace TSD {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupUngroupInformativeCommandArchive_CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[0];
}
bool GroupUngroupInformativeCommandArchive_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::Group;
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::Ungroup;
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::CommandType_MIN;
constexpr GroupUngroupInformativeCommandArchive_CommandType GroupUngroupInformativeCommandArchive::CommandType_MAX;
constexpr int GroupUngroupInformativeCommandArchive::CommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovieSetValueCommandArchive_LoopOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[1];
}
bool MovieSetValueCommandArchive_LoopOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::None;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::Repeat;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::BackAndForth;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::LoopOption_MIN;
constexpr MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::LoopOption_MAX;
constexpr int MovieSetValueCommandArchive::LoopOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[2];
}
bool DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::Constructive;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::Destructive;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::InPlace;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::DrawablesCommandGroupType_MIN;
constexpr DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::DrawablesCommandGroupType_MAX;
constexpr int DrawablesCommandGroupArchive::DrawablesCommandGroupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommentCommandVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[3];
}
bool CommentCommandVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaptionOrTitleKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSDCommandArchives_2eproto);
  return file_level_enum_descriptors_TSDCommandArchives_2eproto[4];
}
bool CaptionOrTitleKind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UndoObjectArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UndoObjectArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& stylesheet(const UndoObjectArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
UndoObjectArchive::_Internal::stylesheet(const UndoObjectArchive* msg) {
  return *msg->_impl_.stylesheet_;
}
void UndoObjectArchive::clear_stylesheet() {
  if (_impl_.stylesheet_ != nullptr) _impl_.stylesheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UndoObjectArchive::clear_objects() {
  _impl_.objects_.Clear();
}
UndoObjectArchive::UndoObjectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.UndoObjectArchive)
}
UndoObjectArchive::UndoObjectArchive(const UndoObjectArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoObjectArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objects_){from._impl_.objects_}
    , decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.counts_){from._impl_.counts_}
    , decltype(_impl_.stylesheet_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stylesheet()) {
    _this->_impl_.stylesheet_ = new ::TSP::Reference(*from._impl_.stylesheet_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.UndoObjectArchive)
}

inline void UndoObjectArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.objects_){arena}
    , decltype(_impl_.keys_){arena}
    , decltype(_impl_.counts_){arena}
    , decltype(_impl_.stylesheet_){nullptr}
  };
}

UndoObjectArchive::~UndoObjectArchive() {
  // @@protoc_insertion_point(destructor:TSD.UndoObjectArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoObjectArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objects_.~RepeatedPtrField();
  _impl_.keys_.~RepeatedPtrField();
  _impl_.counts_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.stylesheet_;
}

void UndoObjectArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoObjectArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.UndoObjectArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  _impl_.keys_.Clear();
  _impl_.counts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stylesheet_ != nullptr);
    _impl_.stylesheet_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoObjectArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference stylesheet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSD.UndoObjectArchive.keys");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 counts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_counts(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoObjectArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.UndoObjectArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference objects = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference stylesheet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stylesheet(this),
        _Internal::stylesheet(this).GetCachedSize(), target, stream);
  }

  // repeated string keys = 3;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.UndoObjectArchive.keys");
    target = stream->WriteString(3, s, target);
  }

  // repeated uint32 counts = 4;
  for (int i = 0, n = this->_internal_counts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_counts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.UndoObjectArchive)
  return target;
}

size_t UndoObjectArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.UndoObjectArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_impl_.objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.keys_.size());
  for (int i = 0, n = _impl_.keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.keys_.Get(i));
  }

  // repeated uint32 counts = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.counts_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_counts_size());
    total_size += data_size;
  }

  // optional .TSP.Reference stylesheet = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stylesheet_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoObjectArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoObjectArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoObjectArchive::GetClassData() const { return &_class_data_; }


void UndoObjectArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoObjectArchive*>(&to_msg);
  auto& from = static_cast<const UndoObjectArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.UndoObjectArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  _this->_impl_.counts_.MergeFrom(from._impl_.counts_);
  if (from._internal_has_stylesheet()) {
    _this->_internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(
        from._internal_stylesheet());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoObjectArchive::CopyFrom(const UndoObjectArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.UndoObjectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoObjectArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.objects_))
    return false;
  if (_internal_has_stylesheet()) {
    if (!_impl_.stylesheet_->IsInitialized()) return false;
  }
  return true;
}

void UndoObjectArchive::InternalSwap(UndoObjectArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  _impl_.counts_.InternalSwap(&other->_impl_.counts_);
  swap(_impl_.stylesheet_, other->_impl_.stylesheet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoObjectArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[0]);
}

// ===================================================================

class GroupDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupDrawablesCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const GroupDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& group(const GroupDrawablesCommandArchive* msg);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
GroupDrawablesCommandArchive::_Internal::super(const GroupDrawablesCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
GroupDrawablesCommandArchive::_Internal::group(const GroupDrawablesCommandArchive* msg) {
  return *msg->_impl_.group_;
}
void GroupDrawablesCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GroupDrawablesCommandArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
void GroupDrawablesCommandArchive::clear_group() {
  if (_impl_.group_ != nullptr) _impl_.group_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GroupDrawablesCommandArchive::GroupDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.GroupDrawablesCommandArchive)
}
GroupDrawablesCommandArchive::GroupDrawablesCommandArchive(const GroupDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupDrawablesCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_group()) {
    _this->_impl_.group_ = new ::TSP::Reference(*from._impl_.group_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.GroupDrawablesCommandArchive)
}

inline void GroupDrawablesCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_){nullptr}
  };
}

GroupDrawablesCommandArchive::~GroupDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.GroupDrawablesCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.group_;
}

void GroupDrawablesCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GroupDrawablesCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.group_ != nullptr);
      _impl_.group_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupDrawablesCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupDrawablesCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GroupDrawablesCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference group = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GroupDrawablesCommandArchive)
  return target;
}

size_t GroupDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GroupDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 2;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference group = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupDrawablesCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupDrawablesCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupDrawablesCommandArchive::GetClassData() const { return &_class_data_; }


void GroupDrawablesCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupDrawablesCommandArchive*>(&to_msg);
  auto& from = static_cast<const GroupDrawablesCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.GroupDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_group()->::TSP::Reference::MergeFrom(
          from._internal_group());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupDrawablesCommandArchive::CopyFrom(const GroupDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GroupDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_group()) {
    if (!_impl_.group_->IsInitialized()) return false;
  }
  return true;
}

void GroupDrawablesCommandArchive::InternalSwap(GroupDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupDrawablesCommandArchive, _impl_.group_)
      + sizeof(GroupDrawablesCommandArchive::_impl_.group_)
      - PROTOBUF_FIELD_OFFSET(GroupDrawablesCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupDrawablesCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[1]);
}

// ===================================================================

class UngroupGroupCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UngroupGroupCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const UngroupGroupCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& group(const UngroupGroupCommandArchive* msg);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
UngroupGroupCommandArchive::_Internal::super(const UngroupGroupCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
UngroupGroupCommandArchive::_Internal::group(const UngroupGroupCommandArchive* msg) {
  return *msg->_impl_.group_;
}
void UngroupGroupCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UngroupGroupCommandArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
void UngroupGroupCommandArchive::clear_group() {
  if (_impl_.group_ != nullptr) _impl_.group_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UngroupGroupCommandArchive::UngroupGroupCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.UngroupGroupCommandArchive)
}
UngroupGroupCommandArchive::UngroupGroupCommandArchive(const UngroupGroupCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UngroupGroupCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_group()) {
    _this->_impl_.group_ = new ::TSP::Reference(*from._impl_.group_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.UngroupGroupCommandArchive)
}

inline void UngroupGroupCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_){nullptr}
  };
}

UngroupGroupCommandArchive::~UngroupGroupCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.UngroupGroupCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UngroupGroupCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.group_;
}

void UngroupGroupCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UngroupGroupCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.UngroupGroupCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.group_ != nullptr);
      _impl_.group_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UngroupGroupCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UngroupGroupCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.UngroupGroupCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference group = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.UngroupGroupCommandArchive)
  return target;
}

size_t UngroupGroupCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.UngroupGroupCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 2;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference group = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UngroupGroupCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UngroupGroupCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UngroupGroupCommandArchive::GetClassData() const { return &_class_data_; }


void UngroupGroupCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UngroupGroupCommandArchive*>(&to_msg);
  auto& from = static_cast<const UngroupGroupCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.UngroupGroupCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_group()->::TSP::Reference::MergeFrom(
          from._internal_group());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UngroupGroupCommandArchive::CopyFrom(const UngroupGroupCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.UngroupGroupCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UngroupGroupCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_group()) {
    if (!_impl_.group_->IsInitialized()) return false;
  }
  return true;
}

void UngroupGroupCommandArchive::InternalSwap(UngroupGroupCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UngroupGroupCommandArchive, _impl_.group_)
      + sizeof(UngroupGroupCommandArchive::_impl_.group_)
      - PROTOBUF_FIELD_OFFSET(UngroupGroupCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UngroupGroupCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[2]);
}

// ===================================================================

class ContainerRemoveChildrenCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerRemoveChildrenCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ContainerRemoveChildrenCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& container_id_path(const ContainerRemoveChildrenCommandArchive* msg);
  static void set_has_container_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ContainerRemoveChildrenCommandArchive::_Internal::super(const ContainerRemoveChildrenCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
ContainerRemoveChildrenCommandArchive::_Internal::container_id_path(const ContainerRemoveChildrenCommandArchive* msg) {
  return *msg->_impl_.container_id_path_;
}
void ContainerRemoveChildrenCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ContainerRemoveChildrenCommandArchive::clear_container_id_path() {
  if (_impl_.container_id_path_ != nullptr) _impl_.container_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ContainerRemoveChildrenCommandArchive::clear_args_list() {
  _impl_.args_list_.Clear();
}
void ContainerRemoveChildrenCommandArchive::clear_children() {
  _impl_.children_.Clear();
}
ContainerRemoveChildrenCommandArchive::ContainerRemoveChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerRemoveChildrenCommandArchive)
}
ContainerRemoveChildrenCommandArchive::ContainerRemoveChildrenCommandArchive(const ContainerRemoveChildrenCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerRemoveChildrenCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_list_){from._impl_.args_list_}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.container_id_path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_container_id_path()) {
    _this->_impl_.container_id_path_ = new ::TSP::UUIDPath(*from._impl_.container_id_path_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerRemoveChildrenCommandArchive)
}

inline void ContainerRemoveChildrenCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_list_){arena}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.container_id_path_){nullptr}
  };
}

ContainerRemoveChildrenCommandArchive::~ContainerRemoveChildrenCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerRemoveChildrenCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerRemoveChildrenCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_list_.~RepeatedPtrField();
  _impl_.children_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.container_id_path_;
}

void ContainerRemoveChildrenCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerRemoveChildrenCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerRemoveChildrenCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_list_.Clear();
  _impl_.children_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.container_id_path_ != nullptr);
      _impl_.container_id_path_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerRemoveChildrenCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath container_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.RemoveIdOperationArgs args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference children = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerRemoveChildrenCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerRemoveChildrenCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::container_id_path(this),
        _Internal::container_id_path(this).GetCachedSize(), target, stream);
  }

  // repeated .TSK.RemoveIdOperationArgs args_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference children = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerRemoveChildrenCommandArchive)
  return target;
}

size_t ContainerRemoveChildrenCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerRemoveChildrenCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RemoveIdOperationArgs args_list = 3;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->_impl_.args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference children = 4;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.container_id_path_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerRemoveChildrenCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerRemoveChildrenCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerRemoveChildrenCommandArchive::GetClassData() const { return &_class_data_; }


void ContainerRemoveChildrenCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerRemoveChildrenCommandArchive*>(&to_msg);
  auto& from = static_cast<const ContainerRemoveChildrenCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerRemoveChildrenCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_list_.MergeFrom(from._impl_.args_list_);
  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_container_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_container_id_path());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerRemoveChildrenCommandArchive::CopyFrom(const ContainerRemoveChildrenCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerRemoveChildrenCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerRemoveChildrenCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.args_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.children_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_container_id_path()) {
    if (!_impl_.container_id_path_->IsInitialized()) return false;
  }
  return true;
}

void ContainerRemoveChildrenCommandArchive::InternalSwap(ContainerRemoveChildrenCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.args_list_.InternalSwap(&other->_impl_.args_list_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, _impl_.container_id_path_)
      + sizeof(ContainerRemoveChildrenCommandArchive::_impl_.container_id_path_)
      - PROTOBUF_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerRemoveChildrenCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[3]);
}

// ===================================================================

class ContainerRemoveDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerRemoveDrawablesCommandArchive>()._impl_._has_bits_);
  static const ::TSD::ContainerRemoveChildrenCommandArchive& super(const ContainerRemoveDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ContainerRemoveChildrenCommandArchive&
ContainerRemoveDrawablesCommandArchive::_Internal::super(const ContainerRemoveDrawablesCommandArchive* msg) {
  return *msg->_impl_.super_;
}
ContainerRemoveDrawablesCommandArchive::ContainerRemoveDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerRemoveDrawablesCommandArchive)
}
ContainerRemoveDrawablesCommandArchive::ContainerRemoveDrawablesCommandArchive(const ContainerRemoveDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerRemoveDrawablesCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::ContainerRemoveChildrenCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerRemoveDrawablesCommandArchive)
}

inline void ContainerRemoveDrawablesCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ContainerRemoveDrawablesCommandArchive::~ContainerRemoveDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerRemoveDrawablesCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerRemoveDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ContainerRemoveDrawablesCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerRemoveDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerRemoveDrawablesCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerRemoveDrawablesCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerRemoveDrawablesCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerRemoveDrawablesCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerRemoveDrawablesCommandArchive)
  return target;
}

size_t ContainerRemoveDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerRemoveDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerRemoveDrawablesCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerRemoveDrawablesCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerRemoveDrawablesCommandArchive::GetClassData() const { return &_class_data_; }


void ContainerRemoveDrawablesCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerRemoveDrawablesCommandArchive*>(&to_msg);
  auto& from = static_cast<const ContainerRemoveDrawablesCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerRemoveDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::ContainerRemoveChildrenCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerRemoveDrawablesCommandArchive::CopyFrom(const ContainerRemoveDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerRemoveDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerRemoveDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ContainerRemoveDrawablesCommandArchive::InternalSwap(ContainerRemoveDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerRemoveDrawablesCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[4]);
}

// ===================================================================

class ContainerInsertChildrenCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerInsertChildrenCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ContainerInsertChildrenCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& container_id_path(const ContainerInsertChildrenCommandArchive* msg);
  static void set_has_container_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_object(const ContainerInsertChildrenCommandArchive* msg);
  static void set_has_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ContainerInsertChildrenCommandArchive::_Internal::super(const ContainerInsertChildrenCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
ContainerInsertChildrenCommandArchive::_Internal::container_id_path(const ContainerInsertChildrenCommandArchive* msg) {
  return *msg->_impl_.container_id_path_;
}
const ::TSP::Reference&
ContainerInsertChildrenCommandArchive::_Internal::undo_object(const ContainerInsertChildrenCommandArchive* msg) {
  return *msg->_impl_.undo_object_;
}
void ContainerInsertChildrenCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ContainerInsertChildrenCommandArchive::clear_container_id_path() {
  if (_impl_.container_id_path_ != nullptr) _impl_.container_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ContainerInsertChildrenCommandArchive::clear_children() {
  _impl_.children_.Clear();
}
void ContainerInsertChildrenCommandArchive::clear_args_list() {
  _impl_.args_list_.Clear();
}
void ContainerInsertChildrenCommandArchive::clear_custom_format_keys() {
  _impl_.custom_format_keys_.Clear();
}
void ContainerInsertChildrenCommandArchive::clear_undo_object() {
  if (_impl_.undo_object_ != nullptr) _impl_.undo_object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ContainerInsertChildrenCommandArchive::ContainerInsertChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerInsertChildrenCommandArchive)
}
ContainerInsertChildrenCommandArchive::ContainerInsertChildrenCommandArchive(const ContainerInsertChildrenCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerInsertChildrenCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.args_list_){from._impl_.args_list_}
    , decltype(_impl_.custom_format_keys_){from._impl_.custom_format_keys_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.container_id_path_){nullptr}
    , decltype(_impl_.undo_object_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_container_id_path()) {
    _this->_impl_.container_id_path_ = new ::TSP::UUIDPath(*from._impl_.container_id_path_);
  }
  if (from._internal_has_undo_object()) {
    _this->_impl_.undo_object_ = new ::TSP::Reference(*from._impl_.undo_object_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerInsertChildrenCommandArchive)
}

inline void ContainerInsertChildrenCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.args_list_){arena}
    , decltype(_impl_.custom_format_keys_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.container_id_path_){nullptr}
    , decltype(_impl_.undo_object_){nullptr}
  };
}

ContainerInsertChildrenCommandArchive::~ContainerInsertChildrenCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerInsertChildrenCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerInsertChildrenCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  _impl_.args_list_.~RepeatedPtrField();
  _impl_.custom_format_keys_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.container_id_path_;
  if (this != internal_default_instance()) delete _impl_.undo_object_;
}

void ContainerInsertChildrenCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerInsertChildrenCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerInsertChildrenCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_.args_list_.Clear();
  _impl_.custom_format_keys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.container_id_path_ != nullptr);
      _impl_.container_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_object_ != nullptr);
      _impl_.undo_object_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerInsertChildrenCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath container_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.AddIdOperationArgs args_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerInsertChildrenCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerInsertChildrenCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::container_id_path(this),
        _Internal::container_id_path(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference children = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.AddIdOperationArgs args_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_format_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_format_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_object = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::undo_object(this),
        _Internal::undo_object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerInsertChildrenCommandArchive)
  return target;
}

size_t ContainerInsertChildrenCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerInsertChildrenCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 3;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.AddIdOperationArgs args_list = 4;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->_impl_.args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->_impl_.custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.UUIDPath container_id_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.container_id_path_);
    }

    // optional .TSP.Reference undo_object = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_object_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerInsertChildrenCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerInsertChildrenCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerInsertChildrenCommandArchive::GetClassData() const { return &_class_data_; }


void ContainerInsertChildrenCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerInsertChildrenCommandArchive*>(&to_msg);
  auto& from = static_cast<const ContainerInsertChildrenCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerInsertChildrenCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  _this->_impl_.args_list_.MergeFrom(from._impl_.args_list_);
  _this->_impl_.custom_format_keys_.MergeFrom(from._impl_.custom_format_keys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_container_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_container_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_object()->::TSP::Reference::MergeFrom(
          from._internal_undo_object());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerInsertChildrenCommandArchive::CopyFrom(const ContainerInsertChildrenCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerInsertChildrenCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInsertChildrenCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.children_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.args_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_format_keys_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_container_id_path()) {
    if (!_impl_.container_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_undo_object()) {
    if (!_impl_.undo_object_->IsInitialized()) return false;
  }
  return true;
}

void ContainerInsertChildrenCommandArchive::InternalSwap(ContainerInsertChildrenCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  _impl_.args_list_.InternalSwap(&other->_impl_.args_list_);
  _impl_.custom_format_keys_.InternalSwap(&other->_impl_.custom_format_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, _impl_.undo_object_)
      + sizeof(ContainerInsertChildrenCommandArchive::_impl_.undo_object_)
      - PROTOBUF_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerInsertChildrenCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[5]);
}

// ===================================================================

class ContainerInsertDrawablesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerInsertDrawablesCommandArchive>()._impl_._has_bits_);
  static const ::TSD::ContainerInsertChildrenCommandArchive& super(const ContainerInsertDrawablesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ContainerInsertChildrenCommandArchive&
ContainerInsertDrawablesCommandArchive::_Internal::super(const ContainerInsertDrawablesCommandArchive* msg) {
  return *msg->_impl_.super_;
}
void ContainerInsertDrawablesCommandArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
ContainerInsertDrawablesCommandArchive::ContainerInsertDrawablesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerInsertDrawablesCommandArchive)
}
ContainerInsertDrawablesCommandArchive::ContainerInsertDrawablesCommandArchive(const ContainerInsertDrawablesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerInsertDrawablesCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::ContainerInsertChildrenCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerInsertDrawablesCommandArchive)
}

inline void ContainerInsertDrawablesCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

ContainerInsertDrawablesCommandArchive::~ContainerInsertDrawablesCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerInsertDrawablesCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerInsertDrawablesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ContainerInsertDrawablesCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerInsertDrawablesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerInsertDrawablesCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerInsertDrawablesCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerInsertDrawablesCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerInsertDrawablesCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference drawables = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerInsertDrawablesCommandArchive)
  return target;
}

size_t ContainerInsertDrawablesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerInsertDrawablesCommandArchive)
  size_t total_size = 0;

  // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 2;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerInsertDrawablesCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerInsertDrawablesCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerInsertDrawablesCommandArchive::GetClassData() const { return &_class_data_; }


void ContainerInsertDrawablesCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerInsertDrawablesCommandArchive*>(&to_msg);
  auto& from = static_cast<const ContainerInsertDrawablesCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerInsertDrawablesCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::ContainerInsertChildrenCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerInsertDrawablesCommandArchive::CopyFrom(const ContainerInsertDrawablesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerInsertDrawablesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInsertDrawablesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ContainerInsertDrawablesCommandArchive::InternalSwap(ContainerInsertDrawablesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerInsertDrawablesCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[6]);
}

// ===================================================================

class ContainerReorderChildrenCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerReorderChildrenCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ContainerReorderChildrenCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& container_id_path(const ContainerReorderChildrenCommandArchive* msg);
  static void set_has_container_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ContainerReorderChildrenCommandArchive::_Internal::super(const ContainerReorderChildrenCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
ContainerReorderChildrenCommandArchive::_Internal::container_id_path(const ContainerReorderChildrenCommandArchive* msg) {
  return *msg->_impl_.container_id_path_;
}
void ContainerReorderChildrenCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ContainerReorderChildrenCommandArchive::clear_container_id_path() {
  if (_impl_.container_id_path_ != nullptr) _impl_.container_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ContainerReorderChildrenCommandArchive::clear_args_list() {
  _impl_.args_list_.Clear();
}
ContainerReorderChildrenCommandArchive::ContainerReorderChildrenCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ContainerReorderChildrenCommandArchive)
}
ContainerReorderChildrenCommandArchive::ContainerReorderChildrenCommandArchive(const ContainerReorderChildrenCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerReorderChildrenCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_list_){from._impl_.args_list_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.container_id_path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_container_id_path()) {
    _this->_impl_.container_id_path_ = new ::TSP::UUIDPath(*from._impl_.container_id_path_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ContainerReorderChildrenCommandArchive)
}

inline void ContainerReorderChildrenCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_list_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.container_id_path_){nullptr}
  };
}

ContainerReorderChildrenCommandArchive::~ContainerReorderChildrenCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ContainerReorderChildrenCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerReorderChildrenCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.container_id_path_;
}

void ContainerReorderChildrenCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerReorderChildrenCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ContainerReorderChildrenCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.container_id_path_ != nullptr);
      _impl_.container_id_path_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerReorderChildrenCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath container_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerReorderChildrenCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ContainerReorderChildrenCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::container_id_path(this),
        _Internal::container_id_path(this).GetCachedSize(), target, stream);
  }

  // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ContainerReorderChildrenCommandArchive)
  return target;
}

size_t ContainerReorderChildrenCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ContainerReorderChildrenCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSK.RearrangeIdOperationArgs args_list = 3;
  total_size += 1UL * this->_internal_args_list_size();
  for (const auto& msg : this->_impl_.args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUIDPath container_id_path = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.container_id_path_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerReorderChildrenCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerReorderChildrenCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerReorderChildrenCommandArchive::GetClassData() const { return &_class_data_; }


void ContainerReorderChildrenCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerReorderChildrenCommandArchive*>(&to_msg);
  auto& from = static_cast<const ContainerReorderChildrenCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ContainerReorderChildrenCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_list_.MergeFrom(from._impl_.args_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_container_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_container_id_path());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerReorderChildrenCommandArchive::CopyFrom(const ContainerReorderChildrenCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ContainerReorderChildrenCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerReorderChildrenCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.args_list_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_container_id_path()) {
    if (!_impl_.container_id_path_->IsInitialized()) return false;
  }
  return true;
}

void ContainerReorderChildrenCommandArchive::InternalSwap(ContainerReorderChildrenCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.args_list_.InternalSwap(&other->_impl_.args_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, _impl_.container_id_path_)
      + sizeof(ContainerReorderChildrenCommandArchive::_impl_.container_id_path_)
      - PROTOBUF_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerReorderChildrenCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[7]);
}

// ===================================================================

class GroupUngroupInformativeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupUngroupInformativeCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const GroupUngroupInformativeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
GroupUngroupInformativeCommandArchive::_Internal::super(const GroupUngroupInformativeCommandArchive* msg) {
  return *msg->_impl_.super_;
}
void GroupUngroupInformativeCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GroupUngroupInformativeCommandArchive::clear_removed_infos() {
  _impl_.removed_infos_.Clear();
}
void GroupUngroupInformativeCommandArchive::clear_inserted_infos() {
  _impl_.inserted_infos_.Clear();
}
GroupUngroupInformativeCommandArchive::GroupUngroupInformativeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.GroupUngroupInformativeCommandArchive)
}
GroupUngroupInformativeCommandArchive::GroupUngroupInformativeCommandArchive(const GroupUngroupInformativeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupUngroupInformativeCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removed_infos_){from._impl_.removed_infos_}
    , decltype(_impl_.inserted_infos_){from._impl_.inserted_infos_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.command_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.command_type_ = from._impl_.command_type_;
  // @@protoc_insertion_point(copy_constructor:TSD.GroupUngroupInformativeCommandArchive)
}

inline void GroupUngroupInformativeCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removed_infos_){arena}
    , decltype(_impl_.inserted_infos_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.command_type_){0}
  };
}

GroupUngroupInformativeCommandArchive::~GroupUngroupInformativeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.GroupUngroupInformativeCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupUngroupInformativeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.removed_infos_.~RepeatedPtrField();
  _impl_.inserted_infos_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void GroupUngroupInformativeCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupUngroupInformativeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GroupUngroupInformativeCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.removed_infos_.Clear();
  _impl_.inserted_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.command_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupUngroupInformativeCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference removed_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference inserted_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inserted_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GroupUngroupInformativeCommandArchive.CommandType command_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::GroupUngroupInformativeCommandArchive_CommandType_IsValid(val))) {
            _internal_set_command_type(static_cast<::TSD::GroupUngroupInformativeCommandArchive_CommandType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupUngroupInformativeCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GroupUngroupInformativeCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference removed_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_removed_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_removed_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference inserted_infos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inserted_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_inserted_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSD.GroupUngroupInformativeCommandArchive.CommandType command_type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_command_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GroupUngroupInformativeCommandArchive)
  return target;
}

size_t GroupUngroupInformativeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GroupUngroupInformativeCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference removed_infos = 2;
  total_size += 1UL * this->_internal_removed_infos_size();
  for (const auto& msg : this->_impl_.removed_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference inserted_infos = 3;
  total_size += 1UL * this->_internal_inserted_infos_size();
  for (const auto& msg : this->_impl_.inserted_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSD.GroupUngroupInformativeCommandArchive.CommandType command_type = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupUngroupInformativeCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupUngroupInformativeCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupUngroupInformativeCommandArchive::GetClassData() const { return &_class_data_; }


void GroupUngroupInformativeCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupUngroupInformativeCommandArchive*>(&to_msg);
  auto& from = static_cast<const GroupUngroupInformativeCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.GroupUngroupInformativeCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.removed_infos_.MergeFrom(from._impl_.removed_infos_);
  _this->_impl_.inserted_infos_.MergeFrom(from._impl_.inserted_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.command_type_ = from._impl_.command_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupUngroupInformativeCommandArchive::CopyFrom(const GroupUngroupInformativeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GroupUngroupInformativeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUngroupInformativeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.removed_infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.inserted_infos_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void GroupUngroupInformativeCommandArchive::InternalSwap(GroupUngroupInformativeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.removed_infos_.InternalSwap(&other->_impl_.removed_infos_);
  _impl_.inserted_infos_.InternalSwap(&other->_impl_.inserted_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupUngroupInformativeCommandArchive, _impl_.command_type_)
      + sizeof(GroupUngroupInformativeCommandArchive::_impl_.command_type_)
      - PROTOBUF_FIELD_OFFSET(GroupUngroupInformativeCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUngroupInformativeCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[8]);
}

// ===================================================================

class InfoCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InfoCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const InfoCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& info_id_path(const InfoCommandArchive* msg);
  static void set_has_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InfoCommandArchive::_Internal::super(const InfoCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
InfoCommandArchive::_Internal::info_id_path(const InfoCommandArchive* msg) {
  return *msg->_impl_.info_id_path_;
}
void InfoCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InfoCommandArchive::clear_info_id_path() {
  if (_impl_.info_id_path_ != nullptr) _impl_.info_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
InfoCommandArchive::InfoCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.InfoCommandArchive)
}
InfoCommandArchive::InfoCommandArchive(const InfoCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_id_path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_info_id_path()) {
    _this->_impl_.info_id_path_ = new ::TSP::UUIDPath(*from._impl_.info_id_path_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.InfoCommandArchive)
}

inline void InfoCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_id_path_){nullptr}
  };
}

InfoCommandArchive::~InfoCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.InfoCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.info_id_path_;
}

void InfoCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InfoCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_id_path_ != nullptr);
      _impl_.info_id_path_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InfoCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDPath info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info_id_path(this),
        _Internal::info_id_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InfoCommandArchive)
  return target;
}

size_t InfoCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InfoCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDPath info_id_path = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_id_path_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoCommandArchive::GetClassData() const { return &_class_data_; }


void InfoCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoCommandArchive*>(&to_msg);
  auto& from = static_cast<const InfoCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.InfoCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_info_id_path());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoCommandArchive::CopyFrom(const InfoCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InfoCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_info_id_path()) {
    if (!_impl_.info_id_path_->IsInitialized()) return false;
  }
  return true;
}

void InfoCommandArchive::InternalSwap(InfoCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoCommandArchive, _impl_.info_id_path_)
      + sizeof(InfoCommandArchive::_impl_.info_id_path_)
      - PROTOBUF_FIELD_OFFSET(InfoCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[9]);
}

// ===================================================================

class ConnectionLineConnectCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionLineConnectCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& connected_from_id(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_connected_from_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& connected_to_id(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_connected_to_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& old_connected_to_id(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_old_connected_to_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& old_connected_from_id(const ConnectionLineConnectCommandArchive* msg);
  static void set_has_old_connected_from_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ConnectionLineConnectCommandArchive::_Internal::super(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
ConnectionLineConnectCommandArchive::_Internal::connected_from_id(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->_impl_.connected_from_id_;
}
const ::TSP::UUID&
ConnectionLineConnectCommandArchive::_Internal::connected_to_id(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->_impl_.connected_to_id_;
}
const ::TSP::UUID&
ConnectionLineConnectCommandArchive::_Internal::old_connected_to_id(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->_impl_.old_connected_to_id_;
}
const ::TSP::UUID&
ConnectionLineConnectCommandArchive::_Internal::old_connected_from_id(const ConnectionLineConnectCommandArchive* msg) {
  return *msg->_impl_.old_connected_from_id_;
}
void ConnectionLineConnectCommandArchive::clear_connected_from_id() {
  if (_impl_.connected_from_id_ != nullptr) _impl_.connected_from_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ConnectionLineConnectCommandArchive::clear_connected_to_id() {
  if (_impl_.connected_to_id_ != nullptr) _impl_.connected_to_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ConnectionLineConnectCommandArchive::clear_old_connected_to_id() {
  if (_impl_.old_connected_to_id_ != nullptr) _impl_.old_connected_to_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ConnectionLineConnectCommandArchive::clear_old_connected_from_id() {
  if (_impl_.old_connected_from_id_ != nullptr) _impl_.old_connected_from_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ConnectionLineConnectCommandArchive::ConnectionLineConnectCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ConnectionLineConnectCommandArchive)
}
ConnectionLineConnectCommandArchive::ConnectionLineConnectCommandArchive(const ConnectionLineConnectCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionLineConnectCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.connected_from_id_){nullptr}
    , decltype(_impl_.connected_to_id_){nullptr}
    , decltype(_impl_.old_connected_to_id_){nullptr}
    , decltype(_impl_.old_connected_from_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_connected_from_id()) {
    _this->_impl_.connected_from_id_ = new ::TSP::UUID(*from._impl_.connected_from_id_);
  }
  if (from._internal_has_connected_to_id()) {
    _this->_impl_.connected_to_id_ = new ::TSP::UUID(*from._impl_.connected_to_id_);
  }
  if (from._internal_has_old_connected_to_id()) {
    _this->_impl_.old_connected_to_id_ = new ::TSP::UUID(*from._impl_.old_connected_to_id_);
  }
  if (from._internal_has_old_connected_from_id()) {
    _this->_impl_.old_connected_from_id_ = new ::TSP::UUID(*from._impl_.old_connected_from_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ConnectionLineConnectCommandArchive)
}

inline void ConnectionLineConnectCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.connected_from_id_){nullptr}
    , decltype(_impl_.connected_to_id_){nullptr}
    , decltype(_impl_.old_connected_to_id_){nullptr}
    , decltype(_impl_.old_connected_from_id_){nullptr}
  };
}

ConnectionLineConnectCommandArchive::~ConnectionLineConnectCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ConnectionLineConnectCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionLineConnectCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.connected_from_id_;
  if (this != internal_default_instance()) delete _impl_.connected_to_id_;
  if (this != internal_default_instance()) delete _impl_.old_connected_to_id_;
  if (this != internal_default_instance()) delete _impl_.old_connected_from_id_;
}

void ConnectionLineConnectCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionLineConnectCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ConnectionLineConnectCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.connected_from_id_ != nullptr);
      _impl_.connected_from_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.connected_to_id_ != nullptr);
      _impl_.connected_to_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_connected_to_id_ != nullptr);
      _impl_.old_connected_to_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.old_connected_from_id_ != nullptr);
      _impl_.old_connected_from_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionLineConnectCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID connected_from_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connected_from_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID connected_to_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_connected_to_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID old_connected_to_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_connected_to_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID old_connected_from_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_connected_from_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionLineConnectCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ConnectionLineConnectCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID connected_from_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::connected_from_id(this),
        _Internal::connected_from_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID connected_to_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::connected_to_id(this),
        _Internal::connected_to_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID old_connected_to_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::old_connected_to_id(this),
        _Internal::old_connected_to_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID old_connected_from_id = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::old_connected_from_id(this),
        _Internal::old_connected_from_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ConnectionLineConnectCommandArchive)
  return target;
}

size_t ConnectionLineConnectCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ConnectionLineConnectCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.UUID connected_from_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.connected_from_id_);
    }

    // optional .TSP.UUID connected_to_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.connected_to_id_);
    }

    // optional .TSP.UUID old_connected_to_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_connected_to_id_);
    }

    // optional .TSP.UUID old_connected_from_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_connected_from_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionLineConnectCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionLineConnectCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionLineConnectCommandArchive::GetClassData() const { return &_class_data_; }


void ConnectionLineConnectCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionLineConnectCommandArchive*>(&to_msg);
  auto& from = static_cast<const ConnectionLineConnectCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ConnectionLineConnectCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_connected_from_id()->::TSP::UUID::MergeFrom(
          from._internal_connected_from_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_connected_to_id()->::TSP::UUID::MergeFrom(
          from._internal_connected_to_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_connected_to_id()->::TSP::UUID::MergeFrom(
          from._internal_old_connected_to_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_old_connected_from_id()->::TSP::UUID::MergeFrom(
          from._internal_old_connected_from_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionLineConnectCommandArchive::CopyFrom(const ConnectionLineConnectCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ConnectionLineConnectCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionLineConnectCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_connected_from_id()) {
    if (!_impl_.connected_from_id_->IsInitialized()) return false;
  }
  if (_internal_has_connected_to_id()) {
    if (!_impl_.connected_to_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_connected_to_id()) {
    if (!_impl_.old_connected_to_id_->IsInitialized()) return false;
  }
  if (_internal_has_old_connected_from_id()) {
    if (!_impl_.old_connected_from_id_->IsInitialized()) return false;
  }
  return true;
}

void ConnectionLineConnectCommandArchive::InternalSwap(ConnectionLineConnectCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionLineConnectCommandArchive, _impl_.old_connected_from_id_)
      + sizeof(ConnectionLineConnectCommandArchive::_impl_.old_connected_from_id_)
      - PROTOBUF_FIELD_OFFSET(ConnectionLineConnectCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionLineConnectCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[10]);
}

// ===================================================================

class InfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InfoGeometryCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const InfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::GeometryArchive& newgeometry(const InfoGeometryCommandArchive* msg);
  static void set_has_newgeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::GeometryArchive& oldgeometry(const InfoGeometryCommandArchive* msg);
  static void set_has_oldgeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_matchobjectplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oldmatchobjectplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shouldtriggerrtuanimation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_initiatedonweb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
InfoGeometryCommandArchive::_Internal::super(const InfoGeometryCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::GeometryArchive&
InfoGeometryCommandArchive::_Internal::newgeometry(const InfoGeometryCommandArchive* msg) {
  return *msg->_impl_.newgeometry_;
}
const ::TSD::GeometryArchive&
InfoGeometryCommandArchive::_Internal::oldgeometry(const InfoGeometryCommandArchive* msg) {
  return *msg->_impl_.oldgeometry_;
}
void InfoGeometryCommandArchive::clear_newgeometry() {
  if (_impl_.newgeometry_ != nullptr) _impl_.newgeometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void InfoGeometryCommandArchive::clear_oldgeometry() {
  if (_impl_.oldgeometry_ != nullptr) _impl_.oldgeometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
InfoGeometryCommandArchive::InfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.InfoGeometryCommandArchive)
}
InfoGeometryCommandArchive::InfoGeometryCommandArchive(const InfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoGeometryCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.newgeometry_){nullptr}
    , decltype(_impl_.oldgeometry_){nullptr}
    , decltype(_impl_.matchobjectplaceholdergeometry_){}
    , decltype(_impl_.oldmatchobjectplaceholdergeometry_){}
    , decltype(_impl_.shouldtriggerrtuanimation_){}
    , decltype(_impl_.initiatedonweb_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_newgeometry()) {
    _this->_impl_.newgeometry_ = new ::TSD::GeometryArchive(*from._impl_.newgeometry_);
  }
  if (from._internal_has_oldgeometry()) {
    _this->_impl_.oldgeometry_ = new ::TSD::GeometryArchive(*from._impl_.oldgeometry_);
  }
  ::memcpy(&_impl_.matchobjectplaceholdergeometry_, &from._impl_.matchobjectplaceholdergeometry_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.initiatedonweb_) -
    reinterpret_cast<char*>(&_impl_.matchobjectplaceholdergeometry_)) + sizeof(_impl_.initiatedonweb_));
  // @@protoc_insertion_point(copy_constructor:TSD.InfoGeometryCommandArchive)
}

inline void InfoGeometryCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.newgeometry_){nullptr}
    , decltype(_impl_.oldgeometry_){nullptr}
    , decltype(_impl_.matchobjectplaceholdergeometry_){false}
    , decltype(_impl_.oldmatchobjectplaceholdergeometry_){false}
    , decltype(_impl_.shouldtriggerrtuanimation_){false}
    , decltype(_impl_.initiatedonweb_){false}
  };
}

InfoGeometryCommandArchive::~InfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.InfoGeometryCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.newgeometry_;
  if (this != internal_default_instance()) delete _impl_.oldgeometry_;
}

void InfoGeometryCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.newgeometry_ != nullptr);
      _impl_.newgeometry_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.oldgeometry_ != nullptr);
      _impl_.oldgeometry_->Clear();
    }
  }
  ::memset(&_impl_.matchobjectplaceholdergeometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.initiatedonweb_) -
      reinterpret_cast<char*>(&_impl_.matchobjectplaceholdergeometry_)) + sizeof(_impl_.initiatedonweb_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoGeometryCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive newGeometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newgeometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive oldGeometry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldgeometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool matchObjectPlaceholderGeometry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_matchobjectplaceholdergeometry(&has_bits);
          _impl_.matchobjectplaceholdergeometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool oldMatchObjectPlaceholderGeometry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_oldmatchobjectplaceholdergeometry(&has_bits);
          _impl_.oldmatchobjectplaceholdergeometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shouldTriggerRtuAnimation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_shouldtriggerrtuanimation(&has_bits);
          _impl_.shouldtriggerrtuanimation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool initiatedOnWeb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_initiatedonweb(&has_bits);
          _impl_.initiatedonweb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoGeometryCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive newGeometry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::newgeometry(this),
        _Internal::newgeometry(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive oldGeometry = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::oldgeometry(this),
        _Internal::oldgeometry(this).GetCachedSize(), target, stream);
  }

  // optional bool matchObjectPlaceholderGeometry = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_matchobjectplaceholdergeometry(), target);
  }

  // optional bool oldMatchObjectPlaceholderGeometry = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_oldmatchobjectplaceholdergeometry(), target);
  }

  // optional bool shouldTriggerRtuAnimation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_shouldtriggerrtuanimation(), target);
  }

  // optional bool initiatedOnWeb = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_initiatedonweb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InfoGeometryCommandArchive)
  return target;
}

size_t InfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InfoGeometryCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .TSD.GeometryArchive newGeometry = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newgeometry_);
    }

    // optional .TSD.GeometryArchive oldGeometry = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldgeometry_);
    }

    // optional bool matchObjectPlaceholderGeometry = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool oldMatchObjectPlaceholderGeometry = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool shouldTriggerRtuAnimation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool initiatedOnWeb = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoGeometryCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoGeometryCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoGeometryCommandArchive::GetClassData() const { return &_class_data_; }


void InfoGeometryCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoGeometryCommandArchive*>(&to_msg);
  auto& from = static_cast<const InfoGeometryCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.InfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_newgeometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_newgeometry());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_oldgeometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_oldgeometry());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.matchobjectplaceholdergeometry_ = from._impl_.matchobjectplaceholdergeometry_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.oldmatchobjectplaceholdergeometry_ = from._impl_.oldmatchobjectplaceholdergeometry_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.shouldtriggerrtuanimation_ = from._impl_.shouldtriggerrtuanimation_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.initiatedonweb_ = from._impl_.initiatedonweb_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoGeometryCommandArchive::CopyFrom(const InfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_newgeometry()) {
    if (!_impl_.newgeometry_->IsInitialized()) return false;
  }
  if (_internal_has_oldgeometry()) {
    if (!_impl_.oldgeometry_->IsInitialized()) return false;
  }
  return true;
}

void InfoGeometryCommandArchive::InternalSwap(InfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoGeometryCommandArchive, _impl_.initiatedonweb_)
      + sizeof(InfoGeometryCommandArchive::_impl_.initiatedonweb_)
      - PROTOBUF_FIELD_OFFSET(InfoGeometryCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoGeometryCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[11]);
}

// ===================================================================

class DrawablePathSourceCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawablePathSourceCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawablePathSourceCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::PathSourceArchive& old_path_source(const DrawablePathSourceCommandArchive* msg);
  static void set_has_old_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::PathSourceArchive& new_path_source(const DrawablePathSourceCommandArchive* msg);
  static void set_has_new_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawablePathSourceCommandArchive::_Internal::super(const DrawablePathSourceCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::PathSourceArchive&
DrawablePathSourceCommandArchive::_Internal::old_path_source(const DrawablePathSourceCommandArchive* msg) {
  return *msg->_impl_.old_path_source_;
}
const ::TSD::PathSourceArchive&
DrawablePathSourceCommandArchive::_Internal::new_path_source(const DrawablePathSourceCommandArchive* msg) {
  return *msg->_impl_.new_path_source_;
}
void DrawablePathSourceCommandArchive::clear_old_path_source() {
  if (_impl_.old_path_source_ != nullptr) _impl_.old_path_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DrawablePathSourceCommandArchive::clear_new_path_source() {
  if (_impl_.new_path_source_ != nullptr) _impl_.new_path_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DrawablePathSourceCommandArchive::DrawablePathSourceCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawablePathSourceCommandArchive)
}
DrawablePathSourceCommandArchive::DrawablePathSourceCommandArchive(const DrawablePathSourceCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawablePathSourceCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_path_source_){nullptr}
    , decltype(_impl_.new_path_source_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_path_source()) {
    _this->_impl_.old_path_source_ = new ::TSD::PathSourceArchive(*from._impl_.old_path_source_);
  }
  if (from._internal_has_new_path_source()) {
    _this->_impl_.new_path_source_ = new ::TSD::PathSourceArchive(*from._impl_.new_path_source_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawablePathSourceCommandArchive)
}

inline void DrawablePathSourceCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_path_source_){nullptr}
    , decltype(_impl_.new_path_source_){nullptr}
  };
}

DrawablePathSourceCommandArchive::~DrawablePathSourceCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawablePathSourceCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawablePathSourceCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_path_source_;
  if (this != internal_default_instance()) delete _impl_.new_path_source_;
}

void DrawablePathSourceCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawablePathSourceCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawablePathSourceCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_path_source_ != nullptr);
      _impl_.old_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_path_source_ != nullptr);
      _impl_.new_path_source_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawablePathSourceCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive old_path_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_path_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive new_path_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_path_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawablePathSourceCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawablePathSourceCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.PathSourceArchive old_path_source = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_path_source(this),
        _Internal::old_path_source(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.PathSourceArchive new_path_source = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_path_source(this),
        _Internal::new_path_source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawablePathSourceCommandArchive)
  return target;
}

size_t DrawablePathSourceCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawablePathSourceCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSD.PathSourceArchive old_path_source = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_path_source_);
    }

    // optional .TSD.PathSourceArchive new_path_source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_path_source_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawablePathSourceCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawablePathSourceCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawablePathSourceCommandArchive::GetClassData() const { return &_class_data_; }


void DrawablePathSourceCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawablePathSourceCommandArchive*>(&to_msg);
  auto& from = static_cast<const DrawablePathSourceCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawablePathSourceCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_path_source()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_old_path_source());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_path_source()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_new_path_source());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawablePathSourceCommandArchive::CopyFrom(const DrawablePathSourceCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawablePathSourceCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablePathSourceCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_path_source()) {
    if (!_impl_.old_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_new_path_source()) {
    if (!_impl_.new_path_source_->IsInitialized()) return false;
  }
  return true;
}

void DrawablePathSourceCommandArchive::InternalSwap(DrawablePathSourceCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawablePathSourceCommandArchive, _impl_.new_path_source_)
      + sizeof(DrawablePathSourceCommandArchive::_impl_.new_path_source_)
      - PROTOBUF_FIELD_OFFSET(DrawablePathSourceCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawablePathSourceCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[12]);
}

// ===================================================================

class InstantAlphaCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InstantAlphaCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const InstantAlphaCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Path& oldpath(const InstantAlphaCommandArchive* msg);
  static void set_has_oldpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Path& newpath(const InstantAlphaCommandArchive* msg);
  static void set_has_newpath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
InstantAlphaCommandArchive::_Internal::super(const InstantAlphaCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Path&
InstantAlphaCommandArchive::_Internal::oldpath(const InstantAlphaCommandArchive* msg) {
  return *msg->_impl_.oldpath_;
}
const ::TSP::Path&
InstantAlphaCommandArchive::_Internal::newpath(const InstantAlphaCommandArchive* msg) {
  return *msg->_impl_.newpath_;
}
void InstantAlphaCommandArchive::clear_oldpath() {
  if (_impl_.oldpath_ != nullptr) _impl_.oldpath_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void InstantAlphaCommandArchive::clear_newpath() {
  if (_impl_.newpath_ != nullptr) _impl_.newpath_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
InstantAlphaCommandArchive::InstantAlphaCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.InstantAlphaCommandArchive)
}
InstantAlphaCommandArchive::InstantAlphaCommandArchive(const InstantAlphaCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstantAlphaCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.oldpath_){nullptr}
    , decltype(_impl_.newpath_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_oldpath()) {
    _this->_impl_.oldpath_ = new ::TSP::Path(*from._impl_.oldpath_);
  }
  if (from._internal_has_newpath()) {
    _this->_impl_.newpath_ = new ::TSP::Path(*from._impl_.newpath_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.InstantAlphaCommandArchive)
}

inline void InstantAlphaCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.oldpath_){nullptr}
    , decltype(_impl_.newpath_){nullptr}
  };
}

InstantAlphaCommandArchive::~InstantAlphaCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.InstantAlphaCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstantAlphaCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.oldpath_;
  if (this != internal_default_instance()) delete _impl_.newpath_;
}

void InstantAlphaCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstantAlphaCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InstantAlphaCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.oldpath_ != nullptr);
      _impl_.oldpath_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.newpath_ != nullptr);
      _impl_.newpath_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstantAlphaCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Path oldpath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldpath(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Path newpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newpath(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstantAlphaCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InstantAlphaCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Path oldpath = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::oldpath(this),
        _Internal::oldpath(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Path newpath = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::newpath(this),
        _Internal::newpath(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InstantAlphaCommandArchive)
  return target;
}

size_t InstantAlphaCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InstantAlphaCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Path oldpath = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldpath_);
    }

    // optional .TSP.Path newpath = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newpath_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstantAlphaCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstantAlphaCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstantAlphaCommandArchive::GetClassData() const { return &_class_data_; }


void InstantAlphaCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstantAlphaCommandArchive*>(&to_msg);
  auto& from = static_cast<const InstantAlphaCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.InstantAlphaCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_oldpath()->::TSP::Path::MergeFrom(
          from._internal_oldpath());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_newpath()->::TSP::Path::MergeFrom(
          from._internal_newpath());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstantAlphaCommandArchive::CopyFrom(const InstantAlphaCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InstantAlphaCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantAlphaCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_oldpath()) {
    if (!_impl_.oldpath_->IsInitialized()) return false;
  }
  if (_internal_has_newpath()) {
    if (!_impl_.newpath_->IsInitialized()) return false;
  }
  return true;
}

void InstantAlphaCommandArchive::InternalSwap(InstantAlphaCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstantAlphaCommandArchive, _impl_.newpath_)
      + sizeof(InstantAlphaCommandArchive::_impl_.newpath_)
      - PROTOBUF_FIELD_OFFSET(InstantAlphaCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstantAlphaCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[13]);
}

// ===================================================================

class DrawableApplyThemeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableApplyThemeCommandArchive>()._impl_._has_bits_);
  static const ::TSS::ApplyThemeChildCommandArchive& super(const DrawableApplyThemeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info(const DrawableApplyThemeCommandArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& style(const DrawableApplyThemeCommandArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::ApplyThemeChildCommandArchive&
DrawableApplyThemeCommandArchive::_Internal::super(const DrawableApplyThemeCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
DrawableApplyThemeCommandArchive::_Internal::info(const DrawableApplyThemeCommandArchive* msg) {
  return *msg->_impl_.info_;
}
const ::TSP::Reference&
DrawableApplyThemeCommandArchive::_Internal::style(const DrawableApplyThemeCommandArchive* msg) {
  return *msg->_impl_.style_;
}
void DrawableApplyThemeCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DrawableApplyThemeCommandArchive::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DrawableApplyThemeCommandArchive::clear_style() {
  if (_impl_.style_ != nullptr) _impl_.style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DrawableApplyThemeCommandArchive::DrawableApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableApplyThemeCommandArchive)
}
DrawableApplyThemeCommandArchive::DrawableApplyThemeCommandArchive(const DrawableApplyThemeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawableApplyThemeCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::ApplyThemeChildCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  if (from._internal_has_style()) {
    _this->_impl_.style_ = new ::TSP::Reference(*from._impl_.style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableApplyThemeCommandArchive)
}

inline void DrawableApplyThemeCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.style_){nullptr}
  };
}

DrawableApplyThemeCommandArchive::~DrawableApplyThemeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableApplyThemeCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawableApplyThemeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.info_;
  if (this != internal_default_instance()) delete _impl_.style_;
}

void DrawableApplyThemeCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawableApplyThemeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableApplyThemeCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.style_ != nullptr);
      _impl_.style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableApplyThemeCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawableApplyThemeCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableApplyThemeCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::style(this),
        _Internal::style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableApplyThemeCommandArchive)
  return target;
}

size_t DrawableApplyThemeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableApplyThemeCommandArchive)
  size_t total_size = 0;

  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_);
    }

    // optional .TSP.Reference style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawableApplyThemeCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawableApplyThemeCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawableApplyThemeCommandArchive::GetClassData() const { return &_class_data_; }


void DrawableApplyThemeCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawableApplyThemeCommandArchive*>(&to_msg);
  auto& from = static_cast<const DrawableApplyThemeCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableApplyThemeCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_style()->::TSP::Reference::MergeFrom(
          from._internal_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawableApplyThemeCommandArchive::CopyFrom(const DrawableApplyThemeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableApplyThemeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableApplyThemeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!_impl_.style_->IsInitialized()) return false;
  }
  return true;
}

void DrawableApplyThemeCommandArchive::InternalSwap(DrawableApplyThemeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableApplyThemeCommandArchive, _impl_.style_)
      + sizeof(DrawableApplyThemeCommandArchive::_impl_.style_)
      - PROTOBUF_FIELD_OFFSET(DrawableApplyThemeCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableApplyThemeCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[14]);
}

// ===================================================================

class AbstractStyleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AbstractStyleCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const AbstractStyleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
AbstractStyleCommandArchive::_Internal::super(const AbstractStyleCommandArchive* msg) {
  return *msg->_impl_.super_;
}
AbstractStyleCommandArchive::AbstractStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.AbstractStyleCommandArchive)
}
AbstractStyleCommandArchive::AbstractStyleCommandArchive(const AbstractStyleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbstractStyleCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.AbstractStyleCommandArchive)
}

inline void AbstractStyleCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

AbstractStyleCommandArchive::~AbstractStyleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.AbstractStyleCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbstractStyleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void AbstractStyleCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbstractStyleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.AbstractStyleCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbstractStyleCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbstractStyleCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.AbstractStyleCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.AbstractStyleCommandArchive)
  return target;
}

size_t AbstractStyleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.AbstractStyleCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbstractStyleCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbstractStyleCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbstractStyleCommandArchive::GetClassData() const { return &_class_data_; }


void AbstractStyleCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbstractStyleCommandArchive*>(&to_msg);
  auto& from = static_cast<const AbstractStyleCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.AbstractStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbstractStyleCommandArchive::CopyFrom(const AbstractStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.AbstractStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractStyleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void AbstractStyleCommandArchive::InternalSwap(AbstractStyleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbstractStyleCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[15]);
}

// ===================================================================

class StyledInfoSetStyleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyledInfoSetStyleCommandArchive>()._impl_._has_bits_);
  static const ::TSD::AbstractStyleCommandArchive& super(const StyledInfoSetStyleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& new_style(const StyledInfoSetStyleCommandArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& rollback_style(const StyledInfoSetStyleCommandArchive* msg);
  static void set_has_rollback_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::AbstractStyleCommandArchive&
StyledInfoSetStyleCommandArchive::_Internal::super(const StyledInfoSetStyleCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
StyledInfoSetStyleCommandArchive::_Internal::new_style(const StyledInfoSetStyleCommandArchive* msg) {
  return *msg->_impl_.new_style_;
}
const ::TSP::Reference&
StyledInfoSetStyleCommandArchive::_Internal::rollback_style(const StyledInfoSetStyleCommandArchive* msg) {
  return *msg->_impl_.rollback_style_;
}
void StyledInfoSetStyleCommandArchive::clear_new_style() {
  if (_impl_.new_style_ != nullptr) _impl_.new_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void StyledInfoSetStyleCommandArchive::clear_rollback_style() {
  if (_impl_.rollback_style_ != nullptr) _impl_.rollback_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
StyledInfoSetStyleCommandArchive::StyledInfoSetStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.StyledInfoSetStyleCommandArchive)
}
StyledInfoSetStyleCommandArchive::StyledInfoSetStyleCommandArchive(const StyledInfoSetStyleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StyledInfoSetStyleCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
    , decltype(_impl_.rollback_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::AbstractStyleCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_new_style()) {
    _this->_impl_.new_style_ = new ::TSP::Reference(*from._impl_.new_style_);
  }
  if (from._internal_has_rollback_style()) {
    _this->_impl_.rollback_style_ = new ::TSP::Reference(*from._impl_.rollback_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.StyledInfoSetStyleCommandArchive)
}

inline void StyledInfoSetStyleCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
    , decltype(_impl_.rollback_style_){nullptr}
  };
}

StyledInfoSetStyleCommandArchive::~StyledInfoSetStyleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.StyledInfoSetStyleCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StyledInfoSetStyleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.new_style_;
  if (this != internal_default_instance()) delete _impl_.rollback_style_;
}

void StyledInfoSetStyleCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StyledInfoSetStyleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.StyledInfoSetStyleCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_style_ != nullptr);
      _impl_.new_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.rollback_style_ != nullptr);
      _impl_.rollback_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyledInfoSetStyleCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractStyleCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyledInfoSetStyleCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.StyledInfoSetStyleCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_style(this),
        _Internal::new_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference rollback_style = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rollback_style(this),
        _Internal::rollback_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.StyledInfoSetStyleCommandArchive)
  return target;
}

size_t StyledInfoSetStyleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.StyledInfoSetStyleCommandArchive)
  size_t total_size = 0;

  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference new_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_style_);
    }

    // optional .TSP.Reference rollback_style = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rollback_style_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyledInfoSetStyleCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StyledInfoSetStyleCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyledInfoSetStyleCommandArchive::GetClassData() const { return &_class_data_; }


void StyledInfoSetStyleCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StyledInfoSetStyleCommandArchive*>(&to_msg);
  auto& from = static_cast<const StyledInfoSetStyleCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.StyledInfoSetStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::AbstractStyleCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_style()->::TSP::Reference::MergeFrom(
          from._internal_new_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rollback_style()->::TSP::Reference::MergeFrom(
          from._internal_rollback_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyledInfoSetStyleCommandArchive::CopyFrom(const StyledInfoSetStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.StyledInfoSetStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyledInfoSetStyleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!_impl_.new_style_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_style()) {
    if (!_impl_.rollback_style_->IsInitialized()) return false;
  }
  return true;
}

void StyledInfoSetStyleCommandArchive::InternalSwap(StyledInfoSetStyleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyledInfoSetStyleCommandArchive, _impl_.rollback_style_)
      + sizeof(StyledInfoSetStyleCommandArchive::_impl_.rollback_style_)
      - PROTOBUF_FIELD_OFFSET(StyledInfoSetStyleCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyledInfoSetStyleCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[16]);
}

// ===================================================================

class BaseApplyPresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseApplyPresetCommandArchive>()._impl_._has_bits_);
  static const ::TSD::AbstractStyleCommandArchive& super(const BaseApplyPresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& preset_style(const BaseApplyPresetCommandArchive* msg);
  static void set_has_preset_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& rollback_style(const BaseApplyPresetCommandArchive* msg);
  static void set_has_rollback_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::AbstractStyleCommandArchive&
BaseApplyPresetCommandArchive::_Internal::super(const BaseApplyPresetCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
BaseApplyPresetCommandArchive::_Internal::preset_style(const BaseApplyPresetCommandArchive* msg) {
  return *msg->_impl_.preset_style_;
}
const ::TSP::Reference&
BaseApplyPresetCommandArchive::_Internal::rollback_style(const BaseApplyPresetCommandArchive* msg) {
  return *msg->_impl_.rollback_style_;
}
void BaseApplyPresetCommandArchive::clear_preset_style() {
  if (_impl_.preset_style_ != nullptr) _impl_.preset_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void BaseApplyPresetCommandArchive::clear_rollback_style() {
  if (_impl_.rollback_style_ != nullptr) _impl_.rollback_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
BaseApplyPresetCommandArchive::BaseApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.BaseApplyPresetCommandArchive)
}
BaseApplyPresetCommandArchive::BaseApplyPresetCommandArchive(const BaseApplyPresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseApplyPresetCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.preset_style_){nullptr}
    , decltype(_impl_.rollback_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::AbstractStyleCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_preset_style()) {
    _this->_impl_.preset_style_ = new ::TSP::Reference(*from._impl_.preset_style_);
  }
  if (from._internal_has_rollback_style()) {
    _this->_impl_.rollback_style_ = new ::TSP::Reference(*from._impl_.rollback_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.BaseApplyPresetCommandArchive)
}

inline void BaseApplyPresetCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.preset_style_){nullptr}
    , decltype(_impl_.rollback_style_){nullptr}
  };
}

BaseApplyPresetCommandArchive::~BaseApplyPresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.BaseApplyPresetCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseApplyPresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.preset_style_;
  if (this != internal_default_instance()) delete _impl_.rollback_style_;
}

void BaseApplyPresetCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseApplyPresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.BaseApplyPresetCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.preset_style_ != nullptr);
      _impl_.preset_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.rollback_style_ != nullptr);
      _impl_.rollback_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseApplyPresetCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractStyleCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference preset_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseApplyPresetCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.BaseApplyPresetCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference preset_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::preset_style(this),
        _Internal::preset_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference rollback_style = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rollback_style(this),
        _Internal::rollback_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.BaseApplyPresetCommandArchive)
  return target;
}

size_t BaseApplyPresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.BaseApplyPresetCommandArchive)
  size_t total_size = 0;

  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference preset_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preset_style_);
    }

    // optional .TSP.Reference rollback_style = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rollback_style_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseApplyPresetCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseApplyPresetCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseApplyPresetCommandArchive::GetClassData() const { return &_class_data_; }


void BaseApplyPresetCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseApplyPresetCommandArchive*>(&to_msg);
  auto& from = static_cast<const BaseApplyPresetCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.BaseApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::AbstractStyleCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_preset_style()->::TSP::Reference::MergeFrom(
          from._internal_preset_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rollback_style()->::TSP::Reference::MergeFrom(
          from._internal_rollback_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseApplyPresetCommandArchive::CopyFrom(const BaseApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.BaseApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseApplyPresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_preset_style()) {
    if (!_impl_.preset_style_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_style()) {
    if (!_impl_.rollback_style_->IsInitialized()) return false;
  }
  return true;
}

void BaseApplyPresetCommandArchive::InternalSwap(BaseApplyPresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseApplyPresetCommandArchive, _impl_.rollback_style_)
      + sizeof(BaseApplyPresetCommandArchive::_impl_.rollback_style_)
      - PROTOBUF_FIELD_OFFSET(BaseApplyPresetCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseApplyPresetCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[17]);
}

// ===================================================================

class ShapeApplyPresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeApplyPresetCommandArchive>()._impl_._has_bits_);
  static const ::TSD::BaseApplyPresetCommandArchive& super(const ShapeApplyPresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseApplyPresetCommandArchive&
ShapeApplyPresetCommandArchive::_Internal::super(const ShapeApplyPresetCommandArchive* msg) {
  return *msg->_impl_.super_;
}
ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ShapeApplyPresetCommandArchive)
}
ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(const ShapeApplyPresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShapeApplyPresetCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::BaseApplyPresetCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ShapeApplyPresetCommandArchive)
}

inline void ShapeApplyPresetCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ShapeApplyPresetCommandArchive::~ShapeApplyPresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShapeApplyPresetCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShapeApplyPresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ShapeApplyPresetCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShapeApplyPresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShapeApplyPresetCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeApplyPresetCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseApplyPresetCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShapeApplyPresetCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShapeApplyPresetCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShapeApplyPresetCommandArchive)
  return target;
}

size_t ShapeApplyPresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShapeApplyPresetCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeApplyPresetCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShapeApplyPresetCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeApplyPresetCommandArchive::GetClassData() const { return &_class_data_; }


void ShapeApplyPresetCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShapeApplyPresetCommandArchive*>(&to_msg);
  auto& from = static_cast<const ShapeApplyPresetCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShapeApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::BaseApplyPresetCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeApplyPresetCommandArchive::CopyFrom(const ShapeApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShapeApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeApplyPresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ShapeApplyPresetCommandArchive::InternalSwap(ShapeApplyPresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeApplyPresetCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[18]);
}

// ===================================================================

class MediaApplyPresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaApplyPresetCommandArchive>()._impl_._has_bits_);
  static const ::TSD::BaseApplyPresetCommandArchive& super(const MediaApplyPresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseApplyPresetCommandArchive&
MediaApplyPresetCommandArchive::_Internal::super(const MediaApplyPresetCommandArchive* msg) {
  return *msg->_impl_.super_;
}
MediaApplyPresetCommandArchive::MediaApplyPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaApplyPresetCommandArchive)
}
MediaApplyPresetCommandArchive::MediaApplyPresetCommandArchive(const MediaApplyPresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaApplyPresetCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::BaseApplyPresetCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.MediaApplyPresetCommandArchive)
}

inline void MediaApplyPresetCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

MediaApplyPresetCommandArchive::~MediaApplyPresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaApplyPresetCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaApplyPresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void MediaApplyPresetCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaApplyPresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaApplyPresetCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaApplyPresetCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseApplyPresetCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaApplyPresetCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaApplyPresetCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaApplyPresetCommandArchive)
  return target;
}

size_t MediaApplyPresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaApplyPresetCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseApplyPresetCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaApplyPresetCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaApplyPresetCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaApplyPresetCommandArchive::GetClassData() const { return &_class_data_; }


void MediaApplyPresetCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaApplyPresetCommandArchive*>(&to_msg);
  auto& from = static_cast<const MediaApplyPresetCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaApplyPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::BaseApplyPresetCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaApplyPresetCommandArchive::CopyFrom(const MediaApplyPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaApplyPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaApplyPresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void MediaApplyPresetCommandArchive::InternalSwap(MediaApplyPresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaApplyPresetCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[19]);
}

// ===================================================================

class ShapeStyleSetValueCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeStyleSetValueCommandArchive>()._impl_._has_bits_);
  static const ::TSD::BaseStyleSetValueCommandArchive& super(const ShapeStyleSetValueCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive& change(const ShapeStyleSetValueCommandArchive* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseStyleSetValueCommandArchive&
ShapeStyleSetValueCommandArchive::_Internal::super(const ShapeStyleSetValueCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSDSOS::BaseShapeStylePropertyChangeSetArchive&
ShapeStyleSetValueCommandArchive::_Internal::change(const ShapeStyleSetValueCommandArchive* msg) {
  return *msg->_impl_.change_;
}
void ShapeStyleSetValueCommandArchive::clear_change() {
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ShapeStyleSetValueCommandArchive)
}
ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(const ShapeStyleSetValueCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShapeStyleSetValueCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.change_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::BaseStyleSetValueCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_change()) {
    _this->_impl_.change_ = new ::TSDSOS::BaseShapeStylePropertyChangeSetArchive(*from._impl_.change_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ShapeStyleSetValueCommandArchive)
}

inline void ShapeStyleSetValueCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.change_){nullptr}
  };
}

ShapeStyleSetValueCommandArchive::~ShapeStyleSetValueCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShapeStyleSetValueCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShapeStyleSetValueCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.change_;
}

void ShapeStyleSetValueCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShapeStyleSetValueCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShapeStyleSetValueCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.change_ != nullptr);
      _impl_.change_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeStyleSetValueCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseStyleSetValueCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.BaseShapeStylePropertyChangeSetArchive change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShapeStyleSetValueCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShapeStyleSetValueCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSDSOS.BaseShapeStylePropertyChangeSetArchive change = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::change(this),
        _Internal::change(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShapeStyleSetValueCommandArchive)
  return target;
}

size_t ShapeStyleSetValueCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShapeStyleSetValueCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSDSOS.BaseShapeStylePropertyChangeSetArchive change = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.change_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeStyleSetValueCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShapeStyleSetValueCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeStyleSetValueCommandArchive::GetClassData() const { return &_class_data_; }


void ShapeStyleSetValueCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShapeStyleSetValueCommandArchive*>(&to_msg);
  auto& from = static_cast<const ShapeStyleSetValueCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShapeStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::BaseStyleSetValueCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_change()->::TSDSOS::BaseShapeStylePropertyChangeSetArchive::MergeFrom(
          from._internal_change());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeStyleSetValueCommandArchive::CopyFrom(const ShapeStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShapeStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStyleSetValueCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_change()) {
    if (!_impl_.change_->IsInitialized()) return false;
  }
  return true;
}

void ShapeStyleSetValueCommandArchive::InternalSwap(ShapeStyleSetValueCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, _impl_.change_)
      + sizeof(ShapeStyleSetValueCommandArchive::_impl_.change_)
      - PROTOBUF_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeStyleSetValueCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[20]);
}

// ===================================================================

class BaseStyleSetValueCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseStyleSetValueCommandArchive>()._impl_._has_bits_);
  static const ::TSD::AbstractStyleCommandArchive& super(const BaseStyleSetValueCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& old_style(const BaseStyleSetValueCommandArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_border_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSD::AbstractStyleCommandArchive&
BaseStyleSetValueCommandArchive::_Internal::super(const BaseStyleSetValueCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
BaseStyleSetValueCommandArchive::_Internal::old_style(const BaseStyleSetValueCommandArchive* msg) {
  return *msg->_impl_.old_style_;
}
void BaseStyleSetValueCommandArchive::clear_old_style() {
  if (_impl_.old_style_ != nullptr) _impl_.old_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
BaseStyleSetValueCommandArchive::BaseStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.BaseStyleSetValueCommandArchive)
}
BaseStyleSetValueCommandArchive::BaseStyleSetValueCommandArchive(const BaseStyleSetValueCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseStyleSetValueCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.is_border_change_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::AbstractStyleCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_style()) {
    _this->_impl_.old_style_ = new ::TSP::Reference(*from._impl_.old_style_);
  }
  _this->_impl_.is_border_change_ = from._impl_.is_border_change_;
  // @@protoc_insertion_point(copy_constructor:TSD.BaseStyleSetValueCommandArchive)
}

inline void BaseStyleSetValueCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.is_border_change_){false}
  };
}

BaseStyleSetValueCommandArchive::~BaseStyleSetValueCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.BaseStyleSetValueCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseStyleSetValueCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_style_;
}

void BaseStyleSetValueCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseStyleSetValueCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.BaseStyleSetValueCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_style_ != nullptr);
      _impl_.old_style_->Clear();
    }
  }
  _impl_.is_border_change_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseStyleSetValueCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractStyleCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_border_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_border_change(&has_bits);
          _impl_.is_border_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseStyleSetValueCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.BaseStyleSetValueCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_style = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_style(this),
        _Internal::old_style(this).GetCachedSize(), target, stream);
  }

  // required bool is_border_change = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_border_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.BaseStyleSetValueCommandArchive)
  return target;
}

size_t BaseStyleSetValueCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.BaseStyleSetValueCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.AbstractStyleCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_is_border_change()) {
    // required bool is_border_change = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t BaseStyleSetValueCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.BaseStyleSetValueCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSD.AbstractStyleCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool is_border_change = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference old_style = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseStyleSetValueCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseStyleSetValueCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseStyleSetValueCommandArchive::GetClassData() const { return &_class_data_; }


void BaseStyleSetValueCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseStyleSetValueCommandArchive*>(&to_msg);
  auto& from = static_cast<const BaseStyleSetValueCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.BaseStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::AbstractStyleCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_style()->::TSP::Reference::MergeFrom(
          from._internal_old_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_border_change_ = from._impl_.is_border_change_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseStyleSetValueCommandArchive::CopyFrom(const BaseStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.BaseStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStyleSetValueCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_style()) {
    if (!_impl_.old_style_->IsInitialized()) return false;
  }
  return true;
}

void BaseStyleSetValueCommandArchive::InternalSwap(BaseStyleSetValueCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseStyleSetValueCommandArchive, _impl_.is_border_change_)
      + sizeof(BaseStyleSetValueCommandArchive::_impl_.is_border_change_)
      - PROTOBUF_FIELD_OFFSET(BaseStyleSetValueCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseStyleSetValueCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[21]);
}

// ===================================================================

class MovieSetValueCommandArchive_PropertyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieSetValueCommandArchive_PropertyValue>()._impl_._has_bits_);
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_postertime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::DataReference& posterimagedata(const MovieSetValueCommandArchive_PropertyValue* msg);
  static void set_has_posterimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autoplay(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_loopoption(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::DataReference& media(const MovieSetValueCommandArchive_PropertyValue* msg);
  static void set_has_media(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playsacrossslides(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::TSP::DataReference&
MovieSetValueCommandArchive_PropertyValue::_Internal::posterimagedata(const MovieSetValueCommandArchive_PropertyValue* msg) {
  return *msg->_impl_.posterimagedata_;
}
const ::TSP::DataReference&
MovieSetValueCommandArchive_PropertyValue::_Internal::media(const MovieSetValueCommandArchive_PropertyValue* msg) {
  return *msg->_impl_.media_;
}
void MovieSetValueCommandArchive_PropertyValue::clear_posterimagedata() {
  if (_impl_.posterimagedata_ != nullptr) _impl_.posterimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MovieSetValueCommandArchive_PropertyValue::clear_media() {
  if (_impl_.media_ != nullptr) _impl_.media_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MovieSetValueCommandArchive_PropertyValue::MovieSetValueCommandArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.MovieSetValueCommandArchive.PropertyValue)
}
MovieSetValueCommandArchive_PropertyValue::MovieSetValueCommandArchive_PropertyValue(const MovieSetValueCommandArchive_PropertyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MovieSetValueCommandArchive_PropertyValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.posterimagedata_){nullptr}
    , decltype(_impl_.media_){nullptr}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.postertime_){}
    , decltype(_impl_.loopoption_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.autoplay_){}
    , decltype(_impl_.playsacrossslides_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_posterimagedata()) {
    _this->_impl_.posterimagedata_ = new ::TSP::DataReference(*from._impl_.posterimagedata_);
  }
  if (from._internal_has_media()) {
    _this->_impl_.media_ = new ::TSP::DataReference(*from._impl_.media_);
  }
  ::memcpy(&_impl_.starttime_, &from._impl_.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playsacrossslides_) -
    reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.playsacrossslides_));
  // @@protoc_insertion_point(copy_constructor:TSD.MovieSetValueCommandArchive.PropertyValue)
}

inline void MovieSetValueCommandArchive_PropertyValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.posterimagedata_){nullptr}
    , decltype(_impl_.media_){nullptr}
    , decltype(_impl_.starttime_){0}
    , decltype(_impl_.endtime_){0}
    , decltype(_impl_.postertime_){0}
    , decltype(_impl_.loopoption_){0}
    , decltype(_impl_.volume_){0}
    , decltype(_impl_.autoplay_){false}
    , decltype(_impl_.playsacrossslides_){false}
  };
}

MovieSetValueCommandArchive_PropertyValue::~MovieSetValueCommandArchive_PropertyValue() {
  // @@protoc_insertion_point(destructor:TSD.MovieSetValueCommandArchive.PropertyValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MovieSetValueCommandArchive_PropertyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.posterimagedata_;
  if (this != internal_default_instance()) delete _impl_.media_;
}

void MovieSetValueCommandArchive_PropertyValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MovieSetValueCommandArchive_PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.posterimagedata_ != nullptr);
      _impl_.posterimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.media_ != nullptr);
      _impl_.media_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.starttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.autoplay_) -
        reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.autoplay_));
  }
  _impl_.playsacrossslides_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieSetValueCommandArchive_PropertyValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double starttime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_starttime(&has_bits);
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double endtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_endtime(&has_bits);
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double postertime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_postertime(&has_bits);
          _impl_.postertime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference posterimagedata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_posterimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool autoplay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_autoplay(&has_bits);
          _impl_.autoplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::MovieSetValueCommandArchive_LoopOption_IsValid(val))) {
            _internal_set_loopoption(static_cast<::TSD::MovieSetValueCommandArchive_LoopOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_volume(&has_bits);
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference media = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_media(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool playsAcrossSlides = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_playsacrossslides(&has_bits);
          _impl_.playsacrossslides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovieSetValueCommandArchive_PropertyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double starttime = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_starttime(), target);
  }

  // optional double endtime = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_endtime(), target);
  }

  // optional double postertime = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_postertime(), target);
  }

  // optional .TSP.DataReference posterimagedata = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::posterimagedata(this),
        _Internal::posterimagedata(this).GetCachedSize(), target, stream);
  }

  // optional bool autoplay = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_autoplay(), target);
  }

  // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_loopoption(), target);
  }

  // optional float volume = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_volume(), target);
  }

  // optional .TSP.DataReference media = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::media(this),
        _Internal::media(this).GetCachedSize(), target, stream);
  }

  // optional bool playsAcrossSlides = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_playsacrossslides(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MovieSetValueCommandArchive.PropertyValue)
  return target;
}

size_t MovieSetValueCommandArchive_PropertyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.DataReference posterimagedata = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.posterimagedata_);
    }

    // optional .TSP.DataReference media = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.media_);
    }

    // optional double starttime = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double endtime = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double postertime = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_loopoption());
    }

    // optional float volume = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool autoplay = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool playsAcrossSlides = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovieSetValueCommandArchive_PropertyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MovieSetValueCommandArchive_PropertyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovieSetValueCommandArchive_PropertyValue::GetClassData() const { return &_class_data_; }


void MovieSetValueCommandArchive_PropertyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MovieSetValueCommandArchive_PropertyValue*>(&to_msg);
  auto& from = static_cast<const MovieSetValueCommandArchive_PropertyValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_posterimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_posterimagedata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_media()->::TSP::DataReference::MergeFrom(
          from._internal_media());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.starttime_ = from._impl_.starttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.endtime_ = from._impl_.endtime_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.postertime_ = from._impl_.postertime_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.loopoption_ = from._impl_.loopoption_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.volume_ = from._impl_.volume_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.autoplay_ = from._impl_.autoplay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_playsacrossslides(from._internal_playsacrossslides());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovieSetValueCommandArchive_PropertyValue::CopyFrom(const MovieSetValueCommandArchive_PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MovieSetValueCommandArchive.PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSetValueCommandArchive_PropertyValue::IsInitialized() const {
  if (_internal_has_posterimagedata()) {
    if (!_impl_.posterimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_media()) {
    if (!_impl_.media_->IsInitialized()) return false;
  }
  return true;
}

void MovieSetValueCommandArchive_PropertyValue::InternalSwap(MovieSetValueCommandArchive_PropertyValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, _impl_.playsacrossslides_)
      + sizeof(MovieSetValueCommandArchive_PropertyValue::_impl_.playsacrossslides_)
      - PROTOBUF_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, _impl_.posterimagedata_)>(
          reinterpret_cast<char*>(&_impl_.posterimagedata_),
          reinterpret_cast<char*>(&other->_impl_.posterimagedata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieSetValueCommandArchive_PropertyValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[22]);
}

// ===================================================================

class MovieSetValueCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieSetValueCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const MovieSetValueCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::MovieSetValueCommandArchive_PropertyValue& value(const MovieSetValueCommandArchive* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::MovieSetValueCommandArchive_PropertyValue& oldvalue(const MovieSetValueCommandArchive* msg);
  static void set_has_oldvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& importedauxiliarymedia(const MovieSetValueCommandArchive* msg);
  static void set_has_importedauxiliarymedia(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::DataReference& oldimportedauxiliarymedia(const MovieSetValueCommandArchive* msg);
  static void set_has_oldimportedauxiliarymedia(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
MovieSetValueCommandArchive::_Internal::super(const MovieSetValueCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::MovieSetValueCommandArchive_PropertyValue&
MovieSetValueCommandArchive::_Internal::value(const MovieSetValueCommandArchive* msg) {
  return *msg->_impl_.value_;
}
const ::TSD::MovieSetValueCommandArchive_PropertyValue&
MovieSetValueCommandArchive::_Internal::oldvalue(const MovieSetValueCommandArchive* msg) {
  return *msg->_impl_.oldvalue_;
}
const ::TSP::DataReference&
MovieSetValueCommandArchive::_Internal::importedauxiliarymedia(const MovieSetValueCommandArchive* msg) {
  return *msg->_impl_.importedauxiliarymedia_;
}
const ::TSP::DataReference&
MovieSetValueCommandArchive::_Internal::oldimportedauxiliarymedia(const MovieSetValueCommandArchive* msg) {
  return *msg->_impl_.oldimportedauxiliarymedia_;
}
void MovieSetValueCommandArchive::clear_importedauxiliarymedia() {
  if (_impl_.importedauxiliarymedia_ != nullptr) _impl_.importedauxiliarymedia_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void MovieSetValueCommandArchive::clear_oldimportedauxiliarymedia() {
  if (_impl_.oldimportedauxiliarymedia_ != nullptr) _impl_.oldimportedauxiliarymedia_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
MovieSetValueCommandArchive::MovieSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.MovieSetValueCommandArchive)
}
MovieSetValueCommandArchive::MovieSetValueCommandArchive(const MovieSetValueCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MovieSetValueCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.oldvalue_){nullptr}
    , decltype(_impl_.importedauxiliarymedia_){nullptr}
    , decltype(_impl_.oldimportedauxiliarymedia_){nullptr}
    , decltype(_impl_.property_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::TSD::MovieSetValueCommandArchive_PropertyValue(*from._impl_.value_);
  }
  if (from._internal_has_oldvalue()) {
    _this->_impl_.oldvalue_ = new ::TSD::MovieSetValueCommandArchive_PropertyValue(*from._impl_.oldvalue_);
  }
  if (from._internal_has_importedauxiliarymedia()) {
    _this->_impl_.importedauxiliarymedia_ = new ::TSP::DataReference(*from._impl_.importedauxiliarymedia_);
  }
  if (from._internal_has_oldimportedauxiliarymedia()) {
    _this->_impl_.oldimportedauxiliarymedia_ = new ::TSP::DataReference(*from._impl_.oldimportedauxiliarymedia_);
  }
  _this->_impl_.property_ = from._impl_.property_;
  // @@protoc_insertion_point(copy_constructor:TSD.MovieSetValueCommandArchive)
}

inline void MovieSetValueCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.oldvalue_){nullptr}
    , decltype(_impl_.importedauxiliarymedia_){nullptr}
    , decltype(_impl_.oldimportedauxiliarymedia_){nullptr}
    , decltype(_impl_.property_){0}
  };
}

MovieSetValueCommandArchive::~MovieSetValueCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MovieSetValueCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MovieSetValueCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.oldvalue_;
  if (this != internal_default_instance()) delete _impl_.importedauxiliarymedia_;
  if (this != internal_default_instance()) delete _impl_.oldimportedauxiliarymedia_;
}

void MovieSetValueCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MovieSetValueCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MovieSetValueCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.oldvalue_ != nullptr);
      _impl_.oldvalue_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.importedauxiliarymedia_ != nullptr);
      _impl_.importedauxiliarymedia_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.oldimportedauxiliarymedia_ != nullptr);
      _impl_.oldimportedauxiliarymedia_->Clear();
    }
  }
  _impl_.property_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieSetValueCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_property(&has_bits);
          _impl_.property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.MovieSetValueCommandArchive.PropertyValue oldValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference importedauxiliarymedia = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_importedauxiliarymedia(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldimportedauxiliarymedia = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldimportedauxiliarymedia(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovieSetValueCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MovieSetValueCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional int32 property = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_property(), target);
  }

  // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.MovieSetValueCommandArchive.PropertyValue oldValue = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::oldvalue(this),
        _Internal::oldvalue(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference importedauxiliarymedia = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::importedauxiliarymedia(this),
        _Internal::importedauxiliarymedia(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference oldimportedauxiliarymedia = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::oldimportedauxiliarymedia(this),
        _Internal::oldimportedauxiliarymedia(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MovieSetValueCommandArchive)
  return target;
}

size_t MovieSetValueCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MovieSetValueCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // optional .TSD.MovieSetValueCommandArchive.PropertyValue oldValue = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldvalue_);
    }

    // optional .TSP.DataReference importedauxiliarymedia = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.importedauxiliarymedia_);
    }

    // optional .TSP.DataReference oldimportedauxiliarymedia = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldimportedauxiliarymedia_);
    }

    // optional int32 property = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_property());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovieSetValueCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MovieSetValueCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovieSetValueCommandArchive::GetClassData() const { return &_class_data_; }


void MovieSetValueCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MovieSetValueCommandArchive*>(&to_msg);
  auto& from = static_cast<const MovieSetValueCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.MovieSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::TSD::MovieSetValueCommandArchive_PropertyValue::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_oldvalue()->::TSD::MovieSetValueCommandArchive_PropertyValue::MergeFrom(
          from._internal_oldvalue());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_importedauxiliarymedia()->::TSP::DataReference::MergeFrom(
          from._internal_importedauxiliarymedia());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_oldimportedauxiliarymedia()->::TSP::DataReference::MergeFrom(
          from._internal_oldimportedauxiliarymedia());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.property_ = from._impl_.property_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovieSetValueCommandArchive::CopyFrom(const MovieSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MovieSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSetValueCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!_impl_.value_->IsInitialized()) return false;
  }
  if (_internal_has_oldvalue()) {
    if (!_impl_.oldvalue_->IsInitialized()) return false;
  }
  if (_internal_has_importedauxiliarymedia()) {
    if (!_impl_.importedauxiliarymedia_->IsInitialized()) return false;
  }
  if (_internal_has_oldimportedauxiliarymedia()) {
    if (!_impl_.oldimportedauxiliarymedia_->IsInitialized()) return false;
  }
  return true;
}

void MovieSetValueCommandArchive::InternalSwap(MovieSetValueCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieSetValueCommandArchive, _impl_.property_)
      + sizeof(MovieSetValueCommandArchive::_impl_.property_)
      - PROTOBUF_FIELD_OFFSET(MovieSetValueCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieSetValueCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[23]);
}

// ===================================================================

class MediaStyleSetValueCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaStyleSetValueCommandArchive>()._impl_._has_bits_);
  static const ::TSD::BaseStyleSetValueCommandArchive& super(const MediaStyleSetValueCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSDSOS::MediaStylePropertyChangeSetArchive& change(const MediaStyleSetValueCommandArchive* msg);
  static void set_has_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::BaseStyleSetValueCommandArchive&
MediaStyleSetValueCommandArchive::_Internal::super(const MediaStyleSetValueCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSDSOS::MediaStylePropertyChangeSetArchive&
MediaStyleSetValueCommandArchive::_Internal::change(const MediaStyleSetValueCommandArchive* msg) {
  return *msg->_impl_.change_;
}
void MediaStyleSetValueCommandArchive::clear_change() {
  if (_impl_.change_ != nullptr) _impl_.change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MediaStyleSetValueCommandArchive::MediaStyleSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaStyleSetValueCommandArchive)
}
MediaStyleSetValueCommandArchive::MediaStyleSetValueCommandArchive(const MediaStyleSetValueCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaStyleSetValueCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.change_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::BaseStyleSetValueCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_change()) {
    _this->_impl_.change_ = new ::TSDSOS::MediaStylePropertyChangeSetArchive(*from._impl_.change_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.MediaStyleSetValueCommandArchive)
}

inline void MediaStyleSetValueCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.change_){nullptr}
  };
}

MediaStyleSetValueCommandArchive::~MediaStyleSetValueCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaStyleSetValueCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaStyleSetValueCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.change_;
}

void MediaStyleSetValueCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaStyleSetValueCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaStyleSetValueCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.change_ != nullptr);
      _impl_.change_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaStyleSetValueCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.BaseStyleSetValueCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaStyleSetValueCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaStyleSetValueCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::change(this),
        _Internal::change(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaStyleSetValueCommandArchive)
  return target;
}

size_t MediaStyleSetValueCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaStyleSetValueCommandArchive)
  size_t total_size = 0;

  // required .TSD.BaseStyleSetValueCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.change_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaStyleSetValueCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaStyleSetValueCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaStyleSetValueCommandArchive::GetClassData() const { return &_class_data_; }


void MediaStyleSetValueCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaStyleSetValueCommandArchive*>(&to_msg);
  auto& from = static_cast<const MediaStyleSetValueCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaStyleSetValueCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::BaseStyleSetValueCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_change()->::TSDSOS::MediaStylePropertyChangeSetArchive::MergeFrom(
          from._internal_change());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaStyleSetValueCommandArchive::CopyFrom(const MediaStyleSetValueCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaStyleSetValueCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStyleSetValueCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_change()) {
    if (!_impl_.change_->IsInitialized()) return false;
  }
  return true;
}

void MediaStyleSetValueCommandArchive::InternalSwap(MediaStyleSetValueCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaStyleSetValueCommandArchive, _impl_.change_)
      + sizeof(MediaStyleSetValueCommandArchive::_impl_.change_)
      - PROTOBUF_FIELD_OFFSET(MediaStyleSetValueCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaStyleSetValueCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[24]);
}

// ===================================================================

class ImageMediaCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageMediaCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageMediaCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& newimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_newimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::DataReference& oldimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::DataReference& oldoriginalimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldoriginalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Size& oldnaturalsize(const ImageMediaCommandArchive* msg);
  static void set_has_oldnaturalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::DataReference& neworiginalimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_neworiginalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::ImageAdjustmentsArchive& oldimageadjustments(const ImageMediaCommandArchive* msg);
  static void set_has_oldimageadjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::DataReference& oldadjustedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::DataReference& oldenhancedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldenhancedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::ImageAdjustmentsArchive& imageadjustments(const ImageMediaCommandArchive* msg);
  static void set_has_imageadjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::DataReference& adjustedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_adjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::DataReference& enhancedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_enhancedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::DataReference& newthumbnailimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_newthumbnailimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::DataReference& oldthumbnailimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldthumbnailimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::DataReference& thumbnailadjustedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_thumbnailadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::DataReference& oldthumbnailadjustedimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_oldthumbnailadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::Reference& database_newimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_database_newimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& database_oldimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_database_oldimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& database_oldoriginalimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_database_oldoriginalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& database_neworiginalimagedata(const ImageMediaCommandArchive* msg);
  static void set_has_database_neworiginalimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageMediaCommandArchive::_Internal::super(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::newimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.newimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.oldimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldoriginalimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.oldoriginalimagedata_;
}
const ::TSP::Size&
ImageMediaCommandArchive::_Internal::oldnaturalsize(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.oldnaturalsize_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::neworiginalimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.neworiginalimagedata_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageMediaCommandArchive::_Internal::oldimageadjustments(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.oldimageadjustments_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldadjustedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.oldadjustedimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldenhancedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.oldenhancedimagedata_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageMediaCommandArchive::_Internal::imageadjustments(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.imageadjustments_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::adjustedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.adjustedimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::enhancedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.enhancedimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::newthumbnailimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.newthumbnailimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldthumbnailimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.oldthumbnailimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::thumbnailadjustedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.thumbnailadjustedimagedata_;
}
const ::TSP::DataReference&
ImageMediaCommandArchive::_Internal::oldthumbnailadjustedimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.oldthumbnailadjustedimagedata_;
}
const ::TSP::Reference&
ImageMediaCommandArchive::_Internal::database_newimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.database_newimagedata_;
}
const ::TSP::Reference&
ImageMediaCommandArchive::_Internal::database_oldimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.database_oldimagedata_;
}
const ::TSP::Reference&
ImageMediaCommandArchive::_Internal::database_oldoriginalimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.database_oldoriginalimagedata_;
}
const ::TSP::Reference&
ImageMediaCommandArchive::_Internal::database_neworiginalimagedata(const ImageMediaCommandArchive* msg) {
  return *msg->_impl_.database_neworiginalimagedata_;
}
void ImageMediaCommandArchive::clear_newimagedata() {
  if (_impl_.newimagedata_ != nullptr) _impl_.newimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ImageMediaCommandArchive::clear_oldimagedata() {
  if (_impl_.oldimagedata_ != nullptr) _impl_.oldimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ImageMediaCommandArchive::clear_oldoriginalimagedata() {
  if (_impl_.oldoriginalimagedata_ != nullptr) _impl_.oldoriginalimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ImageMediaCommandArchive::clear_oldnaturalsize() {
  if (_impl_.oldnaturalsize_ != nullptr) _impl_.oldnaturalsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ImageMediaCommandArchive::clear_neworiginalimagedata() {
  if (_impl_.neworiginalimagedata_ != nullptr) _impl_.neworiginalimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ImageMediaCommandArchive::clear_oldimageadjustments() {
  if (_impl_.oldimageadjustments_ != nullptr) _impl_.oldimageadjustments_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ImageMediaCommandArchive::clear_oldadjustedimagedata() {
  if (_impl_.oldadjustedimagedata_ != nullptr) _impl_.oldadjustedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ImageMediaCommandArchive::clear_oldenhancedimagedata() {
  if (_impl_.oldenhancedimagedata_ != nullptr) _impl_.oldenhancedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ImageMediaCommandArchive::clear_imageadjustments() {
  if (_impl_.imageadjustments_ != nullptr) _impl_.imageadjustments_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void ImageMediaCommandArchive::clear_adjustedimagedata() {
  if (_impl_.adjustedimagedata_ != nullptr) _impl_.adjustedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ImageMediaCommandArchive::clear_enhancedimagedata() {
  if (_impl_.enhancedimagedata_ != nullptr) _impl_.enhancedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void ImageMediaCommandArchive::clear_newthumbnailimagedata() {
  if (_impl_.newthumbnailimagedata_ != nullptr) _impl_.newthumbnailimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void ImageMediaCommandArchive::clear_oldthumbnailimagedata() {
  if (_impl_.oldthumbnailimagedata_ != nullptr) _impl_.oldthumbnailimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void ImageMediaCommandArchive::clear_thumbnailadjustedimagedata() {
  if (_impl_.thumbnailadjustedimagedata_ != nullptr) _impl_.thumbnailadjustedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void ImageMediaCommandArchive::clear_oldthumbnailadjustedimagedata() {
  if (_impl_.oldthumbnailadjustedimagedata_ != nullptr) _impl_.oldthumbnailadjustedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void ImageMediaCommandArchive::clear_database_newimagedata() {
  if (_impl_.database_newimagedata_ != nullptr) _impl_.database_newimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ImageMediaCommandArchive::clear_database_oldimagedata() {
  if (_impl_.database_oldimagedata_ != nullptr) _impl_.database_oldimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ImageMediaCommandArchive::clear_database_oldoriginalimagedata() {
  if (_impl_.database_oldoriginalimagedata_ != nullptr) _impl_.database_oldoriginalimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ImageMediaCommandArchive::clear_database_neworiginalimagedata() {
  if (_impl_.database_neworiginalimagedata_ != nullptr) _impl_.database_neworiginalimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
ImageMediaCommandArchive::ImageMediaCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageMediaCommandArchive)
}
ImageMediaCommandArchive::ImageMediaCommandArchive(const ImageMediaCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageMediaCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.database_newimagedata_){nullptr}
    , decltype(_impl_.database_oldimagedata_){nullptr}
    , decltype(_impl_.database_oldoriginalimagedata_){nullptr}
    , decltype(_impl_.oldnaturalsize_){nullptr}
    , decltype(_impl_.database_neworiginalimagedata_){nullptr}
    , decltype(_impl_.newimagedata_){nullptr}
    , decltype(_impl_.oldimagedata_){nullptr}
    , decltype(_impl_.oldoriginalimagedata_){nullptr}
    , decltype(_impl_.neworiginalimagedata_){nullptr}
    , decltype(_impl_.oldimageadjustments_){nullptr}
    , decltype(_impl_.oldadjustedimagedata_){nullptr}
    , decltype(_impl_.oldenhancedimagedata_){nullptr}
    , decltype(_impl_.imageadjustments_){nullptr}
    , decltype(_impl_.adjustedimagedata_){nullptr}
    , decltype(_impl_.enhancedimagedata_){nullptr}
    , decltype(_impl_.newthumbnailimagedata_){nullptr}
    , decltype(_impl_.oldthumbnailimagedata_){nullptr}
    , decltype(_impl_.thumbnailadjustedimagedata_){nullptr}
    , decltype(_impl_.oldthumbnailadjustedimagedata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_database_newimagedata()) {
    _this->_impl_.database_newimagedata_ = new ::TSP::Reference(*from._impl_.database_newimagedata_);
  }
  if (from._internal_has_database_oldimagedata()) {
    _this->_impl_.database_oldimagedata_ = new ::TSP::Reference(*from._impl_.database_oldimagedata_);
  }
  if (from._internal_has_database_oldoriginalimagedata()) {
    _this->_impl_.database_oldoriginalimagedata_ = new ::TSP::Reference(*from._impl_.database_oldoriginalimagedata_);
  }
  if (from._internal_has_oldnaturalsize()) {
    _this->_impl_.oldnaturalsize_ = new ::TSP::Size(*from._impl_.oldnaturalsize_);
  }
  if (from._internal_has_database_neworiginalimagedata()) {
    _this->_impl_.database_neworiginalimagedata_ = new ::TSP::Reference(*from._impl_.database_neworiginalimagedata_);
  }
  if (from._internal_has_newimagedata()) {
    _this->_impl_.newimagedata_ = new ::TSP::DataReference(*from._impl_.newimagedata_);
  }
  if (from._internal_has_oldimagedata()) {
    _this->_impl_.oldimagedata_ = new ::TSP::DataReference(*from._impl_.oldimagedata_);
  }
  if (from._internal_has_oldoriginalimagedata()) {
    _this->_impl_.oldoriginalimagedata_ = new ::TSP::DataReference(*from._impl_.oldoriginalimagedata_);
  }
  if (from._internal_has_neworiginalimagedata()) {
    _this->_impl_.neworiginalimagedata_ = new ::TSP::DataReference(*from._impl_.neworiginalimagedata_);
  }
  if (from._internal_has_oldimageadjustments()) {
    _this->_impl_.oldimageadjustments_ = new ::TSD::ImageAdjustmentsArchive(*from._impl_.oldimageadjustments_);
  }
  if (from._internal_has_oldadjustedimagedata()) {
    _this->_impl_.oldadjustedimagedata_ = new ::TSP::DataReference(*from._impl_.oldadjustedimagedata_);
  }
  if (from._internal_has_oldenhancedimagedata()) {
    _this->_impl_.oldenhancedimagedata_ = new ::TSP::DataReference(*from._impl_.oldenhancedimagedata_);
  }
  if (from._internal_has_imageadjustments()) {
    _this->_impl_.imageadjustments_ = new ::TSD::ImageAdjustmentsArchive(*from._impl_.imageadjustments_);
  }
  if (from._internal_has_adjustedimagedata()) {
    _this->_impl_.adjustedimagedata_ = new ::TSP::DataReference(*from._impl_.adjustedimagedata_);
  }
  if (from._internal_has_enhancedimagedata()) {
    _this->_impl_.enhancedimagedata_ = new ::TSP::DataReference(*from._impl_.enhancedimagedata_);
  }
  if (from._internal_has_newthumbnailimagedata()) {
    _this->_impl_.newthumbnailimagedata_ = new ::TSP::DataReference(*from._impl_.newthumbnailimagedata_);
  }
  if (from._internal_has_oldthumbnailimagedata()) {
    _this->_impl_.oldthumbnailimagedata_ = new ::TSP::DataReference(*from._impl_.oldthumbnailimagedata_);
  }
  if (from._internal_has_thumbnailadjustedimagedata()) {
    _this->_impl_.thumbnailadjustedimagedata_ = new ::TSP::DataReference(*from._impl_.thumbnailadjustedimagedata_);
  }
  if (from._internal_has_oldthumbnailadjustedimagedata()) {
    _this->_impl_.oldthumbnailadjustedimagedata_ = new ::TSP::DataReference(*from._impl_.oldthumbnailadjustedimagedata_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageMediaCommandArchive)
}

inline void ImageMediaCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.database_newimagedata_){nullptr}
    , decltype(_impl_.database_oldimagedata_){nullptr}
    , decltype(_impl_.database_oldoriginalimagedata_){nullptr}
    , decltype(_impl_.oldnaturalsize_){nullptr}
    , decltype(_impl_.database_neworiginalimagedata_){nullptr}
    , decltype(_impl_.newimagedata_){nullptr}
    , decltype(_impl_.oldimagedata_){nullptr}
    , decltype(_impl_.oldoriginalimagedata_){nullptr}
    , decltype(_impl_.neworiginalimagedata_){nullptr}
    , decltype(_impl_.oldimageadjustments_){nullptr}
    , decltype(_impl_.oldadjustedimagedata_){nullptr}
    , decltype(_impl_.oldenhancedimagedata_){nullptr}
    , decltype(_impl_.imageadjustments_){nullptr}
    , decltype(_impl_.adjustedimagedata_){nullptr}
    , decltype(_impl_.enhancedimagedata_){nullptr}
    , decltype(_impl_.newthumbnailimagedata_){nullptr}
    , decltype(_impl_.oldthumbnailimagedata_){nullptr}
    , decltype(_impl_.thumbnailadjustedimagedata_){nullptr}
    , decltype(_impl_.oldthumbnailadjustedimagedata_){nullptr}
  };
}

ImageMediaCommandArchive::~ImageMediaCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageMediaCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageMediaCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.database_newimagedata_;
  if (this != internal_default_instance()) delete _impl_.database_oldimagedata_;
  if (this != internal_default_instance()) delete _impl_.database_oldoriginalimagedata_;
  if (this != internal_default_instance()) delete _impl_.oldnaturalsize_;
  if (this != internal_default_instance()) delete _impl_.database_neworiginalimagedata_;
  if (this != internal_default_instance()) delete _impl_.newimagedata_;
  if (this != internal_default_instance()) delete _impl_.oldimagedata_;
  if (this != internal_default_instance()) delete _impl_.oldoriginalimagedata_;
  if (this != internal_default_instance()) delete _impl_.neworiginalimagedata_;
  if (this != internal_default_instance()) delete _impl_.oldimageadjustments_;
  if (this != internal_default_instance()) delete _impl_.oldadjustedimagedata_;
  if (this != internal_default_instance()) delete _impl_.oldenhancedimagedata_;
  if (this != internal_default_instance()) delete _impl_.imageadjustments_;
  if (this != internal_default_instance()) delete _impl_.adjustedimagedata_;
  if (this != internal_default_instance()) delete _impl_.enhancedimagedata_;
  if (this != internal_default_instance()) delete _impl_.newthumbnailimagedata_;
  if (this != internal_default_instance()) delete _impl_.oldthumbnailimagedata_;
  if (this != internal_default_instance()) delete _impl_.thumbnailadjustedimagedata_;
  if (this != internal_default_instance()) delete _impl_.oldthumbnailadjustedimagedata_;
}

void ImageMediaCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageMediaCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageMediaCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.database_newimagedata_ != nullptr);
      _impl_.database_newimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.database_oldimagedata_ != nullptr);
      _impl_.database_oldimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.database_oldoriginalimagedata_ != nullptr);
      _impl_.database_oldoriginalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.oldnaturalsize_ != nullptr);
      _impl_.oldnaturalsize_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.database_neworiginalimagedata_ != nullptr);
      _impl_.database_neworiginalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.newimagedata_ != nullptr);
      _impl_.newimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.oldimagedata_ != nullptr);
      _impl_.oldimagedata_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.oldoriginalimagedata_ != nullptr);
      _impl_.oldoriginalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.neworiginalimagedata_ != nullptr);
      _impl_.neworiginalimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.oldimageadjustments_ != nullptr);
      _impl_.oldimageadjustments_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.oldadjustedimagedata_ != nullptr);
      _impl_.oldadjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.oldenhancedimagedata_ != nullptr);
      _impl_.oldenhancedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.imageadjustments_ != nullptr);
      _impl_.imageadjustments_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.adjustedimagedata_ != nullptr);
      _impl_.adjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.enhancedimagedata_ != nullptr);
      _impl_.enhancedimagedata_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.newthumbnailimagedata_ != nullptr);
      _impl_.newthumbnailimagedata_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.oldthumbnailimagedata_ != nullptr);
      _impl_.oldthumbnailimagedata_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.thumbnailadjustedimagedata_ != nullptr);
      _impl_.thumbnailadjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.oldthumbnailadjustedimagedata_ != nullptr);
      _impl_.oldthumbnailadjustedimagedata_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageMediaCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference database_newImageData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_newimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference database_oldImageData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_oldimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference database_oldOriginalImageData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_oldoriginalimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size oldNaturalSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldnaturalsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference database_newOriginalImageData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_neworiginalimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference newImageData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_newimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldImageData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldOriginalImageData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldoriginalimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference newOriginalImageData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_neworiginalimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldimageadjustments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldAdjustedImageData = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldadjustedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldEnhancedImageData = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldenhancedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_imageadjustments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference adjustedImageData = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjustedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference enhancedImageData = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_enhancedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference newThumbnailImageData = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_newthumbnailimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldThumbnailImageData = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldthumbnailimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnailAdjustedImageData = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnailadjustedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference oldThumbnailAdjustedImageData = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldthumbnailadjustedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageMediaCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageMediaCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference database_newImageData = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::database_newimagedata(this),
        _Internal::database_newimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference database_oldImageData = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::database_oldimagedata(this),
        _Internal::database_oldimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference database_oldOriginalImageData = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::database_oldoriginalimagedata(this),
        _Internal::database_oldoriginalimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size oldNaturalSize = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::oldnaturalsize(this),
        _Internal::oldnaturalsize(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference database_newOriginalImageData = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::database_neworiginalimagedata(this),
        _Internal::database_neworiginalimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference newImageData = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::newimagedata(this),
        _Internal::newimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference oldImageData = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::oldimagedata(this),
        _Internal::oldimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference oldOriginalImageData = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::oldoriginalimagedata(this),
        _Internal::oldoriginalimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference newOriginalImageData = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::neworiginalimagedata(this),
        _Internal::neworiginalimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::oldimageadjustments(this),
        _Internal::oldimageadjustments(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference oldAdjustedImageData = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::oldadjustedimagedata(this),
        _Internal::oldadjustedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference oldEnhancedImageData = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::oldenhancedimagedata(this),
        _Internal::oldenhancedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::imageadjustments(this),
        _Internal::imageadjustments(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference adjustedImageData = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::adjustedimagedata(this),
        _Internal::adjustedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference enhancedImageData = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::enhancedimagedata(this),
        _Internal::enhancedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference newThumbnailImageData = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::newthumbnailimagedata(this),
        _Internal::newthumbnailimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference oldThumbnailImageData = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::oldthumbnailimagedata(this),
        _Internal::oldthumbnailimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference thumbnailAdjustedImageData = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::thumbnailadjustedimagedata(this),
        _Internal::thumbnailadjustedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference oldThumbnailAdjustedImageData = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::oldthumbnailadjustedimagedata(this),
        _Internal::oldthumbnailadjustedimagedata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageMediaCommandArchive)
  return target;
}

size_t ImageMediaCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageMediaCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSP.Reference database_newImageData = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_newimagedata_);
    }

    // optional .TSP.Reference database_oldImageData = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_oldimagedata_);
    }

    // optional .TSP.Reference database_oldOriginalImageData = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_oldoriginalimagedata_);
    }

    // optional .TSP.Size oldNaturalSize = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldnaturalsize_);
    }

    // optional .TSP.Reference database_newOriginalImageData = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_neworiginalimagedata_);
    }

    // optional .TSP.DataReference newImageData = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newimagedata_);
    }

    // optional .TSP.DataReference oldImageData = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldimagedata_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.DataReference oldOriginalImageData = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldoriginalimagedata_);
    }

    // optional .TSP.DataReference newOriginalImageData = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.neworiginalimagedata_);
    }

    // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldimageadjustments_);
    }

    // optional .TSP.DataReference oldAdjustedImageData = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldadjustedimagedata_);
    }

    // optional .TSP.DataReference oldEnhancedImageData = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldenhancedimagedata_);
    }

    // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.imageadjustments_);
    }

    // optional .TSP.DataReference adjustedImageData = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adjustedimagedata_);
    }

    // optional .TSP.DataReference enhancedImageData = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.enhancedimagedata_);
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional .TSP.DataReference newThumbnailImageData = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newthumbnailimagedata_);
    }

    // optional .TSP.DataReference oldThumbnailImageData = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldthumbnailimagedata_);
    }

    // optional .TSP.DataReference thumbnailAdjustedImageData = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.thumbnailadjustedimagedata_);
    }

    // optional .TSP.DataReference oldThumbnailAdjustedImageData = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldthumbnailadjustedimagedata_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageMediaCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageMediaCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageMediaCommandArchive::GetClassData() const { return &_class_data_; }


void ImageMediaCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageMediaCommandArchive*>(&to_msg);
  auto& from = static_cast<const ImageMediaCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageMediaCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_database_newimagedata()->::TSP::Reference::MergeFrom(
          from._internal_database_newimagedata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_database_oldimagedata()->::TSP::Reference::MergeFrom(
          from._internal_database_oldimagedata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_database_oldoriginalimagedata()->::TSP::Reference::MergeFrom(
          from._internal_database_oldoriginalimagedata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_oldnaturalsize()->::TSP::Size::MergeFrom(
          from._internal_oldnaturalsize());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_database_neworiginalimagedata()->::TSP::Reference::MergeFrom(
          from._internal_database_neworiginalimagedata());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_newimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_newimagedata());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_oldimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_oldimagedata());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_oldoriginalimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_oldoriginalimagedata());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_neworiginalimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_neworiginalimagedata());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_oldimageadjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(
          from._internal_oldimageadjustments());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_oldadjustedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_oldadjustedimagedata());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_oldenhancedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_oldenhancedimagedata());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_imageadjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(
          from._internal_imageadjustments());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_adjustedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_adjustedimagedata());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_enhancedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_enhancedimagedata());
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_newthumbnailimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_newthumbnailimagedata());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_oldthumbnailimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_oldthumbnailimagedata());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_thumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_thumbnailadjustedimagedata());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_oldthumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_oldthumbnailadjustedimagedata());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageMediaCommandArchive::CopyFrom(const ImageMediaCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageMediaCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMediaCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_database_newimagedata()) {
    if (!_impl_.database_newimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_database_oldimagedata()) {
    if (!_impl_.database_oldimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_database_oldoriginalimagedata()) {
    if (!_impl_.database_oldoriginalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldnaturalsize()) {
    if (!_impl_.oldnaturalsize_->IsInitialized()) return false;
  }
  if (_internal_has_database_neworiginalimagedata()) {
    if (!_impl_.database_neworiginalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_newimagedata()) {
    if (!_impl_.newimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldimagedata()) {
    if (!_impl_.oldimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldoriginalimagedata()) {
    if (!_impl_.oldoriginalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_neworiginalimagedata()) {
    if (!_impl_.neworiginalimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldadjustedimagedata()) {
    if (!_impl_.oldadjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldenhancedimagedata()) {
    if (!_impl_.oldenhancedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_adjustedimagedata()) {
    if (!_impl_.adjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_enhancedimagedata()) {
    if (!_impl_.enhancedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_newthumbnailimagedata()) {
    if (!_impl_.newthumbnailimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldthumbnailimagedata()) {
    if (!_impl_.oldthumbnailimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnailadjustedimagedata()) {
    if (!_impl_.thumbnailadjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_oldthumbnailadjustedimagedata()) {
    if (!_impl_.oldthumbnailadjustedimagedata_->IsInitialized()) return false;
  }
  return true;
}

void ImageMediaCommandArchive::InternalSwap(ImageMediaCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageMediaCommandArchive, _impl_.oldthumbnailadjustedimagedata_)
      + sizeof(ImageMediaCommandArchive::_impl_.oldthumbnailadjustedimagedata_)
      - PROTOBUF_FIELD_OFFSET(ImageMediaCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMediaCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[25]);
}

// ===================================================================

class MediaOriginalSizeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaOriginalSizeCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const MediaOriginalSizeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& neworiginalsize(const MediaOriginalSizeCommandArchive* msg);
  static void set_has_neworiginalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Size& oldoriginalsize(const MediaOriginalSizeCommandArchive* msg);
  static void set_has_oldoriginalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_propertyname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::InfoCommandArchive&
MediaOriginalSizeCommandArchive::_Internal::super(const MediaOriginalSizeCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Size&
MediaOriginalSizeCommandArchive::_Internal::neworiginalsize(const MediaOriginalSizeCommandArchive* msg) {
  return *msg->_impl_.neworiginalsize_;
}
const ::TSP::Size&
MediaOriginalSizeCommandArchive::_Internal::oldoriginalsize(const MediaOriginalSizeCommandArchive* msg) {
  return *msg->_impl_.oldoriginalsize_;
}
void MediaOriginalSizeCommandArchive::clear_neworiginalsize() {
  if (_impl_.neworiginalsize_ != nullptr) _impl_.neworiginalsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MediaOriginalSizeCommandArchive::clear_oldoriginalsize() {
  if (_impl_.oldoriginalsize_ != nullptr) _impl_.oldoriginalsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
MediaOriginalSizeCommandArchive::MediaOriginalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaOriginalSizeCommandArchive)
}
MediaOriginalSizeCommandArchive::MediaOriginalSizeCommandArchive(const MediaOriginalSizeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaOriginalSizeCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.propertyname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.neworiginalsize_){nullptr}
    , decltype(_impl_.oldoriginalsize_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.propertyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.propertyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_propertyname()) {
    _this->_impl_.propertyname_.Set(from._internal_propertyname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_neworiginalsize()) {
    _this->_impl_.neworiginalsize_ = new ::TSP::Size(*from._impl_.neworiginalsize_);
  }
  if (from._internal_has_oldoriginalsize()) {
    _this->_impl_.oldoriginalsize_ = new ::TSP::Size(*from._impl_.oldoriginalsize_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.MediaOriginalSizeCommandArchive)
}

inline void MediaOriginalSizeCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.propertyname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.neworiginalsize_){nullptr}
    , decltype(_impl_.oldoriginalsize_){nullptr}
  };
  _impl_.propertyname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.propertyname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaOriginalSizeCommandArchive::~MediaOriginalSizeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaOriginalSizeCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaOriginalSizeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.propertyname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.neworiginalsize_;
  if (this != internal_default_instance()) delete _impl_.oldoriginalsize_;
}

void MediaOriginalSizeCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaOriginalSizeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaOriginalSizeCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.propertyname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.neworiginalsize_ != nullptr);
      _impl_.neworiginalsize_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.oldoriginalsize_ != nullptr);
      _impl_.oldoriginalsize_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaOriginalSizeCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size newOriginalSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_neworiginalsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size oldOriginalSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldoriginalsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string propertyName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_propertyname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSD.MediaOriginalSizeCommandArchive.propertyName");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaOriginalSizeCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaOriginalSizeCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size newOriginalSize = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::neworiginalsize(this),
        _Internal::neworiginalsize(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size oldOriginalSize = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::oldoriginalsize(this),
        _Internal::oldoriginalsize(this).GetCachedSize(), target, stream);
  }

  // required string propertyName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_propertyname().data(), static_cast<int>(this->_internal_propertyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MediaOriginalSizeCommandArchive.propertyName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_propertyname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaOriginalSizeCommandArchive)
  return target;
}

size_t MediaOriginalSizeCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.MediaOriginalSizeCommandArchive)
  size_t total_size = 0;

  if (_internal_has_propertyname()) {
    // required string propertyName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propertyname());
  }

  if (_internal_has_super()) {
    // required .TSD.InfoCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t MediaOriginalSizeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaOriginalSizeCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string propertyName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_propertyname());

    // required .TSD.InfoCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.Size newOriginalSize = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.neworiginalsize_);
    }

    // optional .TSP.Size oldOriginalSize = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldoriginalsize_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaOriginalSizeCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaOriginalSizeCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaOriginalSizeCommandArchive::GetClassData() const { return &_class_data_; }


void MediaOriginalSizeCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaOriginalSizeCommandArchive*>(&to_msg);
  auto& from = static_cast<const MediaOriginalSizeCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaOriginalSizeCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_propertyname(from._internal_propertyname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_neworiginalsize()->::TSP::Size::MergeFrom(
          from._internal_neworiginalsize());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_oldoriginalsize()->::TSP::Size::MergeFrom(
          from._internal_oldoriginalsize());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaOriginalSizeCommandArchive::CopyFrom(const MediaOriginalSizeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaOriginalSizeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaOriginalSizeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_neworiginalsize()) {
    if (!_impl_.neworiginalsize_->IsInitialized()) return false;
  }
  if (_internal_has_oldoriginalsize()) {
    if (!_impl_.oldoriginalsize_->IsInitialized()) return false;
  }
  return true;
}

void MediaOriginalSizeCommandArchive::InternalSwap(MediaOriginalSizeCommandArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.propertyname_, lhs_arena,
      &other->_impl_.propertyname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaOriginalSizeCommandArchive, _impl_.oldoriginalsize_)
      + sizeof(MediaOriginalSizeCommandArchive::_impl_.oldoriginalsize_)
      - PROTOBUF_FIELD_OFFSET(MediaOriginalSizeCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaOriginalSizeCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[26]);
}

// ===================================================================

class MediaInfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaInfoGeometryCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoGeometryCommandArchive& super(const MediaInfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& neworiginalsize(const MediaInfoGeometryCommandArchive* msg);
  static void set_has_neworiginalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& oldoriginalsize(const MediaInfoGeometryCommandArchive* msg);
  static void set_has_oldoriginalsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSD::InfoGeometryCommandArchive&
MediaInfoGeometryCommandArchive::_Internal::super(const MediaInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Size&
MediaInfoGeometryCommandArchive::_Internal::neworiginalsize(const MediaInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.neworiginalsize_;
}
const ::TSP::Size&
MediaInfoGeometryCommandArchive::_Internal::oldoriginalsize(const MediaInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.oldoriginalsize_;
}
void MediaInfoGeometryCommandArchive::clear_neworiginalsize() {
  if (_impl_.neworiginalsize_ != nullptr) _impl_.neworiginalsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MediaInfoGeometryCommandArchive::clear_oldoriginalsize() {
  if (_impl_.oldoriginalsize_ != nullptr) _impl_.oldoriginalsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
MediaInfoGeometryCommandArchive::MediaInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaInfoGeometryCommandArchive)
}
MediaInfoGeometryCommandArchive::MediaInfoGeometryCommandArchive(const MediaInfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaInfoGeometryCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.neworiginalsize_){nullptr}
    , decltype(_impl_.oldoriginalsize_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoGeometryCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_neworiginalsize()) {
    _this->_impl_.neworiginalsize_ = new ::TSP::Size(*from._impl_.neworiginalsize_);
  }
  if (from._internal_has_oldoriginalsize()) {
    _this->_impl_.oldoriginalsize_ = new ::TSP::Size(*from._impl_.oldoriginalsize_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.MediaInfoGeometryCommandArchive)
}

inline void MediaInfoGeometryCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.neworiginalsize_){nullptr}
    , decltype(_impl_.oldoriginalsize_){nullptr}
  };
}

MediaInfoGeometryCommandArchive::~MediaInfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaInfoGeometryCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaInfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.neworiginalsize_;
  if (this != internal_default_instance()) delete _impl_.oldoriginalsize_;
}

void MediaInfoGeometryCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaInfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaInfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.neworiginalsize_ != nullptr);
      _impl_.neworiginalsize_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.oldoriginalsize_ != nullptr);
      _impl_.oldoriginalsize_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaInfoGeometryCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoGeometryCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size newOriginalSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_neworiginalsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size oldOriginalSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldoriginalsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaInfoGeometryCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaInfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoGeometryCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Size newOriginalSize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::neworiginalsize(this),
        _Internal::neworiginalsize(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Size oldOriginalSize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::oldoriginalsize(this),
        _Internal::oldoriginalsize(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaInfoGeometryCommandArchive)
  return target;
}

size_t MediaInfoGeometryCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.MediaInfoGeometryCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.InfoGeometryCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_neworiginalsize()) {
    // required .TSP.Size newOriginalSize = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.neworiginalsize_);
  }

  if (_internal_has_oldoriginalsize()) {
    // required .TSP.Size oldOriginalSize = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldoriginalsize_);
  }

  return total_size;
}
size_t MediaInfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaInfoGeometryCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSD.InfoGeometryCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Size newOriginalSize = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.neworiginalsize_);

    // required .TSP.Size oldOriginalSize = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldoriginalsize_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaInfoGeometryCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaInfoGeometryCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaInfoGeometryCommandArchive::GetClassData() const { return &_class_data_; }


void MediaInfoGeometryCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaInfoGeometryCommandArchive*>(&to_msg);
  auto& from = static_cast<const MediaInfoGeometryCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoGeometryCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_neworiginalsize()->::TSP::Size::MergeFrom(
          from._internal_neworiginalsize());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_oldoriginalsize()->::TSP::Size::MergeFrom(
          from._internal_oldoriginalsize());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaInfoGeometryCommandArchive::CopyFrom(const MediaInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaInfoGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_neworiginalsize()) {
    if (!_impl_.neworiginalsize_->IsInitialized()) return false;
  }
  if (_internal_has_oldoriginalsize()) {
    if (!_impl_.oldoriginalsize_->IsInitialized()) return false;
  }
  return true;
}

void MediaInfoGeometryCommandArchive::InternalSwap(MediaInfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaInfoGeometryCommandArchive, _impl_.oldoriginalsize_)
      + sizeof(MediaInfoGeometryCommandArchive::_impl_.oldoriginalsize_)
      - PROTOBUF_FIELD_OFFSET(MediaInfoGeometryCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaInfoGeometryCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[27]);
}

// ===================================================================

class ImageNaturalSizeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageNaturalSizeCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageNaturalSizeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Size& new_natural_size(const ImageNaturalSizeCommandArchive* msg);
  static void set_has_new_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& old_natural_size(const ImageNaturalSizeCommandArchive* msg);
  static void set_has_old_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageNaturalSizeCommandArchive::_Internal::super(const ImageNaturalSizeCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Size&
ImageNaturalSizeCommandArchive::_Internal::new_natural_size(const ImageNaturalSizeCommandArchive* msg) {
  return *msg->_impl_.new_natural_size_;
}
const ::TSP::Size&
ImageNaturalSizeCommandArchive::_Internal::old_natural_size(const ImageNaturalSizeCommandArchive* msg) {
  return *msg->_impl_.old_natural_size_;
}
void ImageNaturalSizeCommandArchive::clear_new_natural_size() {
  if (_impl_.new_natural_size_ != nullptr) _impl_.new_natural_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ImageNaturalSizeCommandArchive::clear_old_natural_size() {
  if (_impl_.old_natural_size_ != nullptr) _impl_.old_natural_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ImageNaturalSizeCommandArchive::ImageNaturalSizeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageNaturalSizeCommandArchive)
}
ImageNaturalSizeCommandArchive::ImageNaturalSizeCommandArchive(const ImageNaturalSizeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageNaturalSizeCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_natural_size_){nullptr}
    , decltype(_impl_.old_natural_size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_new_natural_size()) {
    _this->_impl_.new_natural_size_ = new ::TSP::Size(*from._impl_.new_natural_size_);
  }
  if (from._internal_has_old_natural_size()) {
    _this->_impl_.old_natural_size_ = new ::TSP::Size(*from._impl_.old_natural_size_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageNaturalSizeCommandArchive)
}

inline void ImageNaturalSizeCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_natural_size_){nullptr}
    , decltype(_impl_.old_natural_size_){nullptr}
  };
}

ImageNaturalSizeCommandArchive::~ImageNaturalSizeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageNaturalSizeCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageNaturalSizeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.new_natural_size_;
  if (this != internal_default_instance()) delete _impl_.old_natural_size_;
}

void ImageNaturalSizeCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageNaturalSizeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageNaturalSizeCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_natural_size_ != nullptr);
      _impl_.new_natural_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_natural_size_ != nullptr);
      _impl_.old_natural_size_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageNaturalSizeCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size new_natural_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_natural_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size old_natural_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_natural_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageNaturalSizeCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageNaturalSizeCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size new_natural_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_natural_size(this),
        _Internal::new_natural_size(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size old_natural_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_natural_size(this),
        _Internal::old_natural_size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageNaturalSizeCommandArchive)
  return target;
}

size_t ImageNaturalSizeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageNaturalSizeCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Size new_natural_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_natural_size_);
    }

    // optional .TSP.Size old_natural_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_natural_size_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageNaturalSizeCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageNaturalSizeCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageNaturalSizeCommandArchive::GetClassData() const { return &_class_data_; }


void ImageNaturalSizeCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageNaturalSizeCommandArchive*>(&to_msg);
  auto& from = static_cast<const ImageNaturalSizeCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageNaturalSizeCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_natural_size()->::TSP::Size::MergeFrom(
          from._internal_new_natural_size());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_natural_size()->::TSP::Size::MergeFrom(
          from._internal_old_natural_size());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageNaturalSizeCommandArchive::CopyFrom(const ImageNaturalSizeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageNaturalSizeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageNaturalSizeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_new_natural_size()) {
    if (!_impl_.new_natural_size_->IsInitialized()) return false;
  }
  if (_internal_has_old_natural_size()) {
    if (!_impl_.old_natural_size_->IsInitialized()) return false;
  }
  return true;
}

void ImageNaturalSizeCommandArchive::InternalSwap(ImageNaturalSizeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageNaturalSizeCommandArchive, _impl_.old_natural_size_)
      + sizeof(ImageNaturalSizeCommandArchive::_impl_.old_natural_size_)
      - PROTOBUF_FIELD_OFFSET(ImageNaturalSizeCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageNaturalSizeCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[28]);
}

// ===================================================================

class ImageMaskCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageMaskCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageMaskCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& newmaskinfo(const ImageMaskCommandArchive* msg);
  static void set_has_newmaskinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& oldmaskinfo(const ImageMaskCommandArchive* msg);
  static void set_has_oldmaskinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_background_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_background_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageMaskCommandArchive::_Internal::super(const ImageMaskCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ImageMaskCommandArchive::_Internal::newmaskinfo(const ImageMaskCommandArchive* msg) {
  return *msg->_impl_.newmaskinfo_;
}
const ::TSP::Reference&
ImageMaskCommandArchive::_Internal::oldmaskinfo(const ImageMaskCommandArchive* msg) {
  return *msg->_impl_.oldmaskinfo_;
}
void ImageMaskCommandArchive::clear_newmaskinfo() {
  if (_impl_.newmaskinfo_ != nullptr) _impl_.newmaskinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ImageMaskCommandArchive::clear_oldmaskinfo() {
  if (_impl_.oldmaskinfo_ != nullptr) _impl_.oldmaskinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ImageMaskCommandArchive::ImageMaskCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageMaskCommandArchive)
}
ImageMaskCommandArchive::ImageMaskCommandArchive(const ImageMaskCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageMaskCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.newmaskinfo_){nullptr}
    , decltype(_impl_.oldmaskinfo_){nullptr}
    , decltype(_impl_.background_removed_){}
    , decltype(_impl_.old_background_removed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_newmaskinfo()) {
    _this->_impl_.newmaskinfo_ = new ::TSP::Reference(*from._impl_.newmaskinfo_);
  }
  if (from._internal_has_oldmaskinfo()) {
    _this->_impl_.oldmaskinfo_ = new ::TSP::Reference(*from._impl_.oldmaskinfo_);
  }
  ::memcpy(&_impl_.background_removed_, &from._impl_.background_removed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.old_background_removed_) -
    reinterpret_cast<char*>(&_impl_.background_removed_)) + sizeof(_impl_.old_background_removed_));
  // @@protoc_insertion_point(copy_constructor:TSD.ImageMaskCommandArchive)
}

inline void ImageMaskCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.newmaskinfo_){nullptr}
    , decltype(_impl_.oldmaskinfo_){nullptr}
    , decltype(_impl_.background_removed_){false}
    , decltype(_impl_.old_background_removed_){false}
  };
}

ImageMaskCommandArchive::~ImageMaskCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageMaskCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageMaskCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.newmaskinfo_;
  if (this != internal_default_instance()) delete _impl_.oldmaskinfo_;
}

void ImageMaskCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageMaskCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageMaskCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.newmaskinfo_ != nullptr);
      _impl_.newmaskinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.oldmaskinfo_ != nullptr);
      _impl_.oldmaskinfo_->Clear();
    }
  }
  ::memset(&_impl_.background_removed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.old_background_removed_) -
      reinterpret_cast<char*>(&_impl_.background_removed_)) + sizeof(_impl_.old_background_removed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageMaskCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference newMaskInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newmaskinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference oldMaskInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldmaskinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool background_removed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_background_removed(&has_bits);
          _impl_.background_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool old_background_removed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_old_background_removed(&has_bits);
          _impl_.old_background_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageMaskCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageMaskCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference newMaskInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::newmaskinfo(this),
        _Internal::newmaskinfo(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference oldMaskInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::oldmaskinfo(this),
        _Internal::oldmaskinfo(this).GetCachedSize(), target, stream);
  }

  // optional bool background_removed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_background_removed(), target);
  }

  // optional bool old_background_removed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_old_background_removed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageMaskCommandArchive)
  return target;
}

size_t ImageMaskCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageMaskCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.Reference newMaskInfo = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newmaskinfo_);
    }

    // optional .TSP.Reference oldMaskInfo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldmaskinfo_);
    }

    // optional bool background_removed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool old_background_removed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageMaskCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageMaskCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageMaskCommandArchive::GetClassData() const { return &_class_data_; }


void ImageMaskCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageMaskCommandArchive*>(&to_msg);
  auto& from = static_cast<const ImageMaskCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageMaskCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_newmaskinfo()->::TSP::Reference::MergeFrom(
          from._internal_newmaskinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_oldmaskinfo()->::TSP::Reference::MergeFrom(
          from._internal_oldmaskinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.background_removed_ = from._impl_.background_removed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.old_background_removed_ = from._impl_.old_background_removed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageMaskCommandArchive::CopyFrom(const ImageMaskCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageMaskCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMaskCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_newmaskinfo()) {
    if (!_impl_.newmaskinfo_->IsInitialized()) return false;
  }
  if (_internal_has_oldmaskinfo()) {
    if (!_impl_.oldmaskinfo_->IsInitialized()) return false;
  }
  return true;
}

void ImageMaskCommandArchive::InternalSwap(ImageMaskCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageMaskCommandArchive, _impl_.old_background_removed_)
      + sizeof(ImageMaskCommandArchive::_impl_.old_background_removed_)
      - PROTOBUF_FIELD_OFFSET(ImageMaskCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMaskCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[29]);
}

// ===================================================================

class ImageAdjustmentsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageAdjustmentsCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::ImageAdjustmentsArchive& old_image_adjustments(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_old_image_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::ImageAdjustmentsArchive& new_image_adjustments(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_new_image_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& adjustedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_adjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::DataReference& replacedadjustedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_replacedadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::DataReference& enhancedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_enhancedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::DataReference& replacedenhancedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_replacedenhancedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::DataReference& thumbnailadjustedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_thumbnailadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::DataReference& replacedthumbnailadjustedimagedata(const ImageAdjustmentsCommandArchive* msg);
  static void set_has_replacedthumbnailadjustedimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageAdjustmentsCommandArchive::_Internal::super(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageAdjustmentsCommandArchive::_Internal::old_image_adjustments(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->_impl_.old_image_adjustments_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageAdjustmentsCommandArchive::_Internal::new_image_adjustments(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->_impl_.new_image_adjustments_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::adjustedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->_impl_.adjustedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::replacedadjustedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->_impl_.replacedadjustedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::enhancedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->_impl_.enhancedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::replacedenhancedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->_impl_.replacedenhancedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::thumbnailadjustedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->_impl_.thumbnailadjustedimagedata_;
}
const ::TSP::DataReference&
ImageAdjustmentsCommandArchive::_Internal::replacedthumbnailadjustedimagedata(const ImageAdjustmentsCommandArchive* msg) {
  return *msg->_impl_.replacedthumbnailadjustedimagedata_;
}
void ImageAdjustmentsCommandArchive::clear_old_image_adjustments() {
  if (_impl_.old_image_adjustments_ != nullptr) _impl_.old_image_adjustments_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ImageAdjustmentsCommandArchive::clear_new_image_adjustments() {
  if (_impl_.new_image_adjustments_ != nullptr) _impl_.new_image_adjustments_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ImageAdjustmentsCommandArchive::clear_adjustedimagedata() {
  if (_impl_.adjustedimagedata_ != nullptr) _impl_.adjustedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ImageAdjustmentsCommandArchive::clear_replacedadjustedimagedata() {
  if (_impl_.replacedadjustedimagedata_ != nullptr) _impl_.replacedadjustedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ImageAdjustmentsCommandArchive::clear_enhancedimagedata() {
  if (_impl_.enhancedimagedata_ != nullptr) _impl_.enhancedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ImageAdjustmentsCommandArchive::clear_replacedenhancedimagedata() {
  if (_impl_.replacedenhancedimagedata_ != nullptr) _impl_.replacedenhancedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ImageAdjustmentsCommandArchive::clear_thumbnailadjustedimagedata() {
  if (_impl_.thumbnailadjustedimagedata_ != nullptr) _impl_.thumbnailadjustedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ImageAdjustmentsCommandArchive::clear_replacedthumbnailadjustedimagedata() {
  if (_impl_.replacedthumbnailadjustedimagedata_ != nullptr) _impl_.replacedthumbnailadjustedimagedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
ImageAdjustmentsCommandArchive::ImageAdjustmentsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageAdjustmentsCommandArchive)
}
ImageAdjustmentsCommandArchive::ImageAdjustmentsCommandArchive(const ImageAdjustmentsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageAdjustmentsCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_image_adjustments_){nullptr}
    , decltype(_impl_.new_image_adjustments_){nullptr}
    , decltype(_impl_.adjustedimagedata_){nullptr}
    , decltype(_impl_.replacedadjustedimagedata_){nullptr}
    , decltype(_impl_.enhancedimagedata_){nullptr}
    , decltype(_impl_.replacedenhancedimagedata_){nullptr}
    , decltype(_impl_.thumbnailadjustedimagedata_){nullptr}
    , decltype(_impl_.replacedthumbnailadjustedimagedata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_image_adjustments()) {
    _this->_impl_.old_image_adjustments_ = new ::TSD::ImageAdjustmentsArchive(*from._impl_.old_image_adjustments_);
  }
  if (from._internal_has_new_image_adjustments()) {
    _this->_impl_.new_image_adjustments_ = new ::TSD::ImageAdjustmentsArchive(*from._impl_.new_image_adjustments_);
  }
  if (from._internal_has_adjustedimagedata()) {
    _this->_impl_.adjustedimagedata_ = new ::TSP::DataReference(*from._impl_.adjustedimagedata_);
  }
  if (from._internal_has_replacedadjustedimagedata()) {
    _this->_impl_.replacedadjustedimagedata_ = new ::TSP::DataReference(*from._impl_.replacedadjustedimagedata_);
  }
  if (from._internal_has_enhancedimagedata()) {
    _this->_impl_.enhancedimagedata_ = new ::TSP::DataReference(*from._impl_.enhancedimagedata_);
  }
  if (from._internal_has_replacedenhancedimagedata()) {
    _this->_impl_.replacedenhancedimagedata_ = new ::TSP::DataReference(*from._impl_.replacedenhancedimagedata_);
  }
  if (from._internal_has_thumbnailadjustedimagedata()) {
    _this->_impl_.thumbnailadjustedimagedata_ = new ::TSP::DataReference(*from._impl_.thumbnailadjustedimagedata_);
  }
  if (from._internal_has_replacedthumbnailadjustedimagedata()) {
    _this->_impl_.replacedthumbnailadjustedimagedata_ = new ::TSP::DataReference(*from._impl_.replacedthumbnailadjustedimagedata_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageAdjustmentsCommandArchive)
}

inline void ImageAdjustmentsCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_image_adjustments_){nullptr}
    , decltype(_impl_.new_image_adjustments_){nullptr}
    , decltype(_impl_.adjustedimagedata_){nullptr}
    , decltype(_impl_.replacedadjustedimagedata_){nullptr}
    , decltype(_impl_.enhancedimagedata_){nullptr}
    , decltype(_impl_.replacedenhancedimagedata_){nullptr}
    , decltype(_impl_.thumbnailadjustedimagedata_){nullptr}
    , decltype(_impl_.replacedthumbnailadjustedimagedata_){nullptr}
  };
}

ImageAdjustmentsCommandArchive::~ImageAdjustmentsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageAdjustmentsCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageAdjustmentsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_image_adjustments_;
  if (this != internal_default_instance()) delete _impl_.new_image_adjustments_;
  if (this != internal_default_instance()) delete _impl_.adjustedimagedata_;
  if (this != internal_default_instance()) delete _impl_.replacedadjustedimagedata_;
  if (this != internal_default_instance()) delete _impl_.enhancedimagedata_;
  if (this != internal_default_instance()) delete _impl_.replacedenhancedimagedata_;
  if (this != internal_default_instance()) delete _impl_.thumbnailadjustedimagedata_;
  if (this != internal_default_instance()) delete _impl_.replacedthumbnailadjustedimagedata_;
}

void ImageAdjustmentsCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageAdjustmentsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageAdjustmentsCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_image_adjustments_ != nullptr);
      _impl_.old_image_adjustments_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_image_adjustments_ != nullptr);
      _impl_.new_image_adjustments_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.adjustedimagedata_ != nullptr);
      _impl_.adjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.replacedadjustedimagedata_ != nullptr);
      _impl_.replacedadjustedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.enhancedimagedata_ != nullptr);
      _impl_.enhancedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.replacedenhancedimagedata_ != nullptr);
      _impl_.replacedenhancedimagedata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.thumbnailadjustedimagedata_ != nullptr);
      _impl_.thumbnailadjustedimagedata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.replacedthumbnailadjustedimagedata_ != nullptr);
    _impl_.replacedthumbnailadjustedimagedata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageAdjustmentsCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_adjustments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_image_adjustments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference adjustedImageData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjustedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference replacedAdjustedImageData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacedadjustedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference enhancedImageData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_enhancedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference replacedEnhancedImageData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacedenhancedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnailAdjustedImageData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnailadjustedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference replacedThumbnailAdjustedImageData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacedthumbnailadjustedimagedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageAdjustmentsCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageAdjustmentsCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_image_adjustments(this),
        _Internal::old_image_adjustments(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_image_adjustments(this),
        _Internal::new_image_adjustments(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference adjustedImageData = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::adjustedimagedata(this),
        _Internal::adjustedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference replacedAdjustedImageData = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::replacedadjustedimagedata(this),
        _Internal::replacedadjustedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference enhancedImageData = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::enhancedimagedata(this),
        _Internal::enhancedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference replacedEnhancedImageData = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::replacedenhancedimagedata(this),
        _Internal::replacedenhancedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference thumbnailAdjustedImageData = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::thumbnailadjustedimagedata(this),
        _Internal::thumbnailadjustedimagedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference replacedThumbnailAdjustedImageData = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::replacedthumbnailadjustedimagedata(this),
        _Internal::replacedthumbnailadjustedimagedata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageAdjustmentsCommandArchive)
  return target;
}

size_t ImageAdjustmentsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageAdjustmentsCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_image_adjustments_);
    }

    // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_image_adjustments_);
    }

    // optional .TSP.DataReference adjustedImageData = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adjustedimagedata_);
    }

    // optional .TSP.DataReference replacedAdjustedImageData = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.replacedadjustedimagedata_);
    }

    // optional .TSP.DataReference enhancedImageData = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.enhancedimagedata_);
    }

    // optional .TSP.DataReference replacedEnhancedImageData = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.replacedenhancedimagedata_);
    }

    // optional .TSP.DataReference thumbnailAdjustedImageData = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.thumbnailadjustedimagedata_);
    }

  }
  // optional .TSP.DataReference replacedThumbnailAdjustedImageData = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replacedthumbnailadjustedimagedata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageAdjustmentsCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageAdjustmentsCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageAdjustmentsCommandArchive::GetClassData() const { return &_class_data_; }


void ImageAdjustmentsCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageAdjustmentsCommandArchive*>(&to_msg);
  auto& from = static_cast<const ImageAdjustmentsCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageAdjustmentsCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(
          from._internal_old_image_adjustments());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(
          from._internal_new_image_adjustments());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_adjustedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_adjustedimagedata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_replacedadjustedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_replacedadjustedimagedata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_enhancedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_enhancedimagedata());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_replacedenhancedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_replacedenhancedimagedata());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_thumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(
          from._internal_thumbnailadjustedimagedata());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_mutable_replacedthumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(
        from._internal_replacedthumbnailadjustedimagedata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageAdjustmentsCommandArchive::CopyFrom(const ImageAdjustmentsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageAdjustmentsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageAdjustmentsCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_adjustedimagedata()) {
    if (!_impl_.adjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_replacedadjustedimagedata()) {
    if (!_impl_.replacedadjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_enhancedimagedata()) {
    if (!_impl_.enhancedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_replacedenhancedimagedata()) {
    if (!_impl_.replacedenhancedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnailadjustedimagedata()) {
    if (!_impl_.thumbnailadjustedimagedata_->IsInitialized()) return false;
  }
  if (_internal_has_replacedthumbnailadjustedimagedata()) {
    if (!_impl_.replacedthumbnailadjustedimagedata_->IsInitialized()) return false;
  }
  return true;
}

void ImageAdjustmentsCommandArchive::InternalSwap(ImageAdjustmentsCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageAdjustmentsCommandArchive, _impl_.replacedthumbnailadjustedimagedata_)
      + sizeof(ImageAdjustmentsCommandArchive::_impl_.replacedthumbnailadjustedimagedata_)
      - PROTOBUF_FIELD_OFFSET(ImageAdjustmentsCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageAdjustmentsCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[30]);
}

// ===================================================================

class MediaFlagsCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaFlagsCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const MediaFlagsCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_media_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_was_media_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_old_is_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_property_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::InfoCommandArchive&
MediaFlagsCommandArchive::_Internal::super(const MediaFlagsCommandArchive* msg) {
  return *msg->_impl_.super_;
}
MediaFlagsCommandArchive::MediaFlagsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.MediaFlagsCommandArchive)
}
MediaFlagsCommandArchive::MediaFlagsCommandArchive(const MediaFlagsCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MediaFlagsCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.was_media_replaced_){}
    , decltype(_impl_.is_placeholder_){}
    , decltype(_impl_.old_was_media_replaced_){}
    , decltype(_impl_.old_is_placeholder_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property_name()) {
    _this->_impl_.property_name_.Set(from._internal_property_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.was_media_replaced_, &from._impl_.was_media_replaced_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.old_is_placeholder_) -
    reinterpret_cast<char*>(&_impl_.was_media_replaced_)) + sizeof(_impl_.old_is_placeholder_));
  // @@protoc_insertion_point(copy_constructor:TSD.MediaFlagsCommandArchive)
}

inline void MediaFlagsCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.was_media_replaced_){false}
    , decltype(_impl_.is_placeholder_){false}
    , decltype(_impl_.old_was_media_replaced_){false}
    , decltype(_impl_.old_is_placeholder_){false}
  };
  _impl_.property_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MediaFlagsCommandArchive::~MediaFlagsCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.MediaFlagsCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MediaFlagsCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void MediaFlagsCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MediaFlagsCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.MediaFlagsCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  ::memset(&_impl_.was_media_replaced_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.old_is_placeholder_) -
      reinterpret_cast<char*>(&_impl_.was_media_replaced_)) + sizeof(_impl_.old_is_placeholder_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaFlagsCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string property_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_property_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSD.MediaFlagsCommandArchive.property_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool was_media_replaced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_was_media_replaced(&has_bits);
          _impl_.was_media_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_placeholder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_placeholder(&has_bits);
          _impl_.is_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool old_was_media_replaced = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_old_was_media_replaced(&has_bits);
          _impl_.old_was_media_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool old_is_placeholder = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_old_is_placeholder(&has_bits);
          _impl_.old_is_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MediaFlagsCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.MediaFlagsCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required string property_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.MediaFlagsCommandArchive.property_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_property_name(), target);
  }

  // optional bool was_media_replaced = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_was_media_replaced(), target);
  }

  // optional bool is_placeholder = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_placeholder(), target);
  }

  // optional bool old_was_media_replaced = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_old_was_media_replaced(), target);
  }

  // optional bool old_is_placeholder = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_old_is_placeholder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.MediaFlagsCommandArchive)
  return target;
}

size_t MediaFlagsCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.MediaFlagsCommandArchive)
  size_t total_size = 0;

  if (_internal_has_property_name()) {
    // required string property_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property_name());
  }

  if (_internal_has_super()) {
    // required .TSD.InfoCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t MediaFlagsCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.MediaFlagsCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string property_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property_name());

    // required .TSD.InfoCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional bool was_media_replaced = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_placeholder = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool old_was_media_replaced = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool old_is_placeholder = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaFlagsCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MediaFlagsCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaFlagsCommandArchive::GetClassData() const { return &_class_data_; }


void MediaFlagsCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MediaFlagsCommandArchive*>(&to_msg);
  auto& from = static_cast<const MediaFlagsCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.MediaFlagsCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property_name(from._internal_property_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.was_media_replaced_ = from._impl_.was_media_replaced_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_placeholder_ = from._impl_.is_placeholder_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.old_was_media_replaced_ = from._impl_.old_was_media_replaced_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.old_is_placeholder_ = from._impl_.old_is_placeholder_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaFlagsCommandArchive::CopyFrom(const MediaFlagsCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.MediaFlagsCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaFlagsCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void MediaFlagsCommandArchive::InternalSwap(MediaFlagsCommandArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_name_, lhs_arena,
      &other->_impl_.property_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaFlagsCommandArchive, _impl_.old_is_placeholder_)
      + sizeof(MediaFlagsCommandArchive::_impl_.old_is_placeholder_)
      - PROTOBUF_FIELD_OFFSET(MediaFlagsCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaFlagsCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[31]);
}

// ===================================================================

class DrawablesCommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawablesCommandGroupArchive>()._impl_._has_bits_);
  static const ::TSK::CommandGroupArchive& super(const DrawablesCommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::CanvasSelectionArchive& obsolete_selection(const DrawablesCommandGroupArchive* msg);
  static void set_has_obsolete_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& modelforselection(const DrawablesCommandGroupArchive* msg);
  static void set_has_modelforselection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fordrag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& archivedselection(const DrawablesCommandGroupArchive* msg);
  static void set_has_archivedselection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandGroupArchive&
DrawablesCommandGroupArchive::_Internal::super(const DrawablesCommandGroupArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::CanvasSelectionArchive&
DrawablesCommandGroupArchive::_Internal::obsolete_selection(const DrawablesCommandGroupArchive* msg) {
  return *msg->_impl_.obsolete_selection_;
}
const ::TSP::Reference&
DrawablesCommandGroupArchive::_Internal::modelforselection(const DrawablesCommandGroupArchive* msg) {
  return *msg->_impl_.modelforselection_;
}
const ::TSP::Reference&
DrawablesCommandGroupArchive::_Internal::archivedselection(const DrawablesCommandGroupArchive* msg) {
  return *msg->_impl_.archivedselection_;
}
void DrawablesCommandGroupArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DrawablesCommandGroupArchive::clear_obsolete_selection() {
  if (_impl_.obsolete_selection_ != nullptr) _impl_.obsolete_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DrawablesCommandGroupArchive::clear_modelforselection() {
  if (_impl_.modelforselection_ != nullptr) _impl_.modelforselection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DrawablesCommandGroupArchive::clear_archivedselection() {
  if (_impl_.archivedselection_ != nullptr) _impl_.archivedselection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
DrawablesCommandGroupArchive::DrawablesCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawablesCommandGroupArchive)
}
DrawablesCommandGroupArchive::DrawablesCommandGroupArchive(const DrawablesCommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawablesCommandGroupArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.obsolete_selection_){nullptr}
    , decltype(_impl_.modelforselection_){nullptr}
    , decltype(_impl_.archivedselection_){nullptr}
    , decltype(_impl_.fordrag_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandGroupArchive(*from._impl_.super_);
  }
  if (from._internal_has_obsolete_selection()) {
    _this->_impl_.obsolete_selection_ = new ::TSD::CanvasSelectionArchive(*from._impl_.obsolete_selection_);
  }
  if (from._internal_has_modelforselection()) {
    _this->_impl_.modelforselection_ = new ::TSP::Reference(*from._impl_.modelforselection_);
  }
  if (from._internal_has_archivedselection()) {
    _this->_impl_.archivedselection_ = new ::TSP::Reference(*from._impl_.archivedselection_);
  }
  ::memcpy(&_impl_.fordrag_, &from._impl_.fordrag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.fordrag_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawablesCommandGroupArchive)
}

inline void DrawablesCommandGroupArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.obsolete_selection_){nullptr}
    , decltype(_impl_.modelforselection_){nullptr}
    , decltype(_impl_.archivedselection_){nullptr}
    , decltype(_impl_.fordrag_){false}
    , decltype(_impl_.type_){1}
  };
}

DrawablesCommandGroupArchive::~DrawablesCommandGroupArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawablesCommandGroupArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawablesCommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.obsolete_selection_;
  if (this != internal_default_instance()) delete _impl_.modelforselection_;
  if (this != internal_default_instance()) delete _impl_.archivedselection_;
}

void DrawablesCommandGroupArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawablesCommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawablesCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.obsolete_selection_ != nullptr);
      _impl_.obsolete_selection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.modelforselection_ != nullptr);
      _impl_.modelforselection_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.archivedselection_ != nullptr);
      _impl_.archivedselection_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    _impl_.fordrag_ = false;
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawablesCommandGroupArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obsolete_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference modelforselection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_modelforselection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(val))) {
            _internal_set_type(static_cast<::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool forDrag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_fordrag(&has_bits);
          _impl_.fordrag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference archivedselection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_archivedselection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawablesCommandGroupArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawablesCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandGroupArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::obsolete_selection(this),
        _Internal::obsolete_selection(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference modelforselection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::modelforselection(this),
        _Internal::modelforselection(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional bool forDrag = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_fordrag(), target);
  }

  // optional .TSP.Reference archivedselection = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::archivedselection(this),
        _Internal::archivedselection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawablesCommandGroupArchive)
  return target;
}

size_t DrawablesCommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawablesCommandGroupArchive)
  size_t total_size = 0;

  // required .TSK.CommandGroupArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obsolete_selection_);
    }

    // optional .TSP.Reference modelforselection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.modelforselection_);
    }

    // optional .TSP.Reference archivedselection = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.archivedselection_);
    }

    // optional bool forDrag = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawablesCommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawablesCommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawablesCommandGroupArchive::GetClassData() const { return &_class_data_; }


void DrawablesCommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawablesCommandGroupArchive*>(&to_msg);
  auto& from = static_cast<const DrawablesCommandGroupArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawablesCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandGroupArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_obsolete_selection()->::TSD::CanvasSelectionArchive::MergeFrom(
          from._internal_obsolete_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_modelforselection()->::TSP::Reference::MergeFrom(
          from._internal_modelforselection());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_archivedselection()->::TSP::Reference::MergeFrom(
          from._internal_archivedselection());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fordrag_ = from._impl_.fordrag_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawablesCommandGroupArchive::CopyFrom(const DrawablesCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawablesCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablesCommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_obsolete_selection()) {
    if (!_impl_.obsolete_selection_->IsInitialized()) return false;
  }
  if (_internal_has_modelforselection()) {
    if (!_impl_.modelforselection_->IsInitialized()) return false;
  }
  if (_internal_has_archivedselection()) {
    if (!_impl_.archivedselection_->IsInitialized()) return false;
  }
  return true;
}

void DrawablesCommandGroupArchive::InternalSwap(DrawablesCommandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawablesCommandGroupArchive, _impl_.fordrag_)
      + sizeof(DrawablesCommandGroupArchive::_impl_.fordrag_)
      - PROTOBUF_FIELD_OFFSET(DrawablesCommandGroupArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawablesCommandGroupArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[32]);
}

// ===================================================================

class ExteriorTextWrapCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExteriorTextWrapCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ExteriorTextWrapCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::ExteriorTextWrapArchive& old_exterior_text_wrap(const ExteriorTextWrapCommandArchive* msg);
  static void set_has_old_exterior_text_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_alpha_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_html_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ExteriorTextWrapCommandArchive::_Internal::super(const ExteriorTextWrapCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::ExteriorTextWrapArchive&
ExteriorTextWrapCommandArchive::_Internal::old_exterior_text_wrap(const ExteriorTextWrapCommandArchive* msg) {
  return *msg->_impl_.old_exterior_text_wrap_;
}
void ExteriorTextWrapCommandArchive::clear_old_exterior_text_wrap() {
  if (_impl_.old_exterior_text_wrap_ != nullptr) _impl_.old_exterior_text_wrap_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ExteriorTextWrapCommandArchive::ExteriorTextWrapCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ExteriorTextWrapCommandArchive)
}
ExteriorTextWrapCommandArchive::ExteriorTextWrapCommandArchive(const ExteriorTextWrapCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExteriorTextWrapCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_exterior_text_wrap_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.fit_type_){}
    , decltype(_impl_.margin_){}
    , decltype(_impl_.alpha_threshold_){}
    , decltype(_impl_.is_html_wrap_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_exterior_text_wrap()) {
    _this->_impl_.old_exterior_text_wrap_ = new ::TSD::ExteriorTextWrapArchive(*from._impl_.old_exterior_text_wrap_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_html_wrap_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_html_wrap_));
  // @@protoc_insertion_point(copy_constructor:TSD.ExteriorTextWrapCommandArchive)
}

inline void ExteriorTextWrapCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_exterior_text_wrap_){nullptr}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.direction_){0u}
    , decltype(_impl_.fit_type_){0u}
    , decltype(_impl_.margin_){0}
    , decltype(_impl_.alpha_threshold_){0}
    , decltype(_impl_.is_html_wrap_){false}
  };
}

ExteriorTextWrapCommandArchive::~ExteriorTextWrapCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ExteriorTextWrapCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExteriorTextWrapCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_exterior_text_wrap_;
}

void ExteriorTextWrapCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExteriorTextWrapCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ExteriorTextWrapCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_exterior_text_wrap_ != nullptr);
      _impl_.old_exterior_text_wrap_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_html_wrap_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_html_wrap_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExteriorTextWrapCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ExteriorTextWrapArchive old_exterior_text_wrap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_exterior_text_wrap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_direction(&has_bits);
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fit_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_fit_type(&has_bits);
          _impl_.fit_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float margin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_margin(&has_bits);
          _impl_.margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float alpha_threshold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_alpha_threshold(&has_bits);
          _impl_.alpha_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_html_wrap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_html_wrap(&has_bits);
          _impl_.is_html_wrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExteriorTextWrapCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ExteriorTextWrapCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ExteriorTextWrapArchive old_exterior_text_wrap = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_exterior_text_wrap(this),
        _Internal::old_exterior_text_wrap(this).GetCachedSize(), target, stream);
  }

  // optional uint32 type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // optional uint32 direction = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_direction(), target);
  }

  // optional uint32 fit_type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fit_type(), target);
  }

  // optional float margin = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_margin(), target);
  }

  // optional float alpha_threshold = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_alpha_threshold(), target);
  }

  // optional bool is_html_wrap = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_html_wrap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ExteriorTextWrapCommandArchive)
  return target;
}

size_t ExteriorTextWrapCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ExteriorTextWrapCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.ExteriorTextWrapArchive old_exterior_text_wrap = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_exterior_text_wrap_);
    }

    // optional uint32 type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint32 direction = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_direction());
    }

    // optional uint32 fit_type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fit_type());
    }

    // optional float margin = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float alpha_threshold = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool is_html_wrap = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExteriorTextWrapCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExteriorTextWrapCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExteriorTextWrapCommandArchive::GetClassData() const { return &_class_data_; }


void ExteriorTextWrapCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExteriorTextWrapCommandArchive*>(&to_msg);
  auto& from = static_cast<const ExteriorTextWrapCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ExteriorTextWrapCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_exterior_text_wrap()->::TSD::ExteriorTextWrapArchive::MergeFrom(
          from._internal_old_exterior_text_wrap());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fit_type_ = from._impl_.fit_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.margin_ = from._impl_.margin_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.alpha_threshold_ = from._impl_.alpha_threshold_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_html_wrap_ = from._impl_.is_html_wrap_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExteriorTextWrapCommandArchive::CopyFrom(const ExteriorTextWrapCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ExteriorTextWrapCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExteriorTextWrapCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ExteriorTextWrapCommandArchive::InternalSwap(ExteriorTextWrapCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExteriorTextWrapCommandArchive, _impl_.is_html_wrap_)
      + sizeof(ExteriorTextWrapCommandArchive::_impl_.is_html_wrap_)
      - PROTOBUF_FIELD_OFFSET(ExteriorTextWrapCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExteriorTextWrapCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[33]);
}

// ===================================================================

class DrawableHyperlinkCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableHyperlinkCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableHyperlinkCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_oldhyperlink_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newhyperlink_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableHyperlinkCommandArchive::_Internal::super(const DrawableHyperlinkCommandArchive* msg) {
  return *msg->_impl_.super_;
}
DrawableHyperlinkCommandArchive::DrawableHyperlinkCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableHyperlinkCommandArchive)
}
DrawableHyperlinkCommandArchive::DrawableHyperlinkCommandArchive(const DrawableHyperlinkCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawableHyperlinkCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldhyperlink_url_){}
    , decltype(_impl_.newhyperlink_url_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.oldhyperlink_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldhyperlink_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oldhyperlink_url()) {
    _this->_impl_.oldhyperlink_url_.Set(from._internal_oldhyperlink_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newhyperlink_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newhyperlink_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_newhyperlink_url()) {
    _this->_impl_.newhyperlink_url_.Set(from._internal_newhyperlink_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableHyperlinkCommandArchive)
}

inline void DrawableHyperlinkCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.oldhyperlink_url_){}
    , decltype(_impl_.newhyperlink_url_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.oldhyperlink_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldhyperlink_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newhyperlink_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newhyperlink_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DrawableHyperlinkCommandArchive::~DrawableHyperlinkCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableHyperlinkCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawableHyperlinkCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.oldhyperlink_url_.Destroy();
  _impl_.newhyperlink_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void DrawableHyperlinkCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawableHyperlinkCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableHyperlinkCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.oldhyperlink_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.newhyperlink_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableHyperlinkCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string oldhyperlink_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_oldhyperlink_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string newhyperlink_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_newhyperlink_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSD.DrawableHyperlinkCommandArchive.newhyperlink_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawableHyperlinkCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableHyperlinkCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string oldhyperlink_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldhyperlink_url().data(), static_cast<int>(this->_internal_oldhyperlink_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableHyperlinkCommandArchive.oldhyperlink_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oldhyperlink_url(), target);
  }

  // optional string newhyperlink_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newhyperlink_url().data(), static_cast<int>(this->_internal_newhyperlink_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableHyperlinkCommandArchive.newhyperlink_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_newhyperlink_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableHyperlinkCommandArchive)
  return target;
}

size_t DrawableHyperlinkCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableHyperlinkCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string oldhyperlink_url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oldhyperlink_url());
    }

    // optional string newhyperlink_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_newhyperlink_url());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawableHyperlinkCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawableHyperlinkCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawableHyperlinkCommandArchive::GetClassData() const { return &_class_data_; }


void DrawableHyperlinkCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawableHyperlinkCommandArchive*>(&to_msg);
  auto& from = static_cast<const DrawableHyperlinkCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableHyperlinkCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_oldhyperlink_url(from._internal_oldhyperlink_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_newhyperlink_url(from._internal_newhyperlink_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawableHyperlinkCommandArchive::CopyFrom(const DrawableHyperlinkCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableHyperlinkCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableHyperlinkCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void DrawableHyperlinkCommandArchive::InternalSwap(DrawableHyperlinkCommandArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldhyperlink_url_, lhs_arena,
      &other->_impl_.oldhyperlink_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newhyperlink_url_, lhs_arena,
      &other->_impl_.newhyperlink_url_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableHyperlinkCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[34]);
}

// ===================================================================

class CommentInvalidatingCommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentInvalidatingCommandSelectionBehaviorArchive>()._impl_._has_bits_);
  static const ::TSK::CommandSelectionBehaviorArchive& super(const CommentInvalidatingCommandSelectionBehaviorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& annotation_displaying_command(const CommentInvalidatingCommandSelectionBehaviorArchive* msg);
  static void set_has_annotation_displaying_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_begin_editing_on_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_begin_editing_on_redo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_should_invalidate_on_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_should_invalidate_on_redo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandSelectionBehaviorArchive&
CommentInvalidatingCommandSelectionBehaviorArchive::_Internal::super(const CommentInvalidatingCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommentInvalidatingCommandSelectionBehaviorArchive::_Internal::annotation_displaying_command(const CommentInvalidatingCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.annotation_displaying_command_;
}
void CommentInvalidatingCommandSelectionBehaviorArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommentInvalidatingCommandSelectionBehaviorArchive::clear_annotation_displaying_command() {
  if (_impl_.annotation_displaying_command_ != nullptr) _impl_.annotation_displaying_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommentInvalidatingCommandSelectionBehaviorArchive::CommentInvalidatingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
}
CommentInvalidatingCommandSelectionBehaviorArchive::CommentInvalidatingCommandSelectionBehaviorArchive(const CommentInvalidatingCommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommentInvalidatingCommandSelectionBehaviorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.annotation_displaying_command_){nullptr}
    , decltype(_impl_.begin_editing_on_undo_){}
    , decltype(_impl_.begin_editing_on_redo_){}
    , decltype(_impl_.should_invalidate_on_undo_){}
    , decltype(_impl_.should_invalidate_on_redo_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandSelectionBehaviorArchive(*from._impl_.super_);
  }
  if (from._internal_has_annotation_displaying_command()) {
    _this->_impl_.annotation_displaying_command_ = new ::TSP::Reference(*from._impl_.annotation_displaying_command_);
  }
  ::memcpy(&_impl_.begin_editing_on_undo_, &from._impl_.begin_editing_on_undo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.should_invalidate_on_redo_) -
    reinterpret_cast<char*>(&_impl_.begin_editing_on_undo_)) + sizeof(_impl_.should_invalidate_on_redo_));
  // @@protoc_insertion_point(copy_constructor:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
}

inline void CommentInvalidatingCommandSelectionBehaviorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.annotation_displaying_command_){nullptr}
    , decltype(_impl_.begin_editing_on_undo_){false}
    , decltype(_impl_.begin_editing_on_redo_){false}
    , decltype(_impl_.should_invalidate_on_undo_){false}
    , decltype(_impl_.should_invalidate_on_redo_){false}
  };
}

CommentInvalidatingCommandSelectionBehaviorArchive::~CommentInvalidatingCommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommentInvalidatingCommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.annotation_displaying_command_;
}

void CommentInvalidatingCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommentInvalidatingCommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.annotation_displaying_command_ != nullptr);
      _impl_.annotation_displaying_command_->Clear();
    }
  }
  ::memset(&_impl_.begin_editing_on_undo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.should_invalidate_on_redo_) -
      reinterpret_cast<char*>(&_impl_.begin_editing_on_undo_)) + sizeof(_impl_.should_invalidate_on_redo_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentInvalidatingCommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandSelectionBehaviorArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference annotation_displaying_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation_displaying_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool begin_editing_on_undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_begin_editing_on_undo(&has_bits);
          _impl_.begin_editing_on_undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool begin_editing_on_redo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_begin_editing_on_redo(&has_bits);
          _impl_.begin_editing_on_redo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_invalidate_on_undo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_should_invalidate_on_undo(&has_bits);
          _impl_.should_invalidate_on_undo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_invalidate_on_redo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_should_invalidate_on_redo(&has_bits);
          _impl_.should_invalidate_on_redo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommentInvalidatingCommandSelectionBehaviorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference annotation_displaying_command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::annotation_displaying_command(this),
        _Internal::annotation_displaying_command(this).GetCachedSize(), target, stream);
  }

  // optional bool begin_editing_on_undo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_begin_editing_on_undo(), target);
  }

  // optional bool begin_editing_on_redo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_begin_editing_on_redo(), target);
  }

  // optional bool should_invalidate_on_undo = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_should_invalidate_on_undo(), target);
  }

  // optional bool should_invalidate_on_redo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_should_invalidate_on_redo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  return target;
}

size_t CommentInvalidatingCommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  size_t total_size = 0;

  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSP.Reference annotation_displaying_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.annotation_displaying_command_);
    }

    // optional bool begin_editing_on_undo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool begin_editing_on_redo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool should_invalidate_on_undo = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool should_invalidate_on_redo = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommentInvalidatingCommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommentInvalidatingCommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommentInvalidatingCommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }


void CommentInvalidatingCommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommentInvalidatingCommandSelectionBehaviorArchive*>(&to_msg);
  auto& from = static_cast<const CommentInvalidatingCommandSelectionBehaviorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandSelectionBehaviorArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_annotation_displaying_command()->::TSP::Reference::MergeFrom(
          from._internal_annotation_displaying_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.begin_editing_on_undo_ = from._impl_.begin_editing_on_undo_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.begin_editing_on_redo_ = from._impl_.begin_editing_on_redo_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.should_invalidate_on_undo_ = from._impl_.should_invalidate_on_undo_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.should_invalidate_on_redo_ = from._impl_.should_invalidate_on_redo_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommentInvalidatingCommandSelectionBehaviorArchive::CopyFrom(const CommentInvalidatingCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.CommentInvalidatingCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentInvalidatingCommandSelectionBehaviorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_annotation_displaying_command()) {
    if (!_impl_.annotation_displaying_command_->IsInitialized()) return false;
  }
  return true;
}

void CommentInvalidatingCommandSelectionBehaviorArchive::InternalSwap(CommentInvalidatingCommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommentInvalidatingCommandSelectionBehaviorArchive, _impl_.should_invalidate_on_redo_)
      + sizeof(CommentInvalidatingCommandSelectionBehaviorArchive::_impl_.should_invalidate_on_redo_)
      - PROTOBUF_FIELD_OFFSET(CommentInvalidatingCommandSelectionBehaviorArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentInvalidatingCommandSelectionBehaviorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[35]);
}

// ===================================================================

class ImageReplaceCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageReplaceCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageReplaceCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::DataReference& new_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_new_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::DataReference& new_original_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_new_original_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::DataReference& old_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::DataReference& old_original_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_original_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Path& instant_alpha_path(const ImageReplaceCommandArchive* msg);
  static void set_has_instant_alpha_path(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Path& old_instant_alpha_path(const ImageReplaceCommandArchive* msg);
  static void set_has_old_instant_alpha_path(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Size& natural_size_for_iapath(const ImageReplaceCommandArchive* msg);
  static void set_has_natural_size_for_iapath(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Size& old_natural_size_for_iapath(const ImageReplaceCommandArchive* msg);
  static void set_has_old_natural_size_for_iapath(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::GeometryArchive& target_image_geometry(const ImageReplaceCommandArchive* msg);
  static void set_has_target_image_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::GeometryArchive& old_target_image_geometry(const ImageReplaceCommandArchive* msg);
  static void set_has_old_target_image_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::GeometryArchive& target_mask_geometry(const ImageReplaceCommandArchive* msg);
  static void set_has_target_mask_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::GeometryArchive& old_target_mask_geometry(const ImageReplaceCommandArchive* msg);
  static void set_has_old_target_mask_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::ImageAdjustmentsArchive& image_adjustments(const ImageReplaceCommandArchive* msg);
  static void set_has_image_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::DataReference& adjusted_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_adjusted_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::DataReference& enhanced_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_enhanced_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::ImageAdjustmentsArchive& old_image_adjustments(const ImageReplaceCommandArchive* msg);
  static void set_has_old_image_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::DataReference& old_adjusted_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_adjusted_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::DataReference& old_enhanced_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_enhanced_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::DataReference& thumbnail_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_thumbnail_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::DataReference& old_thumbnail_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_thumbnail_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::DataReference& thumbnail_adjusted_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_thumbnail_adjusted_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::DataReference& old_thumbnail_adjusted_image_data(const ImageReplaceCommandArchive* msg);
  static void set_has_old_thumbnail_adjusted_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSP::Size& natural_size(const ImageReplaceCommandArchive* msg);
  static void set_has_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSP::Size& old_natural_size(const ImageReplaceCommandArchive* msg);
  static void set_has_old_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageReplaceCommandArchive::_Internal::super(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::new_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.new_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::new_original_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.new_original_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_original_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_original_image_data_;
}
const ::TSP::Path&
ImageReplaceCommandArchive::_Internal::instant_alpha_path(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.instant_alpha_path_;
}
const ::TSP::Path&
ImageReplaceCommandArchive::_Internal::old_instant_alpha_path(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_instant_alpha_path_;
}
const ::TSP::Size&
ImageReplaceCommandArchive::_Internal::natural_size_for_iapath(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.natural_size_for_iapath_;
}
const ::TSP::Size&
ImageReplaceCommandArchive::_Internal::old_natural_size_for_iapath(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_natural_size_for_iapath_;
}
const ::TSD::GeometryArchive&
ImageReplaceCommandArchive::_Internal::target_image_geometry(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.target_image_geometry_;
}
const ::TSD::GeometryArchive&
ImageReplaceCommandArchive::_Internal::old_target_image_geometry(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_target_image_geometry_;
}
const ::TSD::GeometryArchive&
ImageReplaceCommandArchive::_Internal::target_mask_geometry(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.target_mask_geometry_;
}
const ::TSD::GeometryArchive&
ImageReplaceCommandArchive::_Internal::old_target_mask_geometry(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_target_mask_geometry_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageReplaceCommandArchive::_Internal::image_adjustments(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.image_adjustments_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::adjusted_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.adjusted_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::enhanced_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.enhanced_image_data_;
}
const ::TSD::ImageAdjustmentsArchive&
ImageReplaceCommandArchive::_Internal::old_image_adjustments(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_image_adjustments_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_adjusted_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_adjusted_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_enhanced_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_enhanced_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::thumbnail_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.thumbnail_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_thumbnail_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_thumbnail_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::thumbnail_adjusted_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.thumbnail_adjusted_image_data_;
}
const ::TSP::DataReference&
ImageReplaceCommandArchive::_Internal::old_thumbnail_adjusted_image_data(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_thumbnail_adjusted_image_data_;
}
const ::TSP::Size&
ImageReplaceCommandArchive::_Internal::natural_size(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.natural_size_;
}
const ::TSP::Size&
ImageReplaceCommandArchive::_Internal::old_natural_size(const ImageReplaceCommandArchive* msg) {
  return *msg->_impl_.old_natural_size_;
}
void ImageReplaceCommandArchive::clear_new_image_data() {
  if (_impl_.new_image_data_ != nullptr) _impl_.new_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ImageReplaceCommandArchive::clear_new_original_image_data() {
  if (_impl_.new_original_image_data_ != nullptr) _impl_.new_original_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ImageReplaceCommandArchive::clear_old_image_data() {
  if (_impl_.old_image_data_ != nullptr) _impl_.old_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ImageReplaceCommandArchive::clear_old_original_image_data() {
  if (_impl_.old_original_image_data_ != nullptr) _impl_.old_original_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ImageReplaceCommandArchive::clear_instant_alpha_path() {
  if (_impl_.instant_alpha_path_ != nullptr) _impl_.instant_alpha_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ImageReplaceCommandArchive::clear_old_instant_alpha_path() {
  if (_impl_.old_instant_alpha_path_ != nullptr) _impl_.old_instant_alpha_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ImageReplaceCommandArchive::clear_natural_size_for_iapath() {
  if (_impl_.natural_size_for_iapath_ != nullptr) _impl_.natural_size_for_iapath_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ImageReplaceCommandArchive::clear_old_natural_size_for_iapath() {
  if (_impl_.old_natural_size_for_iapath_ != nullptr) _impl_.old_natural_size_for_iapath_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ImageReplaceCommandArchive::clear_target_image_geometry() {
  if (_impl_.target_image_geometry_ != nullptr) _impl_.target_image_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ImageReplaceCommandArchive::clear_old_target_image_geometry() {
  if (_impl_.old_target_image_geometry_ != nullptr) _impl_.old_target_image_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ImageReplaceCommandArchive::clear_target_mask_geometry() {
  if (_impl_.target_mask_geometry_ != nullptr) _impl_.target_mask_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ImageReplaceCommandArchive::clear_old_target_mask_geometry() {
  if (_impl_.old_target_mask_geometry_ != nullptr) _impl_.old_target_mask_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ImageReplaceCommandArchive::clear_image_adjustments() {
  if (_impl_.image_adjustments_ != nullptr) _impl_.image_adjustments_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void ImageReplaceCommandArchive::clear_adjusted_image_data() {
  if (_impl_.adjusted_image_data_ != nullptr) _impl_.adjusted_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ImageReplaceCommandArchive::clear_enhanced_image_data() {
  if (_impl_.enhanced_image_data_ != nullptr) _impl_.enhanced_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void ImageReplaceCommandArchive::clear_old_image_adjustments() {
  if (_impl_.old_image_adjustments_ != nullptr) _impl_.old_image_adjustments_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void ImageReplaceCommandArchive::clear_old_adjusted_image_data() {
  if (_impl_.old_adjusted_image_data_ != nullptr) _impl_.old_adjusted_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void ImageReplaceCommandArchive::clear_old_enhanced_image_data() {
  if (_impl_.old_enhanced_image_data_ != nullptr) _impl_.old_enhanced_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void ImageReplaceCommandArchive::clear_thumbnail_image_data() {
  if (_impl_.thumbnail_image_data_ != nullptr) _impl_.thumbnail_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void ImageReplaceCommandArchive::clear_old_thumbnail_image_data() {
  if (_impl_.old_thumbnail_image_data_ != nullptr) _impl_.old_thumbnail_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void ImageReplaceCommandArchive::clear_thumbnail_adjusted_image_data() {
  if (_impl_.thumbnail_adjusted_image_data_ != nullptr) _impl_.thumbnail_adjusted_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void ImageReplaceCommandArchive::clear_old_thumbnail_adjusted_image_data() {
  if (_impl_.old_thumbnail_adjusted_image_data_ != nullptr) _impl_.old_thumbnail_adjusted_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
void ImageReplaceCommandArchive::clear_natural_size() {
  if (_impl_.natural_size_ != nullptr) _impl_.natural_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
void ImageReplaceCommandArchive::clear_old_natural_size() {
  if (_impl_.old_natural_size_ != nullptr) _impl_.old_natural_size_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
ImageReplaceCommandArchive::ImageReplaceCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageReplaceCommandArchive)
}
ImageReplaceCommandArchive::ImageReplaceCommandArchive(const ImageReplaceCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageReplaceCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_image_data_){nullptr}
    , decltype(_impl_.new_original_image_data_){nullptr}
    , decltype(_impl_.old_image_data_){nullptr}
    , decltype(_impl_.old_original_image_data_){nullptr}
    , decltype(_impl_.instant_alpha_path_){nullptr}
    , decltype(_impl_.old_instant_alpha_path_){nullptr}
    , decltype(_impl_.natural_size_for_iapath_){nullptr}
    , decltype(_impl_.old_natural_size_for_iapath_){nullptr}
    , decltype(_impl_.target_image_geometry_){nullptr}
    , decltype(_impl_.old_target_image_geometry_){nullptr}
    , decltype(_impl_.target_mask_geometry_){nullptr}
    , decltype(_impl_.old_target_mask_geometry_){nullptr}
    , decltype(_impl_.image_adjustments_){nullptr}
    , decltype(_impl_.adjusted_image_data_){nullptr}
    , decltype(_impl_.enhanced_image_data_){nullptr}
    , decltype(_impl_.old_image_adjustments_){nullptr}
    , decltype(_impl_.old_adjusted_image_data_){nullptr}
    , decltype(_impl_.old_enhanced_image_data_){nullptr}
    , decltype(_impl_.thumbnail_image_data_){nullptr}
    , decltype(_impl_.old_thumbnail_image_data_){nullptr}
    , decltype(_impl_.thumbnail_adjusted_image_data_){nullptr}
    , decltype(_impl_.old_thumbnail_adjusted_image_data_){nullptr}
    , decltype(_impl_.natural_size_){nullptr}
    , decltype(_impl_.old_natural_size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_new_image_data()) {
    _this->_impl_.new_image_data_ = new ::TSP::DataReference(*from._impl_.new_image_data_);
  }
  if (from._internal_has_new_original_image_data()) {
    _this->_impl_.new_original_image_data_ = new ::TSP::DataReference(*from._impl_.new_original_image_data_);
  }
  if (from._internal_has_old_image_data()) {
    _this->_impl_.old_image_data_ = new ::TSP::DataReference(*from._impl_.old_image_data_);
  }
  if (from._internal_has_old_original_image_data()) {
    _this->_impl_.old_original_image_data_ = new ::TSP::DataReference(*from._impl_.old_original_image_data_);
  }
  if (from._internal_has_instant_alpha_path()) {
    _this->_impl_.instant_alpha_path_ = new ::TSP::Path(*from._impl_.instant_alpha_path_);
  }
  if (from._internal_has_old_instant_alpha_path()) {
    _this->_impl_.old_instant_alpha_path_ = new ::TSP::Path(*from._impl_.old_instant_alpha_path_);
  }
  if (from._internal_has_natural_size_for_iapath()) {
    _this->_impl_.natural_size_for_iapath_ = new ::TSP::Size(*from._impl_.natural_size_for_iapath_);
  }
  if (from._internal_has_old_natural_size_for_iapath()) {
    _this->_impl_.old_natural_size_for_iapath_ = new ::TSP::Size(*from._impl_.old_natural_size_for_iapath_);
  }
  if (from._internal_has_target_image_geometry()) {
    _this->_impl_.target_image_geometry_ = new ::TSD::GeometryArchive(*from._impl_.target_image_geometry_);
  }
  if (from._internal_has_old_target_image_geometry()) {
    _this->_impl_.old_target_image_geometry_ = new ::TSD::GeometryArchive(*from._impl_.old_target_image_geometry_);
  }
  if (from._internal_has_target_mask_geometry()) {
    _this->_impl_.target_mask_geometry_ = new ::TSD::GeometryArchive(*from._impl_.target_mask_geometry_);
  }
  if (from._internal_has_old_target_mask_geometry()) {
    _this->_impl_.old_target_mask_geometry_ = new ::TSD::GeometryArchive(*from._impl_.old_target_mask_geometry_);
  }
  if (from._internal_has_image_adjustments()) {
    _this->_impl_.image_adjustments_ = new ::TSD::ImageAdjustmentsArchive(*from._impl_.image_adjustments_);
  }
  if (from._internal_has_adjusted_image_data()) {
    _this->_impl_.adjusted_image_data_ = new ::TSP::DataReference(*from._impl_.adjusted_image_data_);
  }
  if (from._internal_has_enhanced_image_data()) {
    _this->_impl_.enhanced_image_data_ = new ::TSP::DataReference(*from._impl_.enhanced_image_data_);
  }
  if (from._internal_has_old_image_adjustments()) {
    _this->_impl_.old_image_adjustments_ = new ::TSD::ImageAdjustmentsArchive(*from._impl_.old_image_adjustments_);
  }
  if (from._internal_has_old_adjusted_image_data()) {
    _this->_impl_.old_adjusted_image_data_ = new ::TSP::DataReference(*from._impl_.old_adjusted_image_data_);
  }
  if (from._internal_has_old_enhanced_image_data()) {
    _this->_impl_.old_enhanced_image_data_ = new ::TSP::DataReference(*from._impl_.old_enhanced_image_data_);
  }
  if (from._internal_has_thumbnail_image_data()) {
    _this->_impl_.thumbnail_image_data_ = new ::TSP::DataReference(*from._impl_.thumbnail_image_data_);
  }
  if (from._internal_has_old_thumbnail_image_data()) {
    _this->_impl_.old_thumbnail_image_data_ = new ::TSP::DataReference(*from._impl_.old_thumbnail_image_data_);
  }
  if (from._internal_has_thumbnail_adjusted_image_data()) {
    _this->_impl_.thumbnail_adjusted_image_data_ = new ::TSP::DataReference(*from._impl_.thumbnail_adjusted_image_data_);
  }
  if (from._internal_has_old_thumbnail_adjusted_image_data()) {
    _this->_impl_.old_thumbnail_adjusted_image_data_ = new ::TSP::DataReference(*from._impl_.old_thumbnail_adjusted_image_data_);
  }
  if (from._internal_has_natural_size()) {
    _this->_impl_.natural_size_ = new ::TSP::Size(*from._impl_.natural_size_);
  }
  if (from._internal_has_old_natural_size()) {
    _this->_impl_.old_natural_size_ = new ::TSP::Size(*from._impl_.old_natural_size_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageReplaceCommandArchive)
}

inline void ImageReplaceCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_image_data_){nullptr}
    , decltype(_impl_.new_original_image_data_){nullptr}
    , decltype(_impl_.old_image_data_){nullptr}
    , decltype(_impl_.old_original_image_data_){nullptr}
    , decltype(_impl_.instant_alpha_path_){nullptr}
    , decltype(_impl_.old_instant_alpha_path_){nullptr}
    , decltype(_impl_.natural_size_for_iapath_){nullptr}
    , decltype(_impl_.old_natural_size_for_iapath_){nullptr}
    , decltype(_impl_.target_image_geometry_){nullptr}
    , decltype(_impl_.old_target_image_geometry_){nullptr}
    , decltype(_impl_.target_mask_geometry_){nullptr}
    , decltype(_impl_.old_target_mask_geometry_){nullptr}
    , decltype(_impl_.image_adjustments_){nullptr}
    , decltype(_impl_.adjusted_image_data_){nullptr}
    , decltype(_impl_.enhanced_image_data_){nullptr}
    , decltype(_impl_.old_image_adjustments_){nullptr}
    , decltype(_impl_.old_adjusted_image_data_){nullptr}
    , decltype(_impl_.old_enhanced_image_data_){nullptr}
    , decltype(_impl_.thumbnail_image_data_){nullptr}
    , decltype(_impl_.old_thumbnail_image_data_){nullptr}
    , decltype(_impl_.thumbnail_adjusted_image_data_){nullptr}
    , decltype(_impl_.old_thumbnail_adjusted_image_data_){nullptr}
    , decltype(_impl_.natural_size_){nullptr}
    , decltype(_impl_.old_natural_size_){nullptr}
  };
}

ImageReplaceCommandArchive::~ImageReplaceCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageReplaceCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageReplaceCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.new_image_data_;
  if (this != internal_default_instance()) delete _impl_.new_original_image_data_;
  if (this != internal_default_instance()) delete _impl_.old_image_data_;
  if (this != internal_default_instance()) delete _impl_.old_original_image_data_;
  if (this != internal_default_instance()) delete _impl_.instant_alpha_path_;
  if (this != internal_default_instance()) delete _impl_.old_instant_alpha_path_;
  if (this != internal_default_instance()) delete _impl_.natural_size_for_iapath_;
  if (this != internal_default_instance()) delete _impl_.old_natural_size_for_iapath_;
  if (this != internal_default_instance()) delete _impl_.target_image_geometry_;
  if (this != internal_default_instance()) delete _impl_.old_target_image_geometry_;
  if (this != internal_default_instance()) delete _impl_.target_mask_geometry_;
  if (this != internal_default_instance()) delete _impl_.old_target_mask_geometry_;
  if (this != internal_default_instance()) delete _impl_.image_adjustments_;
  if (this != internal_default_instance()) delete _impl_.adjusted_image_data_;
  if (this != internal_default_instance()) delete _impl_.enhanced_image_data_;
  if (this != internal_default_instance()) delete _impl_.old_image_adjustments_;
  if (this != internal_default_instance()) delete _impl_.old_adjusted_image_data_;
  if (this != internal_default_instance()) delete _impl_.old_enhanced_image_data_;
  if (this != internal_default_instance()) delete _impl_.thumbnail_image_data_;
  if (this != internal_default_instance()) delete _impl_.old_thumbnail_image_data_;
  if (this != internal_default_instance()) delete _impl_.thumbnail_adjusted_image_data_;
  if (this != internal_default_instance()) delete _impl_.old_thumbnail_adjusted_image_data_;
  if (this != internal_default_instance()) delete _impl_.natural_size_;
  if (this != internal_default_instance()) delete _impl_.old_natural_size_;
}

void ImageReplaceCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageReplaceCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageReplaceCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_image_data_ != nullptr);
      _impl_.new_image_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_original_image_data_ != nullptr);
      _impl_.new_original_image_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_image_data_ != nullptr);
      _impl_.old_image_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.old_original_image_data_ != nullptr);
      _impl_.old_original_image_data_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.instant_alpha_path_ != nullptr);
      _impl_.instant_alpha_path_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.old_instant_alpha_path_ != nullptr);
      _impl_.old_instant_alpha_path_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.natural_size_for_iapath_ != nullptr);
      _impl_.natural_size_for_iapath_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.old_natural_size_for_iapath_ != nullptr);
      _impl_.old_natural_size_for_iapath_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.target_image_geometry_ != nullptr);
      _impl_.target_image_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.old_target_image_geometry_ != nullptr);
      _impl_.old_target_image_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.target_mask_geometry_ != nullptr);
      _impl_.target_mask_geometry_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.old_target_mask_geometry_ != nullptr);
      _impl_.old_target_mask_geometry_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.image_adjustments_ != nullptr);
      _impl_.image_adjustments_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.adjusted_image_data_ != nullptr);
      _impl_.adjusted_image_data_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.enhanced_image_data_ != nullptr);
      _impl_.enhanced_image_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.old_image_adjustments_ != nullptr);
      _impl_.old_image_adjustments_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.old_adjusted_image_data_ != nullptr);
      _impl_.old_adjusted_image_data_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.old_enhanced_image_data_ != nullptr);
      _impl_.old_enhanced_image_data_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.thumbnail_image_data_ != nullptr);
      _impl_.thumbnail_image_data_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.old_thumbnail_image_data_ != nullptr);
      _impl_.old_thumbnail_image_data_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.thumbnail_adjusted_image_data_ != nullptr);
      _impl_.thumbnail_adjusted_image_data_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.old_thumbnail_adjusted_image_data_ != nullptr);
      _impl_.old_thumbnail_adjusted_image_data_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.natural_size_ != nullptr);
      _impl_.natural_size_->Clear();
    }
  }
  if (cached_has_bits & 0x01000000u) {
    GOOGLE_DCHECK(_impl_.old_natural_size_ != nullptr);
    _impl_.old_natural_size_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageReplaceCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference new_image_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference new_original_image_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_original_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_image_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_original_image_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_original_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Path instant_alpha_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_instant_alpha_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Path old_instant_alpha_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_instant_alpha_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size natural_size_for_IAPath = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_natural_size_for_iapath(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size old_natural_size_for_IAPath = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_natural_size_for_iapath(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive target_image_geometry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_image_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive old_target_image_geometry = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_target_image_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive target_mask_geometry = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_mask_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive old_target_mask_geometry = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_target_mask_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive image_adjustments = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_adjustments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference adjusted_image_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_adjusted_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference enhanced_image_data = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_enhanced_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_adjustments(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_adjusted_image_data = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_adjusted_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_enhanced_image_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_enhanced_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnail_image_data = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnail_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_thumbnail_image_data = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_thumbnail_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference thumbnail_adjusted_image_data = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_thumbnail_adjusted_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference old_thumbnail_adjusted_image_data = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_thumbnail_adjusted_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size natural_size = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_natural_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size old_natural_size = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_natural_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageReplaceCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageReplaceCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference new_image_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_image_data(this),
        _Internal::new_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference new_original_image_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_original_image_data(this),
        _Internal::new_original_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference old_image_data = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_image_data(this),
        _Internal::old_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference old_original_image_data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::old_original_image_data(this),
        _Internal::old_original_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Path instant_alpha_path = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::instant_alpha_path(this),
        _Internal::instant_alpha_path(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Path old_instant_alpha_path = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::old_instant_alpha_path(this),
        _Internal::old_instant_alpha_path(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size natural_size_for_IAPath = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::natural_size_for_iapath(this),
        _Internal::natural_size_for_iapath(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size old_natural_size_for_IAPath = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::old_natural_size_for_iapath(this),
        _Internal::old_natural_size_for_iapath(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive target_image_geometry = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::target_image_geometry(this),
        _Internal::target_image_geometry(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive old_target_image_geometry = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::old_target_image_geometry(this),
        _Internal::old_target_image_geometry(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive target_mask_geometry = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::target_mask_geometry(this),
        _Internal::target_mask_geometry(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive old_target_mask_geometry = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::old_target_mask_geometry(this),
        _Internal::old_target_mask_geometry(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive image_adjustments = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::image_adjustments(this),
        _Internal::image_adjustments(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference adjusted_image_data = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::adjusted_image_data(this),
        _Internal::adjusted_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference enhanced_image_data = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::enhanced_image_data(this),
        _Internal::enhanced_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::old_image_adjustments(this),
        _Internal::old_image_adjustments(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference old_adjusted_image_data = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::old_adjusted_image_data(this),
        _Internal::old_adjusted_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference old_enhanced_image_data = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::old_enhanced_image_data(this),
        _Internal::old_enhanced_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference thumbnail_image_data = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::thumbnail_image_data(this),
        _Internal::thumbnail_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference old_thumbnail_image_data = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::old_thumbnail_image_data(this),
        _Internal::old_thumbnail_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference thumbnail_adjusted_image_data = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::thumbnail_adjusted_image_data(this),
        _Internal::thumbnail_adjusted_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference old_thumbnail_adjusted_image_data = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::old_thumbnail_adjusted_image_data(this),
        _Internal::old_thumbnail_adjusted_image_data(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size natural_size = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::natural_size(this),
        _Internal::natural_size(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size old_natural_size = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::old_natural_size(this),
        _Internal::old_natural_size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageReplaceCommandArchive)
  return target;
}

size_t ImageReplaceCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageReplaceCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSP.DataReference new_image_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_image_data_);
    }

    // optional .TSP.DataReference new_original_image_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_original_image_data_);
    }

    // optional .TSP.DataReference old_image_data = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_image_data_);
    }

    // optional .TSP.DataReference old_original_image_data = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_original_image_data_);
    }

    // optional .TSP.Path instant_alpha_path = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.instant_alpha_path_);
    }

    // optional .TSP.Path old_instant_alpha_path = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_instant_alpha_path_);
    }

    // optional .TSP.Size natural_size_for_IAPath = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.natural_size_for_iapath_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Size old_natural_size_for_IAPath = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_natural_size_for_iapath_);
    }

    // optional .TSD.GeometryArchive target_image_geometry = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_image_geometry_);
    }

    // optional .TSD.GeometryArchive old_target_image_geometry = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_target_image_geometry_);
    }

    // optional .TSD.GeometryArchive target_mask_geometry = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_mask_geometry_);
    }

    // optional .TSD.GeometryArchive old_target_mask_geometry = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_target_mask_geometry_);
    }

    // optional .TSD.ImageAdjustmentsArchive image_adjustments = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_adjustments_);
    }

    // optional .TSP.DataReference adjusted_image_data = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adjusted_image_data_);
    }

    // optional .TSP.DataReference enhanced_image_data = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.enhanced_image_data_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_image_adjustments_);
    }

    // optional .TSP.DataReference old_adjusted_image_data = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_adjusted_image_data_);
    }

    // optional .TSP.DataReference old_enhanced_image_data = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_enhanced_image_data_);
    }

    // optional .TSP.DataReference thumbnail_image_data = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.thumbnail_image_data_);
    }

    // optional .TSP.DataReference old_thumbnail_image_data = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_thumbnail_image_data_);
    }

    // optional .TSP.DataReference thumbnail_adjusted_image_data = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.thumbnail_adjusted_image_data_);
    }

    // optional .TSP.DataReference old_thumbnail_adjusted_image_data = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_thumbnail_adjusted_image_data_);
    }

    // optional .TSP.Size natural_size = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.natural_size_);
    }

  }
  // optional .TSP.Size old_natural_size = 26;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_natural_size_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageReplaceCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageReplaceCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageReplaceCommandArchive::GetClassData() const { return &_class_data_; }


void ImageReplaceCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageReplaceCommandArchive*>(&to_msg);
  auto& from = static_cast<const ImageReplaceCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageReplaceCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_new_image_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_original_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_new_original_image_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_old_image_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_old_original_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_old_original_image_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_instant_alpha_path()->::TSP::Path::MergeFrom(
          from._internal_instant_alpha_path());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_old_instant_alpha_path()->::TSP::Path::MergeFrom(
          from._internal_old_instant_alpha_path());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_natural_size_for_iapath()->::TSP::Size::MergeFrom(
          from._internal_natural_size_for_iapath());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_old_natural_size_for_iapath()->::TSP::Size::MergeFrom(
          from._internal_old_natural_size_for_iapath());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_target_image_geometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_target_image_geometry());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_old_target_image_geometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_old_target_image_geometry());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_target_mask_geometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_target_mask_geometry());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_old_target_mask_geometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_old_target_mask_geometry());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(
          from._internal_image_adjustments());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_adjusted_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_adjusted_image_data());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_enhanced_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_enhanced_image_data());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_old_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(
          from._internal_old_image_adjustments());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_old_adjusted_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_old_adjusted_image_data());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_old_enhanced_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_old_enhanced_image_data());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_thumbnail_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_thumbnail_image_data());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_old_thumbnail_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_old_thumbnail_image_data());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_thumbnail_adjusted_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_thumbnail_adjusted_image_data());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_old_thumbnail_adjusted_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_old_thumbnail_adjusted_image_data());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_natural_size()->::TSP::Size::MergeFrom(
          from._internal_natural_size());
    }
  }
  if (cached_has_bits & 0x01000000u) {
    _this->_internal_mutable_old_natural_size()->::TSP::Size::MergeFrom(
        from._internal_old_natural_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageReplaceCommandArchive::CopyFrom(const ImageReplaceCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageReplaceCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageReplaceCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_new_image_data()) {
    if (!_impl_.new_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_new_original_image_data()) {
    if (!_impl_.new_original_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_image_data()) {
    if (!_impl_.old_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_original_image_data()) {
    if (!_impl_.old_original_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_instant_alpha_path()) {
    if (!_impl_.instant_alpha_path_->IsInitialized()) return false;
  }
  if (_internal_has_old_instant_alpha_path()) {
    if (!_impl_.old_instant_alpha_path_->IsInitialized()) return false;
  }
  if (_internal_has_natural_size_for_iapath()) {
    if (!_impl_.natural_size_for_iapath_->IsInitialized()) return false;
  }
  if (_internal_has_old_natural_size_for_iapath()) {
    if (!_impl_.old_natural_size_for_iapath_->IsInitialized()) return false;
  }
  if (_internal_has_target_image_geometry()) {
    if (!_impl_.target_image_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_old_target_image_geometry()) {
    if (!_impl_.old_target_image_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_target_mask_geometry()) {
    if (!_impl_.target_mask_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_old_target_mask_geometry()) {
    if (!_impl_.old_target_mask_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_adjusted_image_data()) {
    if (!_impl_.adjusted_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_enhanced_image_data()) {
    if (!_impl_.enhanced_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_adjusted_image_data()) {
    if (!_impl_.old_adjusted_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_enhanced_image_data()) {
    if (!_impl_.old_enhanced_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnail_image_data()) {
    if (!_impl_.thumbnail_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_thumbnail_image_data()) {
    if (!_impl_.old_thumbnail_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_thumbnail_adjusted_image_data()) {
    if (!_impl_.thumbnail_adjusted_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_old_thumbnail_adjusted_image_data()) {
    if (!_impl_.old_thumbnail_adjusted_image_data_->IsInitialized()) return false;
  }
  if (_internal_has_natural_size()) {
    if (!_impl_.natural_size_->IsInitialized()) return false;
  }
  if (_internal_has_old_natural_size()) {
    if (!_impl_.old_natural_size_->IsInitialized()) return false;
  }
  return true;
}

void ImageReplaceCommandArchive::InternalSwap(ImageReplaceCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageReplaceCommandArchive, _impl_.old_natural_size_)
      + sizeof(ImageReplaceCommandArchive::_impl_.old_natural_size_)
      - PROTOBUF_FIELD_OFFSET(ImageReplaceCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageReplaceCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[36]);
}

// ===================================================================

class DrawableLockCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableLockCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableLockCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableLockCommandArchive::_Internal::super(const DrawableLockCommandArchive* msg) {
  return *msg->_impl_.super_;
}
DrawableLockCommandArchive::DrawableLockCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableLockCommandArchive)
}
DrawableLockCommandArchive::DrawableLockCommandArchive(const DrawableLockCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawableLockCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.locked_){}
    , decltype(_impl_.was_locked_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.locked_, &from._impl_.locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_locked_) -
    reinterpret_cast<char*>(&_impl_.locked_)) + sizeof(_impl_.was_locked_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableLockCommandArchive)
}

inline void DrawableLockCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.locked_){false}
    , decltype(_impl_.was_locked_){false}
  };
}

DrawableLockCommandArchive::~DrawableLockCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableLockCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawableLockCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void DrawableLockCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawableLockCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableLockCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  ::memset(&_impl_.locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.was_locked_) -
      reinterpret_cast<char*>(&_impl_.locked_)) + sizeof(_impl_.was_locked_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableLockCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool locked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_locked(&has_bits);
          _impl_.locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_locked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_was_locked(&has_bits);
          _impl_.was_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawableLockCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableLockCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool locked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_locked(), target);
  }

  // optional bool was_locked = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_was_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableLockCommandArchive)
  return target;
}

size_t DrawableLockCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableLockCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool locked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool was_locked = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawableLockCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawableLockCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawableLockCommandArchive::GetClassData() const { return &_class_data_; }


void DrawableLockCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawableLockCommandArchive*>(&to_msg);
  auto& from = static_cast<const DrawableLockCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableLockCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.locked_ = from._impl_.locked_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.was_locked_ = from._impl_.was_locked_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawableLockCommandArchive::CopyFrom(const DrawableLockCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableLockCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableLockCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void DrawableLockCommandArchive::InternalSwap(DrawableLockCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableLockCommandArchive, _impl_.was_locked_)
      + sizeof(DrawableLockCommandArchive::_impl_.was_locked_)
      - PROTOBUF_FIELD_OFFSET(DrawableLockCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableLockCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[37]);
}

// ===================================================================

class DrawableInfoCommentCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableInfoCommentCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableInfoCommentCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& old_comment(const DrawableInfoCommentCommandArchive* msg);
  static void set_has_old_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_comment(const DrawableInfoCommentCommandArchive* msg);
  static void set_has_new_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_forward_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inverse_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableInfoCommentCommandArchive::_Internal::super(const DrawableInfoCommentCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
DrawableInfoCommentCommandArchive::_Internal::old_comment(const DrawableInfoCommentCommandArchive* msg) {
  return *msg->_impl_.old_comment_;
}
const ::TSP::Reference&
DrawableInfoCommentCommandArchive::_Internal::new_comment(const DrawableInfoCommentCommandArchive* msg) {
  return *msg->_impl_.new_comment_;
}
void DrawableInfoCommentCommandArchive::clear_old_comment() {
  if (_impl_.old_comment_ != nullptr) _impl_.old_comment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DrawableInfoCommentCommandArchive::clear_new_comment() {
  if (_impl_.new_comment_ != nullptr) _impl_.new_comment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DrawableInfoCommentCommandArchive::DrawableInfoCommentCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableInfoCommentCommandArchive)
}
DrawableInfoCommentCommandArchive::DrawableInfoCommentCommandArchive(const DrawableInfoCommentCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawableInfoCommentCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_comment_){nullptr}
    , decltype(_impl_.new_comment_){nullptr}
    , decltype(_impl_.forward_variant_){}
    , decltype(_impl_.inverse_variant_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_comment()) {
    _this->_impl_.old_comment_ = new ::TSP::Reference(*from._impl_.old_comment_);
  }
  if (from._internal_has_new_comment()) {
    _this->_impl_.new_comment_ = new ::TSP::Reference(*from._impl_.new_comment_);
  }
  ::memcpy(&_impl_.forward_variant_, &from._impl_.forward_variant_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inverse_variant_) -
    reinterpret_cast<char*>(&_impl_.forward_variant_)) + sizeof(_impl_.inverse_variant_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableInfoCommentCommandArchive)
}

inline void DrawableInfoCommentCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_comment_){nullptr}
    , decltype(_impl_.new_comment_){nullptr}
    , decltype(_impl_.forward_variant_){0}
    , decltype(_impl_.inverse_variant_){0}
  };
}

DrawableInfoCommentCommandArchive::~DrawableInfoCommentCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableInfoCommentCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawableInfoCommentCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_comment_;
  if (this != internal_default_instance()) delete _impl_.new_comment_;
}

void DrawableInfoCommentCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawableInfoCommentCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableInfoCommentCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_comment_ != nullptr);
      _impl_.old_comment_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_comment_ != nullptr);
      _impl_.new_comment_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.forward_variant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.inverse_variant_) -
        reinterpret_cast<char*>(&_impl_.forward_variant_)) + sizeof(_impl_.inverse_variant_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableInfoCommentCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_comment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_comment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant forward_variant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_forward_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant inverse_variant = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_inverse_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawableInfoCommentCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableInfoCommentCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_comment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_comment(this),
        _Internal::old_comment(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_comment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_comment(this),
        _Internal::new_comment(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.CommentCommandVariant forward_variant = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_forward_variant(), target);
  }

  // optional .TSD.CommentCommandVariant inverse_variant = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_inverse_variant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableInfoCommentCommandArchive)
  return target;
}

size_t DrawableInfoCommentCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableInfoCommentCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.Reference old_comment = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_comment_);
    }

    // optional .TSP.Reference new_comment = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_comment_);
    }

    // optional .TSD.CommentCommandVariant forward_variant = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_forward_variant());
    }

    // optional .TSD.CommentCommandVariant inverse_variant = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_inverse_variant());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawableInfoCommentCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawableInfoCommentCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawableInfoCommentCommandArchive::GetClassData() const { return &_class_data_; }


void DrawableInfoCommentCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawableInfoCommentCommandArchive*>(&to_msg);
  auto& from = static_cast<const DrawableInfoCommentCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableInfoCommentCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_comment()->::TSP::Reference::MergeFrom(
          from._internal_old_comment());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_comment()->::TSP::Reference::MergeFrom(
          from._internal_new_comment());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.forward_variant_ = from._impl_.forward_variant_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.inverse_variant_ = from._impl_.inverse_variant_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawableInfoCommentCommandArchive::CopyFrom(const DrawableInfoCommentCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableInfoCommentCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableInfoCommentCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_comment()) {
    if (!_impl_.old_comment_->IsInitialized()) return false;
  }
  if (_internal_has_new_comment()) {
    if (!_impl_.new_comment_->IsInitialized()) return false;
  }
  return true;
}

void DrawableInfoCommentCommandArchive::InternalSwap(DrawableInfoCommentCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableInfoCommentCommandArchive, _impl_.inverse_variant_)
      + sizeof(DrawableInfoCommentCommandArchive::_impl_.inverse_variant_)
      - PROTOBUF_FIELD_OFFSET(DrawableInfoCommentCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableInfoCommentCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[38]);
}

// ===================================================================

class DrawablePencilAnnotationCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawablePencilAnnotationCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawablePencilAnnotationCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& pencil_annotation_to_add(const DrawablePencilAnnotationCommandArchive* msg);
  static void set_has_pencil_annotation_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& pencil_annotation_to_remove(const DrawablePencilAnnotationCommandArchive* msg);
  static void set_has_pencil_annotation_to_remove(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawablePencilAnnotationCommandArchive::_Internal::super(const DrawablePencilAnnotationCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
DrawablePencilAnnotationCommandArchive::_Internal::pencil_annotation_to_add(const DrawablePencilAnnotationCommandArchive* msg) {
  return *msg->_impl_.pencil_annotation_to_add_;
}
const ::TSP::Reference&
DrawablePencilAnnotationCommandArchive::_Internal::pencil_annotation_to_remove(const DrawablePencilAnnotationCommandArchive* msg) {
  return *msg->_impl_.pencil_annotation_to_remove_;
}
void DrawablePencilAnnotationCommandArchive::clear_pencil_annotation_to_add() {
  if (_impl_.pencil_annotation_to_add_ != nullptr) _impl_.pencil_annotation_to_add_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DrawablePencilAnnotationCommandArchive::clear_pencil_annotation_to_remove() {
  if (_impl_.pencil_annotation_to_remove_ != nullptr) _impl_.pencil_annotation_to_remove_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DrawablePencilAnnotationCommandArchive::DrawablePencilAnnotationCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawablePencilAnnotationCommandArchive)
}
DrawablePencilAnnotationCommandArchive::DrawablePencilAnnotationCommandArchive(const DrawablePencilAnnotationCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawablePencilAnnotationCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.pencil_annotation_to_add_){nullptr}
    , decltype(_impl_.pencil_annotation_to_remove_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_pencil_annotation_to_add()) {
    _this->_impl_.pencil_annotation_to_add_ = new ::TSP::Reference(*from._impl_.pencil_annotation_to_add_);
  }
  if (from._internal_has_pencil_annotation_to_remove()) {
    _this->_impl_.pencil_annotation_to_remove_ = new ::TSP::Reference(*from._impl_.pencil_annotation_to_remove_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawablePencilAnnotationCommandArchive)
}

inline void DrawablePencilAnnotationCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.pencil_annotation_to_add_){nullptr}
    , decltype(_impl_.pencil_annotation_to_remove_){nullptr}
  };
}

DrawablePencilAnnotationCommandArchive::~DrawablePencilAnnotationCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawablePencilAnnotationCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawablePencilAnnotationCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.pencil_annotation_to_add_;
  if (this != internal_default_instance()) delete _impl_.pencil_annotation_to_remove_;
}

void DrawablePencilAnnotationCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawablePencilAnnotationCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawablePencilAnnotationCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pencil_annotation_to_add_ != nullptr);
      _impl_.pencil_annotation_to_add_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.pencil_annotation_to_remove_ != nullptr);
      _impl_.pencil_annotation_to_remove_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawablePencilAnnotationCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pencil_annotation_to_add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_to_add(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference pencil_annotation_to_remove = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_to_remove(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawablePencilAnnotationCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawablePencilAnnotationCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pencil_annotation_to_add = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pencil_annotation_to_add(this),
        _Internal::pencil_annotation_to_add(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference pencil_annotation_to_remove = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pencil_annotation_to_remove(this),
        _Internal::pencil_annotation_to_remove(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawablePencilAnnotationCommandArchive)
  return target;
}

size_t DrawablePencilAnnotationCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawablePencilAnnotationCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference pencil_annotation_to_add = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pencil_annotation_to_add_);
    }

    // optional .TSP.Reference pencil_annotation_to_remove = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pencil_annotation_to_remove_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawablePencilAnnotationCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawablePencilAnnotationCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawablePencilAnnotationCommandArchive::GetClassData() const { return &_class_data_; }


void DrawablePencilAnnotationCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawablePencilAnnotationCommandArchive*>(&to_msg);
  auto& from = static_cast<const DrawablePencilAnnotationCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawablePencilAnnotationCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pencil_annotation_to_add()->::TSP::Reference::MergeFrom(
          from._internal_pencil_annotation_to_add());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_pencil_annotation_to_remove()->::TSP::Reference::MergeFrom(
          from._internal_pencil_annotation_to_remove());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawablePencilAnnotationCommandArchive::CopyFrom(const DrawablePencilAnnotationCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawablePencilAnnotationCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablePencilAnnotationCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_to_add()) {
    if (!_impl_.pencil_annotation_to_add_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_to_remove()) {
    if (!_impl_.pencil_annotation_to_remove_->IsInitialized()) return false;
  }
  return true;
}

void DrawablePencilAnnotationCommandArchive::InternalSwap(DrawablePencilAnnotationCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawablePencilAnnotationCommandArchive, _impl_.pencil_annotation_to_remove_)
      + sizeof(DrawablePencilAnnotationCommandArchive::_impl_.pencil_annotation_to_remove_)
      - PROTOBUF_FIELD_OFFSET(DrawablePencilAnnotationCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawablePencilAnnotationCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[39]);
}

// ===================================================================

class AbstractGuideCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AbstractGuideCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const AbstractGuideCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
AbstractGuideCommandArchive::_Internal::super(const AbstractGuideCommandArchive* msg) {
  return *msg->_impl_.super_;
}
void AbstractGuideCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AbstractGuideCommandArchive::clear_old_guides() {
  _impl_.old_guides_.Clear();
}
void AbstractGuideCommandArchive::clear_new_guides() {
  _impl_.new_guides_.Clear();
}
AbstractGuideCommandArchive::AbstractGuideCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.AbstractGuideCommandArchive)
}
AbstractGuideCommandArchive::AbstractGuideCommandArchive(const AbstractGuideCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbstractGuideCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_guides_){from._impl_.old_guides_}
    , decltype(_impl_.new_guides_){from._impl_.new_guides_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.AbstractGuideCommandArchive)
}

inline void AbstractGuideCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_guides_){arena}
    , decltype(_impl_.new_guides_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

AbstractGuideCommandArchive::~AbstractGuideCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.AbstractGuideCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbstractGuideCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.old_guides_.~RepeatedPtrField();
  _impl_.new_guides_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void AbstractGuideCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbstractGuideCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.AbstractGuideCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.old_guides_.Clear();
  _impl_.new_guides_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbstractGuideCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSD.UserDefinedGuideArchive old_guides = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_guides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSD.UserDefinedGuideArchive new_guides = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_guides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbstractGuideCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.AbstractGuideCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSD.UserDefinedGuideArchive old_guides = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_guides_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_guides(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSD.UserDefinedGuideArchive new_guides = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_guides_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_guides(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.AbstractGuideCommandArchive)
  return target;
}

size_t AbstractGuideCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.AbstractGuideCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSD.UserDefinedGuideArchive old_guides = 7;
  total_size += 1UL * this->_internal_old_guides_size();
  for (const auto& msg : this->_impl_.old_guides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.UserDefinedGuideArchive new_guides = 8;
  total_size += 1UL * this->_internal_new_guides_size();
  for (const auto& msg : this->_impl_.new_guides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbstractGuideCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbstractGuideCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbstractGuideCommandArchive::GetClassData() const { return &_class_data_; }


void AbstractGuideCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbstractGuideCommandArchive*>(&to_msg);
  auto& from = static_cast<const AbstractGuideCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.AbstractGuideCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.old_guides_.MergeFrom(from._impl_.old_guides_);
  _this->_impl_.new_guides_.MergeFrom(from._impl_.new_guides_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbstractGuideCommandArchive::CopyFrom(const AbstractGuideCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.AbstractGuideCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractGuideCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void AbstractGuideCommandArchive::InternalSwap(AbstractGuideCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.old_guides_.InternalSwap(&other->_impl_.old_guides_);
  _impl_.new_guides_.InternalSwap(&other->_impl_.new_guides_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbstractGuideCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[40]);
}

// ===================================================================

class GuideCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GuideCommandArchive>()._impl_._has_bits_);
  static const ::TSD::AbstractGuideCommandArchive& super(const GuideCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& storage_id_path(const GuideCommandArchive* msg);
  static void set_has_storage_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::AbstractGuideCommandArchive&
GuideCommandArchive::_Internal::super(const GuideCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
GuideCommandArchive::_Internal::storage_id_path(const GuideCommandArchive* msg) {
  return *msg->_impl_.storage_id_path_;
}
void GuideCommandArchive::clear_storage_id_path() {
  if (_impl_.storage_id_path_ != nullptr) _impl_.storage_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GuideCommandArchive::GuideCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.GuideCommandArchive)
}
GuideCommandArchive::GuideCommandArchive(const GuideCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuideCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.storage_id_path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::AbstractGuideCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_storage_id_path()) {
    _this->_impl_.storage_id_path_ = new ::TSP::UUIDPath(*from._impl_.storage_id_path_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.GuideCommandArchive)
}

inline void GuideCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.storage_id_path_){nullptr}
  };
}

GuideCommandArchive::~GuideCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.GuideCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuideCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.storage_id_path_;
}

void GuideCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuideCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GuideCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.storage_id_path_ != nullptr);
      _impl_.storage_id_path_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuideCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractGuideCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath storage_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuideCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GuideCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.AbstractGuideCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath storage_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::storage_id_path(this),
        _Internal::storage_id_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GuideCommandArchive)
  return target;
}

size_t GuideCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.GuideCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.AbstractGuideCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_storage_id_path()) {
    // required .TSP.UUIDPath storage_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_id_path_);
  }

  return total_size;
}
size_t GuideCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GuideCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.AbstractGuideCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath storage_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_id_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuideCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuideCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuideCommandArchive::GetClassData() const { return &_class_data_; }


void GuideCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuideCommandArchive*>(&to_msg);
  auto& from = static_cast<const GuideCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.GuideCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::AbstractGuideCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_storage_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_storage_id_path());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuideCommandArchive::CopyFrom(const GuideCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GuideCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_storage_id_path()) {
    if (!_impl_.storage_id_path_->IsInitialized()) return false;
  }
  return true;
}

void GuideCommandArchive::InternalSwap(GuideCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuideCommandArchive, _impl_.storage_id_path_)
      + sizeof(GuideCommandArchive::_impl_.storage_id_path_)
      - PROTOBUF_FIELD_OFFSET(GuideCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuideCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[41]);
}

// ===================================================================

class DrawableAspectRatioLockedCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableAspectRatioLockedCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableAspectRatioLockedCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aspect_ratio_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_aspect_ratio_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableAspectRatioLockedCommandArchive::_Internal::super(const DrawableAspectRatioLockedCommandArchive* msg) {
  return *msg->_impl_.super_;
}
DrawableAspectRatioLockedCommandArchive::DrawableAspectRatioLockedCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableAspectRatioLockedCommandArchive)
}
DrawableAspectRatioLockedCommandArchive::DrawableAspectRatioLockedCommandArchive(const DrawableAspectRatioLockedCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawableAspectRatioLockedCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.aspect_ratio_locked_){}
    , decltype(_impl_.was_aspect_ratio_locked_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.aspect_ratio_locked_, &from._impl_.aspect_ratio_locked_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_aspect_ratio_locked_) -
    reinterpret_cast<char*>(&_impl_.aspect_ratio_locked_)) + sizeof(_impl_.was_aspect_ratio_locked_));
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableAspectRatioLockedCommandArchive)
}

inline void DrawableAspectRatioLockedCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.aspect_ratio_locked_){false}
    , decltype(_impl_.was_aspect_ratio_locked_){false}
  };
}

DrawableAspectRatioLockedCommandArchive::~DrawableAspectRatioLockedCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableAspectRatioLockedCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawableAspectRatioLockedCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void DrawableAspectRatioLockedCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawableAspectRatioLockedCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableAspectRatioLockedCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  ::memset(&_impl_.aspect_ratio_locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.was_aspect_ratio_locked_) -
      reinterpret_cast<char*>(&_impl_.aspect_ratio_locked_)) + sizeof(_impl_.was_aspect_ratio_locked_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableAspectRatioLockedCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool aspect_ratio_locked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_aspect_ratio_locked(&has_bits);
          _impl_.aspect_ratio_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_aspect_ratio_locked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_was_aspect_ratio_locked(&has_bits);
          _impl_.was_aspect_ratio_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawableAspectRatioLockedCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableAspectRatioLockedCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool aspect_ratio_locked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_aspect_ratio_locked(), target);
  }

  // optional bool was_aspect_ratio_locked = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_was_aspect_ratio_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableAspectRatioLockedCommandArchive)
  return target;
}

size_t DrawableAspectRatioLockedCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableAspectRatioLockedCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool aspect_ratio_locked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool was_aspect_ratio_locked = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawableAspectRatioLockedCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawableAspectRatioLockedCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawableAspectRatioLockedCommandArchive::GetClassData() const { return &_class_data_; }


void DrawableAspectRatioLockedCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawableAspectRatioLockedCommandArchive*>(&to_msg);
  auto& from = static_cast<const DrawableAspectRatioLockedCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableAspectRatioLockedCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.aspect_ratio_locked_ = from._impl_.aspect_ratio_locked_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.was_aspect_ratio_locked_ = from._impl_.was_aspect_ratio_locked_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawableAspectRatioLockedCommandArchive::CopyFrom(const DrawableAspectRatioLockedCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableAspectRatioLockedCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableAspectRatioLockedCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void DrawableAspectRatioLockedCommandArchive::InternalSwap(DrawableAspectRatioLockedCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableAspectRatioLockedCommandArchive, _impl_.was_aspect_ratio_locked_)
      + sizeof(DrawableAspectRatioLockedCommandArchive::_impl_.was_aspect_ratio_locked_)
      - PROTOBUF_FIELD_OFFSET(DrawableAspectRatioLockedCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableAspectRatioLockedCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[42]);
}

// ===================================================================

class DrawableAccessibilityDescriptionCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableAccessibilityDescriptionCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const DrawableAccessibilityDescriptionCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accessibility_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_accessibility_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSD::InfoCommandArchive&
DrawableAccessibilityDescriptionCommandArchive::_Internal::super(const DrawableAccessibilityDescriptionCommandArchive* msg) {
  return *msg->_impl_.super_;
}
DrawableAccessibilityDescriptionCommandArchive::DrawableAccessibilityDescriptionCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableAccessibilityDescriptionCommandArchive)
}
DrawableAccessibilityDescriptionCommandArchive::DrawableAccessibilityDescriptionCommandArchive(const DrawableAccessibilityDescriptionCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawableAccessibilityDescriptionCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accessibility_description_){}
    , decltype(_impl_.old_accessibility_description_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accessibility_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accessibility_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_accessibility_description()) {
    _this->_impl_.accessibility_description_.Set(from._internal_accessibility_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_accessibility_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_accessibility_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_old_accessibility_description()) {
    _this->_impl_.old_accessibility_description_.Set(from._internal_old_accessibility_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableAccessibilityDescriptionCommandArchive)
}

inline void DrawableAccessibilityDescriptionCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accessibility_description_){}
    , decltype(_impl_.old_accessibility_description_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.accessibility_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accessibility_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_accessibility_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_accessibility_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DrawableAccessibilityDescriptionCommandArchive::~DrawableAccessibilityDescriptionCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableAccessibilityDescriptionCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawableAccessibilityDescriptionCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accessibility_description_.Destroy();
  _impl_.old_accessibility_description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void DrawableAccessibilityDescriptionCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawableAccessibilityDescriptionCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.accessibility_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.old_accessibility_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableAccessibilityDescriptionCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string accessibility_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accessibility_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string old_accessibility_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_old_accessibility_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSD.DrawableAccessibilityDescriptionCommandArchive.old_accessibility_description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawableAccessibilityDescriptionCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string accessibility_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_accessibility_description().data(), static_cast<int>(this->_internal_accessibility_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableAccessibilityDescriptionCommandArchive.accessibility_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accessibility_description(), target);
  }

  // optional string old_accessibility_description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_accessibility_description().data(), static_cast<int>(this->_internal_old_accessibility_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSD.DrawableAccessibilityDescriptionCommandArchive.old_accessibility_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_old_accessibility_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableAccessibilityDescriptionCommandArchive)
  return target;
}

size_t DrawableAccessibilityDescriptionCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string accessibility_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_accessibility_description());
    }

    // optional string old_accessibility_description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_accessibility_description());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawableAccessibilityDescriptionCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawableAccessibilityDescriptionCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawableAccessibilityDescriptionCommandArchive::GetClassData() const { return &_class_data_; }


void DrawableAccessibilityDescriptionCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawableAccessibilityDescriptionCommandArchive*>(&to_msg);
  auto& from = static_cast<const DrawableAccessibilityDescriptionCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_accessibility_description(from._internal_accessibility_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_old_accessibility_description(from._internal_old_accessibility_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawableAccessibilityDescriptionCommandArchive::CopyFrom(const DrawableAccessibilityDescriptionCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableAccessibilityDescriptionCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableAccessibilityDescriptionCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void DrawableAccessibilityDescriptionCommandArchive::InternalSwap(DrawableAccessibilityDescriptionCommandArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accessibility_description_, lhs_arena,
      &other->_impl_.accessibility_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_accessibility_description_, lhs_arena,
      &other->_impl_.old_accessibility_description_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableAccessibilityDescriptionCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[43]);
}

// ===================================================================

class PasteStyleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteStyleCommandArchive>()._impl_._has_bits_);
  static const ::TSD::AbstractStyleCommandArchive& super(const PasteStyleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& new_style(const PasteStyleCommandArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& rollback_style(const PasteStyleCommandArchive* msg);
  static void set_has_rollback_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tail_end_on_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::AbstractStyleCommandArchive&
PasteStyleCommandArchive::_Internal::super(const PasteStyleCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
PasteStyleCommandArchive::_Internal::new_style(const PasteStyleCommandArchive* msg) {
  return *msg->_impl_.new_style_;
}
const ::TSP::Reference&
PasteStyleCommandArchive::_Internal::rollback_style(const PasteStyleCommandArchive* msg) {
  return *msg->_impl_.rollback_style_;
}
void PasteStyleCommandArchive::clear_new_style() {
  if (_impl_.new_style_ != nullptr) _impl_.new_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PasteStyleCommandArchive::clear_rollback_style() {
  if (_impl_.rollback_style_ != nullptr) _impl_.rollback_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PasteStyleCommandArchive::PasteStyleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.PasteStyleCommandArchive)
}
PasteStyleCommandArchive::PasteStyleCommandArchive(const PasteStyleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PasteStyleCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
    , decltype(_impl_.rollback_style_){nullptr}
    , decltype(_impl_.tail_end_on_left_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::AbstractStyleCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_new_style()) {
    _this->_impl_.new_style_ = new ::TSP::Reference(*from._impl_.new_style_);
  }
  if (from._internal_has_rollback_style()) {
    _this->_impl_.rollback_style_ = new ::TSP::Reference(*from._impl_.rollback_style_);
  }
  _this->_impl_.tail_end_on_left_ = from._impl_.tail_end_on_left_;
  // @@protoc_insertion_point(copy_constructor:TSD.PasteStyleCommandArchive)
}

inline void PasteStyleCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
    , decltype(_impl_.rollback_style_){nullptr}
    , decltype(_impl_.tail_end_on_left_){false}
  };
}

PasteStyleCommandArchive::~PasteStyleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.PasteStyleCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasteStyleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.new_style_;
  if (this != internal_default_instance()) delete _impl_.rollback_style_;
}

void PasteStyleCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PasteStyleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PasteStyleCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_style_ != nullptr);
      _impl_.new_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.rollback_style_ != nullptr);
      _impl_.rollback_style_->Clear();
    }
  }
  _impl_.tail_end_on_left_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteStyleCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.AbstractStyleCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tail_end_on_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tail_end_on_left(&has_bits);
          _impl_.tail_end_on_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasteStyleCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PasteStyleCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_style(this),
        _Internal::new_style(this).GetCachedSize(), target, stream);
  }

  // optional bool tail_end_on_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_tail_end_on_left(), target);
  }

  // optional .TSP.Reference rollback_style = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rollback_style(this),
        _Internal::rollback_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PasteStyleCommandArchive)
  return target;
}

size_t PasteStyleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PasteStyleCommandArchive)
  size_t total_size = 0;

  // required .TSD.AbstractStyleCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference new_style = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_style_);
    }

    // optional .TSP.Reference rollback_style = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rollback_style_);
    }

    // optional bool tail_end_on_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PasteStyleCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PasteStyleCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PasteStyleCommandArchive::GetClassData() const { return &_class_data_; }


void PasteStyleCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PasteStyleCommandArchive*>(&to_msg);
  auto& from = static_cast<const PasteStyleCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.PasteStyleCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::AbstractStyleCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_style()->::TSP::Reference::MergeFrom(
          from._internal_new_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rollback_style()->::TSP::Reference::MergeFrom(
          from._internal_rollback_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tail_end_on_left_ = from._impl_.tail_end_on_left_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PasteStyleCommandArchive::CopyFrom(const PasteStyleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PasteStyleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteStyleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!_impl_.new_style_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_style()) {
    if (!_impl_.rollback_style_->IsInitialized()) return false;
  }
  return true;
}

void PasteStyleCommandArchive::InternalSwap(PasteStyleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteStyleCommandArchive, _impl_.tail_end_on_left_)
      + sizeof(PasteStyleCommandArchive::_impl_.tail_end_on_left_)
      - PROTOBUF_FIELD_OFFSET(PasteStyleCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteStyleCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[44]);
}

// ===================================================================

class ImageInfoAbstractGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageInfoAbstractGeometryCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::GeometryArchive& new_image_geometry(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_new_image_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::GeometryArchive& old_image_geometry(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_old_image_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::GeometryArchive& new_mask_geometry(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_new_mask_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::GeometryArchive& old_mask_geometry(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_old_mask_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::PathSourceArchive& new_mask_path_source(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_new_mask_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::PathSourceArchive& old_mask_path_source(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_old_mask_path_source(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Size& new_image_original_size(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_new_image_original_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Size& old_image_original_size(const ImageInfoAbstractGeometryCommandArchive* msg);
  static void set_has_old_image_original_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_background_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_old_background_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::super(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::GeometryArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::new_image_geometry(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->_impl_.new_image_geometry_;
}
const ::TSD::GeometryArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::old_image_geometry(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->_impl_.old_image_geometry_;
}
const ::TSD::GeometryArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::new_mask_geometry(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->_impl_.new_mask_geometry_;
}
const ::TSD::GeometryArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::old_mask_geometry(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->_impl_.old_mask_geometry_;
}
const ::TSD::PathSourceArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::new_mask_path_source(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->_impl_.new_mask_path_source_;
}
const ::TSD::PathSourceArchive&
ImageInfoAbstractGeometryCommandArchive::_Internal::old_mask_path_source(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->_impl_.old_mask_path_source_;
}
const ::TSP::Size&
ImageInfoAbstractGeometryCommandArchive::_Internal::new_image_original_size(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->_impl_.new_image_original_size_;
}
const ::TSP::Size&
ImageInfoAbstractGeometryCommandArchive::_Internal::old_image_original_size(const ImageInfoAbstractGeometryCommandArchive* msg) {
  return *msg->_impl_.old_image_original_size_;
}
void ImageInfoAbstractGeometryCommandArchive::clear_new_image_geometry() {
  if (_impl_.new_image_geometry_ != nullptr) _impl_.new_image_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_old_image_geometry() {
  if (_impl_.old_image_geometry_ != nullptr) _impl_.old_image_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_new_mask_geometry() {
  if (_impl_.new_mask_geometry_ != nullptr) _impl_.new_mask_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_old_mask_geometry() {
  if (_impl_.old_mask_geometry_ != nullptr) _impl_.old_mask_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_new_mask_path_source() {
  if (_impl_.new_mask_path_source_ != nullptr) _impl_.new_mask_path_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_old_mask_path_source() {
  if (_impl_.old_mask_path_source_ != nullptr) _impl_.old_mask_path_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_new_image_original_size() {
  if (_impl_.new_image_original_size_ != nullptr) _impl_.new_image_original_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ImageInfoAbstractGeometryCommandArchive::clear_old_image_original_size() {
  if (_impl_.old_image_original_size_ != nullptr) _impl_.old_image_original_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
ImageInfoAbstractGeometryCommandArchive::ImageInfoAbstractGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageInfoAbstractGeometryCommandArchive)
}
ImageInfoAbstractGeometryCommandArchive::ImageInfoAbstractGeometryCommandArchive(const ImageInfoAbstractGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageInfoAbstractGeometryCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_image_geometry_){nullptr}
    , decltype(_impl_.old_image_geometry_){nullptr}
    , decltype(_impl_.new_mask_geometry_){nullptr}
    , decltype(_impl_.old_mask_geometry_){nullptr}
    , decltype(_impl_.new_mask_path_source_){nullptr}
    , decltype(_impl_.old_mask_path_source_){nullptr}
    , decltype(_impl_.new_image_original_size_){nullptr}
    , decltype(_impl_.old_image_original_size_){nullptr}
    , decltype(_impl_.background_removed_){}
    , decltype(_impl_.old_background_removed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_new_image_geometry()) {
    _this->_impl_.new_image_geometry_ = new ::TSD::GeometryArchive(*from._impl_.new_image_geometry_);
  }
  if (from._internal_has_old_image_geometry()) {
    _this->_impl_.old_image_geometry_ = new ::TSD::GeometryArchive(*from._impl_.old_image_geometry_);
  }
  if (from._internal_has_new_mask_geometry()) {
    _this->_impl_.new_mask_geometry_ = new ::TSD::GeometryArchive(*from._impl_.new_mask_geometry_);
  }
  if (from._internal_has_old_mask_geometry()) {
    _this->_impl_.old_mask_geometry_ = new ::TSD::GeometryArchive(*from._impl_.old_mask_geometry_);
  }
  if (from._internal_has_new_mask_path_source()) {
    _this->_impl_.new_mask_path_source_ = new ::TSD::PathSourceArchive(*from._impl_.new_mask_path_source_);
  }
  if (from._internal_has_old_mask_path_source()) {
    _this->_impl_.old_mask_path_source_ = new ::TSD::PathSourceArchive(*from._impl_.old_mask_path_source_);
  }
  if (from._internal_has_new_image_original_size()) {
    _this->_impl_.new_image_original_size_ = new ::TSP::Size(*from._impl_.new_image_original_size_);
  }
  if (from._internal_has_old_image_original_size()) {
    _this->_impl_.old_image_original_size_ = new ::TSP::Size(*from._impl_.old_image_original_size_);
  }
  ::memcpy(&_impl_.background_removed_, &from._impl_.background_removed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.old_background_removed_) -
    reinterpret_cast<char*>(&_impl_.background_removed_)) + sizeof(_impl_.old_background_removed_));
  // @@protoc_insertion_point(copy_constructor:TSD.ImageInfoAbstractGeometryCommandArchive)
}

inline void ImageInfoAbstractGeometryCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_image_geometry_){nullptr}
    , decltype(_impl_.old_image_geometry_){nullptr}
    , decltype(_impl_.new_mask_geometry_){nullptr}
    , decltype(_impl_.old_mask_geometry_){nullptr}
    , decltype(_impl_.new_mask_path_source_){nullptr}
    , decltype(_impl_.old_mask_path_source_){nullptr}
    , decltype(_impl_.new_image_original_size_){nullptr}
    , decltype(_impl_.old_image_original_size_){nullptr}
    , decltype(_impl_.background_removed_){false}
    , decltype(_impl_.old_background_removed_){false}
  };
}

ImageInfoAbstractGeometryCommandArchive::~ImageInfoAbstractGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageInfoAbstractGeometryCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageInfoAbstractGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.new_image_geometry_;
  if (this != internal_default_instance()) delete _impl_.old_image_geometry_;
  if (this != internal_default_instance()) delete _impl_.new_mask_geometry_;
  if (this != internal_default_instance()) delete _impl_.old_mask_geometry_;
  if (this != internal_default_instance()) delete _impl_.new_mask_path_source_;
  if (this != internal_default_instance()) delete _impl_.old_mask_path_source_;
  if (this != internal_default_instance()) delete _impl_.new_image_original_size_;
  if (this != internal_default_instance()) delete _impl_.old_image_original_size_;
}

void ImageInfoAbstractGeometryCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageInfoAbstractGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_image_geometry_ != nullptr);
      _impl_.new_image_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_image_geometry_ != nullptr);
      _impl_.old_image_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.new_mask_geometry_ != nullptr);
      _impl_.new_mask_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.old_mask_geometry_ != nullptr);
      _impl_.old_mask_geometry_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.new_mask_path_source_ != nullptr);
      _impl_.new_mask_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.old_mask_path_source_ != nullptr);
      _impl_.old_mask_path_source_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.new_image_original_size_ != nullptr);
      _impl_.new_image_original_size_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.old_image_original_size_ != nullptr);
    _impl_.old_image_original_size_->Clear();
  }
  ::memset(&_impl_.background_removed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.old_background_removed_) -
      reinterpret_cast<char*>(&_impl_.background_removed_)) + sizeof(_impl_.old_background_removed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfoAbstractGeometryCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive new_image_geometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_image_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive old_image_geometry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive new_mask_geometry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_mask_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive old_mask_geometry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_mask_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive new_mask_path_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_mask_path_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive old_mask_path_source = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_mask_path_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size new_image_original_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_image_original_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size old_image_original_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_image_original_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool background_removed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_background_removed(&has_bits);
          _impl_.background_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool old_background_removed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_old_background_removed(&has_bits);
          _impl_.old_background_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageInfoAbstractGeometryCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive new_image_geometry = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_image_geometry(this),
        _Internal::new_image_geometry(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive old_image_geometry = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_image_geometry(this),
        _Internal::old_image_geometry(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive new_mask_geometry = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_mask_geometry(this),
        _Internal::new_mask_geometry(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive old_mask_geometry = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::old_mask_geometry(this),
        _Internal::old_mask_geometry(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.PathSourceArchive new_mask_path_source = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::new_mask_path_source(this),
        _Internal::new_mask_path_source(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.PathSourceArchive old_mask_path_source = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::old_mask_path_source(this),
        _Internal::old_mask_path_source(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size new_image_original_size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::new_image_original_size(this),
        _Internal::new_image_original_size(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size old_image_original_size = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::old_image_original_size(this),
        _Internal::old_image_original_size(this).GetCachedSize(), target, stream);
  }

  // optional bool background_removed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_background_removed(), target);
  }

  // optional bool old_background_removed = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_old_background_removed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageInfoAbstractGeometryCommandArchive)
  return target;
}

size_t ImageInfoAbstractGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.GeometryArchive new_image_geometry = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_image_geometry_);
    }

    // optional .TSD.GeometryArchive old_image_geometry = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_image_geometry_);
    }

    // optional .TSD.GeometryArchive new_mask_geometry = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_mask_geometry_);
    }

    // optional .TSD.GeometryArchive old_mask_geometry = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_mask_geometry_);
    }

    // optional .TSD.PathSourceArchive new_mask_path_source = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_mask_path_source_);
    }

    // optional .TSD.PathSourceArchive old_mask_path_source = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_mask_path_source_);
    }

    // optional .TSP.Size new_image_original_size = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_image_original_size_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSP.Size old_image_original_size = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_image_original_size_);
    }

    // optional bool background_removed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool old_background_removed = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageInfoAbstractGeometryCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageInfoAbstractGeometryCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageInfoAbstractGeometryCommandArchive::GetClassData() const { return &_class_data_; }


void ImageInfoAbstractGeometryCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageInfoAbstractGeometryCommandArchive*>(&to_msg);
  auto& from = static_cast<const ImageInfoAbstractGeometryCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_image_geometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_new_image_geometry());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_image_geometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_old_image_geometry());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_new_mask_geometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_new_mask_geometry());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_old_mask_geometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_old_mask_geometry());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_new_mask_path_source()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_new_mask_path_source());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_old_mask_path_source()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_old_mask_path_source());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_new_image_original_size()->::TSP::Size::MergeFrom(
          from._internal_new_image_original_size());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_old_image_original_size()->::TSP::Size::MergeFrom(
          from._internal_old_image_original_size());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.background_removed_ = from._impl_.background_removed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.old_background_removed_ = from._impl_.old_background_removed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageInfoAbstractGeometryCommandArchive::CopyFrom(const ImageInfoAbstractGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageInfoAbstractGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfoAbstractGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_new_image_geometry()) {
    if (!_impl_.new_image_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_old_image_geometry()) {
    if (!_impl_.old_image_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_new_mask_geometry()) {
    if (!_impl_.new_mask_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_old_mask_geometry()) {
    if (!_impl_.old_mask_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_new_mask_path_source()) {
    if (!_impl_.new_mask_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_old_mask_path_source()) {
    if (!_impl_.old_mask_path_source_->IsInitialized()) return false;
  }
  if (_internal_has_new_image_original_size()) {
    if (!_impl_.new_image_original_size_->IsInitialized()) return false;
  }
  if (_internal_has_old_image_original_size()) {
    if (!_impl_.old_image_original_size_->IsInitialized()) return false;
  }
  return true;
}

void ImageInfoAbstractGeometryCommandArchive::InternalSwap(ImageInfoAbstractGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageInfoAbstractGeometryCommandArchive, _impl_.old_background_removed_)
      + sizeof(ImageInfoAbstractGeometryCommandArchive::_impl_.old_background_removed_)
      - PROTOBUF_FIELD_OFFSET(ImageInfoAbstractGeometryCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfoAbstractGeometryCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[45]);
}

// ===================================================================

class ImageInfoGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageInfoGeometryCommandArchive>()._impl_._has_bits_);
  static const ::TSD::ImageInfoAbstractGeometryCommandArchive& super(const ImageInfoGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ImageInfoAbstractGeometryCommandArchive&
ImageInfoGeometryCommandArchive::_Internal::super(const ImageInfoGeometryCommandArchive* msg) {
  return *msg->_impl_.super_;
}
ImageInfoGeometryCommandArchive::ImageInfoGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageInfoGeometryCommandArchive)
}
ImageInfoGeometryCommandArchive::ImageInfoGeometryCommandArchive(const ImageInfoGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageInfoGeometryCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::ImageInfoAbstractGeometryCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageInfoGeometryCommandArchive)
}

inline void ImageInfoGeometryCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ImageInfoGeometryCommandArchive::~ImageInfoGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageInfoGeometryCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageInfoGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ImageInfoGeometryCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageInfoGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageInfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfoGeometryCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageInfoGeometryCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageInfoGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageInfoGeometryCommandArchive)
  return target;
}

size_t ImageInfoGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageInfoGeometryCommandArchive)
  size_t total_size = 0;

  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageInfoGeometryCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageInfoGeometryCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageInfoGeometryCommandArchive::GetClassData() const { return &_class_data_; }


void ImageInfoGeometryCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageInfoGeometryCommandArchive*>(&to_msg);
  auto& from = static_cast<const ImageInfoGeometryCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageInfoGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::ImageInfoAbstractGeometryCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageInfoGeometryCommandArchive::CopyFrom(const ImageInfoGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageInfoGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfoGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ImageInfoGeometryCommandArchive::InternalSwap(ImageInfoGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfoGeometryCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[46]);
}

// ===================================================================

class ImageInfoMaskGeometryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageInfoMaskGeometryCommandArchive>()._impl_._has_bits_);
  static const ::TSD::ImageInfoAbstractGeometryCommandArchive& super(const ImageInfoMaskGeometryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::ImageInfoAbstractGeometryCommandArchive&
ImageInfoMaskGeometryCommandArchive::_Internal::super(const ImageInfoMaskGeometryCommandArchive* msg) {
  return *msg->_impl_.super_;
}
ImageInfoMaskGeometryCommandArchive::ImageInfoMaskGeometryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ImageInfoMaskGeometryCommandArchive)
}
ImageInfoMaskGeometryCommandArchive::ImageInfoMaskGeometryCommandArchive(const ImageInfoMaskGeometryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageInfoMaskGeometryCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::ImageInfoAbstractGeometryCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ImageInfoMaskGeometryCommandArchive)
}

inline void ImageInfoMaskGeometryCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ImageInfoMaskGeometryCommandArchive::~ImageInfoMaskGeometryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.ImageInfoMaskGeometryCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageInfoMaskGeometryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ImageInfoMaskGeometryCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageInfoMaskGeometryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ImageInfoMaskGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfoMaskGeometryCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageInfoMaskGeometryCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ImageInfoMaskGeometryCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ImageInfoMaskGeometryCommandArchive)
  return target;
}

size_t ImageInfoMaskGeometryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ImageInfoMaskGeometryCommandArchive)
  size_t total_size = 0;

  // required .TSD.ImageInfoAbstractGeometryCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageInfoMaskGeometryCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageInfoMaskGeometryCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageInfoMaskGeometryCommandArchive::GetClassData() const { return &_class_data_; }


void ImageInfoMaskGeometryCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageInfoMaskGeometryCommandArchive*>(&to_msg);
  auto& from = static_cast<const ImageInfoMaskGeometryCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ImageInfoMaskGeometryCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::ImageInfoAbstractGeometryCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageInfoMaskGeometryCommandArchive::CopyFrom(const ImageInfoMaskGeometryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ImageInfoMaskGeometryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfoMaskGeometryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ImageInfoMaskGeometryCommandArchive::InternalSwap(ImageInfoMaskGeometryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfoMaskGeometryCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[47]);
}

// ===================================================================

class InfoCollectionSelectionTransformerHelperArchive::_Internal {
 public:
};

void InfoCollectionSelectionTransformerHelperArchive::clear_info_uuid_path_list() {
  _impl_.info_uuid_path_list_.Clear();
}
InfoCollectionSelectionTransformerHelperArchive::InfoCollectionSelectionTransformerHelperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.InfoCollectionSelectionTransformerHelperArchive)
}
InfoCollectionSelectionTransformerHelperArchive::InfoCollectionSelectionTransformerHelperArchive(const InfoCollectionSelectionTransformerHelperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoCollectionSelectionTransformerHelperArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_uuid_path_list_){from._impl_.info_uuid_path_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.InfoCollectionSelectionTransformerHelperArchive)
}

inline void InfoCollectionSelectionTransformerHelperArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_uuid_path_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InfoCollectionSelectionTransformerHelperArchive::~InfoCollectionSelectionTransformerHelperArchive() {
  // @@protoc_insertion_point(destructor:TSD.InfoCollectionSelectionTransformerHelperArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoCollectionSelectionTransformerHelperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.info_uuid_path_list_.~RepeatedPtrField();
}

void InfoCollectionSelectionTransformerHelperArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoCollectionSelectionTransformerHelperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_uuid_path_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoCollectionSelectionTransformerHelperArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUIDPath info_uuid_path_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_uuid_path_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoCollectionSelectionTransformerHelperArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath info_uuid_path_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_info_uuid_path_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_info_uuid_path_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InfoCollectionSelectionTransformerHelperArchive)
  return target;
}

size_t InfoCollectionSelectionTransformerHelperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDPath info_uuid_path_list = 1;
  total_size += 1UL * this->_internal_info_uuid_path_list_size();
  for (const auto& msg : this->_impl_.info_uuid_path_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoCollectionSelectionTransformerHelperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoCollectionSelectionTransformerHelperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoCollectionSelectionTransformerHelperArchive::GetClassData() const { return &_class_data_; }


void InfoCollectionSelectionTransformerHelperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoCollectionSelectionTransformerHelperArchive*>(&to_msg);
  auto& from = static_cast<const InfoCollectionSelectionTransformerHelperArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.info_uuid_path_list_.MergeFrom(from._impl_.info_uuid_path_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoCollectionSelectionTransformerHelperArchive::CopyFrom(const InfoCollectionSelectionTransformerHelperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InfoCollectionSelectionTransformerHelperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoCollectionSelectionTransformerHelperArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.info_uuid_path_list_))
    return false;
  return true;
}

void InfoCollectionSelectionTransformerHelperArchive::InternalSwap(InfoCollectionSelectionTransformerHelperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_uuid_path_list_.InternalSwap(&other->_impl_.info_uuid_path_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoCollectionSelectionTransformerHelperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[48]);
}

// ===================================================================

class DrawableSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawableSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper(const DrawableSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& untransformed_drawable_selection(const DrawableSelectionTransformerArchive* msg);
  static void set_has_untransformed_drawable_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
DrawableSelectionTransformerArchive::_Internal::transformer_helper(const DrawableSelectionTransformerArchive* msg) {
  return *msg->_impl_.transformer_helper_;
}
const ::TSP::Reference&
DrawableSelectionTransformerArchive::_Internal::untransformed_drawable_selection(const DrawableSelectionTransformerArchive* msg) {
  return *msg->_impl_.untransformed_drawable_selection_;
}
void DrawableSelectionTransformerArchive::clear_untransformed_drawable_selection() {
  if (_impl_.untransformed_drawable_selection_ != nullptr) _impl_.untransformed_drawable_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DrawableSelectionTransformerArchive::DrawableSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.DrawableSelectionTransformerArchive)
}
DrawableSelectionTransformerArchive::DrawableSelectionTransformerArchive(const DrawableSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DrawableSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_helper_){nullptr}
    , decltype(_impl_.untransformed_drawable_selection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    _this->_impl_.transformer_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from._impl_.transformer_helper_);
  }
  if (from._internal_has_untransformed_drawable_selection()) {
    _this->_impl_.untransformed_drawable_selection_ = new ::TSP::Reference(*from._impl_.untransformed_drawable_selection_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.DrawableSelectionTransformerArchive)
}

inline void DrawableSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_helper_){nullptr}
    , decltype(_impl_.untransformed_drawable_selection_){nullptr}
  };
}

DrawableSelectionTransformerArchive::~DrawableSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.DrawableSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawableSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transformer_helper_;
  if (this != internal_default_instance()) delete _impl_.untransformed_drawable_selection_;
}

void DrawableSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawableSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.DrawableSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.transformer_helper_ != nullptr);
      _impl_.transformer_helper_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.untransformed_drawable_selection_ != nullptr);
      _impl_.untransformed_drawable_selection_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference untransformed_drawable_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_untransformed_drawable_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrawableSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.DrawableSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transformer_helper(this),
        _Internal::transformer_helper(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference untransformed_drawable_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::untransformed_drawable_selection(this),
        _Internal::untransformed_drawable_selection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.DrawableSelectionTransformerArchive)
  return target;
}

size_t DrawableSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSD.DrawableSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_transformer_helper()) {
    // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformer_helper_);
  }

  if (_internal_has_untransformed_drawable_selection()) {
    // required .TSP.Reference untransformed_drawable_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.untransformed_drawable_selection_);
  }

  return total_size;
}
size_t DrawableSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.DrawableSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformer_helper_);

    // required .TSP.Reference untransformed_drawable_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.untransformed_drawable_selection_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrawableSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DrawableSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrawableSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void DrawableSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DrawableSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const DrawableSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.DrawableSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_transformer_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(
          from._internal_transformer_helper());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_untransformed_drawable_selection()->::TSP::Reference::MergeFrom(
          from._internal_untransformed_drawable_selection());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrawableSelectionTransformerArchive::CopyFrom(const DrawableSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.DrawableSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!_impl_.transformer_helper_->IsInitialized()) return false;
  }
  if (_internal_has_untransformed_drawable_selection()) {
    if (!_impl_.untransformed_drawable_selection_->IsInitialized()) return false;
  }
  return true;
}

void DrawableSelectionTransformerArchive::InternalSwap(DrawableSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableSelectionTransformerArchive, _impl_.untransformed_drawable_selection_)
      + sizeof(DrawableSelectionTransformerArchive::_impl_.untransformed_drawable_selection_)
      - PROTOBUF_FIELD_OFFSET(DrawableSelectionTransformerArchive, _impl_.transformer_helper_)>(
          reinterpret_cast<char*>(&_impl_.transformer_helper_),
          reinterpret_cast<char*>(&other->_impl_.transformer_helper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[49]);
}

// ===================================================================

class InfoHyperlinkSelectionTransformerArchive::_Internal {
 public:
};

InfoHyperlinkSelectionTransformerArchive::InfoHyperlinkSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSD.InfoHyperlinkSelectionTransformerArchive)
}
InfoHyperlinkSelectionTransformerArchive::InfoHyperlinkSelectionTransformerArchive(const InfoHyperlinkSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  InfoHyperlinkSelectionTransformerArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.InfoHyperlinkSelectionTransformerArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoHyperlinkSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoHyperlinkSelectionTransformerArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InfoHyperlinkSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[50]);
}

// ===================================================================

class CanvasSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CanvasSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCollectionSelectionTransformerHelperArchive& transformer_helper(const CanvasSelectionTransformerArchive* msg);
  static void set_has_transformer_helper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCollectionSelectionTransformerHelperArchive&
CanvasSelectionTransformerArchive::_Internal::transformer_helper(const CanvasSelectionTransformerArchive* msg) {
  return *msg->_impl_.transformer_helper_;
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.CanvasSelectionTransformerArchive)
}
CanvasSelectionTransformerArchive::CanvasSelectionTransformerArchive(const CanvasSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanvasSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_helper_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformer_helper()) {
    _this->_impl_.transformer_helper_ = new ::TSD::InfoCollectionSelectionTransformerHelperArchive(*from._impl_.transformer_helper_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.CanvasSelectionTransformerArchive)
}

inline void CanvasSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.transformer_helper_){nullptr}
  };
}

CanvasSelectionTransformerArchive::~CanvasSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.CanvasSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanvasSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.transformer_helper_;
}

void CanvasSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanvasSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.CanvasSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.transformer_helper_ != nullptr);
    _impl_.transformer_helper_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformer_helper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanvasSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.CanvasSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transformer_helper(this),
        _Internal::transformer_helper(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.CanvasSelectionTransformerArchive)
  return target;
}

size_t CanvasSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.CanvasSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  if (_internal_has_transformer_helper()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transformer_helper_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanvasSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanvasSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanvasSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void CanvasSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanvasSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const CanvasSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.CanvasSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transformer_helper()) {
    _this->_internal_mutable_transformer_helper()->::TSD::InfoCollectionSelectionTransformerHelperArchive::MergeFrom(
        from._internal_transformer_helper());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanvasSelectionTransformerArchive::CopyFrom(const CanvasSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.CanvasSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_transformer_helper()) {
    if (!_impl_.transformer_helper_->IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionTransformerArchive::InternalSwap(CanvasSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.transformer_helper_, other->_impl_.transformer_helper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[51]);
}

// ===================================================================

class PathSelectionTransformerArchive::_Internal {
 public:
};

PathSelectionTransformerArchive::PathSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSD.PathSelectionTransformerArchive)
}
PathSelectionTransformerArchive::PathSelectionTransformerArchive(const PathSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PathSelectionTransformerArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSD.PathSelectionTransformerArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathSelectionTransformerArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PathSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[52]);
}

// ===================================================================

class ShapeSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShapeSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSD::DrawableSelectionTransformerArchive& super(const ShapeSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableSelectionTransformerArchive&
ShapeSelectionTransformerArchive::_Internal::super(const ShapeSelectionTransformerArchive* msg) {
  return *msg->_impl_.super_;
}
ShapeSelectionTransformerArchive::ShapeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.ShapeSelectionTransformerArchive)
}
ShapeSelectionTransformerArchive::ShapeSelectionTransformerArchive(const ShapeSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShapeSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::DrawableSelectionTransformerArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.ShapeSelectionTransformerArchive)
}

inline void ShapeSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

ShapeSelectionTransformerArchive::~ShapeSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.ShapeSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShapeSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void ShapeSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShapeSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.ShapeSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableSelectionTransformerArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShapeSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.ShapeSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.ShapeSelectionTransformerArchive)
  return target;
}

size_t ShapeSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.ShapeSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShapeSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShapeSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShapeSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void ShapeSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShapeSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const ShapeSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.ShapeSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::DrawableSelectionTransformerArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShapeSelectionTransformerArchive::CopyFrom(const ShapeSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.ShapeSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void ShapeSelectionTransformerArchive::InternalSwap(ShapeSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[53]);
}

// ===================================================================

class GroupSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSD::DrawableSelectionTransformerArchive& super(const GroupSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::DrawableSelectionTransformerArchive&
GroupSelectionTransformerArchive::_Internal::super(const GroupSelectionTransformerArchive* msg) {
  return *msg->_impl_.super_;
}
GroupSelectionTransformerArchive::GroupSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.GroupSelectionTransformerArchive)
}
GroupSelectionTransformerArchive::GroupSelectionTransformerArchive(const GroupSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::DrawableSelectionTransformerArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.GroupSelectionTransformerArchive)
}

inline void GroupSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

GroupSelectionTransformerArchive::~GroupSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.GroupSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void GroupSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.GroupSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableSelectionTransformerArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.GroupSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.GroupSelectionTransformerArchive)
  return target;
}

size_t GroupSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.GroupSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void GroupSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const GroupSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.GroupSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSD::DrawableSelectionTransformerArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupSelectionTransformerArchive::CopyFrom(const GroupSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.GroupSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void GroupSelectionTransformerArchive::InternalSwap(GroupSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[54]);
}

// ===================================================================

class PencilAnnotationSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PencilAnnotationSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& pencil_annotation_uuid(const PencilAnnotationSelectionTransformerArchive* msg);
  static void set_has_pencil_annotation_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
PencilAnnotationSelectionTransformerArchive::_Internal::pencil_annotation_uuid(const PencilAnnotationSelectionTransformerArchive* msg) {
  return *msg->_impl_.pencil_annotation_uuid_;
}
void PencilAnnotationSelectionTransformerArchive::clear_pencil_annotation_uuid() {
  if (_impl_.pencil_annotation_uuid_ != nullptr) _impl_.pencil_annotation_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PencilAnnotationSelectionTransformerArchive::PencilAnnotationSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.PencilAnnotationSelectionTransformerArchive)
}
PencilAnnotationSelectionTransformerArchive::PencilAnnotationSelectionTransformerArchive(const PencilAnnotationSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PencilAnnotationSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pencil_annotation_uuid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pencil_annotation_uuid()) {
    _this->_impl_.pencil_annotation_uuid_ = new ::TSP::UUID(*from._impl_.pencil_annotation_uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.PencilAnnotationSelectionTransformerArchive)
}

inline void PencilAnnotationSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pencil_annotation_uuid_){nullptr}
  };
}

PencilAnnotationSelectionTransformerArchive::~PencilAnnotationSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TSD.PencilAnnotationSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PencilAnnotationSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pencil_annotation_uuid_;
}

void PencilAnnotationSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PencilAnnotationSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.PencilAnnotationSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.pencil_annotation_uuid_ != nullptr);
    _impl_.pencil_annotation_uuid_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PencilAnnotationSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID pencil_annotation_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PencilAnnotationSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.PencilAnnotationSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID pencil_annotation_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pencil_annotation_uuid(this),
        _Internal::pencil_annotation_uuid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.PencilAnnotationSelectionTransformerArchive)
  return target;
}

size_t PencilAnnotationSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.PencilAnnotationSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSP.UUID pencil_annotation_uuid = 1;
  if (_internal_has_pencil_annotation_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pencil_annotation_uuid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PencilAnnotationSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PencilAnnotationSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PencilAnnotationSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void PencilAnnotationSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PencilAnnotationSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const PencilAnnotationSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.PencilAnnotationSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pencil_annotation_uuid()) {
    _this->_internal_mutable_pencil_annotation_uuid()->::TSP::UUID::MergeFrom(
        from._internal_pencil_annotation_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PencilAnnotationSelectionTransformerArchive::CopyFrom(const PencilAnnotationSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.PencilAnnotationSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PencilAnnotationSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_pencil_annotation_uuid()) {
    if (!_impl_.pencil_annotation_uuid_->IsInitialized()) return false;
  }
  return true;
}

void PencilAnnotationSelectionTransformerArchive::InternalSwap(PencilAnnotationSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pencil_annotation_uuid_, other->_impl_.pencil_annotation_uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PencilAnnotationSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[55]);
}

// ===================================================================

class FreehandDrawingOpacityCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FreehandDrawingOpacityCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const FreehandDrawingOpacityCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
FreehandDrawingOpacityCommandArchive::_Internal::super(const FreehandDrawingOpacityCommandArchive* msg) {
  return *msg->_impl_.super_;
}
FreehandDrawingOpacityCommandArchive::FreehandDrawingOpacityCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.FreehandDrawingOpacityCommandArchive)
}
FreehandDrawingOpacityCommandArchive::FreehandDrawingOpacityCommandArchive(const FreehandDrawingOpacityCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FreehandDrawingOpacityCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.opacity_){}
    , decltype(_impl_.old_opacity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.opacity_, &from._impl_.opacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.old_opacity_) -
    reinterpret_cast<char*>(&_impl_.opacity_)) + sizeof(_impl_.old_opacity_));
  // @@protoc_insertion_point(copy_constructor:TSD.FreehandDrawingOpacityCommandArchive)
}

inline void FreehandDrawingOpacityCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.opacity_){0}
    , decltype(_impl_.old_opacity_){0}
  };
}

FreehandDrawingOpacityCommandArchive::~FreehandDrawingOpacityCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.FreehandDrawingOpacityCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FreehandDrawingOpacityCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FreehandDrawingOpacityCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FreehandDrawingOpacityCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FreehandDrawingOpacityCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.opacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.old_opacity_) -
        reinterpret_cast<char*>(&_impl_.opacity_)) + sizeof(_impl_.old_opacity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreehandDrawingOpacityCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double opacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_opacity(&has_bits);
          _impl_.opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double old_opacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_old_opacity(&has_bits);
          _impl_.old_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FreehandDrawingOpacityCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FreehandDrawingOpacityCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional double opacity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_opacity(), target);
  }

  // optional double old_opacity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_old_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FreehandDrawingOpacityCommandArchive)
  return target;
}

size_t FreehandDrawingOpacityCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FreehandDrawingOpacityCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional double opacity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double old_opacity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FreehandDrawingOpacityCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FreehandDrawingOpacityCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FreehandDrawingOpacityCommandArchive::GetClassData() const { return &_class_data_; }


void FreehandDrawingOpacityCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FreehandDrawingOpacityCommandArchive*>(&to_msg);
  auto& from = static_cast<const FreehandDrawingOpacityCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.FreehandDrawingOpacityCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.opacity_ = from._impl_.opacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.old_opacity_ = from._impl_.old_opacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FreehandDrawingOpacityCommandArchive::CopyFrom(const FreehandDrawingOpacityCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FreehandDrawingOpacityCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreehandDrawingOpacityCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FreehandDrawingOpacityCommandArchive::InternalSwap(FreehandDrawingOpacityCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreehandDrawingOpacityCommandArchive, _impl_.old_opacity_)
      + sizeof(FreehandDrawingOpacityCommandArchive::_impl_.old_opacity_)
      - PROTOBUF_FIELD_OFFSET(FreehandDrawingOpacityCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreehandDrawingOpacityCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[56]);
}

// ===================================================================

class FreehandDrawingAnimationCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FreehandDrawingAnimationCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const FreehandDrawingAnimationCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::FreehandDrawingAnimationArchive& animation(const FreehandDrawingAnimationCommandArchive* msg);
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::FreehandDrawingAnimationArchive& old_animation(const FreehandDrawingAnimationCommandArchive* msg);
  static void set_has_old_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
FreehandDrawingAnimationCommandArchive::_Internal::super(const FreehandDrawingAnimationCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::FreehandDrawingAnimationArchive&
FreehandDrawingAnimationCommandArchive::_Internal::animation(const FreehandDrawingAnimationCommandArchive* msg) {
  return *msg->_impl_.animation_;
}
const ::TSD::FreehandDrawingAnimationArchive&
FreehandDrawingAnimationCommandArchive::_Internal::old_animation(const FreehandDrawingAnimationCommandArchive* msg) {
  return *msg->_impl_.old_animation_;
}
void FreehandDrawingAnimationCommandArchive::clear_animation() {
  if (_impl_.animation_ != nullptr) _impl_.animation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void FreehandDrawingAnimationCommandArchive::clear_old_animation() {
  if (_impl_.old_animation_ != nullptr) _impl_.old_animation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
FreehandDrawingAnimationCommandArchive::FreehandDrawingAnimationCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.FreehandDrawingAnimationCommandArchive)
}
FreehandDrawingAnimationCommandArchive::FreehandDrawingAnimationCommandArchive(const FreehandDrawingAnimationCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FreehandDrawingAnimationCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.animation_){nullptr}
    , decltype(_impl_.old_animation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_animation()) {
    _this->_impl_.animation_ = new ::TSD::FreehandDrawingAnimationArchive(*from._impl_.animation_);
  }
  if (from._internal_has_old_animation()) {
    _this->_impl_.old_animation_ = new ::TSD::FreehandDrawingAnimationArchive(*from._impl_.old_animation_);
  }
  // @@protoc_insertion_point(copy_constructor:TSD.FreehandDrawingAnimationCommandArchive)
}

inline void FreehandDrawingAnimationCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.animation_){nullptr}
    , decltype(_impl_.old_animation_){nullptr}
  };
}

FreehandDrawingAnimationCommandArchive::~FreehandDrawingAnimationCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.FreehandDrawingAnimationCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FreehandDrawingAnimationCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.animation_;
  if (this != internal_default_instance()) delete _impl_.old_animation_;
}

void FreehandDrawingAnimationCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FreehandDrawingAnimationCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.FreehandDrawingAnimationCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.animation_ != nullptr);
      _impl_.animation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_animation_ != nullptr);
      _impl_.old_animation_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreehandDrawingAnimationCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FreehandDrawingAnimationArchive animation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FreehandDrawingAnimationArchive old_animation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_animation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FreehandDrawingAnimationCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.FreehandDrawingAnimationCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FreehandDrawingAnimationArchive animation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::animation(this),
        _Internal::animation(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FreehandDrawingAnimationArchive old_animation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_animation(this),
        _Internal::old_animation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.FreehandDrawingAnimationCommandArchive)
  return target;
}

size_t FreehandDrawingAnimationCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.FreehandDrawingAnimationCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSD.FreehandDrawingAnimationArchive animation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.animation_);
    }

    // optional .TSD.FreehandDrawingAnimationArchive old_animation = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_animation_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FreehandDrawingAnimationCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FreehandDrawingAnimationCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FreehandDrawingAnimationCommandArchive::GetClassData() const { return &_class_data_; }


void FreehandDrawingAnimationCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FreehandDrawingAnimationCommandArchive*>(&to_msg);
  auto& from = static_cast<const FreehandDrawingAnimationCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.FreehandDrawingAnimationCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_animation()->::TSD::FreehandDrawingAnimationArchive::MergeFrom(
          from._internal_animation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_animation()->::TSD::FreehandDrawingAnimationArchive::MergeFrom(
          from._internal_old_animation());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FreehandDrawingAnimationCommandArchive::CopyFrom(const FreehandDrawingAnimationCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.FreehandDrawingAnimationCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreehandDrawingAnimationCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FreehandDrawingAnimationCommandArchive::InternalSwap(FreehandDrawingAnimationCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreehandDrawingAnimationCommandArchive, _impl_.old_animation_)
      + sizeof(FreehandDrawingAnimationCommandArchive::_impl_.old_animation_)
      - PROTOBUF_FIELD_OFFSET(FreehandDrawingAnimationCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreehandDrawingAnimationCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[57]);
}

// ===================================================================

class InsertCaptionOrTitleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertCaptionOrTitleCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& drawable_info_id_path(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_drawable_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& caption_or_title_info(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_caption_or_title_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& added_caption_or_title_uuid(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_added_caption_or_title_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caption_or_title_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& undo_object(const InsertCaptionOrTitleCommandArchive* msg);
  static void set_has_undo_object(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
InsertCaptionOrTitleCommandArchive::_Internal::super(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
InsertCaptionOrTitleCommandArchive::_Internal::drawable_info_id_path(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->_impl_.drawable_info_id_path_;
}
const ::TSP::Reference&
InsertCaptionOrTitleCommandArchive::_Internal::caption_or_title_info(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->_impl_.caption_or_title_info_;
}
const ::TSP::UUID&
InsertCaptionOrTitleCommandArchive::_Internal::added_caption_or_title_uuid(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->_impl_.added_caption_or_title_uuid_;
}
const ::TSP::Reference&
InsertCaptionOrTitleCommandArchive::_Internal::undo_object(const InsertCaptionOrTitleCommandArchive* msg) {
  return *msg->_impl_.undo_object_;
}
void InsertCaptionOrTitleCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InsertCaptionOrTitleCommandArchive::clear_drawable_info_id_path() {
  if (_impl_.drawable_info_id_path_ != nullptr) _impl_.drawable_info_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void InsertCaptionOrTitleCommandArchive::clear_caption_or_title_info() {
  if (_impl_.caption_or_title_info_ != nullptr) _impl_.caption_or_title_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void InsertCaptionOrTitleCommandArchive::clear_added_caption_or_title_uuid() {
  if (_impl_.added_caption_or_title_uuid_ != nullptr) _impl_.added_caption_or_title_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void InsertCaptionOrTitleCommandArchive::clear_undo_object() {
  if (_impl_.undo_object_ != nullptr) _impl_.undo_object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
InsertCaptionOrTitleCommandArchive::InsertCaptionOrTitleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.InsertCaptionOrTitleCommandArchive)
}
InsertCaptionOrTitleCommandArchive::InsertCaptionOrTitleCommandArchive(const InsertCaptionOrTitleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertCaptionOrTitleCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.drawable_info_id_path_){nullptr}
    , decltype(_impl_.caption_or_title_info_){nullptr}
    , decltype(_impl_.added_caption_or_title_uuid_){nullptr}
    , decltype(_impl_.undo_object_){nullptr}
    , decltype(_impl_.caption_or_title_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_drawable_info_id_path()) {
    _this->_impl_.drawable_info_id_path_ = new ::TSP::UUIDPath(*from._impl_.drawable_info_id_path_);
  }
  if (from._internal_has_caption_or_title_info()) {
    _this->_impl_.caption_or_title_info_ = new ::TSP::Reference(*from._impl_.caption_or_title_info_);
  }
  if (from._internal_has_added_caption_or_title_uuid()) {
    _this->_impl_.added_caption_or_title_uuid_ = new ::TSP::UUID(*from._impl_.added_caption_or_title_uuid_);
  }
  if (from._internal_has_undo_object()) {
    _this->_impl_.undo_object_ = new ::TSP::Reference(*from._impl_.undo_object_);
  }
  _this->_impl_.caption_or_title_kind_ = from._impl_.caption_or_title_kind_;
  // @@protoc_insertion_point(copy_constructor:TSD.InsertCaptionOrTitleCommandArchive)
}

inline void InsertCaptionOrTitleCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.drawable_info_id_path_){nullptr}
    , decltype(_impl_.caption_or_title_info_){nullptr}
    , decltype(_impl_.added_caption_or_title_uuid_){nullptr}
    , decltype(_impl_.undo_object_){nullptr}
    , decltype(_impl_.caption_or_title_kind_){1}
  };
}

InsertCaptionOrTitleCommandArchive::~InsertCaptionOrTitleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.InsertCaptionOrTitleCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertCaptionOrTitleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.drawable_info_id_path_;
  if (this != internal_default_instance()) delete _impl_.caption_or_title_info_;
  if (this != internal_default_instance()) delete _impl_.added_caption_or_title_uuid_;
  if (this != internal_default_instance()) delete _impl_.undo_object_;
}

void InsertCaptionOrTitleCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertCaptionOrTitleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.InsertCaptionOrTitleCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.drawable_info_id_path_ != nullptr);
      _impl_.drawable_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.caption_or_title_info_ != nullptr);
      _impl_.caption_or_title_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.added_caption_or_title_uuid_ != nullptr);
      _impl_.added_caption_or_title_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.undo_object_ != nullptr);
      _impl_.undo_object_->Clear();
    }
    _impl_.caption_or_title_kind_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertCaptionOrTitleCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath drawable_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_info_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference caption_or_title_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption_or_title_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID added_caption_or_title_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_added_caption_or_title_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CaptionOrTitleKind_IsValid(val))) {
            _internal_set_caption_or_title_kind(static_cast<::TSD::CaptionOrTitleKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_object = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertCaptionOrTitleCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.InsertCaptionOrTitleCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDPath drawable_info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::drawable_info_id_path(this),
        _Internal::drawable_info_id_path(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference caption_or_title_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::caption_or_title_info(this),
        _Internal::caption_or_title_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID added_caption_or_title_uuid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::added_caption_or_title_uuid(this),
        _Internal::added_caption_or_title_uuid(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_caption_or_title_kind(), target);
  }

  // optional .TSP.Reference undo_object = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::undo_object(this),
        _Internal::undo_object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.InsertCaptionOrTitleCommandArchive)
  return target;
}

size_t InsertCaptionOrTitleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.InsertCaptionOrTitleCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSP.UUIDPath drawable_info_id_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.drawable_info_id_path_);
    }

    // optional .TSP.Reference caption_or_title_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.caption_or_title_info_);
    }

    // optional .TSP.UUID added_caption_or_title_uuid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.added_caption_or_title_uuid_);
    }

    // optional .TSP.Reference undo_object = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_object_);
    }

    // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_caption_or_title_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertCaptionOrTitleCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertCaptionOrTitleCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertCaptionOrTitleCommandArchive::GetClassData() const { return &_class_data_; }


void InsertCaptionOrTitleCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertCaptionOrTitleCommandArchive*>(&to_msg);
  auto& from = static_cast<const InsertCaptionOrTitleCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.InsertCaptionOrTitleCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_drawable_info_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_drawable_info_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_caption_or_title_info()->::TSP::Reference::MergeFrom(
          from._internal_caption_or_title_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_added_caption_or_title_uuid()->::TSP::UUID::MergeFrom(
          from._internal_added_caption_or_title_uuid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_undo_object()->::TSP::Reference::MergeFrom(
          from._internal_undo_object());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.caption_or_title_kind_ = from._impl_.caption_or_title_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertCaptionOrTitleCommandArchive::CopyFrom(const InsertCaptionOrTitleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.InsertCaptionOrTitleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertCaptionOrTitleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_info_id_path()) {
    if (!_impl_.drawable_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_caption_or_title_info()) {
    if (!_impl_.caption_or_title_info_->IsInitialized()) return false;
  }
  if (_internal_has_added_caption_or_title_uuid()) {
    if (!_impl_.added_caption_or_title_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_undo_object()) {
    if (!_impl_.undo_object_->IsInitialized()) return false;
  }
  return true;
}

void InsertCaptionOrTitleCommandArchive::InternalSwap(InsertCaptionOrTitleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertCaptionOrTitleCommandArchive, _impl_.undo_object_)
      + sizeof(InsertCaptionOrTitleCommandArchive::_impl_.undo_object_)
      - PROTOBUF_FIELD_OFFSET(InsertCaptionOrTitleCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.caption_or_title_kind_, other->_impl_.caption_or_title_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertCaptionOrTitleCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[58]);
}

// ===================================================================

class RemoveCaptionOrTitleCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveCaptionOrTitleCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const RemoveCaptionOrTitleCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& drawable_info_id_path(const RemoveCaptionOrTitleCommandArchive* msg);
  static void set_has_drawable_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& removed_caption_or_title_info(const RemoveCaptionOrTitleCommandArchive* msg);
  static void set_has_removed_caption_or_title_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& removed_caption_or_title_uuid(const RemoveCaptionOrTitleCommandArchive* msg);
  static void set_has_removed_caption_or_title_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caption_or_title_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
RemoveCaptionOrTitleCommandArchive::_Internal::super(const RemoveCaptionOrTitleCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
RemoveCaptionOrTitleCommandArchive::_Internal::drawable_info_id_path(const RemoveCaptionOrTitleCommandArchive* msg) {
  return *msg->_impl_.drawable_info_id_path_;
}
const ::TSP::Reference&
RemoveCaptionOrTitleCommandArchive::_Internal::removed_caption_or_title_info(const RemoveCaptionOrTitleCommandArchive* msg) {
  return *msg->_impl_.removed_caption_or_title_info_;
}
const ::TSP::UUID&
RemoveCaptionOrTitleCommandArchive::_Internal::removed_caption_or_title_uuid(const RemoveCaptionOrTitleCommandArchive* msg) {
  return *msg->_impl_.removed_caption_or_title_uuid_;
}
void RemoveCaptionOrTitleCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RemoveCaptionOrTitleCommandArchive::clear_drawable_info_id_path() {
  if (_impl_.drawable_info_id_path_ != nullptr) _impl_.drawable_info_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RemoveCaptionOrTitleCommandArchive::clear_removed_caption_or_title_info() {
  if (_impl_.removed_caption_or_title_info_ != nullptr) _impl_.removed_caption_or_title_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RemoveCaptionOrTitleCommandArchive::clear_removed_caption_or_title_uuid() {
  if (_impl_.removed_caption_or_title_uuid_ != nullptr) _impl_.removed_caption_or_title_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RemoveCaptionOrTitleCommandArchive::RemoveCaptionOrTitleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.RemoveCaptionOrTitleCommandArchive)
}
RemoveCaptionOrTitleCommandArchive::RemoveCaptionOrTitleCommandArchive(const RemoveCaptionOrTitleCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveCaptionOrTitleCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.drawable_info_id_path_){nullptr}
    , decltype(_impl_.removed_caption_or_title_info_){nullptr}
    , decltype(_impl_.removed_caption_or_title_uuid_){nullptr}
    , decltype(_impl_.caption_or_title_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_drawable_info_id_path()) {
    _this->_impl_.drawable_info_id_path_ = new ::TSP::UUIDPath(*from._impl_.drawable_info_id_path_);
  }
  if (from._internal_has_removed_caption_or_title_info()) {
    _this->_impl_.removed_caption_or_title_info_ = new ::TSP::Reference(*from._impl_.removed_caption_or_title_info_);
  }
  if (from._internal_has_removed_caption_or_title_uuid()) {
    _this->_impl_.removed_caption_or_title_uuid_ = new ::TSP::UUID(*from._impl_.removed_caption_or_title_uuid_);
  }
  _this->_impl_.caption_or_title_kind_ = from._impl_.caption_or_title_kind_;
  // @@protoc_insertion_point(copy_constructor:TSD.RemoveCaptionOrTitleCommandArchive)
}

inline void RemoveCaptionOrTitleCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.drawable_info_id_path_){nullptr}
    , decltype(_impl_.removed_caption_or_title_info_){nullptr}
    , decltype(_impl_.removed_caption_or_title_uuid_){nullptr}
    , decltype(_impl_.caption_or_title_kind_){1}
  };
}

RemoveCaptionOrTitleCommandArchive::~RemoveCaptionOrTitleCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.RemoveCaptionOrTitleCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveCaptionOrTitleCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.drawable_info_id_path_;
  if (this != internal_default_instance()) delete _impl_.removed_caption_or_title_info_;
  if (this != internal_default_instance()) delete _impl_.removed_caption_or_title_uuid_;
}

void RemoveCaptionOrTitleCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveCaptionOrTitleCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.RemoveCaptionOrTitleCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.drawable_info_id_path_ != nullptr);
      _impl_.drawable_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.removed_caption_or_title_info_ != nullptr);
      _impl_.removed_caption_or_title_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.removed_caption_or_title_uuid_ != nullptr);
      _impl_.removed_caption_or_title_uuid_->Clear();
    }
    _impl_.caption_or_title_kind_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveCaptionOrTitleCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDPath drawable_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable_info_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference removed_caption_or_title_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_caption_or_title_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID removed_caption_or_title_uuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_caption_or_title_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CaptionOrTitleKind_IsValid(val))) {
            _internal_set_caption_or_title_kind(static_cast<::TSD::CaptionOrTitleKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveCaptionOrTitleCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.RemoveCaptionOrTitleCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDPath drawable_info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::drawable_info_id_path(this),
        _Internal::drawable_info_id_path(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference removed_caption_or_title_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::removed_caption_or_title_info(this),
        _Internal::removed_caption_or_title_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID removed_caption_or_title_uuid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::removed_caption_or_title_uuid(this),
        _Internal::removed_caption_or_title_uuid(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_caption_or_title_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.RemoveCaptionOrTitleCommandArchive)
  return target;
}

size_t RemoveCaptionOrTitleCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.RemoveCaptionOrTitleCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.UUIDPath drawable_info_id_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.drawable_info_id_path_);
    }

    // optional .TSP.Reference removed_caption_or_title_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.removed_caption_or_title_info_);
    }

    // optional .TSP.UUID removed_caption_or_title_uuid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.removed_caption_or_title_uuid_);
    }

    // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_caption_or_title_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveCaptionOrTitleCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveCaptionOrTitleCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveCaptionOrTitleCommandArchive::GetClassData() const { return &_class_data_; }


void RemoveCaptionOrTitleCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveCaptionOrTitleCommandArchive*>(&to_msg);
  auto& from = static_cast<const RemoveCaptionOrTitleCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.RemoveCaptionOrTitleCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_drawable_info_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_drawable_info_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_removed_caption_or_title_info()->::TSP::Reference::MergeFrom(
          from._internal_removed_caption_or_title_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_removed_caption_or_title_uuid()->::TSP::UUID::MergeFrom(
          from._internal_removed_caption_or_title_uuid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.caption_or_title_kind_ = from._impl_.caption_or_title_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveCaptionOrTitleCommandArchive::CopyFrom(const RemoveCaptionOrTitleCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.RemoveCaptionOrTitleCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCaptionOrTitleCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_drawable_info_id_path()) {
    if (!_impl_.drawable_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_removed_caption_or_title_info()) {
    if (!_impl_.removed_caption_or_title_info_->IsInitialized()) return false;
  }
  if (_internal_has_removed_caption_or_title_uuid()) {
    if (!_impl_.removed_caption_or_title_uuid_->IsInitialized()) return false;
  }
  return true;
}

void RemoveCaptionOrTitleCommandArchive::InternalSwap(RemoveCaptionOrTitleCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveCaptionOrTitleCommandArchive, _impl_.removed_caption_or_title_uuid_)
      + sizeof(RemoveCaptionOrTitleCommandArchive::_impl_.removed_caption_or_title_uuid_)
      - PROTOBUF_FIELD_OFFSET(RemoveCaptionOrTitleCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.caption_or_title_kind_, other->_impl_.caption_or_title_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveCaptionOrTitleCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[59]);
}

// ===================================================================

class SetCaptionOrTitleVisibilityCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SetCaptionOrTitleVisibilityCommandArchive>()._impl_._has_bits_);
  static const ::TSD::InfoCommandArchive& super(const SetCaptionOrTitleVisibilityCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caption_or_title_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_was_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSD::InfoCommandArchive&
SetCaptionOrTitleVisibilityCommandArchive::_Internal::super(const SetCaptionOrTitleVisibilityCommandArchive* msg) {
  return *msg->_impl_.super_;
}
SetCaptionOrTitleVisibilityCommandArchive::SetCaptionOrTitleVisibilityCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSD.SetCaptionOrTitleVisibilityCommandArchive)
}
SetCaptionOrTitleVisibilityCommandArchive::SetCaptionOrTitleVisibilityCommandArchive(const SetCaptionOrTitleVisibilityCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetCaptionOrTitleVisibilityCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.hidden_){}
    , decltype(_impl_.was_hidden_){}
    , decltype(_impl_.caption_or_title_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::InfoCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.hidden_, &from._impl_.hidden_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.caption_or_title_kind_) -
    reinterpret_cast<char*>(&_impl_.hidden_)) + sizeof(_impl_.caption_or_title_kind_));
  // @@protoc_insertion_point(copy_constructor:TSD.SetCaptionOrTitleVisibilityCommandArchive)
}

inline void SetCaptionOrTitleVisibilityCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.hidden_){false}
    , decltype(_impl_.was_hidden_){false}
    , decltype(_impl_.caption_or_title_kind_){1}
  };
}

SetCaptionOrTitleVisibilityCommandArchive::~SetCaptionOrTitleVisibilityCommandArchive() {
  // @@protoc_insertion_point(destructor:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetCaptionOrTitleVisibilityCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void SetCaptionOrTitleVisibilityCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetCaptionOrTitleVisibilityCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  ::memset(&_impl_.hidden_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.was_hidden_) -
      reinterpret_cast<char*>(&_impl_.hidden_)) + sizeof(_impl_.was_hidden_));
  _impl_.caption_or_title_kind_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCaptionOrTitleVisibilityCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.InfoCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CaptionOrTitleKind_IsValid(val))) {
            _internal_set_caption_or_title_kind(static_cast<::TSD::CaptionOrTitleKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool hidden = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hidden(&has_bits);
          _impl_.hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_was_hidden(&has_bits);
          _impl_.was_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetCaptionOrTitleVisibilityCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.InfoCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_caption_or_title_kind(), target);
  }

  // optional bool hidden = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_hidden(), target);
  }

  // optional bool was_hidden = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_was_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  return target;
}

size_t SetCaptionOrTitleVisibilityCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  size_t total_size = 0;

  // required .TSD.InfoCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bool hidden = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool was_hidden = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .TSD.CaptionOrTitleKind caption_or_title_kind = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_caption_or_title_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCaptionOrTitleVisibilityCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetCaptionOrTitleVisibilityCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCaptionOrTitleVisibilityCommandArchive::GetClassData() const { return &_class_data_; }


void SetCaptionOrTitleVisibilityCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetCaptionOrTitleVisibilityCommandArchive*>(&to_msg);
  auto& from = static_cast<const SetCaptionOrTitleVisibilityCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::InfoCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hidden_ = from._impl_.hidden_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.was_hidden_ = from._impl_.was_hidden_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.caption_or_title_kind_ = from._impl_.caption_or_title_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCaptionOrTitleVisibilityCommandArchive::CopyFrom(const SetCaptionOrTitleVisibilityCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSD.SetCaptionOrTitleVisibilityCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCaptionOrTitleVisibilityCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void SetCaptionOrTitleVisibilityCommandArchive::InternalSwap(SetCaptionOrTitleVisibilityCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetCaptionOrTitleVisibilityCommandArchive, _impl_.was_hidden_)
      + sizeof(SetCaptionOrTitleVisibilityCommandArchive::_impl_.was_hidden_)
      - PROTOBUF_FIELD_OFFSET(SetCaptionOrTitleVisibilityCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.caption_or_title_kind_, other->_impl_.caption_or_title_kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCaptionOrTitleVisibilityCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSDCommandArchives_2eproto_getter, &descriptor_table_TSDCommandArchives_2eproto_once,
      file_level_metadata_TSDCommandArchives_2eproto[60]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSD
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSD::UndoObjectArchive*
Arena::CreateMaybeMessage< ::TSD::UndoObjectArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::UndoObjectArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GroupDrawablesCommandArchive*
Arena::CreateMaybeMessage< ::TSD::GroupDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GroupDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::UngroupGroupCommandArchive*
Arena::CreateMaybeMessage< ::TSD::UngroupGroupCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::UngroupGroupCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerRemoveChildrenCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ContainerRemoveChildrenCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerRemoveChildrenCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerRemoveDrawablesCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ContainerRemoveDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerRemoveDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerInsertChildrenCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ContainerInsertChildrenCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerInsertChildrenCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerInsertDrawablesCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ContainerInsertDrawablesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerInsertDrawablesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ContainerReorderChildrenCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ContainerReorderChildrenCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ContainerReorderChildrenCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GroupUngroupInformativeCommandArchive*
Arena::CreateMaybeMessage< ::TSD::GroupUngroupInformativeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GroupUngroupInformativeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InfoCommandArchive*
Arena::CreateMaybeMessage< ::TSD::InfoCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InfoCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ConnectionLineConnectCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ConnectionLineConnectCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ConnectionLineConnectCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InfoGeometryCommandArchive*
Arena::CreateMaybeMessage< ::TSD::InfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InfoGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawablePathSourceCommandArchive*
Arena::CreateMaybeMessage< ::TSD::DrawablePathSourceCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawablePathSourceCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InstantAlphaCommandArchive*
Arena::CreateMaybeMessage< ::TSD::InstantAlphaCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InstantAlphaCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableApplyThemeCommandArchive*
Arena::CreateMaybeMessage< ::TSD::DrawableApplyThemeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableApplyThemeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::AbstractStyleCommandArchive*
Arena::CreateMaybeMessage< ::TSD::AbstractStyleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::AbstractStyleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::StyledInfoSetStyleCommandArchive*
Arena::CreateMaybeMessage< ::TSD::StyledInfoSetStyleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::StyledInfoSetStyleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::BaseApplyPresetCommandArchive*
Arena::CreateMaybeMessage< ::TSD::BaseApplyPresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::BaseApplyPresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShapeApplyPresetCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ShapeApplyPresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShapeApplyPresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaApplyPresetCommandArchive*
Arena::CreateMaybeMessage< ::TSD::MediaApplyPresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaApplyPresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShapeStyleSetValueCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ShapeStyleSetValueCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShapeStyleSetValueCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::BaseStyleSetValueCommandArchive*
Arena::CreateMaybeMessage< ::TSD::BaseStyleSetValueCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::BaseStyleSetValueCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MovieSetValueCommandArchive_PropertyValue*
Arena::CreateMaybeMessage< ::TSD::MovieSetValueCommandArchive_PropertyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MovieSetValueCommandArchive_PropertyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MovieSetValueCommandArchive*
Arena::CreateMaybeMessage< ::TSD::MovieSetValueCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MovieSetValueCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaStyleSetValueCommandArchive*
Arena::CreateMaybeMessage< ::TSD::MediaStyleSetValueCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaStyleSetValueCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageMediaCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ImageMediaCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageMediaCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaOriginalSizeCommandArchive*
Arena::CreateMaybeMessage< ::TSD::MediaOriginalSizeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaOriginalSizeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaInfoGeometryCommandArchive*
Arena::CreateMaybeMessage< ::TSD::MediaInfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaInfoGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageNaturalSizeCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ImageNaturalSizeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageNaturalSizeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageMaskCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ImageMaskCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageMaskCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageAdjustmentsCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ImageAdjustmentsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageAdjustmentsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::MediaFlagsCommandArchive*
Arena::CreateMaybeMessage< ::TSD::MediaFlagsCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::MediaFlagsCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawablesCommandGroupArchive*
Arena::CreateMaybeMessage< ::TSD::DrawablesCommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawablesCommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ExteriorTextWrapCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ExteriorTextWrapCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ExteriorTextWrapCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableHyperlinkCommandArchive*
Arena::CreateMaybeMessage< ::TSD::DrawableHyperlinkCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableHyperlinkCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::CommentInvalidatingCommandSelectionBehaviorArchive*
Arena::CreateMaybeMessage< ::TSD::CommentInvalidatingCommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::CommentInvalidatingCommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageReplaceCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ImageReplaceCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageReplaceCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableLockCommandArchive*
Arena::CreateMaybeMessage< ::TSD::DrawableLockCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableLockCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableInfoCommentCommandArchive*
Arena::CreateMaybeMessage< ::TSD::DrawableInfoCommentCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableInfoCommentCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawablePencilAnnotationCommandArchive*
Arena::CreateMaybeMessage< ::TSD::DrawablePencilAnnotationCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawablePencilAnnotationCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::AbstractGuideCommandArchive*
Arena::CreateMaybeMessage< ::TSD::AbstractGuideCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::AbstractGuideCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GuideCommandArchive*
Arena::CreateMaybeMessage< ::TSD::GuideCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GuideCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableAspectRatioLockedCommandArchive*
Arena::CreateMaybeMessage< ::TSD::DrawableAspectRatioLockedCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableAspectRatioLockedCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableAccessibilityDescriptionCommandArchive*
Arena::CreateMaybeMessage< ::TSD::DrawableAccessibilityDescriptionCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableAccessibilityDescriptionCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PasteStyleCommandArchive*
Arena::CreateMaybeMessage< ::TSD::PasteStyleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PasteStyleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageInfoAbstractGeometryCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ImageInfoAbstractGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageInfoAbstractGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageInfoGeometryCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ImageInfoGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageInfoGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ImageInfoMaskGeometryCommandArchive*
Arena::CreateMaybeMessage< ::TSD::ImageInfoMaskGeometryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ImageInfoMaskGeometryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InfoCollectionSelectionTransformerHelperArchive*
Arena::CreateMaybeMessage< ::TSD::InfoCollectionSelectionTransformerHelperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InfoCollectionSelectionTransformerHelperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::DrawableSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TSD::DrawableSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::DrawableSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InfoHyperlinkSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TSD::InfoHyperlinkSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InfoHyperlinkSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::CanvasSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TSD::CanvasSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::CanvasSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PathSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TSD::PathSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PathSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::ShapeSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TSD::ShapeSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::ShapeSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::GroupSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TSD::GroupSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::GroupSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::PencilAnnotationSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TSD::PencilAnnotationSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::PencilAnnotationSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FreehandDrawingOpacityCommandArchive*
Arena::CreateMaybeMessage< ::TSD::FreehandDrawingOpacityCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FreehandDrawingOpacityCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::FreehandDrawingAnimationCommandArchive*
Arena::CreateMaybeMessage< ::TSD::FreehandDrawingAnimationCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::FreehandDrawingAnimationCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::InsertCaptionOrTitleCommandArchive*
Arena::CreateMaybeMessage< ::TSD::InsertCaptionOrTitleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::InsertCaptionOrTitleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::RemoveCaptionOrTitleCommandArchive*
Arena::CreateMaybeMessage< ::TSD::RemoveCaptionOrTitleCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::RemoveCaptionOrTitleCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSD::SetCaptionOrTitleVisibilityCommandArchive*
Arena::CreateMaybeMessage< ::TSD::SetCaptionOrTitleVisibilityCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSD::SetCaptionOrTitleVisibilityCommandArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
