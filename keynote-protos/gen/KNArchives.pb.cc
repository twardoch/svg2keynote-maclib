// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNArchives.proto

#include "KNArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace KN {
PROTOBUF_CONSTEXPR AnimationAttributesArchive::AnimationAttributesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.animation_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.effect_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_effect_timing_curve_theme_name_1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_effect_timing_curve_theme_name_2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_effect_timing_curve_theme_name_3_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.custom_effect_timing_curve_1_)*/nullptr
  , /*decltype(_impl_.custom_effect_timing_curve_2_)*/nullptr
  , /*decltype(_impl_.custom_effect_timing_curve_3_)*/nullptr
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_.direction_)*/0u
  , /*decltype(_impl_.random_number_seed_)*/0u
  , /*decltype(_impl_.custom_detail_)*/0
  , /*decltype(_impl_.is_automatic_)*/false
  , /*decltype(_impl_.writing_direction_is_rtl_)*/false} {}
struct AnimationAttributesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationAttributesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationAttributesArchiveDefaultTypeInternal() {}
  union {
    AnimationAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationAttributesArchiveDefaultTypeInternal _AnimationAttributesArchive_default_instance_;
PROTOBUF_CONSTEXPR TransitionAttributesArchive::TransitionAttributesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.database_animation_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_effect_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_color_)*/nullptr
  , /*decltype(_impl_.animationattributes_)*/nullptr
  , /*decltype(_impl_.database_duration_)*/0
  , /*decltype(_impl_.database_direction_)*/0u
  , /*decltype(_impl_.database_delay_)*/0
  , /*decltype(_impl_.custom_twist_)*/0
  , /*decltype(_impl_.custom_mosaic_size_)*/0u
  , /*decltype(_impl_.custom_mosaic_type_)*/0u
  , /*decltype(_impl_.custom_bounce_)*/false
  , /*decltype(_impl_.custom_magic_move_fade_unmatched_objects_)*/false
  , /*decltype(_impl_.custom_motion_blur_)*/false
  , /*decltype(_impl_.database_is_automatic_)*/false
  , /*decltype(_impl_.custom_travel_distance_)*/0
  , /*decltype(_impl_.custom_timing_curve_)*/1
  , /*decltype(_impl_.custom_text_delivery_type_)*/1} {}
struct TransitionAttributesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransitionAttributesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransitionAttributesArchiveDefaultTypeInternal() {}
  union {
    TransitionAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransitionAttributesArchiveDefaultTypeInternal _TransitionAttributesArchive_default_instance_;
PROTOBUF_CONSTEXPR TransitionArchive::TransitionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/nullptr} {}
struct TransitionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransitionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransitionArchiveDefaultTypeInternal() {}
  union {
    TransitionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransitionArchiveDefaultTypeInternal _TransitionArchive_default_instance_;
PROTOBUF_CONSTEXPR BuildChunkArchive::BuildChunkArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.build_)*/nullptr
  , /*decltype(_impl_.build_chunk_identifier_)*/nullptr
  , /*decltype(_impl_.build_id_)*/nullptr
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.automatic_)*/false
  , /*decltype(_impl_.referent_)*/false} {}
struct BuildChunkArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildChunkArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildChunkArchiveDefaultTypeInternal() {}
  union {
    BuildChunkArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildChunkArchiveDefaultTypeInternal _BuildChunkArchive_default_instance_;
PROTOBUF_CONSTEXPR BuildChunkIdentifierArchive::BuildChunkIdentifierArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.build_id_)*/nullptr
  , /*decltype(_impl_.build_chunk_id_)*/0} {}
struct BuildChunkIdentifierArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildChunkIdentifierArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildChunkIdentifierArchiveDefaultTypeInternal() {}
  union {
    BuildChunkIdentifierArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildChunkIdentifierArchiveDefaultTypeInternal _BuildChunkIdentifierArchive_default_instance_;
PROTOBUF_CONSTEXPR BuildAttributeValueArchive::BuildAttributeValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_source_value_)*/nullptr
  , /*decltype(_impl_.color_value_)*/nullptr
  , /*decltype(_impl_.double_value_)*/0
  , /*decltype(_impl_.integer_value_)*/0u
  , /*decltype(_impl_.bool_value_)*/false
  , /*decltype(_impl_.type_)*/0} {}
struct BuildAttributeValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildAttributeValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildAttributeValueArchiveDefaultTypeInternal() {}
  union {
    BuildAttributeValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildAttributeValueArchiveDefaultTypeInternal _BuildAttributeValueArchive_default_instance_;
PROTOBUF_CONSTEXPR BuildAttributeTupleArchive::BuildAttributeTupleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.property_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.build_id_)*/nullptr
  , /*decltype(_impl_.build_chunk_identifier_)*/nullptr} {}
struct BuildAttributeTupleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildAttributeTupleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildAttributeTupleArchiveDefaultTypeInternal() {}
  union {
    BuildAttributeTupleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildAttributeTupleArchiveDefaultTypeInternal _BuildAttributeTupleArchive_default_instance_;
PROTOBUF_CONSTEXPR BuildAttributesArchive::BuildAttributesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.database_animationtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_effect_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.motionpathstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.database_color_)*/nullptr
  , /*decltype(_impl_.animationattributes_)*/nullptr
  , /*decltype(_impl_.action_motionpathsource_)*/nullptr
  , /*decltype(_impl_.database_direction_)*/0u
  , /*decltype(_impl_.eventtrigger_)*/0u
  , /*decltype(_impl_.database_delay_)*/0
  , /*decltype(_impl_.delayautomaticafter_)*/0
  , /*decltype(_impl_.delayautomaticwith_)*/0
  , /*decltype(_impl_.database_duration_)*/0
  , /*decltype(_impl_.action_rotationangle_)*/0
  , /*decltype(_impl_.action_scalesize_)*/0
  , /*decltype(_impl_.action_coloralpha_)*/0
  , /*decltype(_impl_.action_acceleration_)*/0
  , /*decltype(_impl_.curvestyle_)*/0
  , /*decltype(_impl_.chartrotation3d_)*/0
  , /*decltype(_impl_.custom_textdelivery_)*/0
  , /*decltype(_impl_.custom_deliveryoption_)*/0
  , /*decltype(_impl_.custom_action_scale_)*/0
  , /*decltype(_impl_.custom_action_repeatcount_)*/0u
  , /*decltype(_impl_.custom_bounce_)*/false
  , /*decltype(_impl_.custom_action_decay_)*/false
  , /*decltype(_impl_.custom_motion_blur_)*/false
  , /*decltype(_impl_.custom_include_endpoints_)*/false
  , /*decltype(_impl_.custom_action_jiggleintensity_)*/0
  , /*decltype(_impl_.startoffset_)*/0u
  , /*decltype(_impl_.endoffset_)*/0u
  , /*decltype(_impl_.custom_shine_)*/false
  , /*decltype(_impl_.custom_cursor_)*/false
  , /*decltype(_impl_.custom_align_to_path_)*/false
  , /*decltype(_impl_.custom_scale_amount_)*/0
  , /*decltype(_impl_.custom_travel_distance_)*/0
  , /*decltype(_impl_.action_rotationdirection_)*/31} {}
struct BuildAttributesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildAttributesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildAttributesArchiveDefaultTypeInternal() {}
  union {
    BuildAttributesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildAttributesArchiveDefaultTypeInternal _BuildAttributesArchive_default_instance_;
PROTOBUF_CONSTEXPR BuildArchive::BuildArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delivery_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.drawable_)*/nullptr
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.chunk_id_seed_)*/0} {}
struct BuildArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildArchiveDefaultTypeInternal() {}
  union {
    BuildArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildArchiveDefaultTypeInternal _BuildArchive_default_instance_;
PROTOBUF_CONSTEXPR PlaceholderArchive::PlaceholderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.kind_)*/0} {}
struct PlaceholderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceholderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceholderArchiveDefaultTypeInternal() {}
  union {
    PlaceholderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceholderArchiveDefaultTypeInternal _PlaceholderArchive_default_instance_;
PROTOBUF_CONSTEXPR NoteArchive::NoteArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.containedstorage_)*/nullptr} {}
struct NoteArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoteArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoteArchiveDefaultTypeInternal() {}
  union {
    NoteArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoteArchiveDefaultTypeInternal _NoteArchive_default_instance_;
PROTOBUF_CONSTEXPR ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_to_style_map_)*/{}
  , /*decltype(_impl_.deprecated_theme_)*/nullptr} {}
struct ClassicStylesheetRecordArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassicStylesheetRecordArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassicStylesheetRecordArchiveDefaultTypeInternal() {}
  union {
    ClassicStylesheetRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassicStylesheetRecordArchiveDefaultTypeInternal _ClassicStylesheetRecordArchive_default_instance_;
PROTOBUF_CONSTEXPR ClassicThemeRecordArchive::ClassicThemeRecordArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.templates_)*/{}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stylesheetrecord_)*/nullptr} {}
struct ClassicThemeRecordArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassicThemeRecordArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassicThemeRecordArchiveDefaultTypeInternal() {}
  union {
    ClassicThemeRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassicThemeRecordArchiveDefaultTypeInternal _ClassicThemeRecordArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct SlideArchive_SageTagMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideArchive_SageTagMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideArchive_SageTagMapEntryDefaultTypeInternal() {}
  union {
    SlideArchive_SageTagMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideArchive_SageTagMapEntryDefaultTypeInternal _SlideArchive_SageTagMapEntry_default_instance_;
PROTOBUF_CONSTEXPR SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.instructional_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal() {}
  union {
    SlideArchive_InstructionalTextMap_InstructionalTextMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideArchive_InstructionalTextMap_InstructionalTextMapEntryDefaultTypeInternal _SlideArchive_InstructionalTextMap_InstructionalTextMapEntry_default_instance_;
PROTOBUF_CONSTEXPR SlideArchive_InstructionalTextMap::SlideArchive_InstructionalTextMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instructional_text_for_infos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SlideArchive_InstructionalTextMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideArchive_InstructionalTextMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideArchive_InstructionalTextMapDefaultTypeInternal() {}
  union {
    SlideArchive_InstructionalTextMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideArchive_InstructionalTextMapDefaultTypeInternal _SlideArchive_InstructionalTextMap_default_instance_;
PROTOBUF_CONSTEXPR SlideArchive::SlideArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.builds_)*/{}
  , /*decltype(_impl_.buildchunkarchives_)*/{}
  , /*decltype(_impl_.owned_drawables_)*/{}
  , /*decltype(_impl_.staticguides_)*/{}
  , /*decltype(_impl_.sage_tag_to_info_map_)*/{}
  , /*decltype(_impl_.bodyparagraphstyles_)*/{}
  , /*decltype(_impl_.bodyliststyles_)*/{}
  , /*decltype(_impl_.drawables_z_order_)*/{}
  , /*decltype(_impl_.buildchunks_)*/{}
  , /*decltype(_impl_.infos_using_object_placeholder_geometry_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailtextfortitleplaceholder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.thumbnailtextforbodyplaceholder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.style_)*/nullptr
  , /*decltype(_impl_.transition_)*/nullptr
  , /*decltype(_impl_.titleplaceholder_)*/nullptr
  , /*decltype(_impl_.bodyplaceholder_)*/nullptr
  , /*decltype(_impl_.titleplaceholdergeometry_)*/nullptr
  , /*decltype(_impl_.bodyplaceholdergeometry_)*/nullptr
  , /*decltype(_impl_.template_slide_)*/nullptr
  , /*decltype(_impl_.slidenumberplaceholder_)*/nullptr
  , /*decltype(_impl_.slidenumberplaceholdergeometry_)*/nullptr
  , /*decltype(_impl_.titlelayoutproperties_)*/nullptr
  , /*decltype(_impl_.bodylayoutproperties_)*/nullptr
  , /*decltype(_impl_.slidenumberlayoutproperties_)*/nullptr
  , /*decltype(_impl_.note_)*/nullptr
  , /*decltype(_impl_.classicstylesheetrecord_)*/nullptr
  , /*decltype(_impl_.objectplaceholder_)*/nullptr
  , /*decltype(_impl_.userdefinedguidestorage_)*/nullptr
  , /*decltype(_impl_.info_using_object_placeholder_geometry_)*/nullptr
  , /*decltype(_impl_.instructional_text_map_)*/nullptr
  , /*decltype(_impl_.titleplaceholdershapestyleindex_)*/0u
  , /*decltype(_impl_.titleplaceholdertextstyleindex_)*/0u
  , /*decltype(_impl_.bodyplaceholdershapestyleindex_)*/0u
  , /*decltype(_impl_.bodyplaceholdertextstyleindex_)*/0u
  , /*decltype(_impl_.slidenumberplaceholdershapestyleindex_)*/0u
  , /*decltype(_impl_.slidenumberplaceholdertextstyleindex_)*/0u
  , /*decltype(_impl_.slide_objects_layer_with_template_)*/false
  , /*decltype(_impl_.indocument_)*/false
  , /*decltype(_impl_.deprecated_objectplaceholdervisibleforexport_)*/false
  , /*decltype(_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_)*/false} {}
struct SlideArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideArchiveDefaultTypeInternal() {}
  union {
    SlideArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideArchiveDefaultTypeInternal _SlideArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SlideNodeArchive_SlideSpecificHyperlinkMapEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.infoorstorageidstring_)*/{}
  , /*decltype(_impl_.slidenodeidstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal() {}
  union {
    SlideNodeArchive_SlideSpecificHyperlinkMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideNodeArchive_SlideSpecificHyperlinkMapEntryDefaultTypeInternal _SlideNodeArchive_SlideSpecificHyperlinkMapEntry_default_instance_;
PROTOBUF_CONSTEXPR SlideNodeArchive::SlideNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.database_thumbnails_)*/{}
  , /*decltype(_impl_.thumbnailsizes_)*/{}
  , /*decltype(_impl_.thumbnails_)*/{}
  , /*decltype(_impl_.slidespecifichyperlinkmap_)*/{}
  , /*decltype(_impl_.digests_for_datas_needing_download_for_thumbnail_)*/{}
  , /*decltype(_impl_.live_video_source_ids_)*/{}
  , /*decltype(_impl_.live_video_source_usage_entries_)*/{}
  , /*decltype(_impl_.uniqueidentifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.copyfromslideidentifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.slide_)*/nullptr
  , /*decltype(_impl_.database_thumbnail_)*/nullptr
  , /*decltype(_impl_.template_slide_id_)*/nullptr
  , /*decltype(_impl_.thumbnailsaredirty_)*/false
  , /*decltype(_impl_.ishidden_)*/false
  , /*decltype(_impl_.iscollapsed_)*/false
  , /*decltype(_impl_.iscollapsedinoutlineview_)*/false
  , /*decltype(_impl_.hasbodyinoutlineview_)*/false
  , /*decltype(_impl_.hasbuilds_)*/false
  , /*decltype(_impl_.hastransition_)*/false
  , /*decltype(_impl_.hasnote_)*/false
  , /*decltype(_impl_.slidespecifichyperlinkcount_)*/0u
  , /*decltype(_impl_.build_event_count_)*/0u
  , /*decltype(_impl_.isslidenumbervisible_)*/false
  , /*decltype(_impl_.build_event_count_is_up_to_date_)*/false
  , /*decltype(_impl_.has_explicit_builds_)*/false
  , /*decltype(_impl_.has_explicit_builds_is_up_to_date_)*/false
  , /*decltype(_impl_.build_event_count_cache_version_)*/0u
  , /*decltype(_impl_.has_explicit_builds_cache_version_)*/0u
  , /*decltype(_impl_.background_is_no_fill_or_color_fill_with_alpha_)*/false
  , /*decltype(_impl_.depth_)*/1u} {}
struct SlideNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideNodeArchiveDefaultTypeInternal() {}
  union {
    SlideNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideNodeArchiveDefaultTypeInternal _SlideNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR DesktopUILayoutArchive::DesktopUILayoutArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sidebar_view_mode_)*/0
  , /*decltype(_impl_.sidebar_visible_)*/false
  , /*decltype(_impl_.notes_visible_)*/false
  , /*decltype(_impl_.light_table_visible_)*/false
  , /*decltype(_impl_.showing_template_slides_)*/false
  , /*decltype(_impl_.inspector_pane_view_mode_)*/0
  , /*decltype(_impl_.inspector_pane_autohidden_)*/false
  , /*decltype(_impl_.element_list_visible_)*/false
  , /*decltype(_impl_.activity_stream_visible_)*/false
  , /*decltype(_impl_.activity_stream_was_visible_)*/false
  , /*decltype(_impl_.inspector_pane_visible_)*/true} {}
struct DesktopUILayoutArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DesktopUILayoutArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DesktopUILayoutArchiveDefaultTypeInternal() {}
  union {
    DesktopUILayoutArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DesktopUILayoutArchiveDefaultTypeInternal _DesktopUILayoutArchive_default_instance_;
PROTOBUF_CONSTEXPR UIStateArchive::UIStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.selectedslidenodes_)*/{}
  , /*decltype(_impl_.chart_ui_state_)*/{}
  , /*decltype(_impl_.collapsed_slide_nodes_)*/{}
  , /*decltype(_impl_.outline_collapsed_slide_nodes_)*/{}
  , /*decltype(_impl_.outline_has_body_slide_nodes_)*/{}
  , /*decltype(_impl_.element_list_expanded_groups_)*/{}
  , /*decltype(_impl_.slidenodetoedit_)*/nullptr
  , /*decltype(_impl_.deprecated_template_slide_node_to_apply_)*/nullptr
  , /*decltype(_impl_.deprecated_slidethumbnailsize_)*/nullptr
  , /*decltype(_impl_.canvasoffset_)*/nullptr
  , /*decltype(_impl_.iphonecanvasoffset_)*/nullptr
  , /*decltype(_impl_.iphone568canvasoffset_)*/nullptr
  , /*decltype(_impl_.desktop_ui_layout_)*/nullptr
  , /*decltype(_impl_.desktop_canvas_offset_)*/nullptr
  , /*decltype(_impl_.desktop_main_content_size_)*/nullptr
  , /*decltype(_impl_.desktop_main_window_origin_)*/nullptr
  , /*decltype(_impl_.selection_path_)*/nullptr
  , /*decltype(_impl_.freehand_drawing_toolkit_state_)*/nullptr
  , /*decltype(_impl_.selection_path_transformer_)*/nullptr
  , /*decltype(_impl_.canvasviewscale_)*/0
  , /*decltype(_impl_.iphonecanvasviewscale_)*/0
  , /*decltype(_impl_.iphone568canvasviewscale_)*/0
  , /*decltype(_impl_.desktop_canvas_view_scale_)*/0
  , /*decltype(_impl_.light_table_zoom_scale_)*/0
  , /*decltype(_impl_.desktop_slide_view_content_fits_window_)*/false
  , /*decltype(_impl_.show_slide_guides_)*/false
  , /*decltype(_impl_.show_template_guides_)*/false
  , /*decltype(_impl_.shows_comments_)*/false
  , /*decltype(_impl_.desktop_navigator_view_width_)*/0
  , /*decltype(_impl_.desktop_outline_view_width_)*/0
  , /*decltype(_impl_.desktop_presenter_notes_view_height_)*/0
  , /*decltype(_impl_.comments_printing_toggle_enabled_)*/false
  , /*decltype(_impl_.shows_ruler_)*/false
  , /*decltype(_impl_.desktop_outline_view_default_fixed_)*/false
  , /*decltype(_impl_.light_table_hides_skipped_slides_)*/false
  , /*decltype(_impl_.desktop_element_list_view_width_)*/0
  , /*decltype(_impl_.mobile_light_table_zoom_scale_)*/0
  , /*decltype(_impl_.shows_mobile_light_table_)*/false
  , /*decltype(_impl_.mobile_light_table_hides_skipped_slides_)*/false
  , /*decltype(_impl_.shows_mobile_outline_)*/false
  , /*decltype(_impl_.editing_disabled_)*/false
  , /*decltype(_impl_.desktop_activity_stream_view_width_)*/0} {}
struct UIStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UIStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UIStateArchiveDefaultTypeInternal() {}
  union {
    UIStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UIStateArchiveDefaultTypeInternal _UIStateArchive_default_instance_;
PROTOBUF_CONSTEXPR IOSRestorableViewStateRootArchive::IOSRestorableViewStateRootArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.saved_playback_state_)*/nullptr} {}
struct IOSRestorableViewStateRootArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IOSRestorableViewStateRootArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IOSRestorableViewStateRootArchiveDefaultTypeInternal() {}
  union {
    IOSRestorableViewStateRootArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IOSRestorableViewStateRootArchiveDefaultTypeInternal _IOSRestorableViewStateRootArchive_default_instance_;
PROTOBUF_CONSTEXPR IOSSavedPlaybackStateArchive::IOSSavedPlaybackStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.breadcrumb_trail_)*/{}
  , /*decltype(_impl_.slide_node_index_)*/0u
  , /*decltype(_impl_.event_index_)*/0u
  , /*decltype(_impl_.elapsed_time_start_time_)*/0
  , /*decltype(_impl_.recording_playback_current_time_)*/0
  , /*decltype(_impl_.had_external_display_)*/false
  , /*decltype(_impl_.is_elapsed_time_started_)*/false
  , /*decltype(_impl_.should_show_slide_navigator_)*/false
  , /*decltype(_impl_.is_multi_presenter_show_)*/false
  , /*decltype(_impl_.presentation_type_)*/1} {}
struct IOSSavedPlaybackStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IOSSavedPlaybackStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IOSSavedPlaybackStateArchiveDefaultTypeInternal() {}
  union {
    IOSSavedPlaybackStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IOSSavedPlaybackStateArchiveDefaultTypeInternal _IOSSavedPlaybackStateArchive_default_instance_;
PROTOBUF_CONSTEXPR CanvasSelectionArchive::CanvasSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_.database_action_ghost_indexes_)*/{}
  , /*decltype(_impl_.action_ghost_indexes_)*/{}
  , /*decltype(_impl_.build_chunks_)*/{}
  , /*decltype(_impl_.non_interactive_infos_)*/{}
  , /*decltype(_impl_.infos_for_action_ghost_indexes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CanvasSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanvasSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanvasSelectionArchiveDefaultTypeInternal() {}
  union {
    CanvasSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanvasSelectionArchiveDefaultTypeInternal _CanvasSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ActionGhostSelectionArchive::ActionGhostSelectionArchive(
    ::_pbi::ConstantInitialized) {}
struct ActionGhostSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionGhostSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionGhostSelectionArchiveDefaultTypeInternal() {}
  union {
    ActionGhostSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionGhostSelectionArchiveDefaultTypeInternal _ActionGhostSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeCustomTimingCurveArchive::ThemeCustomTimingCurveArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.curve_)*/nullptr} {}
struct ThemeCustomTimingCurveArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeCustomTimingCurveArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeCustomTimingCurveArchiveDefaultTypeInternal() {}
  union {
    ThemeCustomTimingCurveArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeCustomTimingCurveArchiveDefaultTypeInternal _ThemeCustomTimingCurveArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeArchive::ThemeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.templates_)*/{}
  , /*decltype(_impl_.classicthemerecords_)*/{}
  , /*decltype(_impl_.custom_effect_timing_curves_)*/{}
  , /*decltype(_impl_.motion_background_style_presets_)*/{}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.default_template_slide_node_)*/nullptr
  , /*decltype(_impl_.default_template_slide_node_reference_)*/nullptr
  , /*decltype(_impl_.live_video_source_collection_)*/nullptr
  , /*decltype(_impl_.default_template_slide_node_is_our_best_guess_)*/false} {}
struct ThemeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeArchiveDefaultTypeInternal() {}
  union {
    ThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideTreeArchive::SlideTreeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slides_)*/{}
  , /*decltype(_impl_.rootslidenode_)*/nullptr} {}
struct SlideTreeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideTreeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideTreeArchiveDefaultTypeInternal() {}
  union {
    SlideTreeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideTreeArchiveDefaultTypeInternal _SlideTreeArchive_default_instance_;
PROTOBUF_CONSTEXPR ShowArchive::ShowArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uistate_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.slidetree_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.stylesheet_)*/nullptr
  , /*decltype(_impl_.recording_)*/nullptr
  , /*decltype(_impl_.soundtrack_)*/nullptr
  , /*decltype(_impl_.slidelist_)*/nullptr
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.slidenumbersvisible_)*/false
  , /*decltype(_impl_.loop_presentation_)*/false
  , /*decltype(_impl_.idle_timer_active_)*/false
  , /*decltype(_impl_.automatically_plays_upon_open_)*/false
  , /*decltype(_impl_.autoplay_transition_delay_)*/5
  , /*decltype(_impl_.autoplay_build_delay_)*/2
  , /*decltype(_impl_.idle_timer_delay_)*/900} {}
struct ShowArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowArchiveDefaultTypeInternal() {}
  union {
    ShowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowArchiveDefaultTypeInternal _ShowArchive_default_instance_;
PROTOBUF_CONSTEXPR DocumentArchive::DocumentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.show_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tables_custom_format_list_)*/nullptr} {}
struct DocumentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocumentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocumentArchiveDefaultTypeInternal() {}
  union {
    DocumentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideStylePropertiesArchive::SlideStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fill_)*/nullptr
  , /*decltype(_impl_.transition_)*/nullptr
  , /*decltype(_impl_.transition_null_)*/false
  , /*decltype(_impl_.titleplaceholdervisibility_)*/false
  , /*decltype(_impl_.bodyplaceholdervisibility_)*/false
  , /*decltype(_impl_.objectplaceholdervisibility_)*/false
  , /*decltype(_impl_.slidenumberplaceholdervisibility_)*/false} {}
struct SlideStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    SlideStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideStylePropertiesArchiveDefaultTypeInternal _SlideStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideStyleArchive::SlideStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_properties_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u} {}
struct SlideStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideStyleArchiveDefaultTypeInternal() {}
  union {
    SlideStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideStyleArchiveDefaultTypeInternal _SlideStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR PasteboardNativeStorageArchive_LiveVideoSourcePair::PasteboardNativeStorageArchive_LiveVideoSourcePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.live_video_info_)*/nullptr
  , /*decltype(_impl_.live_video_source_)*/nullptr} {}
struct PasteboardNativeStorageArchive_LiveVideoSourcePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasteboardNativeStorageArchive_LiveVideoSourcePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasteboardNativeStorageArchive_LiveVideoSourcePairDefaultTypeInternal() {}
  union {
    PasteboardNativeStorageArchive_LiveVideoSourcePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasteboardNativeStorageArchive_LiveVideoSourcePairDefaultTypeInternal _PasteboardNativeStorageArchive_LiveVideoSourcePair_default_instance_;
PROTOBUF_CONSTEXPR PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawables_)*/{}
  , /*decltype(_impl_.builds_)*/{}
  , /*decltype(_impl_.buildchunks_)*/{}
  , /*decltype(_impl_.slidenodes_)*/{}
  , /*decltype(_impl_.titleranges_)*/{}
  , /*decltype(_impl_.geometries_in_root_)*/{}
  , /*decltype(_impl_.template_slide_nodes_)*/{}
  , /*decltype(_impl_.collapsedslidenodes_)*/{}
  , /*decltype(_impl_.outlinecollapsedslidenodes_)*/{}
  , /*decltype(_impl_.displayed_slide_nodes_)*/{}
  , /*decltype(_impl_.outlinehasbodyslidenodes_)*/{}
  , /*decltype(_impl_.custom_effect_timing_curves_)*/{}
  , /*decltype(_impl_.original_slide_node_uuids_)*/{}
  , /*decltype(_impl_.live_video_sources_)*/{}
  , /*decltype(_impl_.slide_node_unique_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.originalshowsize_)*/nullptr
  , /*decltype(_impl_.transition_)*/nullptr
  , /*decltype(_impl_.slide_nodes_have_datas_needing_download_)*/false} {}
struct PasteboardNativeStorageArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasteboardNativeStorageArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasteboardNativeStorageArchiveDefaultTypeInternal() {}
  union {
    PasteboardNativeStorageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasteboardNativeStorageArchiveDefaultTypeInternal _PasteboardNativeStorageArchive_default_instance_;
PROTOBUF_CONSTEXPR PrototypeForUndoTemplateChangeArchive::PrototypeForUndoTemplateChangeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drawable_info_id_list_)*/{}
  , /*decltype(_impl_.placeholders_)*/{}
  , /*decltype(_impl_.placeholder_tags_list_)*/{}
  , /*decltype(_impl_.slide_style_)*/nullptr
  , /*decltype(_impl_.template_slide_id_)*/nullptr} {}
struct PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal() {}
  union {
    PrototypeForUndoTemplateChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrototypeForUndoTemplateChangeArchiveDefaultTypeInternal _PrototypeForUndoTemplateChangeArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingArchive::RecordingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_tracks_)*/{}
  , /*decltype(_impl_.movie_track_)*/nullptr
  , /*decltype(_impl_.modification_date_)*/nullptr
  , /*decltype(_impl_.sync_state_)*/nullptr
  , /*decltype(_impl_.correction_history_)*/nullptr
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.sync_state_enum_)*/0} {}
struct RecordingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingArchiveDefaultTypeInternal() {}
  union {
    RecordingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingArchiveDefaultTypeInternal _RecordingArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingSyncState::RecordingSyncState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.out_of_sync_token_)*/nullptr
  , /*decltype(_impl_.can_clear_out_of_sync_token_)*/false} {}
struct RecordingSyncStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingSyncStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingSyncStateDefaultTypeInternal() {}
  union {
    RecordingSyncState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingSyncStateDefaultTypeInternal _RecordingSyncState_default_instance_;
PROTOBUF_CONSTEXPR RecordingCorrectionHistory::RecordingCorrectionHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.did_add_missing_events_for_radar_49654305_)*/false} {}
struct RecordingCorrectionHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingCorrectionHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingCorrectionHistoryDefaultTypeInternal() {}
  union {
    RecordingCorrectionHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingCorrectionHistoryDefaultTypeInternal _RecordingCorrectionHistory_default_instance_;
PROTOBUF_CONSTEXPR RecordingEventTrackArchive::RecordingEventTrackArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RecordingEventTrackArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingEventTrackArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingEventTrackArchiveDefaultTypeInternal() {}
  union {
    RecordingEventTrackArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingEventTrackArchiveDefaultTypeInternal _RecordingEventTrackArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingEventArchive::RecordingEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.navigation_event_archive_)*/nullptr
  , /*decltype(_impl_.laser_event_archive_)*/nullptr
  , /*decltype(_impl_.pause_event_archive_)*/nullptr
  , /*decltype(_impl_.movie_event_archive_)*/nullptr
  , /*decltype(_impl_.start_time_)*/-1} {}
struct RecordingEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingEventArchiveDefaultTypeInternal() {}
  union {
    RecordingEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingEventArchiveDefaultTypeInternal _RecordingEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingNavigationEventArchive::RecordingNavigationEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_slide_node_reference_)*/nullptr
  , /*decltype(_impl_.target_slide_node_id_)*/nullptr
  , /*decltype(_impl_.target_event_index_)*/0u
  , /*decltype(_impl_.animation_phase_)*/0} {}
struct RecordingNavigationEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingNavigationEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingNavigationEventArchiveDefaultTypeInternal() {}
  union {
    RecordingNavigationEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingNavigationEventArchiveDefaultTypeInternal _RecordingNavigationEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingLaserEventArchive::RecordingLaserEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unscaled_location_)*/nullptr
  , /*decltype(_impl_.unit_location_)*/nullptr} {}
struct RecordingLaserEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingLaserEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingLaserEventArchiveDefaultTypeInternal() {}
  union {
    RecordingLaserEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingLaserEventArchiveDefaultTypeInternal _RecordingLaserEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingPauseEventArchive::RecordingPauseEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pause_event_type_)*/0} {}
struct RecordingPauseEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingPauseEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingPauseEventArchiveDefaultTypeInternal() {}
  union {
    RecordingPauseEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingPauseEventArchiveDefaultTypeInternal _RecordingPauseEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingMovieEventArchive::RecordingMovieEventArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.movie_info_reference_)*/nullptr
  , /*decltype(_impl_.movie_info_that_played_across_slides_reference_)*/nullptr
  , /*decltype(_impl_.movie_slide_node_id_)*/nullptr
  , /*decltype(_impl_.movie_event_value_)*/0
  , /*decltype(_impl_.movie_event_type_)*/1} {}
struct RecordingMovieEventArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingMovieEventArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingMovieEventArchiveDefaultTypeInternal() {}
  union {
    RecordingMovieEventArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingMovieEventArchiveDefaultTypeInternal _RecordingMovieEventArchive_default_instance_;
PROTOBUF_CONSTEXPR RecordingMovieTrackArchive::RecordingMovieTrackArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.movie_segments_)*/{}
  , /*decltype(_impl_.is_movie_segment_data_trimmed_to_duration_)*/false} {}
struct RecordingMovieTrackArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordingMovieTrackArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordingMovieTrackArchiveDefaultTypeInternal() {}
  union {
    RecordingMovieTrackArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordingMovieTrackArchiveDefaultTypeInternal _RecordingMovieTrackArchive_default_instance_;
PROTOBUF_CONSTEXPR MovieSegmentArchive::MovieSegmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.database_movie_data_)*/nullptr
  , /*decltype(_impl_.movie_data_)*/nullptr
  , /*decltype(_impl_.start_time_)*/-1} {}
struct MovieSegmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovieSegmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovieSegmentArchiveDefaultTypeInternal() {}
  union {
    MovieSegmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovieSegmentArchiveDefaultTypeInternal _MovieSegmentArchive_default_instance_;
PROTOBUF_CONSTEXPR Soundtrack::Soundtrack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.movie_media_)*/{}
  , /*decltype(_impl_.volume_)*/0
  , /*decltype(_impl_.mode_)*/0} {}
struct SoundtrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoundtrackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoundtrackDefaultTypeInternal() {}
  union {
    Soundtrack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoundtrackDefaultTypeInternal _Soundtrack_default_instance_;
PROTOBUF_CONSTEXPR SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct SlideNumberAttachmentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideNumberAttachmentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideNumberAttachmentArchiveDefaultTypeInternal() {}
  union {
    SlideNumberAttachmentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideNumberAttachmentArchiveDefaultTypeInternal _SlideNumberAttachmentArchive_default_instance_;
PROTOBUF_CONSTEXPR SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slide_node_)*/nullptr
  , /*decltype(_impl_.selected_paragraph_indexes_)*/nullptr} {}
struct SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionArchive_OutlineSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideCollectionSelectionArchive_OutlineSelectionDefaultTypeInternal _SlideCollectionSelectionArchive_OutlineSelection_default_instance_;
PROTOBUF_CONSTEXPR SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slide_nodes_)*/{}
  , /*decltype(_impl_.selected_paragraph_indexes_for_slide_nodes_)*/{}
  , /*decltype(_impl_.slide_node_to_edit_)*/nullptr
  , /*decltype(_impl_.range_in_selected_paragraph_)*/nullptr} {}
struct SlideCollectionSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlideCollectionSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlideCollectionSelectionArchiveDefaultTypeInternal() {}
  union {
    SlideCollectionSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlideCollectionSelectionArchiveDefaultTypeInternal _SlideCollectionSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR PresenterNotesSelectionArchive::PresenterNotesSelectionArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slide_node_)*/nullptr} {}
struct PresenterNotesSelectionArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PresenterNotesSelectionArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PresenterNotesSelectionArchiveDefaultTypeInternal() {}
  union {
    PresenterNotesSelectionArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PresenterNotesSelectionArchiveDefaultTypeInternal _PresenterNotesSelectionArchive_default_instance_;
PROTOBUF_CONSTEXPR MixedIdOperationArgs::MixedIdOperationArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_list_types_)*/{}
  , /*decltype(_impl_.add_args_list_)*/{}
  , /*decltype(_impl_.show_placeholder_args_list_)*/{}
  , /*decltype(_impl_.remove_args_list_)*/{}
  , /*decltype(_impl_.hide_placeholder_args_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MixedIdOperationArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MixedIdOperationArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MixedIdOperationArgsDefaultTypeInternal() {}
  union {
    MixedIdOperationArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MixedIdOperationArgsDefaultTypeInternal _MixedIdOperationArgs_default_instance_;
PROTOBUF_CONSTEXPR LiveVideoInfo::LiveVideoInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_id_)*/nullptr
  , /*decltype(_impl_.normalized_offset_)*/nullptr
  , /*decltype(_impl_.background_fill_)*/nullptr
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.is_placeholder_)*/false
  , /*decltype(_impl_.mask_kind_)*/0
  , /*decltype(_impl_.mask_corner_radius_)*/0
  , /*decltype(_impl_.background_kind_)*/0} {}
struct LiveVideoInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveVideoInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveVideoInfoDefaultTypeInternal() {}
  union {
    LiveVideoInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveVideoInfoDefaultTypeInternal _LiveVideoInfo_default_instance_;
PROTOBUF_CONSTEXPR LiveVideoSource::LiveVideoSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.symbol_abbreviation_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capture_device_description_)*/nullptr
  , /*decltype(_impl_.collaboration_command_usage_state_)*/nullptr
  , /*decltype(_impl_.poster_image_data_)*/nullptr
  , /*decltype(_impl_.symbol_image_identifier_)*/0
  , /*decltype(_impl_.symbol_tint_color_identifier_)*/0
  , /*decltype(_impl_.is_default_source_)*/false} {}
struct LiveVideoSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveVideoSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveVideoSourceDefaultTypeInternal() {}
  union {
    LiveVideoSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveVideoSourceDefaultTypeInternal _LiveVideoSource_default_instance_;
PROTOBUF_CONSTEXPR LiveVideoSourceCollaborationCommandUsageState::LiveVideoSourceCollaborationCommandUsageState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.single_collaboration_command_usage_token_)*/nullptr
  , /*decltype(_impl_.has_multiple_collaboration_command_usage_tokens_)*/false} {}
struct LiveVideoSourceCollaborationCommandUsageStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveVideoSourceCollaborationCommandUsageStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveVideoSourceCollaborationCommandUsageStateDefaultTypeInternal() {}
  union {
    LiveVideoSourceCollaborationCommandUsageState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveVideoSourceCollaborationCommandUsageStateDefaultTypeInternal _LiveVideoSourceCollaborationCommandUsageState_default_instance_;
PROTOBUF_CONSTEXPR LiveVideoCaptureDeviceDescription::LiveVideoCaptureDeviceDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unique_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localized_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_video_resolution_)*/nullptr
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.is_ios_screen_recording_device_)*/false} {}
struct LiveVideoCaptureDeviceDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveVideoCaptureDeviceDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveVideoCaptureDeviceDescriptionDefaultTypeInternal() {}
  union {
    LiveVideoCaptureDeviceDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveVideoCaptureDeviceDescriptionDefaultTypeInternal _LiveVideoCaptureDeviceDescription_default_instance_;
PROTOBUF_CONSTEXPR LiveVideoSourceCollection::LiveVideoSourceCollection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sources_)*/{}
  , /*decltype(_impl_.default_source_)*/nullptr} {}
struct LiveVideoSourceCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveVideoSourceCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveVideoSourceCollectionDefaultTypeInternal() {}
  union {
    LiveVideoSourceCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveVideoSourceCollectionDefaultTypeInternal _LiveVideoSourceCollection_default_instance_;
PROTOBUF_CONSTEXPR LiveVideoSourceUsageEntry::LiveVideoSourceUsageEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.background_kinds_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LiveVideoSourceUsageEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiveVideoSourceUsageEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiveVideoSourceUsageEntryDefaultTypeInternal() {}
  union {
    LiveVideoSourceUsageEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiveVideoSourceUsageEntryDefaultTypeInternal _LiveVideoSourceUsageEntry_default_instance_;
PROTOBUF_CONSTEXPR MotionBackgroundStylePropertiesArchive::MotionBackgroundStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.background_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.variant_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blend_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_blend_factor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dest_blend_factor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.motion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_gradient_)*/nullptr
  , /*decltype(_impl_.background_color_)*/nullptr
  , /*decltype(_impl_.foreground_color_)*/nullptr
  , /*decltype(_impl_.line_color_)*/nullptr
  , /*decltype(_impl_.point_color_)*/nullptr
  , /*decltype(_impl_.mesh_color_)*/nullptr
  , /*decltype(_impl_.color_blur_sigma_)*/0
  , /*decltype(_impl_.noise_amplitude_)*/0
  , /*decltype(_impl_.noise_octaves_)*/0
  , /*decltype(_impl_.noise_scale_)*/0
  , /*decltype(_impl_.noise_speed_)*/0
  , /*decltype(_impl_.color_palette_offset_)*/0
  , /*decltype(_impl_.zoom_)*/0
  , /*decltype(_impl_.alpha_)*/0
  , /*decltype(_impl_.border_)*/0
  , /*decltype(_impl_.blend_)*/0
  , /*decltype(_impl_.brightness_)*/0
  , /*decltype(_impl_.border_lightness_)*/0
  , /*decltype(_impl_.contrast_)*/0
  , /*decltype(_impl_.damping_)*/0
  , /*decltype(_impl_.density_)*/0
  , /*decltype(_impl_.diffuse_power_)*/0
  , /*decltype(_impl_.distortion_)*/0
  , /*decltype(_impl_.entropy_)*/0
  , /*decltype(_impl_.exposure_)*/0
  , /*decltype(_impl_.filter_)*/0
  , /*decltype(_impl_.fog_distance_)*/0
  , /*decltype(_impl_.fog_power_)*/0
  , /*decltype(_impl_.gamma_)*/0
  , /*decltype(_impl_.grain_amount_)*/0
  , /*decltype(_impl_.grain_intensity_)*/0
  , /*decltype(_impl_.hue_)*/0
  , /*decltype(_impl_.lightness_)*/0
  , /*decltype(_impl_.line_alpha_)*/0
  , /*decltype(_impl_.line_center_)*/0
  , /*decltype(_impl_.line_fade_)*/0
  , /*decltype(_impl_.line_fade_power_)*/0
  , /*decltype(_impl_.random_number_seed_)*/0
  , /*decltype(_impl_.invert_)*/false
  , /*decltype(_impl_.draw_points_)*/false
  , /*decltype(_impl_.draw_lines_)*/false
  , /*decltype(_impl_.draw_shadows_)*/false
  , /*decltype(_impl_.line_length_)*/0
  , /*decltype(_impl_.line_width_)*/0
  , /*decltype(_impl_.noise_size_scale_)*/0
  , /*decltype(_impl_.noise_size_weight_)*/0
  , /*decltype(_impl_.noise_variance_)*/0
  , /*decltype(_impl_.offset_)*/0
  , /*decltype(_impl_.motion_background_opacity_)*/0
  , /*decltype(_impl_.point_depth_alpha_)*/0
  , /*decltype(_impl_.point_size_)*/0
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.refraction_)*/0
  , /*decltype(_impl_.resolution_)*/0
  , /*decltype(_impl_.saturation_)*/0
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.shadow_alpha_)*/0
  , /*decltype(_impl_.shadow_angle_)*/0
  , /*decltype(_impl_.shadow_offset_)*/0
  , /*decltype(_impl_.shadow_scale_)*/0
  , /*decltype(_impl_.shadow_value_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.texture_power_)*/0
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_.pixels_per_division_)*/0u
  , /*decltype(_impl_.symmetry_)*/false
  , /*decltype(_impl_.lock_focus_)*/false
  , /*decltype(_impl_.amplitude_)*/0
  , /*decltype(_impl_.envelope_)*/0
  , /*decltype(_impl_.y_offset_)*/0
  , /*decltype(_impl_.focus_)*/0
  , /*decltype(_impl_.blur_)*/0
  , /*decltype(_impl_.grain_speed_)*/0
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_.mesh_line_width_)*/0
  , /*decltype(_impl_.delta_time_)*/0
  , /*decltype(_impl_.time_start_)*/0
  , /*decltype(_impl_.color_contrast_)*/0
  , /*decltype(_impl_.color_gamma_)*/0
  , /*decltype(_impl_.color_saturation_)*/0
  , /*decltype(_impl_.color_brightness_)*/0
  , /*decltype(_impl_.color_hue_)*/0
  , /*decltype(_impl_.color_vibrance_)*/0
  , /*decltype(_impl_.noise_movement_)*/0
  , /*decltype(_impl_.power_)*/0
  , /*decltype(_impl_.threshold_)*/0
  , /*decltype(_impl_.noise_scale_horizontal_)*/0
  , /*decltype(_impl_.noise_scale_vertical_)*/0
  , /*decltype(_impl_.noise_gain_)*/0
  , /*decltype(_impl_.noise_lacunarity_)*/0
  , /*decltype(_impl_.extrusion_)*/0
  , /*decltype(_impl_.noise_offset_)*/0
  , /*decltype(_impl_.color_hue_offset_)*/0
  , /*decltype(_impl_.shadow_hue_)*/0
  , /*decltype(_impl_.shadow_hue_offset_)*/0
  , /*decltype(_impl_.instance_count_)*/0
  , /*decltype(_impl_.noise_octaves_iterations_)*/0
  , /*decltype(_impl_.shadow_saturation_)*/0
  , /*decltype(_impl_.shadow_brightness_)*/0
  , /*decltype(_impl_.shadow_intensity_)*/0
  , /*decltype(_impl_.shadow_power_)*/0} {}
struct MotionBackgroundStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotionBackgroundStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotionBackgroundStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    MotionBackgroundStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotionBackgroundStylePropertiesArchiveDefaultTypeInternal _MotionBackgroundStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR MotionBackgroundStyleArchive::MotionBackgroundStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.slide_properties_)*/nullptr
  , /*decltype(_impl_.poster_frame_data_)*/nullptr
  , /*decltype(_impl_.override_count_)*/0u} {}
struct MotionBackgroundStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotionBackgroundStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotionBackgroundStyleArchiveDefaultTypeInternal() {}
  union {
    MotionBackgroundStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotionBackgroundStyleArchiveDefaultTypeInternal _MotionBackgroundStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR MotionBackgroundFillArchive::MotionBackgroundFillArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motion_background_style_)*/nullptr} {}
struct MotionBackgroundFillArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotionBackgroundFillArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotionBackgroundFillArchiveDefaultTypeInternal() {}
  union {
    MotionBackgroundFillArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotionBackgroundFillArchiveDefaultTypeInternal _MotionBackgroundFillArchive_default_instance_;
}  // namespace KN
static ::_pb::Metadata file_level_metadata_KNArchives_2eproto[61];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_KNArchives_2eproto[21];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_KNArchives_2eproto = nullptr;

const uint32_t TableStruct_KNArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.animation_type_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.effect_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.is_automatic_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.custom_effect_timing_curve_1_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.custom_effect_timing_curve_2_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.custom_effect_timing_curve_3_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.random_number_seed_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.custom_detail_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.custom_effect_timing_curve_theme_name_1_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.custom_effect_timing_curve_theme_name_2_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.custom_effect_timing_curve_theme_name_3_),
  PROTOBUF_FIELD_OFFSET(::KN::AnimationAttributesArchive, _impl_.writing_direction_is_rtl_),
  0,
  1,
  9,
  11,
  10,
  14,
  5,
  6,
  7,
  8,
  12,
  13,
  2,
  3,
  4,
  15,
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.animationattributes_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_twist_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_mosaic_size_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_mosaic_type_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_bounce_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_magic_move_fade_unmatched_objects_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_timing_curve_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_text_delivery_type_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_motion_blur_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.custom_travel_distance_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_animation_type_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_effect_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_duration_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_direction_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_is_automatic_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionAttributesArchive, _impl_.database_color_),
  3,
  7,
  8,
  9,
  10,
  11,
  15,
  16,
  12,
  14,
  0,
  1,
  4,
  5,
  6,
  13,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::TransitionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::TransitionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::TransitionArchive, _impl_.attributes_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.build_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.automatic_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.referent_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.build_chunk_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkArchive, _impl_.build_id_),
  0,
  5,
  3,
  4,
  6,
  7,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkIdentifierArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkIdentifierArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkIdentifierArchive, _impl_.build_id_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildChunkIdentifierArchive, _impl_.build_chunk_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _impl_.integer_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _impl_.double_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _impl_.bool_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _impl_.string_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _impl_.path_source_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _impl_.color_value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeValueArchive, _impl_.type_),
  4,
  3,
  5,
  0,
  1,
  2,
  6,
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, _impl_.build_id_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributeTupleArchive, _impl_.build_chunk_identifier_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.animationattributes_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.eventtrigger_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.delayautomaticafter_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.delayautomaticwith_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.curvestyle_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.chartrotation3d_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.startoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.endoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_rotationangle_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_rotationdirection_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_scalesize_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_coloralpha_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_acceleration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.action_motionpathsource_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_bounce_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_textdelivery_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_deliveryoption_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_action_decay_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_action_repeatcount_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_action_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_action_jiggleintensity_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_motion_blur_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_include_endpoints_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_shine_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_scale_amount_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_travel_distance_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_cursor_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.custom_align_to_path_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_animationtype_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_effect_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_direction_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_duration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.database_color_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildAttributesArchive, _impl_.motionpathstring_),
  4,
  7,
  9,
  10,
  16,
  17,
  27,
  28,
  12,
  34,
  13,
  14,
  15,
  5,
  22,
  18,
  19,
  23,
  21,
  20,
  26,
  24,
  25,
  29,
  32,
  33,
  30,
  31,
  0,
  1,
  6,
  8,
  11,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_.drawable_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_.delivery_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::KN::BuildArchive, _impl_.chunk_id_seed_),
  1,
  0,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::PlaceholderArchive, _impl_.kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::NoteArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::NoteArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::NoteArchive, _impl_.containedstorage_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _impl_.identifier_to_style_map_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicStylesheetRecordArchive, _impl_.deprecated_theme_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _impl_.stylesheetrecord_),
  PROTOBUF_FIELD_OFFSET(::KN::ClassicThemeRecordArchive, _impl_.templates_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_SageTagMapEntry, _impl_.info_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry, _impl_.instructional_text_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive_InstructionalTextMap, _impl_.instructional_text_for_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.builds_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.buildchunkarchives_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.buildchunks_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.transition_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titleplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.objectplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.owned_drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.drawables_z_order_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.sage_tag_to_info_map_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.instructional_text_map_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titleplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titleplaceholdershapestyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titleplaceholdertextstyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.titlelayoutproperties_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyplaceholdershapestyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyplaceholdertextstyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodylayoutproperties_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberplaceholdergeometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberplaceholdershapestyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberplaceholdertextstyleindex_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slidenumberlayoutproperties_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.classicstylesheetrecord_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyparagraphstyles_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.bodyliststyles_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.thumbnailtextfortitleplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.thumbnailtextforbodyplaceholder_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.slide_objects_layer_with_template_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.template_slide_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.staticguides_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.userdefinedguidestorage_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.indocument_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.note_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.infos_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.deprecated_objectplaceholdervisibleforexport_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.info_using_object_placeholder_geometry_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideArchive, _impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_),
  3,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  17,
  10,
  ~0u,
  ~0u,
  ~0u,
  20,
  0,
  7,
  21,
  22,
  12,
  8,
  23,
  24,
  13,
  11,
  25,
  26,
  14,
  16,
  ~0u,
  ~0u,
  1,
  2,
  27,
  9,
  ~0u,
  18,
  28,
  15,
  ~0u,
  29,
  19,
  30,
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry, _impl_.slidenodeidstring_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry, _impl_.infoorstorageidstring_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.slide_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.thumbnails_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.thumbnailsizes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.thumbnailsaredirty_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.digests_for_datas_needing_download_for_thumbnail_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.ishidden_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.iscollapsed_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.iscollapsedinoutlineview_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.hasbodyinoutlineview_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.hasbuilds_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.hastransition_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.hasnote_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.isslidenumbervisible_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.uniqueidentifier_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.copyfromslideidentifier_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.slidespecifichyperlinkcount_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.build_event_count_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.build_event_count_cache_version_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.build_event_count_is_up_to_date_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.has_explicit_builds_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.has_explicit_builds_cache_version_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.has_explicit_builds_is_up_to_date_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.slidespecifichyperlinkmap_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.background_is_no_fill_or_color_fill_with_alpha_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.template_slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.live_video_source_ids_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.live_video_source_usage_entries_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.database_thumbnail_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNodeArchive, _impl_.database_thumbnails_),
  ~0u,
  2,
  22,
  ~0u,
  ~0u,
  5,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  15,
  0,
  1,
  13,
  14,
  19,
  16,
  17,
  20,
  18,
  ~0u,
  21,
  4,
  ~0u,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.sidebar_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.sidebar_view_mode_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.notes_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.light_table_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.inspector_pane_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.inspector_pane_view_mode_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.showing_template_slides_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.inspector_pane_autohidden_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.element_list_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.activity_stream_visible_),
  PROTOBUF_FIELD_OFFSET(::KN::DesktopUILayoutArchive, _impl_.activity_stream_was_visible_),
  1,
  0,
  2,
  3,
  10,
  5,
  4,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.slidenodetoedit_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.deprecated_template_slide_node_to_apply_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.deprecated_slidethumbnailsize_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.canvasviewscale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.canvasoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.selectedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.iphonecanvasviewscale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.iphonecanvasoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.iphone568canvasviewscale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.iphone568canvasoffset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_ui_layout_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_slide_view_content_fits_window_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_canvas_view_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_canvas_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.light_table_zoom_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.chart_ui_state_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.show_slide_guides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.show_template_guides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.shows_comments_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.comments_printing_toggle_enabled_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.collapsed_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.outline_collapsed_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.outline_has_body_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.shows_ruler_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_navigator_view_width_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_outline_view_width_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_outline_view_default_fixed_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_main_content_size_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_presenter_notes_view_height_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_main_window_origin_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.light_table_hides_skipped_slides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.selection_path_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_element_list_view_width_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.element_list_expanded_groups_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.shows_mobile_light_table_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.mobile_light_table_zoom_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.mobile_light_table_hides_skipped_slides_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.freehand_drawing_toolkit_state_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.selection_path_transformer_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.shows_mobile_outline_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.editing_disabled_),
  PROTOBUF_FIELD_OFFSET(::KN::UIStateArchive, _impl_.desktop_activity_stream_view_width_),
  0,
  1,
  2,
  13,
  3,
  ~0u,
  14,
  4,
  15,
  5,
  6,
  18,
  16,
  7,
  17,
  ~0u,
  19,
  20,
  21,
  25,
  ~0u,
  ~0u,
  ~0u,
  26,
  22,
  23,
  27,
  8,
  24,
  9,
  28,
  10,
  29,
  ~0u,
  31,
  30,
  32,
  11,
  12,
  33,
  34,
  35,
  PROTOBUF_FIELD_OFFSET(::KN::IOSRestorableViewStateRootArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSRestorableViewStateRootArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::IOSRestorableViewStateRootArchive, _impl_.saved_playback_state_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.presentation_type_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.slide_node_index_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.event_index_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.breadcrumb_trail_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.had_external_display_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.is_elapsed_time_started_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.elapsed_time_start_time_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.recording_playback_current_time_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.should_show_slide_navigator_),
  PROTOBUF_FIELD_OFFSET(::KN::IOSSavedPlaybackStateArchive, _impl_.is_multi_presenter_show_),
  8,
  0,
  1,
  ~0u,
  4,
  5,
  2,
  3,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _impl_.infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _impl_.non_interactive_infos_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _impl_.infos_for_action_ghost_indexes_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _impl_.action_ghost_indexes_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _impl_.build_chunks_),
  PROTOBUF_FIELD_OFFSET(::KN::CanvasSelectionArchive, _impl_.database_action_ghost_indexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::ActionGhostSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ThemeCustomTimingCurveArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeCustomTimingCurveArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ThemeCustomTimingCurveArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeCustomTimingCurveArchive, _impl_.curve_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.templates_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.classicthemerecords_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.default_template_slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.default_template_slide_node_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.default_template_slide_node_is_our_best_guess_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.custom_effect_timing_curves_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.live_video_source_collection_),
  PROTOBUF_FIELD_OFFSET(::KN::ThemeArchive, _impl_.motion_background_style_presets_),
  1,
  ~0u,
  0,
  ~0u,
  2,
  3,
  5,
  ~0u,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, _impl_.rootslidenode_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideTreeArchive, _impl_.slides_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.uistate_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.slidetree_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.stylesheet_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.slidenumbersvisible_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.recording_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.loop_presentation_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.autoplay_transition_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.autoplay_build_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.idle_timer_active_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.idle_timer_delay_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.soundtrack_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.automatically_plays_upon_open_),
  PROTOBUF_FIELD_OFFSET(::KN::ShowArchive, _impl_.slidelist_),
  0,
  1,
  2,
  3,
  4,
  9,
  5,
  10,
  8,
  13,
  14,
  11,
  15,
  6,
  12,
  7,
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::KN::DocumentArchive, _impl_.tables_custom_format_list_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.fill_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.transition_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.transition_null_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.titleplaceholdervisibility_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.bodyplaceholdervisibility_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.objectplaceholdervisibility_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStylePropertiesArchive, _impl_.slidenumberplaceholdervisibility_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideStyleArchive, _impl_.slide_properties_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive_LiveVideoSourcePair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive_LiveVideoSourcePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive_LiveVideoSourcePair, _impl_.live_video_info_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive_LiveVideoSourcePair, _impl_.live_video_source_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.drawables_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.builds_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.buildchunks_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.slidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.displayed_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.template_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.collapsedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.outlinecollapsedslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.outlinehasbodyslidenodes_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.originalshowsize_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.titleranges_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.geometries_in_root_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.slide_node_unique_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.custom_effect_timing_curves_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.original_slide_node_uuids_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.slide_nodes_have_datas_needing_download_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.transition_),
  PROTOBUF_FIELD_OFFSET(::KN::PasteboardNativeStorageArchive, _impl_.live_video_sources_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, _impl_.slide_style_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, _impl_.template_slide_id_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, _impl_.drawable_info_id_list_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, _impl_.placeholders_),
  PROTOBUF_FIELD_OFFSET(::KN::PrototypeForUndoTemplateChangeArchive, _impl_.placeholder_tags_list_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.event_tracks_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.movie_track_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.sync_state_enum_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.modification_date_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.sync_state_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingArchive, _impl_.correction_history_),
  ~0u,
  0,
  4,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingSyncState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingSyncState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingSyncState, _impl_.out_of_sync_token_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingSyncState, _impl_.can_clear_out_of_sync_token_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingCorrectionHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingCorrectionHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingCorrectionHistory, _impl_.did_add_missing_events_for_radar_49654305_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventTrackArchive, _impl_.events_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.navigation_event_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.laser_event_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.pause_event_archive_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingEventArchive, _impl_.movie_event_archive_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _impl_.target_slide_node_id_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _impl_.target_slide_node_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _impl_.target_event_index_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingNavigationEventArchive, _impl_.animation_phase_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, _impl_.unscaled_location_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingLaserEventArchive, _impl_.unit_location_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingPauseEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingPauseEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingPauseEventArchive, _impl_.pause_event_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_.movie_info_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_.movie_event_type_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_.movie_event_value_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_.movie_info_that_played_across_slides_reference_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieEventArchive, _impl_.movie_slide_node_id_),
  0,
  4,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, _impl_.movie_segments_),
  PROTOBUF_FIELD_OFFSET(::KN::RecordingMovieTrackArchive, _impl_.is_movie_segment_data_trimmed_to_duration_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _impl_.movie_data_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::KN::MovieSegmentArchive, _impl_.database_movie_data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::KN::Soundtrack, _impl_.movie_media_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::KN::SlideNumberAttachmentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideNumberAttachmentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideNumberAttachmentArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _impl_.slide_node_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive_OutlineSelection, _impl_.selected_paragraph_indexes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_.slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_.slide_node_to_edit_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_.selected_paragraph_indexes_for_slide_nodes_),
  PROTOBUF_FIELD_OFFSET(::KN::SlideCollectionSelectionArchive, _impl_.range_in_selected_paragraph_),
  ~0u,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::PresenterNotesSelectionArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::PresenterNotesSelectionArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::PresenterNotesSelectionArchive, _impl_.slide_node_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, _impl_.args_list_types_),
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, _impl_.add_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, _impl_.show_placeholder_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, _impl_.remove_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::MixedIdOperationArgs, _impl_.hide_placeholder_args_list_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _impl_.source_id_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _impl_.is_placeholder_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _impl_.normalized_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _impl_.mask_kind_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _impl_.mask_corner_radius_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _impl_.background_kind_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoInfo, _impl_.background_fill_),
  0,
  4,
  3,
  1,
  5,
  6,
  7,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _impl_.capture_device_description_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _impl_.collaboration_command_usage_state_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _impl_.poster_image_data_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _impl_.symbol_abbreviation_text_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _impl_.symbol_image_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _impl_.symbol_tint_color_identifier_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSource, _impl_.is_default_source_),
  0,
  2,
  3,
  4,
  1,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceCollaborationCommandUsageState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceCollaborationCommandUsageState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceCollaborationCommandUsageState, _impl_.single_collaboration_command_usage_token_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceCollaborationCommandUsageState, _impl_.has_multiple_collaboration_command_usage_tokens_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoCaptureDeviceDescription, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoCaptureDeviceDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoCaptureDeviceDescription, _impl_.unique_id_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoCaptureDeviceDescription, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoCaptureDeviceDescription, _impl_.device_type_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoCaptureDeviceDescription, _impl_.localized_name_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoCaptureDeviceDescription, _impl_.is_ios_screen_recording_device_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoCaptureDeviceDescription, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoCaptureDeviceDescription, _impl_.default_video_resolution_),
  0,
  5,
  1,
  2,
  6,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceCollection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceCollection, _impl_.sources_),
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceCollection, _impl_.default_source_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceUsageEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::LiveVideoSourceUsageEntry, _impl_.background_kinds_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.background_name_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.variant_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_gradient_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.random_number_seed_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_blur_sigma_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_amplitude_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_octaves_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_speed_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_palette_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.zoom_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.invert_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.blend_mode_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.source_blend_factor_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.dest_blend_factor_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.motion_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.background_color_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.foreground_color_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.line_color_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.point_color_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.alpha_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.border_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.blend_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.brightness_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.border_lightness_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.contrast_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.damping_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.density_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.diffuse_power_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.distortion_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.entropy_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.exposure_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.fog_distance_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.fog_power_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.gamma_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.grain_amount_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.grain_intensity_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.hue_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.lightness_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.line_alpha_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.line_center_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.line_fade_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.line_fade_power_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.line_length_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.line_width_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_size_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_size_weight_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_variance_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.motion_background_opacity_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.point_depth_alpha_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.point_size_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.refraction_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.saturation_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_alpha_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_angle_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_scale_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_value_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.texture_power_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.draw_points_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.draw_lines_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.draw_shadows_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.pixels_per_division_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.symmetry_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.lock_focus_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.amplitude_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.envelope_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.y_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.focus_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.blur_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.grain_speed_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.mesh_color_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.angle_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.mesh_line_width_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.delta_time_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.time_start_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_contrast_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_gamma_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_saturation_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_brightness_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_hue_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_vibrance_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_movement_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.power_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.threshold_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_scale_horizontal_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_scale_vertical_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_gain_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_lacunarity_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.instance_count_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.extrusion_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.color_hue_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_hue_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_hue_offset_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_saturation_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_brightness_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_intensity_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.shadow_power_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStylePropertiesArchive, _impl_.noise_octaves_iterations_),
  0,
  1,
  6,
  43,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  44,
  2,
  3,
  4,
  5,
  7,
  8,
  9,
  10,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  45,
  46,
  47,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  11,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  101,
  96,
  97,
  98,
  99,
  100,
  103,
  104,
  105,
  106,
  102,
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStyleArchive, _impl_.override_count_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStyleArchive, _impl_.slide_properties_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundStyleArchive, _impl_.poster_frame_data_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundFillArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundFillArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KN::MotionBackgroundFillArchive, _impl_.motion_background_style_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, -1, sizeof(::KN::AnimationAttributesArchive)},
  { 38, 61, -1, sizeof(::KN::TransitionAttributesArchive)},
  { 78, 85, -1, sizeof(::KN::TransitionArchive)},
  { 86, 100, -1, sizeof(::KN::BuildChunkArchive)},
  { 108, 116, -1, sizeof(::KN::BuildChunkIdentifierArchive)},
  { 118, 131, -1, sizeof(::KN::BuildAttributeValueArchive)},
  { 138, 148, -1, sizeof(::KN::BuildAttributeTupleArchive)},
  { 152, 193, -1, sizeof(::KN::BuildAttributesArchive)},
  { 228, 239, -1, sizeof(::KN::BuildArchive)},
  { 244, 252, -1, sizeof(::KN::PlaceholderArchive)},
  { 254, 261, -1, sizeof(::KN::NoteArchive)},
  { 262, 270, -1, sizeof(::KN::ClassicStylesheetRecordArchive)},
  { 272, 281, -1, sizeof(::KN::ClassicThemeRecordArchive)},
  { 284, 292, -1, sizeof(::KN::SlideArchive_SageTagMapEntry)},
  { 294, 302, -1, sizeof(::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry)},
  { 304, -1, -1, sizeof(::KN::SlideArchive_InstructionalTextMap)},
  { 311, 358, -1, sizeof(::KN::SlideArchive)},
  { 399, 407, -1, sizeof(::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry)},
  { 409, 446, -1, sizeof(::KN::SlideNodeArchive)},
  { 477, 494, -1, sizeof(::KN::DesktopUILayoutArchive)},
  { 505, 553, -1, sizeof(::KN::UIStateArchive)},
  { 595, 602, -1, sizeof(::KN::IOSRestorableViewStateRootArchive)},
  { 603, 619, -1, sizeof(::KN::IOSSavedPlaybackStateArchive)},
  { 629, -1, -1, sizeof(::KN::CanvasSelectionArchive)},
  { 641, -1, -1, sizeof(::KN::ActionGhostSelectionArchive)},
  { 647, 655, -1, sizeof(::KN::ThemeCustomTimingCurveArchive)},
  { 657, 673, -1, sizeof(::KN::ThemeArchive)},
  { 683, 691, -1, sizeof(::KN::SlideTreeArchive)},
  { 693, 715, -1, sizeof(::KN::ShowArchive)},
  { 731, 740, -1, sizeof(::KN::DocumentArchive)},
  { 743, 756, -1, sizeof(::KN::SlideStylePropertiesArchive)},
  { 763, 772, -1, sizeof(::KN::SlideStyleArchive)},
  { 775, 783, -1, sizeof(::KN::PasteboardNativeStorageArchive_LiveVideoSourcePair)},
  { 785, 809, -1, sizeof(::KN::PasteboardNativeStorageArchive)},
  { 827, 838, -1, sizeof(::KN::PrototypeForUndoTemplateChangeArchive)},
  { 843, 856, -1, sizeof(::KN::RecordingArchive)},
  { 863, 871, -1, sizeof(::KN::RecordingSyncState)},
  { 873, 880, -1, sizeof(::KN::RecordingCorrectionHistory)},
  { 881, 889, -1, sizeof(::KN::RecordingEventTrackArchive)},
  { 891, 902, -1, sizeof(::KN::RecordingEventArchive)},
  { 907, 917, -1, sizeof(::KN::RecordingNavigationEventArchive)},
  { 921, 929, -1, sizeof(::KN::RecordingLaserEventArchive)},
  { 931, 938, -1, sizeof(::KN::RecordingPauseEventArchive)},
  { 939, 950, -1, sizeof(::KN::RecordingMovieEventArchive)},
  { 955, 963, -1, sizeof(::KN::RecordingMovieTrackArchive)},
  { 965, 974, -1, sizeof(::KN::MovieSegmentArchive)},
  { 977, 986, -1, sizeof(::KN::Soundtrack)},
  { 989, 996, -1, sizeof(::KN::SlideNumberAttachmentArchive)},
  { 997, 1005, -1, sizeof(::KN::SlideCollectionSelectionArchive_OutlineSelection)},
  { 1007, 1017, -1, sizeof(::KN::SlideCollectionSelectionArchive)},
  { 1021, 1028, -1, sizeof(::KN::PresenterNotesSelectionArchive)},
  { 1029, -1, -1, sizeof(::KN::MixedIdOperationArgs)},
  { 1040, 1054, -1, sizeof(::KN::LiveVideoInfo)},
  { 1062, 1076, -1, sizeof(::KN::LiveVideoSource)},
  { 1084, 1092, -1, sizeof(::KN::LiveVideoSourceCollaborationCommandUsageState)},
  { 1094, 1107, -1, sizeof(::KN::LiveVideoCaptureDeviceDescription)},
  { 1114, 1122, -1, sizeof(::KN::LiveVideoSourceCollection)},
  { 1124, -1, -1, sizeof(::KN::LiveVideoSourceUsageEntry)},
  { 1131, 1244, -1, sizeof(::KN::MotionBackgroundStylePropertiesArchive)},
  { 1351, 1361, -1, sizeof(::KN::MotionBackgroundStyleArchive)},
  { 1365, 1372, -1, sizeof(::KN::MotionBackgroundFillArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::KN::_AnimationAttributesArchive_default_instance_._instance,
  &::KN::_TransitionAttributesArchive_default_instance_._instance,
  &::KN::_TransitionArchive_default_instance_._instance,
  &::KN::_BuildChunkArchive_default_instance_._instance,
  &::KN::_BuildChunkIdentifierArchive_default_instance_._instance,
  &::KN::_BuildAttributeValueArchive_default_instance_._instance,
  &::KN::_BuildAttributeTupleArchive_default_instance_._instance,
  &::KN::_BuildAttributesArchive_default_instance_._instance,
  &::KN::_BuildArchive_default_instance_._instance,
  &::KN::_PlaceholderArchive_default_instance_._instance,
  &::KN::_NoteArchive_default_instance_._instance,
  &::KN::_ClassicStylesheetRecordArchive_default_instance_._instance,
  &::KN::_ClassicThemeRecordArchive_default_instance_._instance,
  &::KN::_SlideArchive_SageTagMapEntry_default_instance_._instance,
  &::KN::_SlideArchive_InstructionalTextMap_InstructionalTextMapEntry_default_instance_._instance,
  &::KN::_SlideArchive_InstructionalTextMap_default_instance_._instance,
  &::KN::_SlideArchive_default_instance_._instance,
  &::KN::_SlideNodeArchive_SlideSpecificHyperlinkMapEntry_default_instance_._instance,
  &::KN::_SlideNodeArchive_default_instance_._instance,
  &::KN::_DesktopUILayoutArchive_default_instance_._instance,
  &::KN::_UIStateArchive_default_instance_._instance,
  &::KN::_IOSRestorableViewStateRootArchive_default_instance_._instance,
  &::KN::_IOSSavedPlaybackStateArchive_default_instance_._instance,
  &::KN::_CanvasSelectionArchive_default_instance_._instance,
  &::KN::_ActionGhostSelectionArchive_default_instance_._instance,
  &::KN::_ThemeCustomTimingCurveArchive_default_instance_._instance,
  &::KN::_ThemeArchive_default_instance_._instance,
  &::KN::_SlideTreeArchive_default_instance_._instance,
  &::KN::_ShowArchive_default_instance_._instance,
  &::KN::_DocumentArchive_default_instance_._instance,
  &::KN::_SlideStylePropertiesArchive_default_instance_._instance,
  &::KN::_SlideStyleArchive_default_instance_._instance,
  &::KN::_PasteboardNativeStorageArchive_LiveVideoSourcePair_default_instance_._instance,
  &::KN::_PasteboardNativeStorageArchive_default_instance_._instance,
  &::KN::_PrototypeForUndoTemplateChangeArchive_default_instance_._instance,
  &::KN::_RecordingArchive_default_instance_._instance,
  &::KN::_RecordingSyncState_default_instance_._instance,
  &::KN::_RecordingCorrectionHistory_default_instance_._instance,
  &::KN::_RecordingEventTrackArchive_default_instance_._instance,
  &::KN::_RecordingEventArchive_default_instance_._instance,
  &::KN::_RecordingNavigationEventArchive_default_instance_._instance,
  &::KN::_RecordingLaserEventArchive_default_instance_._instance,
  &::KN::_RecordingPauseEventArchive_default_instance_._instance,
  &::KN::_RecordingMovieEventArchive_default_instance_._instance,
  &::KN::_RecordingMovieTrackArchive_default_instance_._instance,
  &::KN::_MovieSegmentArchive_default_instance_._instance,
  &::KN::_Soundtrack_default_instance_._instance,
  &::KN::_SlideNumberAttachmentArchive_default_instance_._instance,
  &::KN::_SlideCollectionSelectionArchive_OutlineSelection_default_instance_._instance,
  &::KN::_SlideCollectionSelectionArchive_default_instance_._instance,
  &::KN::_PresenterNotesSelectionArchive_default_instance_._instance,
  &::KN::_MixedIdOperationArgs_default_instance_._instance,
  &::KN::_LiveVideoInfo_default_instance_._instance,
  &::KN::_LiveVideoSource_default_instance_._instance,
  &::KN::_LiveVideoSourceCollaborationCommandUsageState_default_instance_._instance,
  &::KN::_LiveVideoCaptureDeviceDescription_default_instance_._instance,
  &::KN::_LiveVideoSourceCollection_default_instance_._instance,
  &::KN::_LiveVideoSourceUsageEntry_default_instance_._instance,
  &::KN::_MotionBackgroundStylePropertiesArchive_default_instance_._instance,
  &::KN::_MotionBackgroundStyleArchive_default_instance_._instance,
  &::KN::_MotionBackgroundFillArchive_default_instance_._instance,
};

const char descriptor_table_protodef_KNArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020KNArchives.proto\022\002KN\032\021TSPMessages.prot"
  "o\032\021TSKArchives.proto\032\021TSSArchives.proto\032"
  "\021TSDArchives.proto\032\022TSWPArchives.proto\032\021"
  "TSAArchives.proto\032\022TSCHArchives.proto\"\313\004"
  "\n\032AnimationAttributesArchive\022\026\n\016animatio"
  "n_type\030\001 \001(\t\022\016\n\006effect\030\002 \001(\t\022\020\n\010duration"
  "\030\003 \001(\001\022\021\n\tdirection\030\004 \001(\r\022\r\n\005delay\030\005 \001(\001"
  "\022\024\n\014is_automatic\030\006 \001(\010\022\031\n\005color\030\007 \001(\0132\n."
  "TSP.Color\022<\n\034custom_effect_timing_curve_"
  "1\030\010 \001(\0132\026.TSD.PathSourceArchive\022<\n\034custo"
  "m_effect_timing_curve_2\030\t \001(\0132\026.TSD.Path"
  "SourceArchive\022<\n\034custom_effect_timing_cu"
  "rve_3\030\n \001(\0132\026.TSD.PathSourceArchive\022\032\n\022r"
  "andom_number_seed\030\013 \001(\r\022\025\n\rcustom_detail"
  "\030\014 \001(\001\022/\n\'custom_effect_timing_curve_the"
  "me_name_1\030\r \001(\t\022/\n\'custom_effect_timing_"
  "curve_theme_name_2\030\016 \001(\t\022/\n\'custom_effec"
  "t_timing_curve_theme_name_3\030\017 \001(\t\022 \n\030wri"
  "ting_direction_is_rtl\030\020 \001(\010\"\271\n\n\033Transiti"
  "onAttributesArchive\022;\n\023animationAttribut"
  "es\030\010 \001(\0132\036.KN.AnimationAttributesArchive"
  "\022\024\n\014custom_twist\030\t \001(\002\022\032\n\022custom_mosaic_"
  "size\030\n \001(\r\022\032\n\022custom_mosaic_type\030\013 \001(\r\022\025"
  "\n\rcustom_bounce\030\014 \001(\010\0220\n(custom_magic_mo"
  "ve_fade_unmatched_objects\030\r \001(\010\022f\n\023custo"
  "m_timing_curve\030\017 \001(\0162I.KN.TransitionAttr"
  "ibutesArchive.TransitionCustomAttributes"
  "TimingCurveType\022m\n\031custom_text_delivery_"
  "type\030\020 \001(\0162J.KN.TransitionAttributesArch"
  "ive.TransitionCustomAttributesTextDelive"
  "ryType\022\032\n\022custom_motion_blur\030\021 \001(\010\022\036\n\026cu"
  "stom_travel_distance\030\022 \001(\002\022#\n\027database_a"
  "nimation_type\030\001 \001(\tB\002\030\001\022\033\n\017database_effe"
  "ct\030\002 \001(\tB\002\030\001\022\035\n\021database_duration\030\003 \001(\001B"
  "\002\030\001\022\036\n\022database_direction\030\004 \001(\rB\002\030\001\022\032\n\016d"
  "atabase_delay\030\005 \001(\002B\002\030\001\022!\n\025database_is_a"
  "utomatic\030\006 \001(\010B\002\030\001\022&\n\016database_color\030\007 \001"
  "(\0132\n.TSP.ColorB\002\030\001\"\274\002\n)TransitionCustomA"
  "ttributesTimingCurveType\0223\n/TransitionCu"
  "stomAttributesTimingCurveTypeLinear\020\001\0223\n"
  "/TransitionCustomAttributesTimingCurveTy"
  "peEaseIn\020\002\0224\n0TransitionCustomAttributes"
  "TimingCurveTypeEaseOut\020\003\022:\n6TransitionCu"
  "stomAttributesTimingCurveTypeEaseInEaseO"
  "ut\020\004\0223\n/TransitionCustomAttributesTiming"
  "CurveTypeCustom\020\005\"\213\002\n*TransitionCustomAt"
  "tributesTextDeliveryType\0226\n2TransitionCu"
  "stomAttributesTextDeliveryTypeByObject\020\001"
  "\0224\n0TransitionCustomAttributesTextDelive"
  "ryTypeByWord\020\002\0229\n5TransitionCustomAttrib"
  "utesTextDeliveryTypeByCharacter\020\003\0224\n0Tra"
  "nsitionCustomAttributesTextDeliveryTypeB"
  "yLine\020\004\"H\n\021TransitionArchive\0223\n\nattribut"
  "es\030\002 \002(\0132\037.KN.TransitionAttributesArchiv"
  "e\"\351\001\n\021BuildChunkArchive\022\035\n\005build\030\001 \001(\0132\016"
  ".TSP.Reference\022\021\n\005index\030\002 \001(\rB\002\030\001\022\r\n\005del"
  "ay\030\003 \001(\001\022\020\n\010duration\030\004 \001(\001\022\021\n\tautomatic\030"
  "\005 \001(\010\022\020\n\010referent\030\006 \001(\010\022\?\n\026build_chunk_i"
  "dentifier\030\007 \001(\0132\037.KN.BuildChunkIdentifie"
  "rArchive\022\033\n\010build_id\030\010 \001(\0132\t.TSP.UUID\"R\n"
  "\033BuildChunkIdentifierArchive\022\033\n\010build_id"
  "\030\001 \001(\0132\t.TSP.UUID\022\026\n\016build_chunk_id\030\002 \001("
  "\005\"\377\002\n\032BuildAttributeValueArchive\022\025\n\rinte"
  "ger_value\030\001 \001(\r\022\024\n\014double_value\030\002 \001(\001\022\022\n"
  "\nbool_value\030\003 \001(\010\022\024\n\014string_value\030\004 \001(\t\022"
  "1\n\021path_source_value\030\005 \001(\0132\026.TSD.PathSou"
  "rceArchive\022\037\n\013color_value\030\006 \001(\0132\n.TSP.Co"
  "lor\022D\n\004type\030\007 \001(\01626.KN.BuildAttributeVal"
  "ueArchive.BuildAttributeValueType\"p\n\027Bui"
  "ldAttributeValueType\022\r\n\tk_integer\020\000\022\014\n\010k"
  "_double\020\002\022\n\n\006k_bool\020\003\022\014\n\010k_string\020\004\022\021\n\rk"
  "_path_source\020\005\022\013\n\007k_color\020\006\"\273\001\n\032BuildAtt"
  "ributeTupleArchive\022\020\n\010property\030\001 \001(\t\022-\n\005"
  "value\030\002 \001(\0132\036.KN.BuildAttributeValueArch"
  "ive\022\033\n\010build_id\030\003 \001(\0132\t.TSP.UUID\022\?\n\026buil"
  "d_chunk_identifier\030\004 \001(\0132\037.KN.BuildChunk"
  "IdentifierArchive\"\200\021\n\026BuildAttributesArc"
  "hive\022;\n\023animationAttributes\030\022 \001(\0132\036.KN.A"
  "nimationAttributesArchive\022\024\n\014eventTrigge"
  "r\030\004 \001(\r\022\037\n\023delayAutomaticAfter\030\006 \001(\001B\002\030\001"
  "\022\036\n\022delayAutomaticWith\030\007 \001(\001B\002\030\001\022H\n\ncurv"
  "eStyle\030\016 \001(\01624.KN.BuildAttributesArchive"
  ".BuildAttributesCurveStyle\022\027\n\017ChartRotat"
  "ion3D\030\021 \001(\001\022\023\n\013startOffset\030\033 \001(\r\022\021\n\tendO"
  "ffset\030\034 \001(\r\022\034\n\024action_rotationAngle\030\t \001("
  "\001\022]\n\030action_rotationDirection\030\n \001(\0162;.KN"
  ".BuildAttributesArchive.BuildAttributesR"
  "otationDirection\022\030\n\020action_scaleSize\030\013 \001"
  "(\001\022\031\n\021action_colorAlpha\030\014 \001(\001\022S\n\023action_"
  "acceleration\030\r \001(\01626.KN.BuildAttributesA"
  "rchive.BuildAttributesAcceleration\0227\n\027ac"
  "tion_motionPathSource\030\026 \001(\0132\026.TSD.PathSo"
  "urceArchive\022\025\n\rcustom_bounce\030\023 \001(\010\022S\n\023cu"
  "stom_textDelivery\030\024 \001(\01626.KN.BuildAttrib"
  "utesArchive.BuildAttributesTextDelivery\022"
  "W\n\025custom_deliveryOption\030\025 \001(\01628.KN.Buil"
  "dAttributesArchive.BuildAttributesDelive"
  "ryOption\022\033\n\023custom_action_decay\030\027 \001(\010\022!\n"
  "\031custom_action_repeatCount\030\030 \001(\r\022\033\n\023cust"
  "om_action_scale\030\031 \001(\001\022f\n\035custom_action_j"
  "iggleIntensity\030\032 \001(\0162\?.KN.BuildAttribute"
  "sArchive.ActionBuildAttributesJiggleInte"
  "nsity\022\032\n\022custom_motion_blur\030\035 \001(\010\022 \n\030cus"
  "tom_include_endpoints\030\036 \001(\010\022\024\n\014custom_sh"
  "ine\030! \001(\010\022\033\n\023custom_scale_amount\030\" \001(\001\022\036"
  "\n\026custom_travel_distance\030# \001(\001\022\025\n\rcustom"
  "_cursor\030$ \001(\010\022\034\n\024custom_align_to_path\030% "
  "\001(\010\022\"\n\026database_animationType\030\001 \001(\tB\002\030\001\022"
  "\033\n\017database_effect\030\002 \001(\tB\002\030\001\022\036\n\022database"
  "_direction\030\003 \001(\rB\002\030\001\022\032\n\016database_delay\030\005"
  " \001(\001B\002\030\001\022\035\n\021database_duration\030\010 \001(\001B\002\030\001\022"
  "&\n\016database_color\030\020 \001(\0132\n.TSP.ColorB\002\030\001\022"
  "\034\n\020motionPathString\030\017 \001(\tB\002\030\001\"_\n\033BuildAt"
  "tributesAcceleration\022\t\n\005kNone\020\000\022\013\n\007kEase"
  "In\020\001\022\014\n\010kEaseOut\020\002\022\r\n\tkEaseBoth\020\003\022\013\n\007kCu"
  "stom\020\004\"I\n BuildAttributesRotationDirecti"
  "on\022\016\n\nkClockwise\020\037\022\025\n\021kCounterclockwise\020"
  " \"7\n\031BuildAttributesCurveStyle\022\r\n\tkStrai"
  "ght\020\000\022\013\n\007kCurved\020\001\"\244\001\n\033BuildAttributesTe"
  "xtDelivery\022\032\n\026kTextDeliveryUndefined\020\000\022\031"
  "\n\025kTextDeliveryByObject\020\001\022\027\n\023kTextDelive"
  "ryByWord\020\002\022\034\n\030kTextDeliveryByCharacter\020\003"
  "\022\027\n\023kTextDeliveryByLine\020\004\"\316\001\n\035BuildAttri"
  "butesDeliveryOption\022\034\n\030kDeliveryOptionUn"
  "defined\020\000\022\032\n\026kDeliveryOptionForward\020\001\022\033\n"
  "\027kDeliveryOptionBackward\020\002\022\035\n\031kDeliveryO"
  "ptionFromCenter\020\003\022\034\n\030kDeliveryOptionFrom"
  "Edges\020\004\022\031\n\025kDeliveryOptionRandom\020\005\"x\n$Ac"
  "tionBuildAttributesJiggleIntensity\022\031\n\025kJ"
  "iggleIntensitySmall\020\000\022\032\n\026kJiggleIntensit"
  "yMedium\020\001\022\031\n\025kJiggleIntensityLarge\020\002\"\237\001\n"
  "\014BuildArchive\022 \n\010drawable\030\001 \001(\0132\016.TSP.Re"
  "ference\022\020\n\010delivery\030\002 \002(\t\022\024\n\010duration\030\003 "
  "\001(\001B\002\030\001\022.\n\nattributes\030\004 \002(\0132\032.KN.BuildAt"
  "tributesArchive\022\025\n\rchunk_id_seed\030\005 \001(\005\"\211"
  "\002\n\022PlaceholderArchive\022%\n\005super\030\001 \002(\0132\026.T"
  "SWP.ShapeInfoArchive\022;\n\004kind\030\002 \001(\0162\033.KN."
  "PlaceholderArchive.Kind:\020kKindPlaceholde"
  "r\"\216\001\n\004Kind\022\024\n\020kKindPlaceholder\020\000\022\037\n\033kKin"
  "dSlideNumberPlaceholder\020\001\022\031\n\025kKindTitleP"
  "laceholder\020\002\022\030\n\024kKindBodyPlaceholder\020\003\022\032"
  "\n\026kKindObjectPlaceholder\020\004\"7\n\013NoteArchiv"
  "e\022(\n\020containedStorage\030\001 \002(\0132\016.TSP.Refere"
  "nce\"\234\001\n\036ClassicStylesheetRecordArchive\022L"
  "\n\027identifier_to_style_map\030\001 \003(\0132+.TSS.St"
  "ylesheetArchive.IdentifiedStyleEntry\022,\n\020"
  "deprecated_theme\030\002 \001(\0132\016.TSP.ReferenceB\002"
  "\030\001\"v\n\031ClassicThemeRecordArchive\022\014\n\004uuid\030"
  "\001 \001(\t\022(\n\020stylesheetRecord\030\002 \001(\0132\016.TSP.Re"
  "ference\022!\n\ttemplates\030\003 \003(\0132\016.TSP.Referen"
  "ce\"\277\021\n\014SlideArchive\022\035\n\005style\030\001 \002(\0132\016.TSP"
  ".Reference\022\036\n\006builds\030\002 \003(\0132\016.TSP.Referen"
  "ce\0225\n\022buildChunkArchives\030\003 \003(\0132\025.KN.Buil"
  "dChunkArchiveB\002\030\001\022#\n\013buildChunks\030+ \003(\0132\016"
  ".TSP.Reference\022)\n\ntransition\030\004 \002(\0132\025.KN."
  "TransitionArchive\022(\n\020titlePlaceholder\030\005 "
  "\001(\0132\016.TSP.Reference\022\'\n\017bodyPlaceholder\030\006"
  " \001(\0132\016.TSP.Reference\022)\n\021objectPlaceholde"
  "r\030\036 \001(\0132\016.TSP.Reference\022.\n\026slideNumberPl"
  "aceholder\030\024 \001(\0132\016.TSP.Reference\022\'\n\017owned"
  "_drawables\030\007 \003(\0132\016.TSP.Reference\022)\n\021draw"
  "ables_z_order\030* \003(\0132\016.TSP.Reference\022>\n\024s"
  "age_tag_to_info_map\030\034 \003(\0132 .KN.SlideArch"
  "ive.SageTagMapEntry\022E\n\026instructional_tex"
  "t_map\030- \001(\0132%.KN.SlideArchive.Instructio"
  "nalTextMap\022\014\n\004name\030\n \001(\t\0226\n\030titlePlaceho"
  "lderGeometry\030\013 \001(\0132\024.TSD.GeometryArchive"
  "\022\'\n\037titlePlaceholderShapeStyleIndex\030\014 \001("
  "\r\022&\n\036titlePlaceholderTextStyleIndex\030\r \001("
  "\r\022@\n\025titleLayoutProperties\030\030 \001(\0132!.TSWP."
  "ShapeStylePropertiesArchive\0225\n\027bodyPlace"
  "holderGeometry\030\016 \001(\0132\024.TSD.GeometryArchi"
  "ve\022&\n\036bodyPlaceholderShapeStyleIndex\030\017 \001"
  "(\r\022%\n\035bodyPlaceholderTextStyleIndex\030\020 \001("
  "\r\022\?\n\024bodyLayoutProperties\030\031 \001(\0132!.TSWP.S"
  "hapeStylePropertiesArchive\022<\n\036slideNumbe"
  "rPlaceholderGeometry\030\025 \001(\0132\024.TSD.Geometr"
  "yArchive\022-\n%slideNumberPlaceholderShapeS"
  "tyleIndex\030\026 \001(\r\022,\n$slideNumberPlaceholde"
  "rTextStyleIndex\030\027 \001(\r\022F\n\033slideNumberLayo"
  "utProperties\030\032 \001(\0132!.TSWP.ShapeStyleProp"
  "ertiesArchive\022/\n\027classicStylesheetRecord"
  "\030\035 \001(\0132\016.TSP.Reference\022+\n\023bodyParagraphS"
  "tyles\030\037 \003(\0132\016.TSP.Reference\022&\n\016bodyListS"
  "tyles\030# \003(\0132\016.TSP.Reference\022(\n thumbnail"
  "TextForTitlePlaceholder\030% \001(\t\022\'\n\037thumbna"
  "ilTextForBodyPlaceholder\030& \001(\t\0220\n!slide_"
  "objects_layer_with_template\030) \001(\010:\005false"
  "\022&\n\016template_slide\030\021 \001(\0132\016.TSP.Reference"
  "\022\'\n\014staticGuides\030\022 \003(\0132\021.TSD.GuideArchiv"
  "e\022/\n\027userDefinedGuideStorage\030$ \001(\0132\016.TSP"
  ".Reference\022\022\n\ninDocument\030\023 \002(\010\022\034\n\004note\030\033"
  " \001(\0132\016.TSP.Reference\022\?\n\'infos_using_obje"
  "ct_placeholder_geometry\030, \003(\0132\016.TSP.Refe"
  "rence\0224\n,deprecated_objectPlaceholderVis"
  "ibleForExport\030\" \001(\010\022>\n&info_using_object"
  "_placeholder_geometry\030\' \001(\0132\016.TSP.Refere"
  "nce\022R\nJinfo_using_object_placeholder_geo"
  "metry_matches_object_placeholder_geometr"
  "y\030( \001(\010\032<\n\017SageTagMapEntry\022\013\n\003tag\030\001 \002(\t\022"
  "\034\n\004info\030\002 \002(\0132\016.TSP.Reference\032\324\001\n\024Instru"
  "ctionalTextMap\022e\n\034instructional_text_for"
  "_infos\030\001 \003(\0132\?.KN.SlideArchive.Instructi"
  "onalTextMap.InstructionalTextMapEntry\032U\n"
  "\031InstructionalTextMapEntry\022\034\n\004info\030\001 \001(\013"
  "2\016.TSP.Reference\022\032\n\022instructional_text\030\002"
  " \002(\t\"\222\n\n\020SlideNodeArchive\022 \n\010children\030\001 "
  "\003(\0132\016.TSP.Reference\022\035\n\005slide\030\002 \001(\0132\016.TSP"
  ".Reference\022\020\n\005depth\030\025 \001(\r:\0011\022&\n\nthumbnai"
  "ls\030\020 \003(\0132\022.TSP.DataReference\022!\n\016thumbnai"
  "lSizes\030\n \003(\0132\t.TSP.Size\022\032\n\022thumbnailsAre"
  "Dirty\030\016 \001(\010\0228\n0digests_for_datas_needing"
  "_download_for_thumbnail\030\031 \003(\t\022\020\n\010isHidde"
  "n\030\004 \002(\010\022\027\n\013isCollapsed\030\005 \001(\010B\002\030\001\022$\n\030isCo"
  "llapsedInOutlineView\030\021 \001(\010B\002\030\001\022 \n\024hasBod"
  "yInOutlineView\030\023 \001(\010B\002\030\001\022\025\n\thasBuilds\030\006 "
  "\002(\010B\002\030\001\022\025\n\rhasTransition\030\007 \002(\010\022\017\n\007hasNot"
  "e\030\010 \001(\010\022#\n\024isSlideNumberVisible\030\022 \001(\010:\005f"
  "alse\022\034\n\020uniqueIdentifier\030\013 \001(\tB\002\030\001\022\037\n\027co"
  "pyFromSlideIdentifier\030\014 \001(\t\022\'\n\033slideSpec"
  "ificHyperlinkCount\030\r \001(\rB\002\030\001\022\031\n\021build_ev"
  "ent_count\030\017 \001(\r\022\'\n\037build_event_count_cac"
  "he_version\030\032 \001(\r\022+\n\037build_event_count_is"
  "_up_to_date\030\026 \001(\010B\002\030\001\022\033\n\023has_explicit_bu"
  "ilds\030\024 \001(\010\022)\n!has_explicit_builds_cache_"
  "version\030\033 \001(\r\022-\n!has_explicit_builds_is_"
  "up_to_date\030\027 \001(\010B\002\030\001\022V\n\031slideSpecificHyp"
  "erlinkMap\030\030 \003(\01323.KN.SlideNodeArchive.Sl"
  "ideSpecificHyperlinkMapEntry\0226\n.backgrou"
  "nd_is_no_fill_or_color_fill_with_alpha\030\034"
  " \001(\010\022$\n\021template_slide_id\030\035 \001(\0132\t.TSP.UU"
  "ID\022(\n\025live_video_source_ids\030\036 \003(\0132\t.TSP."
  "UUID\022F\n\037live_video_source_usage_entries\030"
  "\037 \003(\0132\035.KN.LiveVideoSourceUsageEntry\022.\n\022"
  "database_thumbnail\030\003 \001(\0132\016.TSP.Reference"
  "B\002\030\001\022/\n\023database_thumbnails\030\t \003(\0132\016.TSP."
  "ReferenceB\002\030\001\032Z\n\036SlideSpecificHyperlinkM"
  "apEntry\022\031\n\021slideNodeIDString\030\001 \002(\t\022\035\n\025in"
  "foOrStorageIDString\030\002 \003(\t\"\272\005\n\026DesktopUIL"
  "ayoutArchive\022\027\n\017sidebar_visible\030\001 \001(\010\022E\n"
  "\021sidebar_view_mode\030\002 \001(\0162*.KN.DesktopUIL"
  "ayoutArchive.SidebarViewMode\022\025\n\rnotes_vi"
  "sible\030\003 \001(\010\022\033\n\023light_table_visible\030\005 \001(\010"
  "\022$\n\026inspector_pane_visible\030\006 \001(\010:\004true\022p"
  "\n\030inspector_pane_view_mode\030\007 \001(\01620.KN.De"
  "sktopUILayoutArchive.InspectorPaneViewMo"
  "de:\034kInspectorPaneViewModeFormat\022\037\n\027show"
  "ing_template_slides\030\010 \001(\010\022!\n\031inspector_p"
  "ane_autohidden\030\t \001(\010\022\034\n\024element_list_vis"
  "ible\030\n \001(\010\022\037\n\027activity_stream_visible\030\013 "
  "\001(\010\022#\n\033activity_stream_was_visible\030\014 \001(\010"
  "\"M\n\017SidebarViewMode\022\035\n\031kSidebarViewModeN"
  "avigator\020\000\022\033\n\027kSidebarViewModeOutline\020\001\""
  "}\n\025InspectorPaneViewMode\022 \n\034kInspectorPa"
  "neViewModeFormat\020\000\022!\n\035kInspectorPaneView"
  "ModeAnimate\020\001\022\037\n\033kInspectorPaneViewModeS"
  "etup\020\002\"\347\r\n\016UIStateArchive\022+\n\017slideNodeTo"
  "Edit\030\001 \001(\0132\016.TSP.ReferenceB\002\030\001\022\?\n\'deprec"
  "ated_template_slide_node_to_apply\030\002 \001(\0132"
  "\016.TSP.Reference\0220\n\035deprecated_slideThumb"
  "nailSize\030\003 \001(\0132\t.TSP.Size\022\027\n\017canvasViewS"
  "cale\030\004 \001(\002\022 \n\014canvasOffset\030\005 \001(\0132\n.TSP.P"
  "oint\022.\n\022selectedSlideNodes\030\006 \003(\0132\016.TSP.R"
  "eferenceB\002\030\001\022!\n\025iPhoneCanvasViewScale\030\007 "
  "\001(\002B\002\030\001\022*\n\022iPhoneCanvasOffset\030\010 \001(\0132\n.TS"
  "P.PointB\002\030\001\022$\n\030iPhone568CanvasViewScale\030"
  "\t \001(\002B\002\030\001\022-\n\025iPhone568CanvasOffset\030\n \001(\013"
  "2\n.TSP.PointB\002\030\001\022)\n\021desktop_ui_layout\030\013 "
  "\001(\0132\016.TSP.Reference\022.\n&desktop_slide_vie"
  "w_content_fits_window\030\014 \001(\010\022!\n\031desktop_c"
  "anvas_view_scale\030\r \001(\002\022)\n\025desktop_canvas"
  "_offset\030\025 \001(\0132\n.TSP.Point\022\036\n\026light_table"
  "_zoom_scale\030\016 \001(\002\022*\n\016chart_ui_state\030\017 \003("
  "\0132\022.TSCH.ChartUIState\022\031\n\021show_slide_guid"
  "es\030\020 \001(\010\022\034\n\024show_template_guides\030\021 \001(\010\022\026"
  "\n\016shows_comments\030\022 \001(\010\022(\n comments_print"
  "ing_toggle_enabled\030\' \001(\010\022-\n\025collapsed_sl"
  "ide_nodes\030\023 \003(\0132\016.TSP.Reference\0225\n\035outli"
  "ne_collapsed_slide_nodes\030\034 \003(\0132\016.TSP.Ref"
  "erence\0224\n\034outline_has_body_slide_nodes\030\036"
  " \003(\0132\016.TSP.Reference\022\023\n\013shows_ruler\030\024 \001("
  "\010\022$\n\034desktop_navigator_view_width\030\026 \001(\002\022"
  "\"\n\032desktop_outline_view_width\030\027 \001(\002\022*\n\"d"
  "esktop_outline_view_default_fixed\030\037 \001(\010\022"
  ",\n\031desktop_main_content_size\030\030 \001(\0132\t.TSP"
  ".Size\022+\n#desktop_presenter_notes_view_he"
  "ight\030\031 \001(\002\022.\n\032desktop_main_window_origin"
  "\030\032 \001(\0132\n.TSP.Point\022(\n light_table_hides_"
  "skipped_slides\030\033 \001(\010\0221\n\016selection_path\030\035"
  " \001(\0132\031.TSK.SelectionPathArchive\022\'\n\037deskt"
  "op_element_list_view_width\030  \001(\002\0224\n\034elem"
  "ent_list_expanded_groups\030! \003(\0132\016.TSP.Ref"
  "erence\022 \n\030shows_mobile_light_table\030\" \001(\010"
  "\022%\n\035mobile_light_table_zoom_scale\030# \001(\002\022"
  "/\n\'mobile_light_table_hides_skipped_slid"
  "es\030$ \001(\010\0226\n\036freehand_drawing_toolkit_sta"
  "te\030% \001(\0132\016.TSP.Reference\0222\n\032selection_pa"
  "th_transformer\030& \001(\0132\016.TSP.Reference\022\034\n\024"
  "shows_mobile_outline\030( \001(\010\022\030\n\020editing_di"
  "sabled\030) \001(\010\022*\n\"desktop_activity_stream_"
  "view_width\030* \001(\002\"c\n!IOSRestorableViewSta"
  "teRootArchive\022>\n\024saved_playback_state\030\001 "
  "\001(\0132 .KN.IOSSavedPlaybackStateArchive\"\337\003"
  "\n\034IOSSavedPlaybackStateArchive\022L\n\021presen"
  "tation_type\030\001 \001(\01621.KN.IOSSavedPlaybackS"
  "tateArchive.PresentationType\022\030\n\020slide_no"
  "de_index\030\002 \001(\r\022\023\n\013event_index\030\003 \001(\r\022\030\n\020b"
  "readcrumb_trail\030\004 \003(\t\022\034\n\024had_external_di"
  "splay\030\005 \001(\010\022\037\n\027is_elapsed_time_started\030\006"
  " \001(\010\022\037\n\027elapsed_time_start_time\030\007 \001(\001\022\'\n"
  "\037recording_playback_current_time\030\010 \001(\001\022#"
  "\n\033should_show_slide_navigator\030\t \001(\010\022\037\n\027i"
  "s_multi_presenter_show\030\n \001(\010\"Y\n\020Presenta"
  "tionType\022\n\n\006Manual\020\001\022\n\n\006Record\020\002\022\021\n\rPlay"
  "Recording\020\003\022\014\n\010Rehearse\020\004\022\014\n\010Showcast\020\005\""
  "\234\002\n\026CanvasSelectionArchive\022\035\n\005infos\030\001 \003("
  "\0132\016.TSP.Reference\022-\n\025non_interactive_inf"
  "os\030\005 \003(\0132\016.TSP.Reference\0226\n\036infos_for_ac"
  "tion_ghost_indexes\030\006 \003(\0132\016.TSP.Reference"
  "\022+\n\024action_ghost_indexes\030\003 \003(\0132\r.TSP.Ind"
  "exSet\022$\n\014build_chunks\030\004 \003(\0132\016.TSP.Refere"
  "nce\022)\n\035database_action_ghost_indexes\030\002 \003"
  "(\rB\002\030\001\"\035\n\033ActionGhostSelectionArchive\"T\n"
  "\035ThemeCustomTimingCurveArchive\022\014\n\004name\030\001"
  " \002(\t\022%\n\005curve\030\002 \002(\0132\026.TSD.PathSourceArch"
  "ive\"\360\003\n\014ThemeArchive\022 \n\005super\030\001 \002(\0132\021.TS"
  "S.ThemeArchive\022!\n\ttemplates\030\002 \003(\0132\016.TSP."
  "Reference\022\014\n\004uuid\030\003 \001(\t\022+\n\023classicThemeR"
  "ecords\030\004 \003(\0132\016.TSP.Reference\0223\n\033default_"
  "template_slide_node\030\005 \001(\0132\016.TSP.Referenc"
  "e\022=\n%default_template_slide_node_referen"
  "ce\030\006 \001(\0132\016.TSP.Reference\0225\n-default_temp"
  "late_slide_node_is_our_best_guess\030\007 \001(\010\022"
  "F\n\033custom_effect_timing_curves\030\010 \003(\0132!.K"
  "N.ThemeCustomTimingCurveArchive\0224\n\034live_"
  "video_source_collection\030\t \001(\0132\016.TSP.Refe"
  "rence\0227\n\037motion_background_style_presets"
  "\030\n \003(\0132\016.TSP.Reference\"]\n\020SlideTreeArchi"
  "ve\022)\n\rrootSlideNode\030\001 \001(\0132\016.TSP.Referenc"
  "eB\002\030\001\022\036\n\006slides\030\002 \003(\0132\016.TSP.Reference\"\227\005"
  "\n\013ShowArchive\022\037\n\007uiState\030\001 \001(\0132\016.TSP.Ref"
  "erence\022\035\n\005theme\030\002 \002(\0132\016.TSP.Reference\022\'\n"
  "\tslideTree\030\003 \002(\0132\024.KN.SlideTreeArchive\022\027"
  "\n\004size\030\004 \002(\0132\t.TSP.Size\022\"\n\nstylesheet\030\005 "
  "\002(\0132\016.TSP.Reference\022\033\n\023slideNumbersVisib"
  "le\030\006 \001(\010\022!\n\trecording\030\007 \001(\0132\016.TSP.Refere"
  "nce\022\031\n\021loop_presentation\030\010 \001(\010\022;\n\004mode\030\t"
  " \001(\0162\032.KN.ShowArchive.KNShowMode:\021kKNSho"
  "wModeNormal\022$\n\031autoplay_transition_delay"
  "\030\n \001(\001:\0015\022\037\n\024autoplay_build_delay\030\013 \001(\001:"
  "\0012\022\031\n\021idle_timer_active\030\017 \001(\010\022\035\n\020idle_ti"
  "mer_delay\030\020 \001(\001:\003900\022\"\n\nsoundtrack\030\021 \001(\013"
  "2\016.TSP.Reference\022%\n\035automatically_plays_"
  "upon_open\030\022 \001(\010\022!\n\tslideList\030\023 \001(\0132\016.TSP"
  ".Reference\"[\n\nKNShowMode\022\025\n\021kKNShowModeN"
  "ormal\020\000\022\027\n\023kKNShowModeAutoPlay\020\001\022\035\n\031kKNS"
  "howModeHyperlinksOnly\020\002\"\207\001\n\017DocumentArch"
  "ive\022#\n\005super\030\003 \002(\0132\024.TSA.DocumentArchive"
  "\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\0221\n\031tables"
  "_custom_format_list\030\004 \001(\0132\016.TSP.Referenc"
  "e\"\241\002\n\033SlideStylePropertiesArchive\022\036\n\004fil"
  "l\030\001 \001(\0132\020.TSD.FillArchive\0223\n\ntransition\030"
  "\002 \001(\0132\037.KN.TransitionAttributesArchive\022\027"
  "\n\017transition_null\030\003 \001(\010\022\"\n\032titlePlacehol"
  "derVisibility\030\004 \001(\010\022!\n\031bodyPlaceholderVi"
  "sibility\030\005 \001(\010\022#\n\033objectPlaceholderVisib"
  "ility\030\007 \001(\010\022(\n slideNumberPlaceholderVis"
  "ibility\030\006 \001(\010\"\213\001\n\021SlideStyleArchive\022 \n\005s"
  "uper\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016overrid"
  "e_count\030\n \001(\r:\0010\0229\n\020slide_properties\030\013 \001"
  "(\0132\037.KN.SlideStylePropertiesArchive\"\300\007\n\036"
  "PasteboardNativeStorageArchive\022!\n\tdrawab"
  "les\030\001 \003(\0132\016.TSP.Reference\022\036\n\006builds\030\002 \003("
  "\0132\016.TSP.Reference\022#\n\013buildChunks\030\003 \003(\0132\016"
  ".TSP.Reference\022\"\n\nslideNodes\030\004 \003(\0132\016.TSP"
  ".Reference\022-\n\025displayed_slide_nodes\030\014 \003("
  "\0132\016.TSP.Reference\022,\n\024template_slide_node"
  "s\030\t \003(\0132\016.TSP.Reference\022+\n\023collapsedSlid"
  "eNodes\030\n \003(\0132\016.TSP.Reference\0222\n\032outlineC"
  "ollapsedSlideNodes\030\013 \003(\0132\016.TSP.Reference"
  "\0220\n\030outlineHasBodySlideNodes\030\r \003(\0132\016.TSP"
  ".Reference\022#\n\020originalShowSize\030\005 \001(\0132\t.T"
  "SP.Size\022\037\n\013titleRanges\030\006 \003(\0132\n.TSP.Range"
  "\0220\n\022geometries_in_root\030\007 \003(\0132\024.TSD.Geome"
  "tryArchive\022$\n\034slide_node_unique_identifi"
  "er\030\010 \001(\t\022F\n\033custom_effect_timing_curves\030"
  "\016 \003(\0132!.KN.ThemeCustomTimingCurveArchive"
  "\022!\n\031original_slide_node_UUIDs\030\017 \003(\t\022/\n\'s"
  "lide_nodes_have_datas_needing_download\030\020"
  " \001(\010\022)\n\ntransition\030\021 \001(\0132\025.KN.Transition"
  "Archive\022R\n\022live_video_sources\030\022 \003(\01326.KN"
  ".PasteboardNativeStorageArchive.LiveVide"
  "oSourcePair\032i\n\023LiveVideoSourcePair\022\'\n\017li"
  "ve_video_info\030\001 \001(\0132\016.TSP.Reference\022)\n\021l"
  "ive_video_source\030\002 \001(\0132\016.TSP.Reference\"\341"
  "\001\n%PrototypeForUndoTemplateChangeArchive"
  "\022#\n\013slide_style\030\001 \001(\0132\016.TSP.Reference\022$\n"
  "\021template_slide_id\030\002 \002(\0132\t.TSP.UUID\022(\n\025d"
  "rawable_info_id_list\030\003 \003(\0132\t.TSP.UUID\022$\n"
  "\014placeholders\030\004 \003(\0132\016.TSP.Reference\022\035\n\025p"
  "laceholder_tags_list\030\005 \003(\t\"\325\003\n\020Recording"
  "Archive\022$\n\014event_tracks\030\001 \003(\0132\016.TSP.Refe"
  "rence\022#\n\013movie_track\030\002 \001(\0132\016.TSP.Referen"
  "ce\022\020\n\010duration\030\003 \001(\001\022k\n\017sync_state_enum\030"
  "\004 \001(\0162+.KN.RecordingArchive.RecordingSyn"
  "cStateEnum:!kRecordingSyncStateInSyncWit"
  "hShowB\002\030\001\022$\n\021modification_date\030\005 \001(\0132\t.T"
  "SP.Date\022*\n\nsync_state\030\006 \001(\0132\026.KN.Recordi"
  "ngSyncState\022:\n\022correction_history\030\007 \001(\0132"
  "\036.KN.RecordingCorrectionHistory\"i\n\026Recor"
  "dingSyncStateEnum\022%\n!kRecordingSyncState"
  "InSyncWithShow\020\000\022(\n$kRecordingSyncStateO"
  "utOfSyncWithShow\020\001\"f\n\022RecordingSyncState"
  "\022$\n\021out_of_sync_token\030\001 \001(\0132\t.TSP.UUID\022*"
  "\n\033can_clear_out_of_sync_token\030\002 \001(\010:\005fal"
  "se\"O\n\032RecordingCorrectionHistory\0221\n)did_"
  "add_missing_events_for_radar_49654305\030\001 "
  "\001(\010\"U\n\032RecordingEventTrackArchive\022\014\n\004typ"
  "e\030\001 \001(\t\022)\n\006events\030\002 \003(\0132\031.KN.RecordingEv"
  "entArchive\"\261\002\n\025RecordingEventArchive\022\026\n\n"
  "start_time\030\001 \001(\001:\002-1\022F\n\030navigation_event"
  "_archive\030\350\007 \001(\0132#.KN.RecordingNavigation"
  "EventArchive\022<\n\023laser_event_archive\030\351\007 \001"
  "(\0132\036.KN.RecordingLaserEventArchive\022<\n\023pa"
  "use_event_archive\030\352\007 \001(\0132\036.KN.RecordingP"
  "auseEventArchive\022<\n\023movie_event_archive\030"
  "\353\007 \001(\0132\036.KN.RecordingMovieEventArchive\"\330"
  "\003\n\037RecordingNavigationEventArchive\022\'\n\024ta"
  "rget_slide_node_id\030\004 \001(\0132\t.TSP.UUID\0223\n\033t"
  "arget_slide_node_reference\030\001 \001(\0132\016.TSP.R"
  "eference\022\032\n\022target_event_index\030\002 \001(\r\022\213\001\n"
  "\017animation_phase\030\003 \001(\0162J.KN.RecordingNav"
  "igationEventArchive.RecordingNavigationE"
  "ventAnimationPhase:&kRecordingNavigation"
  "EventAnimationNone\"\254\001\n&RecordingNavigati"
  "onEventAnimationPhase\022*\n&kRecordingNavig"
  "ationEventAnimationNone\020\000\022+\n\'kRecordingN"
  "avigationEventAnimationStart\020\001\022)\n%kRecor"
  "dingNavigationEventAnimationEnd\020\002\"j\n\032Rec"
  "ordingLaserEventArchive\022)\n\021unscaled_loca"
  "tion\030\001 \001(\0132\n.TSP.PointB\002\030\001\022!\n\runit_locat"
  "ion\030\002 \001(\0132\n.TSP.Point\"\315\002\n\032RecordingPause"
  "EventArchive\022p\n\020pause_event_type\030\001 \001(\01626"
  ".KN.RecordingPauseEventArchive.Recording"
  "PauseEventType:\036kRecordingPauseEventType"
  "Resume\"\274\001\n\027RecordingPauseEventType\022\"\n\036kR"
  "ecordingPauseEventTypeResume\020\000\022!\n\035kRecor"
  "dingPauseEventTypePause\020\001\022,\n(kRecordingP"
  "auseEventTypeConcealWithBlack\020\002\022,\n(kReco"
  "rdingPauseEventTypeConcealWithWhite\020\003\"\325\004"
  "\n\032RecordingMovieEventArchive\022,\n\024movie_in"
  "fo_reference\030\001 \001(\0132\016.TSP.Reference\022j\n\020mo"
  "vie_event_type\030\002 \001(\01626.KN.RecordingMovie"
  "EventArchive.RecordingMovieEventType:\030kR"
  "ecordingMovieEventSeek\022\031\n\021movie_event_va"
  "lue\030\003 \001(\001\022F\n.movie_info_that_played_acro"
  "ss_slides_reference\030\004 \001(\0132\016.TSP.Referenc"
  "e\022&\n\023movie_slide_node_id\030\005 \001(\0132\t.TSP.UUI"
  "D\"\221\002\n\027RecordingMovieEventType\022\034\n\030kRecord"
  "ingMovieEventNone\020\000\022\034\n\030kRecordingMovieEv"
  "entSeek\020\001\022\037\n\033kRecordingMovieEventSetRate"
  "\020\002\022%\n!kRecordingMovieEventStartPlayback\020"
  "\003\022$\n kRecordingMovieEventStopPlayback\020\004\022"
  "&\n\"kRecordingMovieEventBeginScrubbing\020\005\022"
  "$\n kRecordingMovieEventEndScrubbing\020\006\"\200\001"
  "\n\032RecordingMovieTrackArchive\022/\n\016movie_se"
  "gments\030\001 \003(\0132\027.KN.MovieSegmentArchive\0221\n"
  ")is_movie_segment_data_trimmed_to_durati"
  "on\030\002 \001(\010\"\202\001\n\023MovieSegmentArchive\022&\n\nmovi"
  "e_data\030\003 \001(\0132\022.TSP.DataReference\022\026\n\nstar"
  "t_time\030\002 \001(\001:\002-1\022+\n\023database_movie_data\030"
  "\001 \001(\0132\016.TSP.Reference\"\371\001\n\nSoundtrack\022\016\n\006"
  "volume\030\001 \001(\001\022F\n\004mode\030\002 \001(\0162\035.KN.Soundtra"
  "ck.SoundtrackMode:\031kKNSoundtrackModePlay"
  "Once\022\'\n\013movie_media\030\003 \003(\0132\022.TSP.DataRefe"
  "rence\"j\n\016SoundtrackMode\022\035\n\031kKNSoundtrack"
  "ModePlayOnce\020\000\022\031\n\025kKNSoundtrackModeLoop\020"
  "\001\022\036\n\032kKNSoundtrackModeDoNotPlay\020\002\"M\n\034Sli"
  "deNumberAttachmentArchive\022-\n\005super\030\001 \002(\013"
  "2\036.TSWP.TextualAttachmentArchive\"\370\002\n\037Sli"
  "deCollectionSelectionArchive\022#\n\013slide_no"
  "des\030\001 \003(\0132\016.TSP.Reference\022*\n\022slide_node_"
  "to_edit\030\002 \001(\0132\016.TSP.Reference\022h\n*selecte"
  "d_paragraph_indexes_for_slide_nodes\030\003 \003("
  "\01324.KN.SlideCollectionSelectionArchive.O"
  "utlineSelection\022/\n\033range_in_selected_par"
  "agraph\030\004 \001(\0132\n.TSP.Range\032i\n\020OutlineSelec"
  "tion\022\"\n\nslide_node\030\001 \002(\0132\016.TSP.Reference"
  "\0221\n\032selected_paragraph_indexes\030\002 \002(\0132\r.T"
  "SP.IndexSet\"D\n\036PresenterNotesSelectionAr"
  "chive\022\"\n\nslide_node\030\001 \001(\0132\016.TSP.Referenc"
  "e\"\221\003\n\024MixedIdOperationArgs\022>\n\017args_list_"
  "types\030\001 \003(\0162%.KN.MixedIdOperationArgs.Ar"
  "gsListKind\022.\n\radd_args_list\030\002 \003(\0132\027.TSK."
  "AddIdOperationArgs\022A\n\032show_placeholder_a"
  "rgs_list\030\003 \003(\0132\035.TSK.IdPlacementOperatio"
  "nArgs\0224\n\020remove_args_list\030\004 \003(\0132\032.TSK.Re"
  "moveIdOperationArgs\022A\n\032hide_placeholder_"
  "args_list\030\005 \003(\0132\035.TSK.IdPlacementOperati"
  "onArgs\"M\n\014ArgsListKind\022\007\n\003Add\020\000\022\n\n\006Remov"
  "e\020\001\022\023\n\017ShowPlaceholder\020\002\022\023\n\017HidePlacehol"
  "der\020\003\"\255\002\n\rLiveVideoInfo\022\034\n\tsource_id\030\001 \001"
  "(\0132\t.TSP.UUID\022\026\n\016is_placeholder\030\002 \001(\010\022\r\n"
  "\005scale\030\003 \001(\001\022%\n\021normalized_offset\030\004 \001(\0132"
  "\n.TSP.Point\022\021\n\tmask_kind\030\005 \001(\005\022\032\n\022mask_c"
  "orner_radius\030\006 \001(\001\022\027\n\017background_kind\030\007 "
  "\001(\005\022)\n\017background_fill\030\010 \001(\0132\020.TSD.FillA"
  "rchive2=\n\017live_video_info\022\021.TSD.MovieArc"
  "hive\030d \001(\0132\021.KN.LiveVideoInfo\"\373\002\n\017LiveVi"
  "deoSource\022\014\n\004name\030\001 \001(\t\022I\n\032capture_devic"
  "e_description\030\002 \001(\0132%.KN.LiveVideoCaptur"
  "eDeviceDescription\022\\\n!collaboration_comm"
  "and_usage_state\030\003 \001(\01321.KN.LiveVideoSour"
  "ceCollaborationCommandUsageState\022-\n\021post"
  "er_image_data\030\004 \001(\0132\022.TSP.DataReference\022"
  " \n\030symbol_abbreviation_text\030\005 \001(\t\022\037\n\027sym"
  "bol_image_identifier\030\006 \001(\005\022$\n\034symbol_tin"
  "t_color_identifier\030\007 \001(\005\022\031\n\021is_default_s"
  "ource\030\010 \001(\010\"\245\001\n-LiveVideoSourceCollabora"
  "tionCommandUsageState\022;\n(single_collabor"
  "ation_command_usage_token\030\001 \001(\0132\t.TSP.UU"
  "ID\0227\n/has_multiple_collaboration_command"
  "_usage_tokens\030\002 \001(\010\"\276\002\n!LiveVideoCapture"
  "DeviceDescription\022\021\n\tunique_id\030\001 \001(\t\022@\n\010"
  "position\030\002 \001(\0162..KN.LiveVideoCaptureDevi"
  "ceDescription.Position\022\023\n\013device_type\030\003 "
  "\001(\t\022\026\n\016localized_name\030\004 \001(\t\022&\n\036is_ios_sc"
  "reen_recording_device\030\005 \001(\010\022\020\n\010model_id\030"
  "\006 \001(\t\022+\n\030default_video_resolution\030\007 \001(\0132"
  "\t.TSP.Size\"0\n\010Position\022\017\n\013Unspecified\020\000\022"
  "\010\n\004Back\020\001\022\t\n\005Front\020\002\"d\n\031LiveVideoSourceC"
  "ollection\022\037\n\007sources\030\001 \003(\0132\016.TSP.Referen"
  "ce\022&\n\016default_source\030\002 \001(\0132\016.TSP.Referen"
  "ce\"5\n\031LiveVideoSourceUsageEntry\022\030\n\020backg"
  "round_kinds\030\001 \003(\005\"\360\022\n&MotionBackgroundSt"
  "ylePropertiesArchive\022\027\n\017background_name\030"
  "\001 \001(\t\022\017\n\007variant\030\002 \001(\t\022(\n\016color_gradient"
  "\030\003 \001(\0132\020.TSD.FillArchive\022\032\n\022random_numbe"
  "r_seed\030\n \001(\005\022\030\n\020color_blur_sigma\030\013 \001(\001\022\027"
  "\n\017noise_amplitude\030\014 \001(\001\022\025\n\rnoise_octaves"
  "\030\r \001(\001\022\023\n\013noise_scale\030\016 \001(\001\022\023\n\013noise_spe"
  "ed\030\017 \001(\001\022\034\n\024color_palette_offset\030\020 \001(\001\022\014"
  "\n\004zoom\030\021 \001(\001\022\016\n\006invert\030\022 \001(\010\022\022\n\nblend_mo"
  "de\030\023 \001(\t\022\033\n\023source_blend_factor\030\024 \001(\t\022\031\n"
  "\021dest_blend_factor\030\025 \001(\t\022\016\n\006motion\030\026 \001(\t"
  "\022$\n\020background_color\030\027 \001(\0132\n.TSP.Color\022$"
  "\n\020foreground_color\030\030 \001(\0132\n.TSP.Color\022\036\n\n"
  "line_color\030\031 \001(\0132\n.TSP.Color\022\037\n\013point_co"
  "lor\030\032 \001(\0132\n.TSP.Color\022\r\n\005alpha\030\033 \001(\001\022\016\n\006"
  "border\030\034 \001(\001\022\r\n\005blend\030\035 \001(\001\022\022\n\nbrightnes"
  "s\030\036 \001(\001\022\030\n\020border_lightness\030\037 \001(\001\022\020\n\010con"
  "trast\030  \001(\001\022\017\n\007damping\030! \001(\001\022\017\n\007density\030"
  "\" \001(\001\022\025\n\rdiffuse_power\030# \001(\001\022\022\n\ndistorti"
  "on\030$ \001(\001\022\017\n\007entropy\030% \001(\001\022\020\n\010exposure\030& "
  "\001(\001\022\016\n\006filter\030\' \001(\001\022\024\n\014fog_distance\030( \001("
  "\001\022\021\n\tfog_power\030) \001(\001\022\r\n\005gamma\030* \001(\001\022\024\n\014g"
  "rain_amount\030+ \001(\001\022\027\n\017grain_intensity\030, \001"
  "(\001\022\013\n\003hue\030- \001(\001\022\021\n\tlightness\030. \001(\001\022\022\n\nli"
  "ne_alpha\030/ \001(\001\022\023\n\013line_center\0300 \001(\001\022\021\n\tl"
  "ine_fade\0301 \001(\001\022\027\n\017line_fade_power\0302 \001(\001\022"
  "\023\n\013line_length\0303 \001(\001\022\022\n\nline_width\0304 \001(\001"
  "\022\030\n\020noise_size_scale\0305 \001(\001\022\031\n\021noise_size"
  "_weight\0306 \001(\001\022\026\n\016noise_variance\0307 \001(\001\022\016\n"
  "\006offset\0308 \001(\001\022!\n\031motion_background_opaci"
  "ty\0309 \001(\001\022\031\n\021point_depth_alpha\030: \001(\001\022\022\n\np"
  "oint_size\030; \001(\001\022\016\n\006radius\030< \001(\001\022\022\n\nrefra"
  "ction\030= \001(\001\022\022\n\nresolution\030> \001(\001\022\022\n\nsatur"
  "ation\030\? \001(\001\022\r\n\005scale\030@ \001(\001\022\024\n\014shadow_alp"
  "ha\030A \001(\001\022\024\n\014shadow_angle\030B \001(\001\022\025\n\rshadow"
  "_offset\030C \001(\001\022\024\n\014shadow_scale\030D \001(\001\022\024\n\014s"
  "hadow_value\030E \001(\001\022\r\n\005speed\030F \001(\001\022\025\n\rtext"
  "ure_power\030G \001(\001\022\014\n\004time\030H \001(\001\022\023\n\013draw_po"
  "ints\030I \001(\010\022\022\n\ndraw_lines\030J \001(\010\022\024\n\014draw_s"
  "hadows\030K \001(\010\022\033\n\023pixels_per_division\030L \001("
  "\r\022\020\n\010symmetry\030M \001(\010\022\022\n\nlock_focus\030N \001(\010\022"
  "\021\n\tamplitude\030O \001(\001\022\020\n\010envelope\030P \001(\001\022\020\n\010"
  "y_offset\030Q \001(\001\022\r\n\005focus\030R \001(\001\022\014\n\004blur\030S "
  "\001(\001\022\023\n\013grain_speed\030T \001(\001\022\036\n\nmesh_color\030U"
  " \001(\0132\n.TSP.Color\022\r\n\005angle\030V \001(\001\022\027\n\017mesh_"
  "line_width\030W \001(\001\022\022\n\ndelta_time\030X \001(\001\022\022\n\n"
  "time_start\030Y \001(\001\022\026\n\016color_contrast\030Z \001(\001"
  "\022\023\n\013color_gamma\030[ \001(\001\022\030\n\020color_saturatio"
  "n\030\\ \001(\001\022\030\n\020color_brightness\030] \001(\001\022\021\n\tcol"
  "or_hue\030^ \001(\001\022\026\n\016color_vibrance\030_ \001(\001\022\026\n\016"
  "noise_movement\030` \001(\001\022\r\n\005power\030a \001(\001\022\021\n\tt"
  "hreshold\030b \001(\001\022\036\n\026noise_scale_horizontal"
  "\030c \001(\001\022\034\n\024noise_scale_vertical\030d \001(\001\022\022\n\n"
  "noise_gain\030e \001(\001\022\030\n\020noise_lacunarity\030f \001"
  "(\001\022\026\n\016instance_count\030g \001(\005\022\021\n\textrusion\030"
  "h \001(\001\022\024\n\014noise_offset\030i \001(\001\022\030\n\020color_hue"
  "_offset\030j \001(\001\022\022\n\nshadow_hue\030k \001(\001\022\031\n\021sha"
  "dow_hue_offset\030l \001(\001\022\031\n\021shadow_saturatio"
  "n\030m \001(\001\022\031\n\021shadow_brightness\030n \001(\001\022\030\n\020sh"
  "adow_intensity\030o \001(\001\022\024\n\014shadow_power\030p \001"
  "(\001\022 \n\030noise_octaves_iterations\030q \001(\005\"\320\001\n"
  "\034MotionBackgroundStyleArchive\022 \n\005super\030\001"
  " \002(\0132\021.TSS.StyleArchive\022\031\n\016override_coun"
  "t\030\n \001(\r:\0010\022D\n\020slide_properties\030\013 \001(\0132*.K"
  "N.MotionBackgroundStylePropertiesArchive"
  "\022-\n\021poster_frame_data\030\014 \001(\0132\022.TSP.DataRe"
  "ference\"N\n\033MotionBackgroundFillArchive\022/"
  "\n\027motion_background_style\030\001 \002(\0132\016.TSP.Re"
  "ference:P\n\024motionBackgroundFill\022\020.TSD.Fi"
  "llArchive\030\310\001 \001(\0132\037.KN.MotionBackgroundFi"
  "llArchive"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_KNArchives_2eproto_deps[7] = {
  &::descriptor_table_TSAArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_KNArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KNArchives_2eproto = {
    false, false, 24169, descriptor_table_protodef_KNArchives_2eproto,
    "KNArchives.proto",
    &descriptor_table_KNArchives_2eproto_once, descriptor_table_KNArchives_2eproto_deps, 7, 61,
    schemas, file_default_instances, TableStruct_KNArchives_2eproto::offsets,
    file_level_metadata_KNArchives_2eproto, file_level_enum_descriptors_KNArchives_2eproto,
    file_level_service_descriptors_KNArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KNArchives_2eproto_getter() {
  return &descriptor_table_KNArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KNArchives_2eproto(&descriptor_table_KNArchives_2eproto);
namespace KN {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[0];
}
bool TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeLinear;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseIn;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseOut;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseInEaseOut;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeCustom;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_MIN;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_MAX;
constexpr int TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[1];
}
bool TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByObject;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByWord;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByCharacter;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByLine;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_MIN;
constexpr TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_MAX;
constexpr int TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributeValueArchive_BuildAttributeValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[2];
}
bool BuildAttributeValueArchive_BuildAttributeValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_integer;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_double;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_bool;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_string;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_path_source;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::k_color;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::BuildAttributeValueType_MIN;
constexpr BuildAttributeValueArchive_BuildAttributeValueType BuildAttributeValueArchive::BuildAttributeValueType_MAX;
constexpr int BuildAttributeValueArchive::BuildAttributeValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesAcceleration_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[3];
}
bool BuildAttributesArchive_BuildAttributesAcceleration_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kNone;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseIn;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseOut;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseBoth;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kCustom;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::BuildAttributesAcceleration_MIN;
constexpr BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::BuildAttributesAcceleration_MAX;
constexpr int BuildAttributesArchive::BuildAttributesAcceleration_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesRotationDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[4];
}
bool BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(int value) {
  switch (value) {
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::kClockwise;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::kCounterclockwise;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::BuildAttributesRotationDirection_MIN;
constexpr BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::BuildAttributesRotationDirection_MAX;
constexpr int BuildAttributesArchive::BuildAttributesRotationDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesCurveStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[5];
}
bool BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::kStraight;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::kCurved;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::BuildAttributesCurveStyle_MIN;
constexpr BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::BuildAttributesCurveStyle_MAX;
constexpr int BuildAttributesArchive::BuildAttributesCurveStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesTextDelivery_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[6];
}
bool BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryUndefined;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByObject;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByWord;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByCharacter;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByLine;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::BuildAttributesTextDelivery_MIN;
constexpr BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::BuildAttributesTextDelivery_MAX;
constexpr int BuildAttributesArchive::BuildAttributesTextDelivery_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[7];
}
bool BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionUndefined;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionForward;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionBackward;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionFromCenter;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionFromEdges;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionRandom;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::BuildAttributesDeliveryOption_MIN;
constexpr BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::BuildAttributesDeliveryOption_MAX;
constexpr int BuildAttributesArchive::BuildAttributesDeliveryOption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[8];
}
bool BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensitySmall;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensityMedium;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensityLarge;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_MIN;
constexpr BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_MAX;
constexpr int BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceholderArchive_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[9];
}
bool PlaceholderArchive_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindSlideNumberPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindTitlePlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindBodyPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::kKindObjectPlaceholder;
constexpr PlaceholderArchive_Kind PlaceholderArchive::Kind_MIN;
constexpr PlaceholderArchive_Kind PlaceholderArchive::Kind_MAX;
constexpr int PlaceholderArchive::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_SidebarViewMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[10];
}
bool DesktopUILayoutArchive_SidebarViewMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::kSidebarViewModeNavigator;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::kSidebarViewModeOutline;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::SidebarViewMode_MIN;
constexpr DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::SidebarViewMode_MAX;
constexpr int DesktopUILayoutArchive::SidebarViewMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DesktopUILayoutArchive_InspectorPaneViewMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[11];
}
bool DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeFormat;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeAnimate;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeSetup;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::InspectorPaneViewMode_MIN;
constexpr DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::InspectorPaneViewMode_MAX;
constexpr int DesktopUILayoutArchive::InspectorPaneViewMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOSSavedPlaybackStateArchive_PresentationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[12];
}
bool IOSSavedPlaybackStateArchive_PresentationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::Manual;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::Record;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::PlayRecording;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::Rehearse;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::Showcast;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::PresentationType_MIN;
constexpr IOSSavedPlaybackStateArchive_PresentationType IOSSavedPlaybackStateArchive::PresentationType_MAX;
constexpr int IOSSavedPlaybackStateArchive::PresentationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShowArchive_KNShowMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[13];
}
bool ShowArchive_KNShowMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ShowArchive_KNShowMode ShowArchive::kKNShowModeNormal;
constexpr ShowArchive_KNShowMode ShowArchive::kKNShowModeAutoPlay;
constexpr ShowArchive_KNShowMode ShowArchive::kKNShowModeHyperlinksOnly;
constexpr ShowArchive_KNShowMode ShowArchive::KNShowMode_MIN;
constexpr ShowArchive_KNShowMode ShowArchive::KNShowMode_MAX;
constexpr int ShowArchive::KNShowMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingArchive_RecordingSyncStateEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[14];
}
bool RecordingArchive_RecordingSyncStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive::kRecordingSyncStateInSyncWithShow;
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive::kRecordingSyncStateOutOfSyncWithShow;
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive::RecordingSyncStateEnum_MIN;
constexpr RecordingArchive_RecordingSyncStateEnum RecordingArchive::RecordingSyncStateEnum_MAX;
constexpr int RecordingArchive::RecordingSyncStateEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[15];
}
bool RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationNone;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationStart;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationEnd;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_MIN;
constexpr RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_MAX;
constexpr int RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingPauseEventArchive_RecordingPauseEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[16];
}
bool RecordingPauseEventArchive_RecordingPauseEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeResume;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypePause;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeConcealWithBlack;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeConcealWithWhite;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::RecordingPauseEventType_MIN;
constexpr RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::RecordingPauseEventType_MAX;
constexpr int RecordingPauseEventArchive::RecordingPauseEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordingMovieEventArchive_RecordingMovieEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[17];
}
bool RecordingMovieEventArchive_RecordingMovieEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventNone;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventSeek;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventSetRate;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventStartPlayback;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventStopPlayback;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventBeginScrubbing;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventEndScrubbing;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::RecordingMovieEventType_MIN;
constexpr RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::RecordingMovieEventType_MAX;
constexpr int RecordingMovieEventArchive::RecordingMovieEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Soundtrack_SoundtrackMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[18];
}
bool Soundtrack_SoundtrackMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModePlayOnce;
constexpr Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModeLoop;
constexpr Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModeDoNotPlay;
constexpr Soundtrack_SoundtrackMode Soundtrack::SoundtrackMode_MIN;
constexpr Soundtrack_SoundtrackMode Soundtrack::SoundtrackMode_MAX;
constexpr int Soundtrack::SoundtrackMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MixedIdOperationArgs_ArgsListKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[19];
}
bool MixedIdOperationArgs_ArgsListKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::Add;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::Remove;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::ShowPlaceholder;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::HidePlaceholder;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::ArgsListKind_MIN;
constexpr MixedIdOperationArgs_ArgsListKind MixedIdOperationArgs::ArgsListKind_MAX;
constexpr int MixedIdOperationArgs::ArgsListKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LiveVideoCaptureDeviceDescription_Position_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KNArchives_2eproto);
  return file_level_enum_descriptors_KNArchives_2eproto[20];
}
bool LiveVideoCaptureDeviceDescription_Position_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LiveVideoCaptureDeviceDescription_Position LiveVideoCaptureDeviceDescription::Unspecified;
constexpr LiveVideoCaptureDeviceDescription_Position LiveVideoCaptureDeviceDescription::Back;
constexpr LiveVideoCaptureDeviceDescription_Position LiveVideoCaptureDeviceDescription::Front;
constexpr LiveVideoCaptureDeviceDescription_Position LiveVideoCaptureDeviceDescription::Position_MIN;
constexpr LiveVideoCaptureDeviceDescription_Position LiveVideoCaptureDeviceDescription::Position_MAX;
constexpr int LiveVideoCaptureDeviceDescription::Position_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AnimationAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationAttributesArchive>()._impl_._has_bits_);
  static void set_has_animation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_automatic(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Color& color(const AnimationAttributesArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::PathSourceArchive& custom_effect_timing_curve_1(const AnimationAttributesArchive* msg);
  static void set_has_custom_effect_timing_curve_1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::PathSourceArchive& custom_effect_timing_curve_2(const AnimationAttributesArchive* msg);
  static void set_has_custom_effect_timing_curve_2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::PathSourceArchive& custom_effect_timing_curve_3(const AnimationAttributesArchive* msg);
  static void set_has_custom_effect_timing_curve_3(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_random_number_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_custom_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_custom_effect_timing_curve_theme_name_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_effect_timing_curve_theme_name_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_effect_timing_curve_theme_name_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_writing_direction_is_rtl(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::TSP::Color&
AnimationAttributesArchive::_Internal::color(const AnimationAttributesArchive* msg) {
  return *msg->_impl_.color_;
}
const ::TSD::PathSourceArchive&
AnimationAttributesArchive::_Internal::custom_effect_timing_curve_1(const AnimationAttributesArchive* msg) {
  return *msg->_impl_.custom_effect_timing_curve_1_;
}
const ::TSD::PathSourceArchive&
AnimationAttributesArchive::_Internal::custom_effect_timing_curve_2(const AnimationAttributesArchive* msg) {
  return *msg->_impl_.custom_effect_timing_curve_2_;
}
const ::TSD::PathSourceArchive&
AnimationAttributesArchive::_Internal::custom_effect_timing_curve_3(const AnimationAttributesArchive* msg) {
  return *msg->_impl_.custom_effect_timing_curve_3_;
}
void AnimationAttributesArchive::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void AnimationAttributesArchive::clear_custom_effect_timing_curve_1() {
  if (_impl_.custom_effect_timing_curve_1_ != nullptr) _impl_.custom_effect_timing_curve_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void AnimationAttributesArchive::clear_custom_effect_timing_curve_2() {
  if (_impl_.custom_effect_timing_curve_2_ != nullptr) _impl_.custom_effect_timing_curve_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void AnimationAttributesArchive::clear_custom_effect_timing_curve_3() {
  if (_impl_.custom_effect_timing_curve_3_ != nullptr) _impl_.custom_effect_timing_curve_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
AnimationAttributesArchive::AnimationAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.AnimationAttributesArchive)
}
AnimationAttributesArchive::AnimationAttributesArchive(const AnimationAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnimationAttributesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.animation_type_){}
    , decltype(_impl_.effect_){}
    , decltype(_impl_.custom_effect_timing_curve_theme_name_1_){}
    , decltype(_impl_.custom_effect_timing_curve_theme_name_2_){}
    , decltype(_impl_.custom_effect_timing_curve_theme_name_3_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.custom_effect_timing_curve_1_){nullptr}
    , decltype(_impl_.custom_effect_timing_curve_2_){nullptr}
    , decltype(_impl_.custom_effect_timing_curve_3_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.random_number_seed_){}
    , decltype(_impl_.custom_detail_){}
    , decltype(_impl_.is_automatic_){}
    , decltype(_impl_.writing_direction_is_rtl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.animation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animation_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_animation_type()) {
    _this->_impl_.animation_type_.Set(from._internal_animation_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_effect()) {
    _this->_impl_.effect_.Set(from._internal_effect(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_effect_timing_curve_theme_name_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_effect_timing_curve_theme_name_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_effect_timing_curve_theme_name_1()) {
    _this->_impl_.custom_effect_timing_curve_theme_name_1_.Set(from._internal_custom_effect_timing_curve_theme_name_1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_effect_timing_curve_theme_name_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_effect_timing_curve_theme_name_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_effect_timing_curve_theme_name_2()) {
    _this->_impl_.custom_effect_timing_curve_theme_name_2_.Set(from._internal_custom_effect_timing_curve_theme_name_2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_effect_timing_curve_theme_name_3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_effect_timing_curve_theme_name_3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_effect_timing_curve_theme_name_3()) {
    _this->_impl_.custom_effect_timing_curve_theme_name_3_.Set(from._internal_custom_effect_timing_curve_theme_name_3(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::TSP::Color(*from._impl_.color_);
  }
  if (from._internal_has_custom_effect_timing_curve_1()) {
    _this->_impl_.custom_effect_timing_curve_1_ = new ::TSD::PathSourceArchive(*from._impl_.custom_effect_timing_curve_1_);
  }
  if (from._internal_has_custom_effect_timing_curve_2()) {
    _this->_impl_.custom_effect_timing_curve_2_ = new ::TSD::PathSourceArchive(*from._impl_.custom_effect_timing_curve_2_);
  }
  if (from._internal_has_custom_effect_timing_curve_3()) {
    _this->_impl_.custom_effect_timing_curve_3_ = new ::TSD::PathSourceArchive(*from._impl_.custom_effect_timing_curve_3_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.writing_direction_is_rtl_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.writing_direction_is_rtl_));
  // @@protoc_insertion_point(copy_constructor:KN.AnimationAttributesArchive)
}

inline void AnimationAttributesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.animation_type_){}
    , decltype(_impl_.effect_){}
    , decltype(_impl_.custom_effect_timing_curve_theme_name_1_){}
    , decltype(_impl_.custom_effect_timing_curve_theme_name_2_){}
    , decltype(_impl_.custom_effect_timing_curve_theme_name_3_){}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.custom_effect_timing_curve_1_){nullptr}
    , decltype(_impl_.custom_effect_timing_curve_2_){nullptr}
    , decltype(_impl_.custom_effect_timing_curve_3_){nullptr}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.delay_){0}
    , decltype(_impl_.direction_){0u}
    , decltype(_impl_.random_number_seed_){0u}
    , decltype(_impl_.custom_detail_){0}
    , decltype(_impl_.is_automatic_){false}
    , decltype(_impl_.writing_direction_is_rtl_){false}
  };
  _impl_.animation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.animation_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_effect_timing_curve_theme_name_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_effect_timing_curve_theme_name_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_effect_timing_curve_theme_name_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_effect_timing_curve_theme_name_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_effect_timing_curve_theme_name_3_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_effect_timing_curve_theme_name_3_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnimationAttributesArchive::~AnimationAttributesArchive() {
  // @@protoc_insertion_point(destructor:KN.AnimationAttributesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnimationAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.animation_type_.Destroy();
  _impl_.effect_.Destroy();
  _impl_.custom_effect_timing_curve_theme_name_1_.Destroy();
  _impl_.custom_effect_timing_curve_theme_name_2_.Destroy();
  _impl_.custom_effect_timing_curve_theme_name_3_.Destroy();
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.custom_effect_timing_curve_1_;
  if (this != internal_default_instance()) delete _impl_.custom_effect_timing_curve_2_;
  if (this != internal_default_instance()) delete _impl_.custom_effect_timing_curve_3_;
}

void AnimationAttributesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnimationAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.AnimationAttributesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.animation_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.custom_effect_timing_curve_theme_name_1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.custom_effect_timing_curve_theme_name_2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.custom_effect_timing_curve_theme_name_3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.custom_effect_timing_curve_1_ != nullptr);
      _impl_.custom_effect_timing_curve_1_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.custom_effect_timing_curve_2_ != nullptr);
      _impl_.custom_effect_timing_curve_2_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.custom_effect_timing_curve_3_ != nullptr);
    _impl_.custom_effect_timing_curve_3_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.writing_direction_is_rtl_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.writing_direction_is_rtl_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnimationAttributesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string animation_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_animation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.AnimationAttributesArchive.animation_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_effect();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.AnimationAttributesArchive.effect");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_direction(&has_bits);
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_delay(&has_bits);
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_automatic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_automatic(&has_bits);
          _impl_.is_automatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive custom_effect_timing_curve_1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_effect_timing_curve_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive custom_effect_timing_curve_2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_effect_timing_curve_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive custom_effect_timing_curve_3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_effect_timing_curve_3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 random_number_seed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_random_number_seed(&has_bits);
          _impl_.random_number_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double custom_detail = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_custom_detail(&has_bits);
          _impl_.custom_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_effect_timing_curve_theme_name_1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_custom_effect_timing_curve_theme_name_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_1");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string custom_effect_timing_curve_theme_name_2 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_custom_effect_timing_curve_theme_name_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string custom_effect_timing_curve_theme_name_3 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_custom_effect_timing_curve_theme_name_3();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_3");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool writing_direction_is_rtl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_writing_direction_is_rtl(&has_bits);
          _impl_.writing_direction_is_rtl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnimationAttributesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.AnimationAttributesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string animation_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_animation_type().data(), static_cast<int>(this->_internal_animation_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.animation_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_animation_type(), target);
  }

  // optional string effect = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effect().data(), static_cast<int>(this->_internal_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.effect");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_effect(), target);
  }

  // optional double duration = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // optional uint32 direction = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_direction(), target);
  }

  // optional double delay = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_delay(), target);
  }

  // optional bool is_automatic = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_automatic(), target);
  }

  // optional .TSP.Color color = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.PathSourceArchive custom_effect_timing_curve_1 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::custom_effect_timing_curve_1(this),
        _Internal::custom_effect_timing_curve_1(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.PathSourceArchive custom_effect_timing_curve_2 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::custom_effect_timing_curve_2(this),
        _Internal::custom_effect_timing_curve_2(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.PathSourceArchive custom_effect_timing_curve_3 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::custom_effect_timing_curve_3(this),
        _Internal::custom_effect_timing_curve_3(this).GetCachedSize(), target, stream);
  }

  // optional uint32 random_number_seed = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_random_number_seed(), target);
  }

  // optional double custom_detail = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_custom_detail(), target);
  }

  // optional string custom_effect_timing_curve_theme_name_1 = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_effect_timing_curve_theme_name_1().data(), static_cast<int>(this->_internal_custom_effect_timing_curve_theme_name_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_1");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_custom_effect_timing_curve_theme_name_1(), target);
  }

  // optional string custom_effect_timing_curve_theme_name_2 = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_effect_timing_curve_theme_name_2().data(), static_cast<int>(this->_internal_custom_effect_timing_curve_theme_name_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_2");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_custom_effect_timing_curve_theme_name_2(), target);
  }

  // optional string custom_effect_timing_curve_theme_name_3 = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_effect_timing_curve_theme_name_3().data(), static_cast<int>(this->_internal_custom_effect_timing_curve_theme_name_3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.AnimationAttributesArchive.custom_effect_timing_curve_theme_name_3");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_custom_effect_timing_curve_theme_name_3(), target);
  }

  // optional bool writing_direction_is_rtl = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_writing_direction_is_rtl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.AnimationAttributesArchive)
  return target;
}

size_t AnimationAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.AnimationAttributesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string animation_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_animation_type());
    }

    // optional string effect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_effect());
    }

    // optional string custom_effect_timing_curve_theme_name_1 = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_effect_timing_curve_theme_name_1());
    }

    // optional string custom_effect_timing_curve_theme_name_2 = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_effect_timing_curve_theme_name_2());
    }

    // optional string custom_effect_timing_curve_theme_name_3 = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_effect_timing_curve_theme_name_3());
    }

    // optional .TSP.Color color = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // optional .TSD.PathSourceArchive custom_effect_timing_curve_1 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_effect_timing_curve_1_);
    }

    // optional .TSD.PathSourceArchive custom_effect_timing_curve_2 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_effect_timing_curve_2_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.PathSourceArchive custom_effect_timing_curve_3 = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_effect_timing_curve_3_);
    }

    // optional double duration = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double delay = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional uint32 direction = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_direction());
    }

    // optional uint32 random_number_seed = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_random_number_seed());
    }

    // optional double custom_detail = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool is_automatic = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool writing_direction_is_rtl = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnimationAttributesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnimationAttributesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnimationAttributesArchive::GetClassData() const { return &_class_data_; }


void AnimationAttributesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnimationAttributesArchive*>(&to_msg);
  auto& from = static_cast<const AnimationAttributesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.AnimationAttributesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_animation_type(from._internal_animation_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_effect(from._internal_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_custom_effect_timing_curve_theme_name_1(from._internal_custom_effect_timing_curve_theme_name_1());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_custom_effect_timing_curve_theme_name_2(from._internal_custom_effect_timing_curve_theme_name_2());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_custom_effect_timing_curve_theme_name_3(from._internal_custom_effect_timing_curve_theme_name_3());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_color()->::TSP::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_custom_effect_timing_curve_1()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_custom_effect_timing_curve_1());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_custom_effect_timing_curve_2()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_custom_effect_timing_curve_2());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_custom_effect_timing_curve_3()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_custom_effect_timing_curve_3());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.delay_ = from._impl_.delay_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.random_number_seed_ = from._impl_.random_number_seed_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.custom_detail_ = from._impl_.custom_detail_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_automatic_ = from._impl_.is_automatic_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.writing_direction_is_rtl_ = from._impl_.writing_direction_is_rtl_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationAttributesArchive::CopyFrom(const AnimationAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.AnimationAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationAttributesArchive::IsInitialized() const {
  if (_internal_has_color()) {
    if (!_impl_.color_->IsInitialized()) return false;
  }
  if (_internal_has_custom_effect_timing_curve_1()) {
    if (!_impl_.custom_effect_timing_curve_1_->IsInitialized()) return false;
  }
  if (_internal_has_custom_effect_timing_curve_2()) {
    if (!_impl_.custom_effect_timing_curve_2_->IsInitialized()) return false;
  }
  if (_internal_has_custom_effect_timing_curve_3()) {
    if (!_impl_.custom_effect_timing_curve_3_->IsInitialized()) return false;
  }
  return true;
}

void AnimationAttributesArchive::InternalSwap(AnimationAttributesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.animation_type_, lhs_arena,
      &other->_impl_.animation_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.effect_, lhs_arena,
      &other->_impl_.effect_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_effect_timing_curve_theme_name_1_, lhs_arena,
      &other->_impl_.custom_effect_timing_curve_theme_name_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_effect_timing_curve_theme_name_2_, lhs_arena,
      &other->_impl_.custom_effect_timing_curve_theme_name_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_effect_timing_curve_theme_name_3_, lhs_arena,
      &other->_impl_.custom_effect_timing_curve_theme_name_3_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationAttributesArchive, _impl_.writing_direction_is_rtl_)
      + sizeof(AnimationAttributesArchive::_impl_.writing_direction_is_rtl_)
      - PROTOBUF_FIELD_OFFSET(AnimationAttributesArchive, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationAttributesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[0]);
}

// ===================================================================

class TransitionAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TransitionAttributesArchive>()._impl_._has_bits_);
  static const ::KN::AnimationAttributesArchive& animationattributes(const TransitionAttributesArchive* msg);
  static void set_has_animationattributes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_twist(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_custom_mosaic_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_custom_mosaic_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_custom_bounce(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_custom_magic_move_fade_unmatched_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_custom_timing_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_custom_text_delivery_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_custom_motion_blur(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_custom_travel_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_database_animation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_database_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_database_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_database_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_database_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_database_is_automatic(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Color& database_color(const TransitionAttributesArchive* msg);
  static void set_has_database_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::KN::AnimationAttributesArchive&
TransitionAttributesArchive::_Internal::animationattributes(const TransitionAttributesArchive* msg) {
  return *msg->_impl_.animationattributes_;
}
const ::TSP::Color&
TransitionAttributesArchive::_Internal::database_color(const TransitionAttributesArchive* msg) {
  return *msg->_impl_.database_color_;
}
void TransitionAttributesArchive::clear_database_color() {
  if (_impl_.database_color_ != nullptr) _impl_.database_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TransitionAttributesArchive::TransitionAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.TransitionAttributesArchive)
}
TransitionAttributesArchive::TransitionAttributesArchive(const TransitionAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransitionAttributesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_animation_type_){}
    , decltype(_impl_.database_effect_){}
    , decltype(_impl_.database_color_){nullptr}
    , decltype(_impl_.animationattributes_){nullptr}
    , decltype(_impl_.database_duration_){}
    , decltype(_impl_.database_direction_){}
    , decltype(_impl_.database_delay_){}
    , decltype(_impl_.custom_twist_){}
    , decltype(_impl_.custom_mosaic_size_){}
    , decltype(_impl_.custom_mosaic_type_){}
    , decltype(_impl_.custom_bounce_){}
    , decltype(_impl_.custom_magic_move_fade_unmatched_objects_){}
    , decltype(_impl_.custom_motion_blur_){}
    , decltype(_impl_.database_is_automatic_){}
    , decltype(_impl_.custom_travel_distance_){}
    , decltype(_impl_.custom_timing_curve_){}
    , decltype(_impl_.custom_text_delivery_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.database_animation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_animation_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database_animation_type()) {
    _this->_impl_.database_animation_type_.Set(from._internal_database_animation_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database_effect()) {
    _this->_impl_.database_effect_.Set(from._internal_database_effect(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_database_color()) {
    _this->_impl_.database_color_ = new ::TSP::Color(*from._impl_.database_color_);
  }
  if (from._internal_has_animationattributes()) {
    _this->_impl_.animationattributes_ = new ::KN::AnimationAttributesArchive(*from._impl_.animationattributes_);
  }
  ::memcpy(&_impl_.database_duration_, &from._impl_.database_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.custom_text_delivery_type_) -
    reinterpret_cast<char*>(&_impl_.database_duration_)) + sizeof(_impl_.custom_text_delivery_type_));
  // @@protoc_insertion_point(copy_constructor:KN.TransitionAttributesArchive)
}

inline void TransitionAttributesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_animation_type_){}
    , decltype(_impl_.database_effect_){}
    , decltype(_impl_.database_color_){nullptr}
    , decltype(_impl_.animationattributes_){nullptr}
    , decltype(_impl_.database_duration_){0}
    , decltype(_impl_.database_direction_){0u}
    , decltype(_impl_.database_delay_){0}
    , decltype(_impl_.custom_twist_){0}
    , decltype(_impl_.custom_mosaic_size_){0u}
    , decltype(_impl_.custom_mosaic_type_){0u}
    , decltype(_impl_.custom_bounce_){false}
    , decltype(_impl_.custom_magic_move_fade_unmatched_objects_){false}
    , decltype(_impl_.custom_motion_blur_){false}
    , decltype(_impl_.database_is_automatic_){false}
    , decltype(_impl_.custom_travel_distance_){0}
    , decltype(_impl_.custom_timing_curve_){1}
    , decltype(_impl_.custom_text_delivery_type_){1}
  };
  _impl_.database_animation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_animation_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransitionAttributesArchive::~TransitionAttributesArchive() {
  // @@protoc_insertion_point(destructor:KN.TransitionAttributesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransitionAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.database_animation_type_.Destroy();
  _impl_.database_effect_.Destroy();
  if (this != internal_default_instance()) delete _impl_.database_color_;
  if (this != internal_default_instance()) delete _impl_.animationattributes_;
}

void TransitionAttributesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransitionAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.TransitionAttributesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.database_animation_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.database_effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.database_color_ != nullptr);
      _impl_.database_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.animationattributes_ != nullptr);
      _impl_.animationattributes_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.database_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_twist_) -
        reinterpret_cast<char*>(&_impl_.database_duration_)) + sizeof(_impl_.custom_twist_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.custom_mosaic_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_travel_distance_) -
        reinterpret_cast<char*>(&_impl_.custom_mosaic_size_)) + sizeof(_impl_.custom_travel_distance_));
    _impl_.custom_timing_curve_ = 1;
  }
  _impl_.custom_text_delivery_type_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransitionAttributesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string database_animation_type = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database_animation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.TransitionAttributesArchive.database_animation_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string database_effect = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_database_effect();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.TransitionAttributesArchive.database_effect");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double database_duration = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_database_duration(&has_bits);
          _impl_.database_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 database_direction = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_database_direction(&has_bits);
          _impl_.database_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float database_delay = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_database_delay(&has_bits);
          _impl_.database_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool database_is_automatic = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_database_is_automatic(&has_bits);
          _impl_.database_is_automatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color database_color = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.AnimationAttributesArchive animationAttributes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_animationattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float custom_twist = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_custom_twist(&has_bits);
          _impl_.custom_twist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_mosaic_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_custom_mosaic_size(&has_bits);
          _impl_.custom_mosaic_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_mosaic_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_custom_mosaic_type(&has_bits);
          _impl_.custom_mosaic_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_bounce = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_custom_bounce(&has_bits);
          _impl_.custom_bounce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_magic_move_fade_unmatched_objects = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_custom_magic_move_fade_unmatched_objects(&has_bits);
          _impl_.custom_magic_move_fade_unmatched_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(val))) {
            _internal_set_custom_timing_curve(static_cast<::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(val))) {
            _internal_set_custom_text_delivery_type(static_cast<::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_motion_blur = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_custom_motion_blur(&has_bits);
          _impl_.custom_motion_blur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float custom_travel_distance = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_custom_travel_distance(&has_bits);
          _impl_.custom_travel_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransitionAttributesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.TransitionAttributesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string database_animation_type = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_animation_type().data(), static_cast<int>(this->_internal_database_animation_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.TransitionAttributesArchive.database_animation_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database_animation_type(), target);
  }

  // optional string database_effect = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_effect().data(), static_cast<int>(this->_internal_database_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.TransitionAttributesArchive.database_effect");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_database_effect(), target);
  }

  // optional double database_duration = 3 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_database_duration(), target);
  }

  // optional uint32 database_direction = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_database_direction(), target);
  }

  // optional float database_delay = 5 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_database_delay(), target);
  }

  // optional bool database_is_automatic = 6 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_database_is_automatic(), target);
  }

  // optional .TSP.Color database_color = 7 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::database_color(this),
        _Internal::database_color(this).GetCachedSize(), target, stream);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::animationattributes(this),
        _Internal::animationattributes(this).GetCachedSize(), target, stream);
  }

  // optional float custom_twist = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_custom_twist(), target);
  }

  // optional uint32 custom_mosaic_size = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_custom_mosaic_size(), target);
  }

  // optional uint32 custom_mosaic_type = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_custom_mosaic_type(), target);
  }

  // optional bool custom_bounce = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_custom_bounce(), target);
  }

  // optional bool custom_magic_move_fade_unmatched_objects = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_custom_magic_move_fade_unmatched_objects(), target);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_custom_timing_curve(), target);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_custom_text_delivery_type(), target);
  }

  // optional bool custom_motion_blur = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_custom_motion_blur(), target);
  }

  // optional float custom_travel_distance = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_custom_travel_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.TransitionAttributesArchive)
  return target;
}

size_t TransitionAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.TransitionAttributesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string database_animation_type = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_animation_type());
    }

    // optional string database_effect = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_effect());
    }

    // optional .TSP.Color database_color = 7 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_color_);
    }

    // optional .KN.AnimationAttributesArchive animationAttributes = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.animationattributes_);
    }

    // optional double database_duration = 3 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 database_direction = 4 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_database_direction());
    }

    // optional float database_delay = 5 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float custom_twist = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 custom_mosaic_size = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_custom_mosaic_size());
    }

    // optional uint32 custom_mosaic_type = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_custom_mosaic_type());
    }

    // optional bool custom_bounce = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool custom_magic_move_fade_unmatched_objects = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool custom_motion_blur = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool database_is_automatic = 6 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional float custom_travel_distance = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_timing_curve());
    }

  }
  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_text_delivery_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransitionAttributesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransitionAttributesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransitionAttributesArchive::GetClassData() const { return &_class_data_; }


void TransitionAttributesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransitionAttributesArchive*>(&to_msg);
  auto& from = static_cast<const TransitionAttributesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.TransitionAttributesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_database_animation_type(from._internal_database_animation_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_database_effect(from._internal_database_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_database_color()->::TSP::Color::MergeFrom(
          from._internal_database_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_animationattributes()->::KN::AnimationAttributesArchive::MergeFrom(
          from._internal_animationattributes());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.database_duration_ = from._impl_.database_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.database_direction_ = from._impl_.database_direction_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.database_delay_ = from._impl_.database_delay_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.custom_twist_ = from._impl_.custom_twist_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.custom_mosaic_size_ = from._impl_.custom_mosaic_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.custom_mosaic_type_ = from._impl_.custom_mosaic_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.custom_bounce_ = from._impl_.custom_bounce_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.custom_magic_move_fade_unmatched_objects_ = from._impl_.custom_magic_move_fade_unmatched_objects_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.custom_motion_blur_ = from._impl_.custom_motion_blur_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.database_is_automatic_ = from._impl_.database_is_automatic_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.custom_travel_distance_ = from._impl_.custom_travel_distance_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.custom_timing_curve_ = from._impl_.custom_timing_curve_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_custom_text_delivery_type(from._internal_custom_text_delivery_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransitionAttributesArchive::CopyFrom(const TransitionAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.TransitionAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionAttributesArchive::IsInitialized() const {
  if (_internal_has_database_color()) {
    if (!_impl_.database_color_->IsInitialized()) return false;
  }
  if (_internal_has_animationattributes()) {
    if (!_impl_.animationattributes_->IsInitialized()) return false;
  }
  return true;
}

void TransitionAttributesArchive::InternalSwap(TransitionAttributesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_animation_type_, lhs_arena,
      &other->_impl_.database_animation_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_effect_, lhs_arena,
      &other->_impl_.database_effect_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransitionAttributesArchive, _impl_.custom_travel_distance_)
      + sizeof(TransitionAttributesArchive::_impl_.custom_travel_distance_)
      - PROTOBUF_FIELD_OFFSET(TransitionAttributesArchive, _impl_.database_color_)>(
          reinterpret_cast<char*>(&_impl_.database_color_),
          reinterpret_cast<char*>(&other->_impl_.database_color_));
  swap(_impl_.custom_timing_curve_, other->_impl_.custom_timing_curve_);
  swap(_impl_.custom_text_delivery_type_, other->_impl_.custom_text_delivery_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransitionAttributesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[1]);
}

// ===================================================================

class TransitionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TransitionArchive>()._impl_._has_bits_);
  static const ::KN::TransitionAttributesArchive& attributes(const TransitionArchive* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::KN::TransitionAttributesArchive&
TransitionArchive::_Internal::attributes(const TransitionArchive* msg) {
  return *msg->_impl_.attributes_;
}
TransitionArchive::TransitionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.TransitionArchive)
}
TransitionArchive::TransitionArchive(const TransitionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransitionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::KN::TransitionAttributesArchive(*from._impl_.attributes_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.TransitionArchive)
}

inline void TransitionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){nullptr}
  };
}

TransitionArchive::~TransitionArchive() {
  // @@protoc_insertion_point(destructor:KN.TransitionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransitionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.attributes_;
}

void TransitionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransitionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.TransitionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.attributes_ != nullptr);
    _impl_.attributes_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransitionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .KN.TransitionAttributesArchive attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransitionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.TransitionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .KN.TransitionAttributesArchive attributes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.TransitionArchive)
  return target;
}

size_t TransitionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.TransitionArchive)
  size_t total_size = 0;

  // required .KN.TransitionAttributesArchive attributes = 2;
  if (_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransitionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransitionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransitionArchive::GetClassData() const { return &_class_data_; }


void TransitionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransitionArchive*>(&to_msg);
  auto& from = static_cast<const TransitionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.TransitionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::KN::TransitionAttributesArchive::MergeFrom(
        from._internal_attributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransitionArchive::CopyFrom(const TransitionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.TransitionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_attributes()) {
    if (!_impl_.attributes_->IsInitialized()) return false;
  }
  return true;
}

void TransitionArchive::InternalSwap(TransitionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.attributes_, other->_impl_.attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransitionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[2]);
}

// ===================================================================

class BuildChunkArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildChunkArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& build(const BuildChunkArchive* msg);
  static void set_has_build(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_automatic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_referent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::KN::BuildChunkIdentifierArchive& build_chunk_identifier(const BuildChunkArchive* msg);
  static void set_has_build_chunk_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& build_id(const BuildChunkArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
BuildChunkArchive::_Internal::build(const BuildChunkArchive* msg) {
  return *msg->_impl_.build_;
}
const ::KN::BuildChunkIdentifierArchive&
BuildChunkArchive::_Internal::build_chunk_identifier(const BuildChunkArchive* msg) {
  return *msg->_impl_.build_chunk_identifier_;
}
const ::TSP::UUID&
BuildChunkArchive::_Internal::build_id(const BuildChunkArchive* msg) {
  return *msg->_impl_.build_id_;
}
void BuildChunkArchive::clear_build() {
  if (_impl_.build_ != nullptr) _impl_.build_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void BuildChunkArchive::clear_build_id() {
  if (_impl_.build_id_ != nullptr) _impl_.build_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
BuildChunkArchive::BuildChunkArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.BuildChunkArchive)
}
BuildChunkArchive::BuildChunkArchive(const BuildChunkArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildChunkArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.build_chunk_identifier_){nullptr}
    , decltype(_impl_.build_id_){nullptr}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.automatic_){}
    , decltype(_impl_.referent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_build()) {
    _this->_impl_.build_ = new ::TSP::Reference(*from._impl_.build_);
  }
  if (from._internal_has_build_chunk_identifier()) {
    _this->_impl_.build_chunk_identifier_ = new ::KN::BuildChunkIdentifierArchive(*from._impl_.build_chunk_identifier_);
  }
  if (from._internal_has_build_id()) {
    _this->_impl_.build_id_ = new ::TSP::UUID(*from._impl_.build_id_);
  }
  ::memcpy(&_impl_.delay_, &from._impl_.delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.referent_) -
    reinterpret_cast<char*>(&_impl_.delay_)) + sizeof(_impl_.referent_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildChunkArchive)
}

inline void BuildChunkArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_){nullptr}
    , decltype(_impl_.build_chunk_identifier_){nullptr}
    , decltype(_impl_.build_id_){nullptr}
    , decltype(_impl_.delay_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.automatic_){false}
    , decltype(_impl_.referent_){false}
  };
}

BuildChunkArchive::~BuildChunkArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildChunkArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildChunkArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.build_;
  if (this != internal_default_instance()) delete _impl_.build_chunk_identifier_;
  if (this != internal_default_instance()) delete _impl_.build_id_;
}

void BuildChunkArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildChunkArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildChunkArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.build_ != nullptr);
      _impl_.build_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.build_chunk_identifier_ != nullptr);
      _impl_.build_chunk_identifier_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.build_id_ != nullptr);
      _impl_.build_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.referent_) -
        reinterpret_cast<char*>(&_impl_.delay_)) + sizeof(_impl_.referent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildChunkArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference build = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_build(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_delay(&has_bits);
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool automatic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_automatic(&has_bits);
          _impl_.automatic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool referent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_referent(&has_bits);
          _impl_.referent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_chunk_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID build_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildChunkArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildChunkArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference build = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::build(this),
        _Internal::build(this).GetCachedSize(), target, stream);
  }

  // optional uint32 index = 2 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional double delay = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_delay(), target);
  }

  // optional double duration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_duration(), target);
  }

  // optional bool automatic = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_automatic(), target);
  }

  // optional bool referent = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_referent(), target);
  }

  // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::build_chunk_identifier(this),
        _Internal::build_chunk_identifier(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID build_id = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::build_id(this),
        _Internal::build_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildChunkArchive)
  return target;
}

size_t BuildChunkArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildChunkArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference build = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.build_);
    }

    // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.build_chunk_identifier_);
    }

    // optional .TSP.UUID build_id = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.build_id_);
    }

    // optional double delay = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double duration = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 index = 2 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional bool automatic = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool referent = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildChunkArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildChunkArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildChunkArchive::GetClassData() const { return &_class_data_; }


void BuildChunkArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildChunkArchive*>(&to_msg);
  auto& from = static_cast<const BuildChunkArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildChunkArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_build()->::TSP::Reference::MergeFrom(
          from._internal_build());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_build_chunk_identifier()->::KN::BuildChunkIdentifierArchive::MergeFrom(
          from._internal_build_chunk_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_build_id()->::TSP::UUID::MergeFrom(
          from._internal_build_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.delay_ = from._impl_.delay_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.automatic_ = from._impl_.automatic_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.referent_ = from._impl_.referent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildChunkArchive::CopyFrom(const BuildChunkArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildChunkArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildChunkArchive::IsInitialized() const {
  if (_internal_has_build()) {
    if (!_impl_.build_->IsInitialized()) return false;
  }
  if (_internal_has_build_chunk_identifier()) {
    if (!_impl_.build_chunk_identifier_->IsInitialized()) return false;
  }
  if (_internal_has_build_id()) {
    if (!_impl_.build_id_->IsInitialized()) return false;
  }
  return true;
}

void BuildChunkArchive::InternalSwap(BuildChunkArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildChunkArchive, _impl_.referent_)
      + sizeof(BuildChunkArchive::_impl_.referent_)
      - PROTOBUF_FIELD_OFFSET(BuildChunkArchive, _impl_.build_)>(
          reinterpret_cast<char*>(&_impl_.build_),
          reinterpret_cast<char*>(&other->_impl_.build_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildChunkArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[3]);
}

// ===================================================================

class BuildChunkIdentifierArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildChunkIdentifierArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& build_id(const BuildChunkIdentifierArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_build_chunk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::UUID&
BuildChunkIdentifierArchive::_Internal::build_id(const BuildChunkIdentifierArchive* msg) {
  return *msg->_impl_.build_id_;
}
void BuildChunkIdentifierArchive::clear_build_id() {
  if (_impl_.build_id_ != nullptr) _impl_.build_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BuildChunkIdentifierArchive::BuildChunkIdentifierArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.BuildChunkIdentifierArchive)
}
BuildChunkIdentifierArchive::BuildChunkIdentifierArchive(const BuildChunkIdentifierArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildChunkIdentifierArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_id_){nullptr}
    , decltype(_impl_.build_chunk_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_build_id()) {
    _this->_impl_.build_id_ = new ::TSP::UUID(*from._impl_.build_id_);
  }
  _this->_impl_.build_chunk_id_ = from._impl_.build_chunk_id_;
  // @@protoc_insertion_point(copy_constructor:KN.BuildChunkIdentifierArchive)
}

inline void BuildChunkIdentifierArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.build_id_){nullptr}
    , decltype(_impl_.build_chunk_id_){0}
  };
}

BuildChunkIdentifierArchive::~BuildChunkIdentifierArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildChunkIdentifierArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildChunkIdentifierArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.build_id_;
}

void BuildChunkIdentifierArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildChunkIdentifierArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildChunkIdentifierArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.build_id_ != nullptr);
    _impl_.build_id_->Clear();
  }
  _impl_.build_chunk_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildChunkIdentifierArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID build_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 build_chunk_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_build_chunk_id(&has_bits);
          _impl_.build_chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildChunkIdentifierArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildChunkIdentifierArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID build_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::build_id(this),
        _Internal::build_id(this).GetCachedSize(), target, stream);
  }

  // optional int32 build_chunk_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_build_chunk_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildChunkIdentifierArchive)
  return target;
}

size_t BuildChunkIdentifierArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildChunkIdentifierArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.UUID build_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.build_id_);
    }

    // optional int32 build_chunk_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_build_chunk_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildChunkIdentifierArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildChunkIdentifierArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildChunkIdentifierArchive::GetClassData() const { return &_class_data_; }


void BuildChunkIdentifierArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildChunkIdentifierArchive*>(&to_msg);
  auto& from = static_cast<const BuildChunkIdentifierArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildChunkIdentifierArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_build_id()->::TSP::UUID::MergeFrom(
          from._internal_build_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.build_chunk_id_ = from._impl_.build_chunk_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildChunkIdentifierArchive::CopyFrom(const BuildChunkIdentifierArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildChunkIdentifierArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildChunkIdentifierArchive::IsInitialized() const {
  if (_internal_has_build_id()) {
    if (!_impl_.build_id_->IsInitialized()) return false;
  }
  return true;
}

void BuildChunkIdentifierArchive::InternalSwap(BuildChunkIdentifierArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildChunkIdentifierArchive, _impl_.build_chunk_id_)
      + sizeof(BuildChunkIdentifierArchive::_impl_.build_chunk_id_)
      - PROTOBUF_FIELD_OFFSET(BuildChunkIdentifierArchive, _impl_.build_id_)>(
          reinterpret_cast<char*>(&_impl_.build_id_),
          reinterpret_cast<char*>(&other->_impl_.build_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildChunkIdentifierArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[4]);
}

// ===================================================================

class BuildAttributeValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildAttributeValueArchive>()._impl_._has_bits_);
  static void set_has_integer_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::PathSourceArchive& path_source_value(const BuildAttributeValueArchive* msg);
  static void set_has_path_source_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Color& color_value(const BuildAttributeValueArchive* msg);
  static void set_has_color_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSD::PathSourceArchive&
BuildAttributeValueArchive::_Internal::path_source_value(const BuildAttributeValueArchive* msg) {
  return *msg->_impl_.path_source_value_;
}
const ::TSP::Color&
BuildAttributeValueArchive::_Internal::color_value(const BuildAttributeValueArchive* msg) {
  return *msg->_impl_.color_value_;
}
void BuildAttributeValueArchive::clear_path_source_value() {
  if (_impl_.path_source_value_ != nullptr) _impl_.path_source_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void BuildAttributeValueArchive::clear_color_value() {
  if (_impl_.color_value_ != nullptr) _impl_.color_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
BuildAttributeValueArchive::BuildAttributeValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.BuildAttributeValueArchive)
}
BuildAttributeValueArchive::BuildAttributeValueArchive(const BuildAttributeValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildAttributeValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.path_source_value_){nullptr}
    , decltype(_impl_.color_value_){nullptr}
    , decltype(_impl_.double_value_){}
    , decltype(_impl_.integer_value_){}
    , decltype(_impl_.bool_value_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_path_source_value()) {
    _this->_impl_.path_source_value_ = new ::TSD::PathSourceArchive(*from._impl_.path_source_value_);
  }
  if (from._internal_has_color_value()) {
    _this->_impl_.color_value_ = new ::TSP::Color(*from._impl_.color_value_);
  }
  ::memcpy(&_impl_.double_value_, &from._impl_.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildAttributeValueArchive)
}

inline void BuildAttributeValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.path_source_value_){nullptr}
    , decltype(_impl_.color_value_){nullptr}
    , decltype(_impl_.double_value_){0}
    , decltype(_impl_.integer_value_){0u}
    , decltype(_impl_.bool_value_){false}
    , decltype(_impl_.type_){0}
  };
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildAttributeValueArchive::~BuildAttributeValueArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildAttributeValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildAttributeValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.path_source_value_;
  if (this != internal_default_instance()) delete _impl_.color_value_;
}

void BuildAttributeValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildAttributeValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildAttributeValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.path_source_value_ != nullptr);
      _impl_.path_source_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.color_value_ != nullptr);
      _impl_.color_value_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.double_value_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAttributeValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 integer_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_integer_value(&has_bits);
          _impl_.integer_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bool_value(&has_bits);
          _impl_.bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildAttributeValueArchive.string_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive path_source_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_source_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color color_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributeValueArchive.BuildAttributeValueType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributeValueArchive_BuildAttributeValueType_IsValid(val))) {
            _internal_set_type(static_cast<::KN::BuildAttributeValueArchive_BuildAttributeValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildAttributeValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildAttributeValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 integer_value = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_integer_value(), target);
  }

  // optional double double_value = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // optional bool bool_value = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_value(), target);
  }

  // optional string string_value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributeValueArchive.string_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_value(), target);
  }

  // optional .TSD.PathSourceArchive path_source_value = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::path_source_value(this),
        _Internal::path_source_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Color color_value = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::color_value(this),
        _Internal::color_value(this).GetCachedSize(), target, stream);
  }

  // optional .KN.BuildAttributeValueArchive.BuildAttributeValueType type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildAttributeValueArchive)
  return target;
}

size_t BuildAttributeValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildAttributeValueArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string string_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional .TSD.PathSourceArchive path_source_value = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_source_value_);
    }

    // optional .TSP.Color color_value = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_value_);
    }

    // optional double double_value = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 integer_value = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_integer_value());
    }

    // optional bool bool_value = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional .KN.BuildAttributeValueArchive.BuildAttributeValueType type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildAttributeValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildAttributeValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildAttributeValueArchive::GetClassData() const { return &_class_data_; }


void BuildAttributeValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildAttributeValueArchive*>(&to_msg);
  auto& from = static_cast<const BuildAttributeValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildAttributeValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_path_source_value()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_path_source_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_color_value()->::TSP::Color::MergeFrom(
          from._internal_color_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.integer_value_ = from._impl_.integer_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bool_value_ = from._impl_.bool_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildAttributeValueArchive::CopyFrom(const BuildAttributeValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildAttributeValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAttributeValueArchive::IsInitialized() const {
  if (_internal_has_path_source_value()) {
    if (!_impl_.path_source_value_->IsInitialized()) return false;
  }
  if (_internal_has_color_value()) {
    if (!_impl_.color_value_->IsInitialized()) return false;
  }
  return true;
}

void BuildAttributeValueArchive::InternalSwap(BuildAttributeValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_value_, lhs_arena,
      &other->_impl_.string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAttributeValueArchive, _impl_.type_)
      + sizeof(BuildAttributeValueArchive::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(BuildAttributeValueArchive, _impl_.path_source_value_)>(
          reinterpret_cast<char*>(&_impl_.path_source_value_),
          reinterpret_cast<char*>(&other->_impl_.path_source_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAttributeValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[5]);
}

// ===================================================================

class BuildAttributeTupleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildAttributeTupleArchive>()._impl_._has_bits_);
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::BuildAttributeValueArchive& value(const BuildAttributeTupleArchive* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& build_id(const BuildAttributeTupleArchive* msg);
  static void set_has_build_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::BuildChunkIdentifierArchive& build_chunk_identifier(const BuildAttributeTupleArchive* msg);
  static void set_has_build_chunk_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::KN::BuildAttributeValueArchive&
BuildAttributeTupleArchive::_Internal::value(const BuildAttributeTupleArchive* msg) {
  return *msg->_impl_.value_;
}
const ::TSP::UUID&
BuildAttributeTupleArchive::_Internal::build_id(const BuildAttributeTupleArchive* msg) {
  return *msg->_impl_.build_id_;
}
const ::KN::BuildChunkIdentifierArchive&
BuildAttributeTupleArchive::_Internal::build_chunk_identifier(const BuildAttributeTupleArchive* msg) {
  return *msg->_impl_.build_chunk_identifier_;
}
void BuildAttributeTupleArchive::clear_build_id() {
  if (_impl_.build_id_ != nullptr) _impl_.build_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
BuildAttributeTupleArchive::BuildAttributeTupleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.BuildAttributeTupleArchive)
}
BuildAttributeTupleArchive::BuildAttributeTupleArchive(const BuildAttributeTupleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildAttributeTupleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.build_id_){nullptr}
    , decltype(_impl_.build_chunk_identifier_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_property()) {
    _this->_impl_.property_.Set(from._internal_property(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::KN::BuildAttributeValueArchive(*from._impl_.value_);
  }
  if (from._internal_has_build_id()) {
    _this->_impl_.build_id_ = new ::TSP::UUID(*from._impl_.build_id_);
  }
  if (from._internal_has_build_chunk_identifier()) {
    _this->_impl_.build_chunk_identifier_ = new ::KN::BuildChunkIdentifierArchive(*from._impl_.build_chunk_identifier_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.BuildAttributeTupleArchive)
}

inline void BuildAttributeTupleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.property_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.build_id_){nullptr}
    , decltype(_impl_.build_chunk_identifier_){nullptr}
  };
  _impl_.property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.property_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildAttributeTupleArchive::~BuildAttributeTupleArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildAttributeTupleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildAttributeTupleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
  if (this != internal_default_instance()) delete _impl_.build_id_;
  if (this != internal_default_instance()) delete _impl_.build_chunk_identifier_;
}

void BuildAttributeTupleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildAttributeTupleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildAttributeTupleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.property_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.build_id_ != nullptr);
      _impl_.build_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.build_chunk_identifier_ != nullptr);
      _impl_.build_chunk_identifier_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAttributeTupleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildAttributeTupleArchive.property");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributeValueArchive value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID build_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_chunk_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildAttributeTupleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildAttributeTupleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string property = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributeTupleArchive.property");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_property(), target);
  }

  // optional .KN.BuildAttributeValueArchive value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID build_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::build_id(this),
        _Internal::build_id(this).GetCachedSize(), target, stream);
  }

  // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::build_chunk_identifier(this),
        _Internal::build_chunk_identifier(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildAttributeTupleArchive)
  return target;
}

size_t BuildAttributeTupleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildAttributeTupleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string property = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_property());
    }

    // optional .KN.BuildAttributeValueArchive value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // optional .TSP.UUID build_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.build_id_);
    }

    // optional .KN.BuildChunkIdentifierArchive build_chunk_identifier = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.build_chunk_identifier_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildAttributeTupleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildAttributeTupleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildAttributeTupleArchive::GetClassData() const { return &_class_data_; }


void BuildAttributeTupleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildAttributeTupleArchive*>(&to_msg);
  auto& from = static_cast<const BuildAttributeTupleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildAttributeTupleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_property(from._internal_property());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::KN::BuildAttributeValueArchive::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_build_id()->::TSP::UUID::MergeFrom(
          from._internal_build_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_build_chunk_identifier()->::KN::BuildChunkIdentifierArchive::MergeFrom(
          from._internal_build_chunk_identifier());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildAttributeTupleArchive::CopyFrom(const BuildAttributeTupleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildAttributeTupleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAttributeTupleArchive::IsInitialized() const {
  if (_internal_has_value()) {
    if (!_impl_.value_->IsInitialized()) return false;
  }
  if (_internal_has_build_id()) {
    if (!_impl_.build_id_->IsInitialized()) return false;
  }
  if (_internal_has_build_chunk_identifier()) {
    if (!_impl_.build_chunk_identifier_->IsInitialized()) return false;
  }
  return true;
}

void BuildAttributeTupleArchive::InternalSwap(BuildAttributeTupleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.property_, lhs_arena,
      &other->_impl_.property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAttributeTupleArchive, _impl_.build_chunk_identifier_)
      + sizeof(BuildAttributeTupleArchive::_impl_.build_chunk_identifier_)
      - PROTOBUF_FIELD_OFFSET(BuildAttributeTupleArchive, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAttributeTupleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[6]);
}

// ===================================================================

class BuildAttributesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildAttributesArchive>()._impl_._has_bits_);
  static const ::KN::AnimationAttributesArchive& animationattributes(const BuildAttributesArchive* msg);
  static void set_has_animationattributes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_eventtrigger(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_delayautomaticafter(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_delayautomaticwith(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_curvestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_chartrotation3d(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_startoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_endoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_action_rotationangle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_action_rotationdirection(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_action_scalesize(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_action_coloralpha(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_action_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::PathSourceArchive& action_motionpathsource(const BuildAttributesArchive* msg);
  static void set_has_action_motionpathsource(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_custom_bounce(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_custom_textdelivery(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_custom_deliveryoption(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_custom_action_decay(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_custom_action_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_custom_action_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_custom_action_jiggleintensity(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_custom_motion_blur(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_custom_include_endpoints(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_custom_shine(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_custom_scale_amount(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_custom_travel_distance(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_custom_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_custom_align_to_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_database_animationtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_database_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_database_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_database_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_database_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Color& database_color(const BuildAttributesArchive* msg);
  static void set_has_database_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_motionpathstring(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::KN::AnimationAttributesArchive&
BuildAttributesArchive::_Internal::animationattributes(const BuildAttributesArchive* msg) {
  return *msg->_impl_.animationattributes_;
}
const ::TSD::PathSourceArchive&
BuildAttributesArchive::_Internal::action_motionpathsource(const BuildAttributesArchive* msg) {
  return *msg->_impl_.action_motionpathsource_;
}
const ::TSP::Color&
BuildAttributesArchive::_Internal::database_color(const BuildAttributesArchive* msg) {
  return *msg->_impl_.database_color_;
}
void BuildAttributesArchive::clear_action_motionpathsource() {
  if (_impl_.action_motionpathsource_ != nullptr) _impl_.action_motionpathsource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void BuildAttributesArchive::clear_database_color() {
  if (_impl_.database_color_ != nullptr) _impl_.database_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
BuildAttributesArchive::BuildAttributesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.BuildAttributesArchive)
}
BuildAttributesArchive::BuildAttributesArchive(const BuildAttributesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildAttributesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_animationtype_){}
    , decltype(_impl_.database_effect_){}
    , decltype(_impl_.motionpathstring_){}
    , decltype(_impl_.database_color_){nullptr}
    , decltype(_impl_.animationattributes_){nullptr}
    , decltype(_impl_.action_motionpathsource_){nullptr}
    , decltype(_impl_.database_direction_){}
    , decltype(_impl_.eventtrigger_){}
    , decltype(_impl_.database_delay_){}
    , decltype(_impl_.delayautomaticafter_){}
    , decltype(_impl_.delayautomaticwith_){}
    , decltype(_impl_.database_duration_){}
    , decltype(_impl_.action_rotationangle_){}
    , decltype(_impl_.action_scalesize_){}
    , decltype(_impl_.action_coloralpha_){}
    , decltype(_impl_.action_acceleration_){}
    , decltype(_impl_.curvestyle_){}
    , decltype(_impl_.chartrotation3d_){}
    , decltype(_impl_.custom_textdelivery_){}
    , decltype(_impl_.custom_deliveryoption_){}
    , decltype(_impl_.custom_action_scale_){}
    , decltype(_impl_.custom_action_repeatcount_){}
    , decltype(_impl_.custom_bounce_){}
    , decltype(_impl_.custom_action_decay_){}
    , decltype(_impl_.custom_motion_blur_){}
    , decltype(_impl_.custom_include_endpoints_){}
    , decltype(_impl_.custom_action_jiggleintensity_){}
    , decltype(_impl_.startoffset_){}
    , decltype(_impl_.endoffset_){}
    , decltype(_impl_.custom_shine_){}
    , decltype(_impl_.custom_cursor_){}
    , decltype(_impl_.custom_align_to_path_){}
    , decltype(_impl_.custom_scale_amount_){}
    , decltype(_impl_.custom_travel_distance_){}
    , decltype(_impl_.action_rotationdirection_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.database_animationtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database_animationtype()) {
    _this->_impl_.database_animationtype_.Set(from._internal_database_animationtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.database_effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_database_effect()) {
    _this->_impl_.database_effect_.Set(from._internal_database_effect(), 
      _this->GetArenaForAllocation());
  }
  _impl_.motionpathstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.motionpathstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_motionpathstring()) {
    _this->_impl_.motionpathstring_.Set(from._internal_motionpathstring(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_database_color()) {
    _this->_impl_.database_color_ = new ::TSP::Color(*from._impl_.database_color_);
  }
  if (from._internal_has_animationattributes()) {
    _this->_impl_.animationattributes_ = new ::KN::AnimationAttributesArchive(*from._impl_.animationattributes_);
  }
  if (from._internal_has_action_motionpathsource()) {
    _this->_impl_.action_motionpathsource_ = new ::TSD::PathSourceArchive(*from._impl_.action_motionpathsource_);
  }
  ::memcpy(&_impl_.database_direction_, &from._impl_.database_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_rotationdirection_) -
    reinterpret_cast<char*>(&_impl_.database_direction_)) + sizeof(_impl_.action_rotationdirection_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildAttributesArchive)
}

inline void BuildAttributesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_animationtype_){}
    , decltype(_impl_.database_effect_){}
    , decltype(_impl_.motionpathstring_){}
    , decltype(_impl_.database_color_){nullptr}
    , decltype(_impl_.animationattributes_){nullptr}
    , decltype(_impl_.action_motionpathsource_){nullptr}
    , decltype(_impl_.database_direction_){0u}
    , decltype(_impl_.eventtrigger_){0u}
    , decltype(_impl_.database_delay_){0}
    , decltype(_impl_.delayautomaticafter_){0}
    , decltype(_impl_.delayautomaticwith_){0}
    , decltype(_impl_.database_duration_){0}
    , decltype(_impl_.action_rotationangle_){0}
    , decltype(_impl_.action_scalesize_){0}
    , decltype(_impl_.action_coloralpha_){0}
    , decltype(_impl_.action_acceleration_){0}
    , decltype(_impl_.curvestyle_){0}
    , decltype(_impl_.chartrotation3d_){0}
    , decltype(_impl_.custom_textdelivery_){0}
    , decltype(_impl_.custom_deliveryoption_){0}
    , decltype(_impl_.custom_action_scale_){0}
    , decltype(_impl_.custom_action_repeatcount_){0u}
    , decltype(_impl_.custom_bounce_){false}
    , decltype(_impl_.custom_action_decay_){false}
    , decltype(_impl_.custom_motion_blur_){false}
    , decltype(_impl_.custom_include_endpoints_){false}
    , decltype(_impl_.custom_action_jiggleintensity_){0}
    , decltype(_impl_.startoffset_){0u}
    , decltype(_impl_.endoffset_){0u}
    , decltype(_impl_.custom_shine_){false}
    , decltype(_impl_.custom_cursor_){false}
    , decltype(_impl_.custom_align_to_path_){false}
    , decltype(_impl_.custom_scale_amount_){0}
    , decltype(_impl_.custom_travel_distance_){0}
    , decltype(_impl_.action_rotationdirection_){31}
  };
  _impl_.database_animationtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_animationtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.database_effect_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.database_effect_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.motionpathstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.motionpathstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildAttributesArchive::~BuildAttributesArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildAttributesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildAttributesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.database_animationtype_.Destroy();
  _impl_.database_effect_.Destroy();
  _impl_.motionpathstring_.Destroy();
  if (this != internal_default_instance()) delete _impl_.database_color_;
  if (this != internal_default_instance()) delete _impl_.animationattributes_;
  if (this != internal_default_instance()) delete _impl_.action_motionpathsource_;
}

void BuildAttributesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildAttributesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildAttributesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.database_animationtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.database_effect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.motionpathstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.database_color_ != nullptr);
      _impl_.database_color_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.animationattributes_ != nullptr);
      _impl_.animationattributes_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.action_motionpathsource_ != nullptr);
      _impl_.action_motionpathsource_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.database_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.eventtrigger_) -
        reinterpret_cast<char*>(&_impl_.database_direction_)) + sizeof(_impl_.eventtrigger_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.database_delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.action_acceleration_) -
        reinterpret_cast<char*>(&_impl_.database_delay_)) + sizeof(_impl_.action_acceleration_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.curvestyle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_action_decay_) -
        reinterpret_cast<char*>(&_impl_.curvestyle_)) + sizeof(_impl_.custom_action_decay_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.custom_motion_blur_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_align_to_path_) -
        reinterpret_cast<char*>(&_impl_.custom_motion_blur_)) + sizeof(_impl_.custom_align_to_path_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.custom_scale_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_travel_distance_) -
        reinterpret_cast<char*>(&_impl_.custom_scale_amount_)) + sizeof(_impl_.custom_travel_distance_));
    _impl_.action_rotationdirection_ = 31;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAttributesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string database_animationType = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database_animationtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildAttributesArchive.database_animationType");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string database_effect = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_database_effect();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildAttributesArchive.database_effect");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 database_direction = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_database_direction(&_impl_._has_bits_);
          _impl_.database_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 eventTrigger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_eventtrigger(&_impl_._has_bits_);
          _impl_.eventtrigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double database_delay = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_database_delay(&_impl_._has_bits_);
          _impl_.database_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double delayAutomaticAfter = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_delayautomaticafter(&_impl_._has_bits_);
          _impl_.delayautomaticafter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double delayAutomaticWith = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_delayautomaticwith(&_impl_._has_bits_);
          _impl_.delayautomaticwith_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double database_duration = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_database_duration(&_impl_._has_bits_);
          _impl_.database_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double action_rotationAngle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_action_rotationangle(&_impl_._has_bits_);
          _impl_.action_rotationangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(val))) {
            _internal_set_action_rotationdirection(static_cast<::KN::BuildAttributesArchive_BuildAttributesRotationDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double action_scaleSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_action_scalesize(&_impl_._has_bits_);
          _impl_.action_scalesize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double action_colorAlpha = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_action_coloralpha(&_impl_._has_bits_);
          _impl_.action_coloralpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesAcceleration_IsValid(val))) {
            _internal_set_action_acceleration(static_cast<::KN::BuildAttributesArchive_BuildAttributesAcceleration>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(val))) {
            _internal_set_curvestyle(static_cast<::KN::BuildAttributesArchive_BuildAttributesCurveStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string motionPathString = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_motionpathstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildAttributesArchive.motionPathString");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color database_color = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ChartRotation3D = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_chartrotation3d(&_impl_._has_bits_);
          _impl_.chartrotation3d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.AnimationAttributesArchive animationAttributes = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_animationattributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_bounce = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_custom_bounce(&_impl_._has_bits_);
          _impl_.custom_bounce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(val))) {
            _internal_set_custom_textdelivery(static_cast<::KN::BuildAttributesArchive_BuildAttributesTextDelivery>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(val))) {
            _internal_set_custom_deliveryoption(static_cast<::KN::BuildAttributesArchive_BuildAttributesDeliveryOption>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.PathSourceArchive action_motionPathSource = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_motionpathsource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_action_decay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_custom_action_decay(&_impl_._has_bits_);
          _impl_.custom_action_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_action_repeatCount = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_custom_action_repeatcount(&_impl_._has_bits_);
          _impl_.custom_action_repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double custom_action_scale = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_custom_action_scale(&_impl_._has_bits_);
          _impl_.custom_action_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(val))) {
            _internal_set_custom_action_jiggleintensity(static_cast<::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 startOffset = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_startoffset(&_impl_._has_bits_);
          _impl_.startoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 endOffset = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_endoffset(&_impl_._has_bits_);
          _impl_.endoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_motion_blur = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_custom_motion_blur(&_impl_._has_bits_);
          _impl_.custom_motion_blur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_include_endpoints = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_custom_include_endpoints(&_impl_._has_bits_);
          _impl_.custom_include_endpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_shine = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_custom_shine(&_impl_._has_bits_);
          _impl_.custom_shine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double custom_scale_amount = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_custom_scale_amount(&_impl_._has_bits_);
          _impl_.custom_scale_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double custom_travel_distance = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_custom_travel_distance(&_impl_._has_bits_);
          _impl_.custom_travel_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_cursor = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_custom_cursor(&_impl_._has_bits_);
          _impl_.custom_cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_align_to_path = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_custom_align_to_path(&_impl_._has_bits_);
          _impl_.custom_align_to_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildAttributesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildAttributesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string database_animationType = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_animationtype().data(), static_cast<int>(this->_internal_database_animationtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributesArchive.database_animationType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database_animationtype(), target);
  }

  // optional string database_effect = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_database_effect().data(), static_cast<int>(this->_internal_database_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributesArchive.database_effect");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_database_effect(), target);
  }

  // optional uint32 database_direction = 3 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_database_direction(), target);
  }

  // optional uint32 eventTrigger = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_eventtrigger(), target);
  }

  // optional double database_delay = 5 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_database_delay(), target);
  }

  // optional double delayAutomaticAfter = 6 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_delayautomaticafter(), target);
  }

  // optional double delayAutomaticWith = 7 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_delayautomaticwith(), target);
  }

  // optional double database_duration = 8 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_database_duration(), target);
  }

  // optional double action_rotationAngle = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_action_rotationangle(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_action_rotationdirection(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double action_scaleSize = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_action_scalesize(), target);
  }

  // optional double action_colorAlpha = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_action_coloralpha(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_action_acceleration(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_curvestyle(), target);
  }

  // optional string motionPathString = 15 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_motionpathstring().data(), static_cast<int>(this->_internal_motionpathstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildAttributesArchive.motionPathString");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_motionpathstring(), target);
  }

  // optional .TSP.Color database_color = 16 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::database_color(this),
        _Internal::database_color(this).GetCachedSize(), target, stream);
  }

  // optional double ChartRotation3D = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_chartrotation3d(), target);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::animationattributes(this),
        _Internal::animationattributes(this).GetCachedSize(), target, stream);
  }

  // optional bool custom_bounce = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_custom_bounce(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_custom_textdelivery(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_custom_deliveryoption(), target);
  }

  // optional .TSD.PathSourceArchive action_motionPathSource = 22;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::action_motionpathsource(this),
        _Internal::action_motionpathsource(this).GetCachedSize(), target, stream);
  }

  // optional bool custom_action_decay = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_custom_action_decay(), target);
  }

  // optional uint32 custom_action_repeatCount = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_custom_action_repeatcount(), target);
  }

  // optional double custom_action_scale = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_custom_action_scale(), target);
  }

  // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_custom_action_jiggleintensity(), target);
  }

  // optional uint32 startOffset = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_startoffset(), target);
  }

  // optional uint32 endOffset = 28;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_endoffset(), target);
  }

  // optional bool custom_motion_blur = 29;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_custom_motion_blur(), target);
  }

  // optional bool custom_include_endpoints = 30;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_custom_include_endpoints(), target);
  }

  // optional bool custom_shine = 33;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_custom_shine(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double custom_scale_amount = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(34, this->_internal_custom_scale_amount(), target);
  }

  // optional double custom_travel_distance = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(35, this->_internal_custom_travel_distance(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool custom_cursor = 36;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_custom_cursor(), target);
  }

  // optional bool custom_align_to_path = 37;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_custom_align_to_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildAttributesArchive)
  return target;
}

size_t BuildAttributesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildAttributesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string database_animationType = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_animationtype());
    }

    // optional string database_effect = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_database_effect());
    }

    // optional string motionPathString = 15 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_motionpathstring());
    }

    // optional .TSP.Color database_color = 16 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_color_);
    }

    // optional .KN.AnimationAttributesArchive animationAttributes = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.animationattributes_);
    }

    // optional .TSD.PathSourceArchive action_motionPathSource = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_motionpathsource_);
    }

    // optional uint32 database_direction = 3 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_database_direction());
    }

    // optional uint32 eventTrigger = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eventtrigger());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double database_delay = 5 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double delayAutomaticAfter = 6 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double delayAutomaticWith = 7 [deprecated = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double database_duration = 8 [deprecated = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double action_rotationAngle = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double action_scaleSize = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double action_colorAlpha = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_acceleration());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_curvestyle());
    }

    // optional double ChartRotation3D = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_textdelivery());
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_deliveryoption());
    }

    // optional double custom_action_scale = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional uint32 custom_action_repeatCount = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_action_repeatcount());
    }

    // optional bool custom_bounce = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_action_decay = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool custom_motion_blur = 29;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_include_endpoints = 30;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_custom_action_jiggleintensity());
    }

    // optional uint32 startOffset = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_startoffset());
    }

    // optional uint32 endOffset = 28;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_endoffset());
    }

    // optional bool custom_shine = 33;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_cursor = 36;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_align_to_path = 37;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional double custom_scale_amount = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double custom_travel_distance = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_action_rotationdirection());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildAttributesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildAttributesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildAttributesArchive::GetClassData() const { return &_class_data_; }


void BuildAttributesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildAttributesArchive*>(&to_msg);
  auto& from = static_cast<const BuildAttributesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildAttributesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_database_animationtype(from._internal_database_animationtype());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_database_effect(from._internal_database_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_motionpathstring(from._internal_motionpathstring());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_database_color()->::TSP::Color::MergeFrom(
          from._internal_database_color());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_animationattributes()->::KN::AnimationAttributesArchive::MergeFrom(
          from._internal_animationattributes());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_action_motionpathsource()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_action_motionpathsource());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.database_direction_ = from._impl_.database_direction_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.eventtrigger_ = from._impl_.eventtrigger_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.database_delay_ = from._impl_.database_delay_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.delayautomaticafter_ = from._impl_.delayautomaticafter_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.delayautomaticwith_ = from._impl_.delayautomaticwith_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.database_duration_ = from._impl_.database_duration_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.action_rotationangle_ = from._impl_.action_rotationangle_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.action_scalesize_ = from._impl_.action_scalesize_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.action_coloralpha_ = from._impl_.action_coloralpha_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.action_acceleration_ = from._impl_.action_acceleration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.curvestyle_ = from._impl_.curvestyle_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.chartrotation3d_ = from._impl_.chartrotation3d_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.custom_textdelivery_ = from._impl_.custom_textdelivery_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.custom_deliveryoption_ = from._impl_.custom_deliveryoption_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.custom_action_scale_ = from._impl_.custom_action_scale_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.custom_action_repeatcount_ = from._impl_.custom_action_repeatcount_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.custom_bounce_ = from._impl_.custom_bounce_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.custom_action_decay_ = from._impl_.custom_action_decay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.custom_motion_blur_ = from._impl_.custom_motion_blur_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.custom_include_endpoints_ = from._impl_.custom_include_endpoints_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.custom_action_jiggleintensity_ = from._impl_.custom_action_jiggleintensity_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.startoffset_ = from._impl_.startoffset_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.endoffset_ = from._impl_.endoffset_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.custom_shine_ = from._impl_.custom_shine_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.custom_cursor_ = from._impl_.custom_cursor_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.custom_align_to_path_ = from._impl_.custom_align_to_path_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.custom_scale_amount_ = from._impl_.custom_scale_amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.custom_travel_distance_ = from._impl_.custom_travel_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.action_rotationdirection_ = from._impl_.action_rotationdirection_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildAttributesArchive::CopyFrom(const BuildAttributesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildAttributesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAttributesArchive::IsInitialized() const {
  if (_internal_has_database_color()) {
    if (!_impl_.database_color_->IsInitialized()) return false;
  }
  if (_internal_has_animationattributes()) {
    if (!_impl_.animationattributes_->IsInitialized()) return false;
  }
  if (_internal_has_action_motionpathsource()) {
    if (!_impl_.action_motionpathsource_->IsInitialized()) return false;
  }
  return true;
}

void BuildAttributesArchive::InternalSwap(BuildAttributesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_animationtype_, lhs_arena,
      &other->_impl_.database_animationtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.database_effect_, lhs_arena,
      &other->_impl_.database_effect_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.motionpathstring_, lhs_arena,
      &other->_impl_.motionpathstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAttributesArchive, _impl_.custom_travel_distance_)
      + sizeof(BuildAttributesArchive::_impl_.custom_travel_distance_)
      - PROTOBUF_FIELD_OFFSET(BuildAttributesArchive, _impl_.database_color_)>(
          reinterpret_cast<char*>(&_impl_.database_color_),
          reinterpret_cast<char*>(&other->_impl_.database_color_));
  swap(_impl_.action_rotationdirection_, other->_impl_.action_rotationdirection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAttributesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[7]);
}

// ===================================================================

class BuildArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BuildArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& drawable(const BuildArchive* msg);
  static void set_has_drawable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delivery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::BuildAttributesArchive& attributes(const BuildArchive* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chunk_id_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSP::Reference&
BuildArchive::_Internal::drawable(const BuildArchive* msg) {
  return *msg->_impl_.drawable_;
}
const ::KN::BuildAttributesArchive&
BuildArchive::_Internal::attributes(const BuildArchive* msg) {
  return *msg->_impl_.attributes_;
}
void BuildArchive::clear_drawable() {
  if (_impl_.drawable_ != nullptr) _impl_.drawable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
BuildArchive::BuildArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.BuildArchive)
}
BuildArchive::BuildArchive(const BuildArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delivery_){}
    , decltype(_impl_.drawable_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.chunk_id_seed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delivery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delivery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_delivery()) {
    _this->_impl_.delivery_.Set(from._internal_delivery(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_drawable()) {
    _this->_impl_.drawable_ = new ::TSP::Reference(*from._impl_.drawable_);
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::KN::BuildAttributesArchive(*from._impl_.attributes_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chunk_id_seed_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.chunk_id_seed_));
  // @@protoc_insertion_point(copy_constructor:KN.BuildArchive)
}

inline void BuildArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delivery_){}
    , decltype(_impl_.drawable_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.chunk_id_seed_){0}
  };
  _impl_.delivery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delivery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildArchive::~BuildArchive() {
  // @@protoc_insertion_point(destructor:KN.BuildArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delivery_.Destroy();
  if (this != internal_default_instance()) delete _impl_.drawable_;
  if (this != internal_default_instance()) delete _impl_.attributes_;
}

void BuildArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.BuildArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.delivery_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.drawable_ != nullptr);
      _impl_.drawable_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.attributes_ != nullptr);
      _impl_.attributes_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chunk_id_seed_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.chunk_id_seed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference drawable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_drawable(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string delivery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_delivery();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.BuildArchive.delivery");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .KN.BuildAttributesArchive attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chunk_id_seed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_chunk_id_seed(&has_bits);
          _impl_.chunk_id_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.BuildArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference drawable = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::drawable(this),
        _Internal::drawable(this).GetCachedSize(), target, stream);
  }

  // required string delivery = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_delivery().data(), static_cast<int>(this->_internal_delivery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.BuildArchive.delivery");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_delivery(), target);
  }

  // optional double duration = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // required .KN.BuildAttributesArchive attributes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // optional int32 chunk_id_seed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_chunk_id_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.BuildArchive)
  return target;
}

size_t BuildArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.BuildArchive)
  size_t total_size = 0;

  if (_internal_has_delivery()) {
    // required string delivery = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery());
  }

  if (_internal_has_attributes()) {
    // required .KN.BuildAttributesArchive attributes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  return total_size;
}
size_t BuildArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.BuildArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string delivery = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery());

    // required .KN.BuildAttributesArchive attributes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference drawable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.drawable_);
  }

  if (cached_has_bits & 0x00000018u) {
    // optional double duration = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 chunk_id_seed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chunk_id_seed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildArchive::GetClassData() const { return &_class_data_; }


void BuildArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildArchive*>(&to_msg);
  auto& from = static_cast<const BuildArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.BuildArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_delivery(from._internal_delivery());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_drawable()->::TSP::Reference::MergeFrom(
          from._internal_drawable());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_attributes()->::KN::BuildAttributesArchive::MergeFrom(
          from._internal_attributes());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.chunk_id_seed_ = from._impl_.chunk_id_seed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildArchive::CopyFrom(const BuildArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.BuildArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_drawable()) {
    if (!_impl_.drawable_->IsInitialized()) return false;
  }
  if (_internal_has_attributes()) {
    if (!_impl_.attributes_->IsInitialized()) return false;
  }
  return true;
}

void BuildArchive::InternalSwap(BuildArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delivery_, lhs_arena,
      &other->_impl_.delivery_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildArchive, _impl_.chunk_id_seed_)
      + sizeof(BuildArchive::_impl_.chunk_id_seed_)
      - PROTOBUF_FIELD_OFFSET(BuildArchive, _impl_.drawable_)>(
          reinterpret_cast<char*>(&_impl_.drawable_),
          reinterpret_cast<char*>(&other->_impl_.drawable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[8]);
}

// ===================================================================

class PlaceholderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PlaceholderArchive>()._impl_._has_bits_);
  static const ::TSWP::ShapeInfoArchive& super(const PlaceholderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::ShapeInfoArchive&
PlaceholderArchive::_Internal::super(const PlaceholderArchive* msg) {
  return *msg->_impl_.super_;
}
void PlaceholderArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlaceholderArchive::PlaceholderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.PlaceholderArchive)
}
PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlaceholderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::ShapeInfoArchive(*from._impl_.super_);
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  // @@protoc_insertion_point(copy_constructor:KN.PlaceholderArchive)
}

inline void PlaceholderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.kind_){0}
  };
}

PlaceholderArchive::~PlaceholderArchive() {
  // @@protoc_insertion_point(destructor:KN.PlaceholderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlaceholderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void PlaceholderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlaceholderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PlaceholderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.kind_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceholderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::PlaceholderArchive_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::KN::PlaceholderArchive_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlaceholderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PlaceholderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.ShapeInfoArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PlaceholderArchive)
  return target;
}

size_t PlaceholderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PlaceholderArchive)
  size_t total_size = 0;

  // required .TSWP.ShapeInfoArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlaceholderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlaceholderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlaceholderArchive::GetClassData() const { return &_class_data_; }


void PlaceholderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlaceholderArchive*>(&to_msg);
  auto& from = static_cast<const PlaceholderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.PlaceholderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kind_ = from._impl_.kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PlaceholderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::InternalSwap(PlaceholderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceholderArchive, _impl_.kind_)
      + sizeof(PlaceholderArchive::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(PlaceholderArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceholderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[9]);
}

// ===================================================================

class NoteArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NoteArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& containedstorage(const NoteArchive* msg);
  static void set_has_containedstorage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
NoteArchive::_Internal::containedstorage(const NoteArchive* msg) {
  return *msg->_impl_.containedstorage_;
}
void NoteArchive::clear_containedstorage() {
  if (_impl_.containedstorage_ != nullptr) _impl_.containedstorage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NoteArchive::NoteArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.NoteArchive)
}
NoteArchive::NoteArchive(const NoteArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoteArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containedstorage_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_containedstorage()) {
    _this->_impl_.containedstorage_ = new ::TSP::Reference(*from._impl_.containedstorage_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.NoteArchive)
}

inline void NoteArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.containedstorage_){nullptr}
  };
}

NoteArchive::~NoteArchive() {
  // @@protoc_insertion_point(destructor:KN.NoteArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoteArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.containedstorage_;
}

void NoteArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoteArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.NoteArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.containedstorage_ != nullptr);
    _impl_.containedstorage_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoteArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference containedStorage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_containedstorage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoteArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.NoteArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference containedStorage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::containedstorage(this),
        _Internal::containedstorage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.NoteArchive)
  return target;
}

size_t NoteArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.NoteArchive)
  size_t total_size = 0;

  // required .TSP.Reference containedStorage = 1;
  if (_internal_has_containedstorage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.containedstorage_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoteArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoteArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoteArchive::GetClassData() const { return &_class_data_; }


void NoteArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoteArchive*>(&to_msg);
  auto& from = static_cast<const NoteArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.NoteArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_containedstorage()) {
    _this->_internal_mutable_containedstorage()->::TSP::Reference::MergeFrom(
        from._internal_containedstorage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoteArchive::CopyFrom(const NoteArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.NoteArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_containedstorage()) {
    if (!_impl_.containedstorage_->IsInitialized()) return false;
  }
  return true;
}

void NoteArchive::InternalSwap(NoteArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.containedstorage_, other->_impl_.containedstorage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoteArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[10]);
}

// ===================================================================

class ClassicStylesheetRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassicStylesheetRecordArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& deprecated_theme(const ClassicStylesheetRecordArchive* msg);
  static void set_has_deprecated_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
ClassicStylesheetRecordArchive::_Internal::deprecated_theme(const ClassicStylesheetRecordArchive* msg) {
  return *msg->_impl_.deprecated_theme_;
}
void ClassicStylesheetRecordArchive::clear_identifier_to_style_map() {
  _impl_.identifier_to_style_map_.Clear();
}
void ClassicStylesheetRecordArchive::clear_deprecated_theme() {
  if (_impl_.deprecated_theme_ != nullptr) _impl_.deprecated_theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ClassicStylesheetRecordArchive)
}
ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(const ClassicStylesheetRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClassicStylesheetRecordArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_to_style_map_){from._impl_.identifier_to_style_map_}
    , decltype(_impl_.deprecated_theme_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deprecated_theme()) {
    _this->_impl_.deprecated_theme_ = new ::TSP::Reference(*from._impl_.deprecated_theme_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.ClassicStylesheetRecordArchive)
}

inline void ClassicStylesheetRecordArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_to_style_map_){arena}
    , decltype(_impl_.deprecated_theme_){nullptr}
  };
}

ClassicStylesheetRecordArchive::~ClassicStylesheetRecordArchive() {
  // @@protoc_insertion_point(destructor:KN.ClassicStylesheetRecordArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassicStylesheetRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_to_style_map_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.deprecated_theme_;
}

void ClassicStylesheetRecordArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassicStylesheetRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ClassicStylesheetRecordArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_to_style_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.deprecated_theme_ != nullptr);
    _impl_.deprecated_theme_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassicStylesheetRecordArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier_to_style_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_theme = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassicStylesheetRecordArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ClassicStylesheetRecordArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifier_to_style_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifier_to_style_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference deprecated_theme = 2 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::deprecated_theme(this),
        _Internal::deprecated_theme(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ClassicStylesheetRecordArchive)
  return target;
}

size_t ClassicStylesheetRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ClassicStylesheetRecordArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  total_size += 1UL * this->_internal_identifier_to_style_map_size();
  for (const auto& msg : this->_impl_.identifier_to_style_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference deprecated_theme = 2 [deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deprecated_theme_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassicStylesheetRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClassicStylesheetRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassicStylesheetRecordArchive::GetClassData() const { return &_class_data_; }


void ClassicStylesheetRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClassicStylesheetRecordArchive*>(&to_msg);
  auto& from = static_cast<const ClassicStylesheetRecordArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ClassicStylesheetRecordArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.identifier_to_style_map_.MergeFrom(from._impl_.identifier_to_style_map_);
  if (from._internal_has_deprecated_theme()) {
    _this->_internal_mutable_deprecated_theme()->::TSP::Reference::MergeFrom(
        from._internal_deprecated_theme());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassicStylesheetRecordArchive::CopyFrom(const ClassicStylesheetRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ClassicStylesheetRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicStylesheetRecordArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifier_to_style_map_))
    return false;
  if (_internal_has_deprecated_theme()) {
    if (!_impl_.deprecated_theme_->IsInitialized()) return false;
  }
  return true;
}

void ClassicStylesheetRecordArchive::InternalSwap(ClassicStylesheetRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.identifier_to_style_map_.InternalSwap(&other->_impl_.identifier_to_style_map_);
  swap(_impl_.deprecated_theme_, other->_impl_.deprecated_theme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassicStylesheetRecordArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[11]);
}

// ===================================================================

class ClassicThemeRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassicThemeRecordArchive>()._impl_._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& stylesheetrecord(const ClassicThemeRecordArchive* msg);
  static void set_has_stylesheetrecord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
ClassicThemeRecordArchive::_Internal::stylesheetrecord(const ClassicThemeRecordArchive* msg) {
  return *msg->_impl_.stylesheetrecord_;
}
void ClassicThemeRecordArchive::clear_stylesheetrecord() {
  if (_impl_.stylesheetrecord_ != nullptr) _impl_.stylesheetrecord_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ClassicThemeRecordArchive::clear_templates() {
  _impl_.templates_.Clear();
}
ClassicThemeRecordArchive::ClassicThemeRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ClassicThemeRecordArchive)
}
ClassicThemeRecordArchive::ClassicThemeRecordArchive(const ClassicThemeRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClassicThemeRecordArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.templates_){from._impl_.templates_}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.stylesheetrecord_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stylesheetrecord()) {
    _this->_impl_.stylesheetrecord_ = new ::TSP::Reference(*from._impl_.stylesheetrecord_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.ClassicThemeRecordArchive)
}

inline void ClassicThemeRecordArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.templates_){arena}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.stylesheetrecord_){nullptr}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClassicThemeRecordArchive::~ClassicThemeRecordArchive() {
  // @@protoc_insertion_point(destructor:KN.ClassicThemeRecordArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassicThemeRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.templates_.~RepeatedPtrField();
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stylesheetrecord_;
}

void ClassicThemeRecordArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassicThemeRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ClassicThemeRecordArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.templates_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stylesheetrecord_ != nullptr);
      _impl_.stylesheetrecord_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassicThemeRecordArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.ClassicThemeRecordArchive.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference stylesheetRecord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheetrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference templates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_templates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassicThemeRecordArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ClassicThemeRecordArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.ClassicThemeRecordArchive.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // optional .TSP.Reference stylesheetRecord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stylesheetrecord(this),
        _Internal::stylesheetrecord(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference templates = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_templates_size()); i < n; i++) {
    const auto& repfield = this->_internal_templates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ClassicThemeRecordArchive)
  return target;
}

size_t ClassicThemeRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ClassicThemeRecordArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference templates = 3;
  total_size += 1UL * this->_internal_templates_size();
  for (const auto& msg : this->_impl_.templates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string uuid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional .TSP.Reference stylesheetRecord = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stylesheetrecord_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClassicThemeRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClassicThemeRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClassicThemeRecordArchive::GetClassData() const { return &_class_data_; }


void ClassicThemeRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClassicThemeRecordArchive*>(&to_msg);
  auto& from = static_cast<const ClassicThemeRecordArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ClassicThemeRecordArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.templates_.MergeFrom(from._impl_.templates_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stylesheetrecord()->::TSP::Reference::MergeFrom(
          from._internal_stylesheetrecord());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClassicThemeRecordArchive::CopyFrom(const ClassicThemeRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ClassicThemeRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicThemeRecordArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.templates_))
    return false;
  if (_internal_has_stylesheetrecord()) {
    if (!_impl_.stylesheetrecord_->IsInitialized()) return false;
  }
  return true;
}

void ClassicThemeRecordArchive::InternalSwap(ClassicThemeRecordArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.templates_.InternalSwap(&other->_impl_.templates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  swap(_impl_.stylesheetrecord_, other->_impl_.stylesheetrecord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassicThemeRecordArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[12]);
}

// ===================================================================

class SlideArchive_SageTagMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideArchive_SageTagMapEntry>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& info(const SlideArchive_SageTagMapEntry* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SlideArchive_SageTagMapEntry::_Internal::info(const SlideArchive_SageTagMapEntry* msg) {
  return *msg->_impl_.info_;
}
void SlideArchive_SageTagMapEntry::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive.SageTagMapEntry)
}
SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(const SlideArchive_SageTagMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideArchive_SageTagMapEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive.SageTagMapEntry)
}

inline void SlideArchive_SageTagMapEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.info_){nullptr}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SlideArchive_SageTagMapEntry::~SlideArchive_SageTagMapEntry() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive.SageTagMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideArchive_SageTagMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void SlideArchive_SageTagMapEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideArchive_SageTagMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive.SageTagMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive_SageTagMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideArchive.SageTagMapEntry.tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideArchive_SageTagMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive.SageTagMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.SageTagMapEntry.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // required .TSP.Reference info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive.SageTagMapEntry)
  return target;
}

size_t SlideArchive_SageTagMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideArchive.SageTagMapEntry)
  size_t total_size = 0;

  if (_internal_has_tag()) {
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_info()) {
    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t SlideArchive_SageTagMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive.SageTagMapEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string tag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required .TSP.Reference info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive_SageTagMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideArchive_SageTagMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive_SageTagMapEntry::GetClassData() const { return &_class_data_; }


void SlideArchive_SageTagMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideArchive_SageTagMapEntry*>(&to_msg);
  auto& from = static_cast<const SlideArchive_SageTagMapEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive.SageTagMapEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive_SageTagMapEntry::CopyFrom(const SlideArchive_SageTagMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive.SageTagMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive_SageTagMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void SlideArchive_SageTagMapEntry::InternalSwap(SlideArchive_SageTagMapEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive_SageTagMapEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[13]);
}

// ===================================================================

class SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideArchive_InstructionalTextMap_InstructionalTextMapEntry>()._impl_._has_bits_);
  static const ::TSP::Reference& info(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_instructional_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_Internal::info(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* msg) {
  return *msg->_impl_.info_;
}
void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
}
SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instructional_text_){}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instructional_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instructional_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instructional_text()) {
    _this->_impl_.instructional_text_.Set(from._internal_instructional_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
}

inline void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.instructional_text_){}
    , decltype(_impl_.info_){nullptr}
  };
  _impl_.instructional_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instructional_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::~SlideArchive_InstructionalTextMap_InstructionalTextMapEntry() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instructional_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instructional_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string instructional_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instructional_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.instructional_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference info = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // required string instructional_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_instructional_text().data(), static_cast<int>(this->_internal_instructional_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.instructional_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instructional_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  return target;
}

size_t SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  size_t total_size = 0;

  // required string instructional_text = 2;
  if (_internal_has_instructional_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instructional_text());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::GetClassData() const { return &_class_data_; }


void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideArchive_InstructionalTextMap_InstructionalTextMapEntry*>(&to_msg);
  auto& from = static_cast<const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instructional_text(from._internal_instructional_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::CopyFrom(const SlideArchive_InstructionalTextMap_InstructionalTextMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::InternalSwap(SlideArchive_InstructionalTextMap_InstructionalTextMapEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instructional_text_, lhs_arena,
      &other->_impl_.instructional_text_, rhs_arena
  );
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive_InstructionalTextMap_InstructionalTextMapEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[14]);
}

// ===================================================================

class SlideArchive_InstructionalTextMap::_Internal {
 public:
};

SlideArchive_InstructionalTextMap::SlideArchive_InstructionalTextMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive.InstructionalTextMap)
}
SlideArchive_InstructionalTextMap::SlideArchive_InstructionalTextMap(const SlideArchive_InstructionalTextMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideArchive_InstructionalTextMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instructional_text_for_infos_){from._impl_.instructional_text_for_infos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive.InstructionalTextMap)
}

inline void SlideArchive_InstructionalTextMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instructional_text_for_infos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SlideArchive_InstructionalTextMap::~SlideArchive_InstructionalTextMap() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive.InstructionalTextMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideArchive_InstructionalTextMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instructional_text_for_infos_.~RepeatedPtrField();
}

void SlideArchive_InstructionalTextMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideArchive_InstructionalTextMap::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive.InstructionalTextMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instructional_text_for_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive_InstructionalTextMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry instructional_text_for_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instructional_text_for_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideArchive_InstructionalTextMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive.InstructionalTextMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry instructional_text_for_infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instructional_text_for_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_instructional_text_for_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive.InstructionalTextMap)
  return target;
}

size_t SlideArchive_InstructionalTextMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive.InstructionalTextMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry instructional_text_for_infos = 1;
  total_size += 1UL * this->_internal_instructional_text_for_infos_size();
  for (const auto& msg : this->_impl_.instructional_text_for_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive_InstructionalTextMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideArchive_InstructionalTextMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive_InstructionalTextMap::GetClassData() const { return &_class_data_; }


void SlideArchive_InstructionalTextMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideArchive_InstructionalTextMap*>(&to_msg);
  auto& from = static_cast<const SlideArchive_InstructionalTextMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive.InstructionalTextMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instructional_text_for_infos_.MergeFrom(from._impl_.instructional_text_for_infos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive_InstructionalTextMap::CopyFrom(const SlideArchive_InstructionalTextMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive.InstructionalTextMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive_InstructionalTextMap::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.instructional_text_for_infos_))
    return false;
  return true;
}

void SlideArchive_InstructionalTextMap::InternalSwap(SlideArchive_InstructionalTextMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instructional_text_for_infos_.InternalSwap(&other->_impl_.instructional_text_for_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive_InstructionalTextMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[15]);
}

// ===================================================================

class SlideArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& style(const SlideArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::TransitionArchive& transition(const SlideArchive* msg);
  static void set_has_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& titleplaceholder(const SlideArchive* msg);
  static void set_has_titleplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& bodyplaceholder(const SlideArchive* msg);
  static void set_has_bodyplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& objectplaceholder(const SlideArchive* msg);
  static void set_has_objectplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::Reference& slidenumberplaceholder(const SlideArchive* msg);
  static void set_has_slidenumberplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::KN::SlideArchive_InstructionalTextMap& instructional_text_map(const SlideArchive* msg);
  static void set_has_instructional_text_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::GeometryArchive& titleplaceholdergeometry(const SlideArchive* msg);
  static void set_has_titleplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_titleplaceholdershapestyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_titleplaceholdertextstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& titlelayoutproperties(const SlideArchive* msg);
  static void set_has_titlelayoutproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::GeometryArchive& bodyplaceholdergeometry(const SlideArchive* msg);
  static void set_has_bodyplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bodyplaceholdershapestyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_bodyplaceholdertextstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& bodylayoutproperties(const SlideArchive* msg);
  static void set_has_bodylayoutproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::GeometryArchive& slidenumberplaceholdergeometry(const SlideArchive* msg);
  static void set_has_slidenumberplaceholdergeometry(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_slidenumberplaceholdershapestyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_slidenumberplaceholdertextstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSWP::ShapeStylePropertiesArchive& slidenumberlayoutproperties(const SlideArchive* msg);
  static void set_has_slidenumberlayoutproperties(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Reference& classicstylesheetrecord(const SlideArchive* msg);
  static void set_has_classicstylesheetrecord(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_thumbnailtextfortitleplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thumbnailtextforbodyplaceholder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slide_objects_layer_with_template(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSP::Reference& template_slide(const SlideArchive* msg);
  static void set_has_template_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& userdefinedguidestorage(const SlideArchive* msg);
  static void set_has_userdefinedguidestorage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_indocument(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSP::Reference& note(const SlideArchive* msg);
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_deprecated_objectplaceholdervisibleforexport(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSP::Reference& info_using_object_placeholder_geometry(const SlideArchive* msg);
  static void set_has_info_using_object_placeholder_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x10000018) ^ 0x10000018) != 0;
  }
};

const ::TSP::Reference&
SlideArchive::_Internal::style(const SlideArchive* msg) {
  return *msg->_impl_.style_;
}
const ::KN::TransitionArchive&
SlideArchive::_Internal::transition(const SlideArchive* msg) {
  return *msg->_impl_.transition_;
}
const ::TSP::Reference&
SlideArchive::_Internal::titleplaceholder(const SlideArchive* msg) {
  return *msg->_impl_.titleplaceholder_;
}
const ::TSP::Reference&
SlideArchive::_Internal::bodyplaceholder(const SlideArchive* msg) {
  return *msg->_impl_.bodyplaceholder_;
}
const ::TSP::Reference&
SlideArchive::_Internal::objectplaceholder(const SlideArchive* msg) {
  return *msg->_impl_.objectplaceholder_;
}
const ::TSP::Reference&
SlideArchive::_Internal::slidenumberplaceholder(const SlideArchive* msg) {
  return *msg->_impl_.slidenumberplaceholder_;
}
const ::KN::SlideArchive_InstructionalTextMap&
SlideArchive::_Internal::instructional_text_map(const SlideArchive* msg) {
  return *msg->_impl_.instructional_text_map_;
}
const ::TSD::GeometryArchive&
SlideArchive::_Internal::titleplaceholdergeometry(const SlideArchive* msg) {
  return *msg->_impl_.titleplaceholdergeometry_;
}
const ::TSWP::ShapeStylePropertiesArchive&
SlideArchive::_Internal::titlelayoutproperties(const SlideArchive* msg) {
  return *msg->_impl_.titlelayoutproperties_;
}
const ::TSD::GeometryArchive&
SlideArchive::_Internal::bodyplaceholdergeometry(const SlideArchive* msg) {
  return *msg->_impl_.bodyplaceholdergeometry_;
}
const ::TSWP::ShapeStylePropertiesArchive&
SlideArchive::_Internal::bodylayoutproperties(const SlideArchive* msg) {
  return *msg->_impl_.bodylayoutproperties_;
}
const ::TSD::GeometryArchive&
SlideArchive::_Internal::slidenumberplaceholdergeometry(const SlideArchive* msg) {
  return *msg->_impl_.slidenumberplaceholdergeometry_;
}
const ::TSWP::ShapeStylePropertiesArchive&
SlideArchive::_Internal::slidenumberlayoutproperties(const SlideArchive* msg) {
  return *msg->_impl_.slidenumberlayoutproperties_;
}
const ::TSP::Reference&
SlideArchive::_Internal::classicstylesheetrecord(const SlideArchive* msg) {
  return *msg->_impl_.classicstylesheetrecord_;
}
const ::TSP::Reference&
SlideArchive::_Internal::template_slide(const SlideArchive* msg) {
  return *msg->_impl_.template_slide_;
}
const ::TSP::Reference&
SlideArchive::_Internal::userdefinedguidestorage(const SlideArchive* msg) {
  return *msg->_impl_.userdefinedguidestorage_;
}
const ::TSP::Reference&
SlideArchive::_Internal::note(const SlideArchive* msg) {
  return *msg->_impl_.note_;
}
const ::TSP::Reference&
SlideArchive::_Internal::info_using_object_placeholder_geometry(const SlideArchive* msg) {
  return *msg->_impl_.info_using_object_placeholder_geometry_;
}
void SlideArchive::clear_style() {
  if (_impl_.style_ != nullptr) _impl_.style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SlideArchive::clear_builds() {
  _impl_.builds_.Clear();
}
void SlideArchive::clear_buildchunks() {
  _impl_.buildchunks_.Clear();
}
void SlideArchive::clear_titleplaceholder() {
  if (_impl_.titleplaceholder_ != nullptr) _impl_.titleplaceholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void SlideArchive::clear_bodyplaceholder() {
  if (_impl_.bodyplaceholder_ != nullptr) _impl_.bodyplaceholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void SlideArchive::clear_objectplaceholder() {
  if (_impl_.objectplaceholder_ != nullptr) _impl_.objectplaceholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void SlideArchive::clear_slidenumberplaceholder() {
  if (_impl_.slidenumberplaceholder_ != nullptr) _impl_.slidenumberplaceholder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void SlideArchive::clear_owned_drawables() {
  _impl_.owned_drawables_.Clear();
}
void SlideArchive::clear_drawables_z_order() {
  _impl_.drawables_z_order_.Clear();
}
void SlideArchive::clear_titleplaceholdergeometry() {
  if (_impl_.titleplaceholdergeometry_ != nullptr) _impl_.titleplaceholdergeometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void SlideArchive::clear_titlelayoutproperties() {
  if (_impl_.titlelayoutproperties_ != nullptr) _impl_.titlelayoutproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void SlideArchive::clear_bodyplaceholdergeometry() {
  if (_impl_.bodyplaceholdergeometry_ != nullptr) _impl_.bodyplaceholdergeometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void SlideArchive::clear_bodylayoutproperties() {
  if (_impl_.bodylayoutproperties_ != nullptr) _impl_.bodylayoutproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void SlideArchive::clear_slidenumberplaceholdergeometry() {
  if (_impl_.slidenumberplaceholdergeometry_ != nullptr) _impl_.slidenumberplaceholdergeometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void SlideArchive::clear_slidenumberlayoutproperties() {
  if (_impl_.slidenumberlayoutproperties_ != nullptr) _impl_.slidenumberlayoutproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void SlideArchive::clear_classicstylesheetrecord() {
  if (_impl_.classicstylesheetrecord_ != nullptr) _impl_.classicstylesheetrecord_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void SlideArchive::clear_bodyparagraphstyles() {
  _impl_.bodyparagraphstyles_.Clear();
}
void SlideArchive::clear_bodyliststyles() {
  _impl_.bodyliststyles_.Clear();
}
void SlideArchive::clear_template_slide() {
  if (_impl_.template_slide_ != nullptr) _impl_.template_slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void SlideArchive::clear_staticguides() {
  _impl_.staticguides_.Clear();
}
void SlideArchive::clear_userdefinedguidestorage() {
  if (_impl_.userdefinedguidestorage_ != nullptr) _impl_.userdefinedguidestorage_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void SlideArchive::clear_note() {
  if (_impl_.note_ != nullptr) _impl_.note_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void SlideArchive::clear_infos_using_object_placeholder_geometry() {
  _impl_.infos_using_object_placeholder_geometry_.Clear();
}
void SlideArchive::clear_info_using_object_placeholder_geometry() {
  if (_impl_.info_using_object_placeholder_geometry_ != nullptr) _impl_.info_using_object_placeholder_geometry_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
SlideArchive::SlideArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideArchive)
}
SlideArchive::SlideArchive(const SlideArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.builds_){from._impl_.builds_}
    , decltype(_impl_.buildchunkarchives_){from._impl_.buildchunkarchives_}
    , decltype(_impl_.owned_drawables_){from._impl_.owned_drawables_}
    , decltype(_impl_.staticguides_){from._impl_.staticguides_}
    , decltype(_impl_.sage_tag_to_info_map_){from._impl_.sage_tag_to_info_map_}
    , decltype(_impl_.bodyparagraphstyles_){from._impl_.bodyparagraphstyles_}
    , decltype(_impl_.bodyliststyles_){from._impl_.bodyliststyles_}
    , decltype(_impl_.drawables_z_order_){from._impl_.drawables_z_order_}
    , decltype(_impl_.buildchunks_){from._impl_.buildchunks_}
    , decltype(_impl_.infos_using_object_placeholder_geometry_){from._impl_.infos_using_object_placeholder_geometry_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.thumbnailtextfortitleplaceholder_){}
    , decltype(_impl_.thumbnailtextforbodyplaceholder_){}
    , decltype(_impl_.style_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.titleplaceholder_){nullptr}
    , decltype(_impl_.bodyplaceholder_){nullptr}
    , decltype(_impl_.titleplaceholdergeometry_){nullptr}
    , decltype(_impl_.bodyplaceholdergeometry_){nullptr}
    , decltype(_impl_.template_slide_){nullptr}
    , decltype(_impl_.slidenumberplaceholder_){nullptr}
    , decltype(_impl_.slidenumberplaceholdergeometry_){nullptr}
    , decltype(_impl_.titlelayoutproperties_){nullptr}
    , decltype(_impl_.bodylayoutproperties_){nullptr}
    , decltype(_impl_.slidenumberlayoutproperties_){nullptr}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.classicstylesheetrecord_){nullptr}
    , decltype(_impl_.objectplaceholder_){nullptr}
    , decltype(_impl_.userdefinedguidestorage_){nullptr}
    , decltype(_impl_.info_using_object_placeholder_geometry_){nullptr}
    , decltype(_impl_.instructional_text_map_){nullptr}
    , decltype(_impl_.titleplaceholdershapestyleindex_){}
    , decltype(_impl_.titleplaceholdertextstyleindex_){}
    , decltype(_impl_.bodyplaceholdershapestyleindex_){}
    , decltype(_impl_.bodyplaceholdertextstyleindex_){}
    , decltype(_impl_.slidenumberplaceholdershapestyleindex_){}
    , decltype(_impl_.slidenumberplaceholdertextstyleindex_){}
    , decltype(_impl_.slide_objects_layer_with_template_){}
    , decltype(_impl_.indocument_){}
    , decltype(_impl_.deprecated_objectplaceholdervisibleforexport_){}
    , decltype(_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailtextfortitleplaceholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailtextfortitleplaceholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailtextfortitleplaceholder()) {
    _this->_impl_.thumbnailtextfortitleplaceholder_.Set(from._internal_thumbnailtextfortitleplaceholder(), 
      _this->GetArenaForAllocation());
  }
  _impl_.thumbnailtextforbodyplaceholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailtextforbodyplaceholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thumbnailtextforbodyplaceholder()) {
    _this->_impl_.thumbnailtextforbodyplaceholder_.Set(from._internal_thumbnailtextforbodyplaceholder(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    _this->_impl_.style_ = new ::TSP::Reference(*from._impl_.style_);
  }
  if (from._internal_has_transition()) {
    _this->_impl_.transition_ = new ::KN::TransitionArchive(*from._impl_.transition_);
  }
  if (from._internal_has_titleplaceholder()) {
    _this->_impl_.titleplaceholder_ = new ::TSP::Reference(*from._impl_.titleplaceholder_);
  }
  if (from._internal_has_bodyplaceholder()) {
    _this->_impl_.bodyplaceholder_ = new ::TSP::Reference(*from._impl_.bodyplaceholder_);
  }
  if (from._internal_has_titleplaceholdergeometry()) {
    _this->_impl_.titleplaceholdergeometry_ = new ::TSD::GeometryArchive(*from._impl_.titleplaceholdergeometry_);
  }
  if (from._internal_has_bodyplaceholdergeometry()) {
    _this->_impl_.bodyplaceholdergeometry_ = new ::TSD::GeometryArchive(*from._impl_.bodyplaceholdergeometry_);
  }
  if (from._internal_has_template_slide()) {
    _this->_impl_.template_slide_ = new ::TSP::Reference(*from._impl_.template_slide_);
  }
  if (from._internal_has_slidenumberplaceholder()) {
    _this->_impl_.slidenumberplaceholder_ = new ::TSP::Reference(*from._impl_.slidenumberplaceholder_);
  }
  if (from._internal_has_slidenumberplaceholdergeometry()) {
    _this->_impl_.slidenumberplaceholdergeometry_ = new ::TSD::GeometryArchive(*from._impl_.slidenumberplaceholdergeometry_);
  }
  if (from._internal_has_titlelayoutproperties()) {
    _this->_impl_.titlelayoutproperties_ = new ::TSWP::ShapeStylePropertiesArchive(*from._impl_.titlelayoutproperties_);
  }
  if (from._internal_has_bodylayoutproperties()) {
    _this->_impl_.bodylayoutproperties_ = new ::TSWP::ShapeStylePropertiesArchive(*from._impl_.bodylayoutproperties_);
  }
  if (from._internal_has_slidenumberlayoutproperties()) {
    _this->_impl_.slidenumberlayoutproperties_ = new ::TSWP::ShapeStylePropertiesArchive(*from._impl_.slidenumberlayoutproperties_);
  }
  if (from._internal_has_note()) {
    _this->_impl_.note_ = new ::TSP::Reference(*from._impl_.note_);
  }
  if (from._internal_has_classicstylesheetrecord()) {
    _this->_impl_.classicstylesheetrecord_ = new ::TSP::Reference(*from._impl_.classicstylesheetrecord_);
  }
  if (from._internal_has_objectplaceholder()) {
    _this->_impl_.objectplaceholder_ = new ::TSP::Reference(*from._impl_.objectplaceholder_);
  }
  if (from._internal_has_userdefinedguidestorage()) {
    _this->_impl_.userdefinedguidestorage_ = new ::TSP::Reference(*from._impl_.userdefinedguidestorage_);
  }
  if (from._internal_has_info_using_object_placeholder_geometry()) {
    _this->_impl_.info_using_object_placeholder_geometry_ = new ::TSP::Reference(*from._impl_.info_using_object_placeholder_geometry_);
  }
  if (from._internal_has_instructional_text_map()) {
    _this->_impl_.instructional_text_map_ = new ::KN::SlideArchive_InstructionalTextMap(*from._impl_.instructional_text_map_);
  }
  ::memcpy(&_impl_.titleplaceholdershapestyleindex_, &from._impl_.titleplaceholdershapestyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_) -
    reinterpret_cast<char*>(&_impl_.titleplaceholdershapestyleindex_)) + sizeof(_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideArchive)
}

inline void SlideArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.builds_){arena}
    , decltype(_impl_.buildchunkarchives_){arena}
    , decltype(_impl_.owned_drawables_){arena}
    , decltype(_impl_.staticguides_){arena}
    , decltype(_impl_.sage_tag_to_info_map_){arena}
    , decltype(_impl_.bodyparagraphstyles_){arena}
    , decltype(_impl_.bodyliststyles_){arena}
    , decltype(_impl_.drawables_z_order_){arena}
    , decltype(_impl_.buildchunks_){arena}
    , decltype(_impl_.infos_using_object_placeholder_geometry_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.thumbnailtextfortitleplaceholder_){}
    , decltype(_impl_.thumbnailtextforbodyplaceholder_){}
    , decltype(_impl_.style_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.titleplaceholder_){nullptr}
    , decltype(_impl_.bodyplaceholder_){nullptr}
    , decltype(_impl_.titleplaceholdergeometry_){nullptr}
    , decltype(_impl_.bodyplaceholdergeometry_){nullptr}
    , decltype(_impl_.template_slide_){nullptr}
    , decltype(_impl_.slidenumberplaceholder_){nullptr}
    , decltype(_impl_.slidenumberplaceholdergeometry_){nullptr}
    , decltype(_impl_.titlelayoutproperties_){nullptr}
    , decltype(_impl_.bodylayoutproperties_){nullptr}
    , decltype(_impl_.slidenumberlayoutproperties_){nullptr}
    , decltype(_impl_.note_){nullptr}
    , decltype(_impl_.classicstylesheetrecord_){nullptr}
    , decltype(_impl_.objectplaceholder_){nullptr}
    , decltype(_impl_.userdefinedguidestorage_){nullptr}
    , decltype(_impl_.info_using_object_placeholder_geometry_){nullptr}
    , decltype(_impl_.instructional_text_map_){nullptr}
    , decltype(_impl_.titleplaceholdershapestyleindex_){0u}
    , decltype(_impl_.titleplaceholdertextstyleindex_){0u}
    , decltype(_impl_.bodyplaceholdershapestyleindex_){0u}
    , decltype(_impl_.bodyplaceholdertextstyleindex_){0u}
    , decltype(_impl_.slidenumberplaceholdershapestyleindex_){0u}
    , decltype(_impl_.slidenumberplaceholdertextstyleindex_){0u}
    , decltype(_impl_.slide_objects_layer_with_template_){false}
    , decltype(_impl_.indocument_){false}
    , decltype(_impl_.deprecated_objectplaceholdervisibleforexport_){false}
    , decltype(_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailtextfortitleplaceholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailtextfortitleplaceholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.thumbnailtextforbodyplaceholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.thumbnailtextforbodyplaceholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SlideArchive::~SlideArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.builds_.~RepeatedPtrField();
  _impl_.buildchunkarchives_.~RepeatedPtrField();
  _impl_.owned_drawables_.~RepeatedPtrField();
  _impl_.staticguides_.~RepeatedPtrField();
  _impl_.sage_tag_to_info_map_.~RepeatedPtrField();
  _impl_.bodyparagraphstyles_.~RepeatedPtrField();
  _impl_.bodyliststyles_.~RepeatedPtrField();
  _impl_.drawables_z_order_.~RepeatedPtrField();
  _impl_.buildchunks_.~RepeatedPtrField();
  _impl_.infos_using_object_placeholder_geometry_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.thumbnailtextfortitleplaceholder_.Destroy();
  _impl_.thumbnailtextforbodyplaceholder_.Destroy();
  if (this != internal_default_instance()) delete _impl_.style_;
  if (this != internal_default_instance()) delete _impl_.transition_;
  if (this != internal_default_instance()) delete _impl_.titleplaceholder_;
  if (this != internal_default_instance()) delete _impl_.bodyplaceholder_;
  if (this != internal_default_instance()) delete _impl_.titleplaceholdergeometry_;
  if (this != internal_default_instance()) delete _impl_.bodyplaceholdergeometry_;
  if (this != internal_default_instance()) delete _impl_.template_slide_;
  if (this != internal_default_instance()) delete _impl_.slidenumberplaceholder_;
  if (this != internal_default_instance()) delete _impl_.slidenumberplaceholdergeometry_;
  if (this != internal_default_instance()) delete _impl_.titlelayoutproperties_;
  if (this != internal_default_instance()) delete _impl_.bodylayoutproperties_;
  if (this != internal_default_instance()) delete _impl_.slidenumberlayoutproperties_;
  if (this != internal_default_instance()) delete _impl_.note_;
  if (this != internal_default_instance()) delete _impl_.classicstylesheetrecord_;
  if (this != internal_default_instance()) delete _impl_.objectplaceholder_;
  if (this != internal_default_instance()) delete _impl_.userdefinedguidestorage_;
  if (this != internal_default_instance()) delete _impl_.info_using_object_placeholder_geometry_;
  if (this != internal_default_instance()) delete _impl_.instructional_text_map_;
}

void SlideArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.builds_.Clear();
  _impl_.buildchunkarchives_.Clear();
  _impl_.owned_drawables_.Clear();
  _impl_.staticguides_.Clear();
  _impl_.sage_tag_to_info_map_.Clear();
  _impl_.bodyparagraphstyles_.Clear();
  _impl_.bodyliststyles_.Clear();
  _impl_.drawables_z_order_.Clear();
  _impl_.buildchunks_.Clear();
  _impl_.infos_using_object_placeholder_geometry_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.thumbnailtextfortitleplaceholder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.thumbnailtextforbodyplaceholder_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.style_ != nullptr);
      _impl_.style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.transition_ != nullptr);
      _impl_.transition_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.titleplaceholder_ != nullptr);
      _impl_.titleplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.bodyplaceholder_ != nullptr);
      _impl_.bodyplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.titleplaceholdergeometry_ != nullptr);
      _impl_.titleplaceholdergeometry_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.bodyplaceholdergeometry_ != nullptr);
      _impl_.bodyplaceholdergeometry_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.template_slide_ != nullptr);
      _impl_.template_slide_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.slidenumberplaceholder_ != nullptr);
      _impl_.slidenumberplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.slidenumberplaceholdergeometry_ != nullptr);
      _impl_.slidenumberplaceholdergeometry_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.titlelayoutproperties_ != nullptr);
      _impl_.titlelayoutproperties_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.bodylayoutproperties_ != nullptr);
      _impl_.bodylayoutproperties_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.slidenumberlayoutproperties_ != nullptr);
      _impl_.slidenumberlayoutproperties_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.note_ != nullptr);
      _impl_.note_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.classicstylesheetrecord_ != nullptr);
      _impl_.classicstylesheetrecord_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.objectplaceholder_ != nullptr);
      _impl_.objectplaceholder_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.userdefinedguidestorage_ != nullptr);
      _impl_.userdefinedguidestorage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.info_using_object_placeholder_geometry_ != nullptr);
      _impl_.info_using_object_placeholder_geometry_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.instructional_text_map_ != nullptr);
      _impl_.instructional_text_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&_impl_.titleplaceholdershapestyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bodyplaceholdershapestyleindex_) -
        reinterpret_cast<char*>(&_impl_.titleplaceholdershapestyleindex_)) + sizeof(_impl_.bodyplaceholdershapestyleindex_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&_impl_.bodyplaceholdertextstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_) -
        reinterpret_cast<char*>(&_impl_.bodyplaceholdertextstyleindex_)) + sizeof(_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference builds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_builds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.BuildChunkArchive buildChunkArchives = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildchunkarchives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .KN.TransitionArchive transition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference titlePlaceholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_titleplaceholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference bodyPlaceholder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodyplaceholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference owned_drawables = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owned_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_titleplaceholdergeometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 titlePlaceholderShapeStyleIndex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_titleplaceholdershapestyleindex(&has_bits);
          _impl_.titleplaceholdershapestyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 titlePlaceholderTextStyleIndex = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_titleplaceholdertextstyleindex(&has_bits);
          _impl_.titleplaceholdertextstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodyplaceholdergeometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_bodyplaceholdershapestyleindex(&has_bits);
          _impl_.bodyplaceholdershapestyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bodyPlaceholderTextStyleIndex = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_bodyplaceholdertextstyleindex(&has_bits);
          _impl_.bodyplaceholdertextstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference template_slide = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSD.GuideArchive staticGuides = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_staticguides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool inDocument = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_indocument(&has_bits);
          _impl_.indocument_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference slideNumberPlaceholder = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenumberplaceholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenumberplaceholdergeometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_slidenumberplaceholdershapestyleindex(&has_bits);
          _impl_.slidenumberplaceholdershapestyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_slidenumberplaceholdertextstyleindex(&has_bits);
          _impl_.slidenumberplaceholdertextstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_titlelayoutproperties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_bodylayoutproperties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenumberlayoutproperties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference note = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_note(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sage_tag_to_info_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference classicStylesheetRecord = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_classicstylesheetrecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference objectPlaceholder = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_objectplaceholder(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference bodyParagraphStyles = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bodyparagraphstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deprecated_objectplaceholdervisibleforexport(&has_bits);
          _impl_.deprecated_objectplaceholdervisibleforexport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference bodyListStyles = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bodyliststyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference userDefinedGuideStorage = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_userdefinedguidestorage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailTextForTitlePlaceholder = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_thumbnailtextfortitleplaceholder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideArchive.thumbnailTextForTitlePlaceholder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string thumbnailTextForBodyPlaceholder = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_thumbnailtextforbodyplaceholder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideArchive.thumbnailTextForBodyPlaceholder");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_using_object_placeholder_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(&has_bits);
          _impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool slide_objects_layer_with_template = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_slide_objects_layer_with_template(&has_bits);
          _impl_.slide_objects_layer_with_template_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference drawables_z_order = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_drawables_z_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference buildChunks = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_buildchunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos_using_object_placeholder_geometry = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_infos_using_object_placeholder_geometry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .KN.SlideArchive.InstructionalTextMap instructional_text_map = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_instructional_text_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference style = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::style(this),
        _Internal::style(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference builds = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_builds_size()); i < n; i++) {
    const auto& repfield = this->_internal_builds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.BuildChunkArchive buildChunkArchives = 3 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildchunkarchives_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildchunkarchives(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .KN.TransitionArchive transition = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::transition(this),
        _Internal::transition(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference titlePlaceholder = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::titleplaceholder(this),
        _Internal::titleplaceholder(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference bodyPlaceholder = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::bodyplaceholder(this),
        _Internal::bodyplaceholder(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference owned_drawables = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owned_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_owned_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::titleplaceholdergeometry(this),
        _Internal::titleplaceholdergeometry(this).GetCachedSize(), target, stream);
  }

  // optional uint32 titlePlaceholderShapeStyleIndex = 12;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_titleplaceholdershapestyleindex(), target);
  }

  // optional uint32 titlePlaceholderTextStyleIndex = 13;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_titleplaceholdertextstyleindex(), target);
  }

  // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::bodyplaceholdergeometry(this),
        _Internal::bodyplaceholdergeometry(this).GetCachedSize(), target, stream);
  }

  // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_bodyplaceholdershapestyleindex(), target);
  }

  // optional uint32 bodyPlaceholderTextStyleIndex = 16;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_bodyplaceholdertextstyleindex(), target);
  }

  // optional .TSP.Reference template_slide = 17;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::template_slide(this),
        _Internal::template_slide(this).GetCachedSize(), target, stream);
  }

  // repeated .TSD.GuideArchive staticGuides = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_staticguides_size()); i < n; i++) {
    const auto& repfield = this->_internal_staticguides(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool inDocument = 19;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_indocument(), target);
  }

  // optional .TSP.Reference slideNumberPlaceholder = 20;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::slidenumberplaceholder(this),
        _Internal::slidenumberplaceholder(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::slidenumberplaceholdergeometry(this),
        _Internal::slidenumberplaceholdergeometry(this).GetCachedSize(), target, stream);
  }

  // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_slidenumberplaceholdershapestyleindex(), target);
  }

  // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_slidenumberplaceholdertextstyleindex(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::titlelayoutproperties(this),
        _Internal::titlelayoutproperties(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::bodylayoutproperties(this),
        _Internal::bodylayoutproperties(this).GetCachedSize(), target, stream);
  }

  // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::slidenumberlayoutproperties(this),
        _Internal::slidenumberlayoutproperties(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference note = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::note(this),
        _Internal::note(this).GetCachedSize(), target, stream);
  }

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sage_tag_to_info_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_sage_tag_to_info_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference classicStylesheetRecord = 29;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::classicstylesheetrecord(this),
        _Internal::classicstylesheetrecord(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference objectPlaceholder = 30;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::objectplaceholder(this),
        _Internal::objectplaceholder(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bodyparagraphstyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_bodyparagraphstyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_deprecated_objectplaceholdervisibleforexport(), target);
  }

  // repeated .TSP.Reference bodyListStyles = 35;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bodyliststyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_bodyliststyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference userDefinedGuideStorage = 36;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::userdefinedguidestorage(this),
        _Internal::userdefinedguidestorage(this).GetCachedSize(), target, stream);
  }

  // optional string thumbnailTextForTitlePlaceholder = 37;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnailtextfortitleplaceholder().data(), static_cast<int>(this->_internal_thumbnailtextfortitleplaceholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.thumbnailTextForTitlePlaceholder");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_thumbnailtextfortitleplaceholder(), target);
  }

  // optional string thumbnailTextForBodyPlaceholder = 38;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thumbnailtextforbodyplaceholder().data(), static_cast<int>(this->_internal_thumbnailtextforbodyplaceholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideArchive.thumbnailTextForBodyPlaceholder");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_thumbnailtextforbodyplaceholder(), target);
  }

  // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::info_using_object_placeholder_geometry(this),
        _Internal::info_using_object_placeholder_geometry(this).GetCachedSize(), target, stream);
  }

  // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(), target);
  }

  // optional bool slide_objects_layer_with_template = 41 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_slide_objects_layer_with_template(), target);
  }

  // repeated .TSP.Reference drawables_z_order = 42;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_z_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables_z_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference buildChunks = 43;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildchunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildchunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference infos_using_object_placeholder_geometry = 44;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_using_object_placeholder_geometry_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos_using_object_placeholder_geometry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(44, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .KN.SlideArchive.InstructionalTextMap instructional_text_map = 45;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::instructional_text_map(this),
        _Internal::instructional_text_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideArchive)
  return target;
}

size_t SlideArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideArchive)
  size_t total_size = 0;

  if (_internal_has_style()) {
    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);
  }

  if (_internal_has_transition()) {
    // required .KN.TransitionArchive transition = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transition_);
  }

  if (_internal_has_indocument()) {
    // required bool inDocument = 19;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t SlideArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x10000018) ^ 0x10000018) == 0) {  // All required fields are present.
    // required .TSP.Reference style = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);

    // required .KN.TransitionArchive transition = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transition_);

    // required bool inDocument = 19;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference builds = 2;
  total_size += 1UL * this->_internal_builds_size();
  for (const auto& msg : this->_impl_.builds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.BuildChunkArchive buildChunkArchives = 3 [deprecated = true];
  total_size += 1UL * this->_internal_buildchunkarchives_size();
  for (const auto& msg : this->_impl_.buildchunkarchives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference owned_drawables = 7;
  total_size += 1UL * this->_internal_owned_drawables_size();
  for (const auto& msg : this->_impl_.owned_drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.GuideArchive staticGuides = 18;
  total_size += 2UL * this->_internal_staticguides_size();
  for (const auto& msg : this->_impl_.staticguides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  total_size += 2UL * this->_internal_sage_tag_to_info_map_size();
  for (const auto& msg : this->_impl_.sage_tag_to_info_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  total_size += 2UL * this->_internal_bodyparagraphstyles_size();
  for (const auto& msg : this->_impl_.bodyparagraphstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference bodyListStyles = 35;
  total_size += 2UL * this->_internal_bodyliststyles_size();
  for (const auto& msg : this->_impl_.bodyliststyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference drawables_z_order = 42;
  total_size += 2UL * this->_internal_drawables_z_order_size();
  for (const auto& msg : this->_impl_.drawables_z_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference buildChunks = 43;
  total_size += 2UL * this->_internal_buildchunks_size();
  for (const auto& msg : this->_impl_.buildchunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference infos_using_object_placeholder_geometry = 44;
  total_size += 2UL * this->_internal_infos_using_object_placeholder_geometry_size();
  for (const auto& msg : this->_impl_.infos_using_object_placeholder_geometry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string thumbnailTextForTitlePlaceholder = 37;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnailtextfortitleplaceholder());
    }

    // optional string thumbnailTextForBodyPlaceholder = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thumbnailtextforbodyplaceholder());
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference titlePlaceholder = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.titleplaceholder_);
    }

    // optional .TSP.Reference bodyPlaceholder = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bodyplaceholder_);
    }

    // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.titleplaceholdergeometry_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bodyplaceholdergeometry_);
    }

    // optional .TSP.Reference template_slide = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.template_slide_);
    }

    // optional .TSP.Reference slideNumberPlaceholder = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slidenumberplaceholder_);
    }

    // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slidenumberplaceholdergeometry_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.titlelayoutproperties_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bodylayoutproperties_);
    }

    // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slidenumberlayoutproperties_);
    }

    // optional .TSP.Reference note = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.note_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSP.Reference classicStylesheetRecord = 29;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classicstylesheetrecord_);
    }

    // optional .TSP.Reference objectPlaceholder = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.objectplaceholder_);
    }

    // optional .TSP.Reference userDefinedGuideStorage = 36;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.userdefinedguidestorage_);
    }

    // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_using_object_placeholder_geometry_);
    }

    // optional .KN.SlideArchive.InstructionalTextMap instructional_text_map = 45;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.instructional_text_map_);
    }

    // optional uint32 titlePlaceholderShapeStyleIndex = 12;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_titleplaceholdershapestyleindex());
    }

    // optional uint32 titlePlaceholderTextStyleIndex = 13;
    if (cached_has_bits & 0x00400000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_titleplaceholdertextstyleindex());
    }

    // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
    if (cached_has_bits & 0x00800000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bodyplaceholdershapestyleindex());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional uint32 bodyPlaceholderTextStyleIndex = 16;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bodyplaceholdertextstyleindex());
    }

    // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_slidenumberplaceholdershapestyleindex());
    }

    // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_slidenumberplaceholdertextstyleindex());
    }

    // optional bool slide_objects_layer_with_template = 41 [default = false];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x60000000u) {
    // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideArchive::GetClassData() const { return &_class_data_; }


void SlideArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideArchive*>(&to_msg);
  auto& from = static_cast<const SlideArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.builds_.MergeFrom(from._impl_.builds_);
  _this->_impl_.buildchunkarchives_.MergeFrom(from._impl_.buildchunkarchives_);
  _this->_impl_.owned_drawables_.MergeFrom(from._impl_.owned_drawables_);
  _this->_impl_.staticguides_.MergeFrom(from._impl_.staticguides_);
  _this->_impl_.sage_tag_to_info_map_.MergeFrom(from._impl_.sage_tag_to_info_map_);
  _this->_impl_.bodyparagraphstyles_.MergeFrom(from._impl_.bodyparagraphstyles_);
  _this->_impl_.bodyliststyles_.MergeFrom(from._impl_.bodyliststyles_);
  _this->_impl_.drawables_z_order_.MergeFrom(from._impl_.drawables_z_order_);
  _this->_impl_.buildchunks_.MergeFrom(from._impl_.buildchunks_);
  _this->_impl_.infos_using_object_placeholder_geometry_.MergeFrom(from._impl_.infos_using_object_placeholder_geometry_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_thumbnailtextfortitleplaceholder(from._internal_thumbnailtextfortitleplaceholder());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_thumbnailtextforbodyplaceholder(from._internal_thumbnailtextforbodyplaceholder());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_style()->::TSP::Reference::MergeFrom(
          from._internal_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_transition()->::KN::TransitionArchive::MergeFrom(
          from._internal_transition());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_titleplaceholder()->::TSP::Reference::MergeFrom(
          from._internal_titleplaceholder());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_bodyplaceholder()->::TSP::Reference::MergeFrom(
          from._internal_bodyplaceholder());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_titleplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_titleplaceholdergeometry());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_bodyplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_bodyplaceholdergeometry());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_template_slide()->::TSP::Reference::MergeFrom(
          from._internal_template_slide());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_slidenumberplaceholder()->::TSP::Reference::MergeFrom(
          from._internal_slidenumberplaceholder());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_slidenumberplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(
          from._internal_slidenumberplaceholdergeometry());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_titlelayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(
          from._internal_titlelayoutproperties());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_bodylayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(
          from._internal_bodylayoutproperties());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_slidenumberlayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(
          from._internal_slidenumberlayoutproperties());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_note()->::TSP::Reference::MergeFrom(
          from._internal_note());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_classicstylesheetrecord()->::TSP::Reference::MergeFrom(
          from._internal_classicstylesheetrecord());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_objectplaceholder()->::TSP::Reference::MergeFrom(
          from._internal_objectplaceholder());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_userdefinedguidestorage()->::TSP::Reference::MergeFrom(
          from._internal_userdefinedguidestorage());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_info_using_object_placeholder_geometry()->::TSP::Reference::MergeFrom(
          from._internal_info_using_object_placeholder_geometry());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_instructional_text_map()->::KN::SlideArchive_InstructionalTextMap::MergeFrom(
          from._internal_instructional_text_map());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.titleplaceholdershapestyleindex_ = from._impl_.titleplaceholdershapestyleindex_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.titleplaceholdertextstyleindex_ = from._impl_.titleplaceholdertextstyleindex_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.bodyplaceholdershapestyleindex_ = from._impl_.bodyplaceholdershapestyleindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.bodyplaceholdertextstyleindex_ = from._impl_.bodyplaceholdertextstyleindex_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.slidenumberplaceholdershapestyleindex_ = from._impl_.slidenumberplaceholdershapestyleindex_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.slidenumberplaceholdertextstyleindex_ = from._impl_.slidenumberplaceholdertextstyleindex_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.slide_objects_layer_with_template_ = from._impl_.slide_objects_layer_with_template_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.indocument_ = from._impl_.indocument_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.deprecated_objectplaceholdervisibleforexport_ = from._impl_.deprecated_objectplaceholdervisibleforexport_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = from._impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideArchive::CopyFrom(const SlideArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.builds_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buildchunkarchives_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.owned_drawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sage_tag_to_info_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.bodyparagraphstyles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.bodyliststyles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_z_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buildchunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.infos_using_object_placeholder_geometry_))
    return false;
  if (_internal_has_style()) {
    if (!_impl_.style_->IsInitialized()) return false;
  }
  if (_internal_has_transition()) {
    if (!_impl_.transition_->IsInitialized()) return false;
  }
  if (_internal_has_titleplaceholder()) {
    if (!_impl_.titleplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_bodyplaceholder()) {
    if (!_impl_.bodyplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_titleplaceholdergeometry()) {
    if (!_impl_.titleplaceholdergeometry_->IsInitialized()) return false;
  }
  if (_internal_has_bodyplaceholdergeometry()) {
    if (!_impl_.bodyplaceholdergeometry_->IsInitialized()) return false;
  }
  if (_internal_has_template_slide()) {
    if (!_impl_.template_slide_->IsInitialized()) return false;
  }
  if (_internal_has_slidenumberplaceholder()) {
    if (!_impl_.slidenumberplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_slidenumberplaceholdergeometry()) {
    if (!_impl_.slidenumberplaceholdergeometry_->IsInitialized()) return false;
  }
  if (_internal_has_titlelayoutproperties()) {
    if (!_impl_.titlelayoutproperties_->IsInitialized()) return false;
  }
  if (_internal_has_bodylayoutproperties()) {
    if (!_impl_.bodylayoutproperties_->IsInitialized()) return false;
  }
  if (_internal_has_slidenumberlayoutproperties()) {
    if (!_impl_.slidenumberlayoutproperties_->IsInitialized()) return false;
  }
  if (_internal_has_note()) {
    if (!_impl_.note_->IsInitialized()) return false;
  }
  if (_internal_has_classicstylesheetrecord()) {
    if (!_impl_.classicstylesheetrecord_->IsInitialized()) return false;
  }
  if (_internal_has_objectplaceholder()) {
    if (!_impl_.objectplaceholder_->IsInitialized()) return false;
  }
  if (_internal_has_userdefinedguidestorage()) {
    if (!_impl_.userdefinedguidestorage_->IsInitialized()) return false;
  }
  if (_internal_has_info_using_object_placeholder_geometry()) {
    if (!_impl_.info_using_object_placeholder_geometry_->IsInitialized()) return false;
  }
  if (_internal_has_instructional_text_map()) {
    if (!_impl_.instructional_text_map_->IsInitialized()) return false;
  }
  return true;
}

void SlideArchive::InternalSwap(SlideArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.builds_.InternalSwap(&other->_impl_.builds_);
  _impl_.buildchunkarchives_.InternalSwap(&other->_impl_.buildchunkarchives_);
  _impl_.owned_drawables_.InternalSwap(&other->_impl_.owned_drawables_);
  _impl_.staticguides_.InternalSwap(&other->_impl_.staticguides_);
  _impl_.sage_tag_to_info_map_.InternalSwap(&other->_impl_.sage_tag_to_info_map_);
  _impl_.bodyparagraphstyles_.InternalSwap(&other->_impl_.bodyparagraphstyles_);
  _impl_.bodyliststyles_.InternalSwap(&other->_impl_.bodyliststyles_);
  _impl_.drawables_z_order_.InternalSwap(&other->_impl_.drawables_z_order_);
  _impl_.buildchunks_.InternalSwap(&other->_impl_.buildchunks_);
  _impl_.infos_using_object_placeholder_geometry_.InternalSwap(&other->_impl_.infos_using_object_placeholder_geometry_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailtextfortitleplaceholder_, lhs_arena,
      &other->_impl_.thumbnailtextfortitleplaceholder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.thumbnailtextforbodyplaceholder_, lhs_arena,
      &other->_impl_.thumbnailtextforbodyplaceholder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideArchive, _impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_)
      + sizeof(SlideArchive::_impl_.info_using_object_placeholder_geometry_matches_object_placeholder_geometry_)
      - PROTOBUF_FIELD_OFFSET(SlideArchive, _impl_.style_)>(
          reinterpret_cast<char*>(&_impl_.style_),
          reinterpret_cast<char*>(&other->_impl_.style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[16]);
}

// ===================================================================

class SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideNodeArchive_SlideSpecificHyperlinkMapEntry>()._impl_._has_bits_);
  static void set_has_slidenodeidstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SlideNodeArchive_SlideSpecificHyperlinkMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
}
SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SlideNodeArchive_SlideSpecificHyperlinkMapEntry(const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideNodeArchive_SlideSpecificHyperlinkMapEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infoorstorageidstring_){from._impl_.infoorstorageidstring_}
    , decltype(_impl_.slidenodeidstring_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.slidenodeidstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slidenodeidstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_slidenodeidstring()) {
    _this->_impl_.slidenodeidstring_.Set(from._internal_slidenodeidstring(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
}

inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.infoorstorageidstring_){arena}
    , decltype(_impl_.slidenodeidstring_){}
  };
  _impl_.slidenodeidstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slidenodeidstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SlideNodeArchive_SlideSpecificHyperlinkMapEntry::~SlideNodeArchive_SlideSpecificHyperlinkMapEntry() {
  // @@protoc_insertion_point(destructor:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infoorstorageidstring_.~RepeatedPtrField();
  _impl_.slidenodeidstring_.Destroy();
}

void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infoorstorageidstring_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.slidenodeidstring_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string slideNodeIDString = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_slidenodeidstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.slideNodeIDString");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string infoOrStorageIDString = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_infoorstorageidstring();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string slideNodeIDString = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_slidenodeidstring().data(), static_cast<int>(this->_internal_slidenodeidstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.slideNodeIDString");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slidenodeidstring(), target);
  }

  // repeated string infoOrStorageIDString = 2;
  for (int i = 0, n = this->_internal_infoorstorageidstring_size(); i < n; i++) {
    const auto& s = this->_internal_infoorstorageidstring(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry.infoOrStorageIDString");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  return target;
}

size_t SlideNodeArchive_SlideSpecificHyperlinkMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  size_t total_size = 0;

  // required string slideNodeIDString = 1;
  if (_internal_has_slidenodeidstring()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slidenodeidstring());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string infoOrStorageIDString = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.infoorstorageidstring_.size());
  for (int i = 0, n = _impl_.infoorstorageidstring_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.infoorstorageidstring_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideNodeArchive_SlideSpecificHyperlinkMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideNodeArchive_SlideSpecificHyperlinkMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideNodeArchive_SlideSpecificHyperlinkMapEntry::GetClassData() const { return &_class_data_; }


void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideNodeArchive_SlideSpecificHyperlinkMapEntry*>(&to_msg);
  auto& from = static_cast<const SlideNodeArchive_SlideSpecificHyperlinkMapEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infoorstorageidstring_.MergeFrom(from._impl_.infoorstorageidstring_);
  if (from._internal_has_slidenodeidstring()) {
    _this->_internal_set_slidenodeidstring(from._internal_slidenodeidstring());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::CopyFrom(const SlideNodeArchive_SlideSpecificHyperlinkMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNodeArchive_SlideSpecificHyperlinkMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SlideNodeArchive_SlideSpecificHyperlinkMapEntry::InternalSwap(SlideNodeArchive_SlideSpecificHyperlinkMapEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.infoorstorageidstring_.InternalSwap(&other->_impl_.infoorstorageidstring_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.slidenodeidstring_, lhs_arena,
      &other->_impl_.slidenodeidstring_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideNodeArchive_SlideSpecificHyperlinkMapEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[17]);
}

// ===================================================================

class SlideNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideNodeArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& slide(const SlideNodeArchive* msg);
  static void set_has_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_thumbnailsaredirty(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ishidden(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_iscollapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_iscollapsedinoutlineview(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hasbodyinoutlineview(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hasbuilds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hastransition(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_hasnote(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_isslidenumbervisible(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_uniqueidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_copyfromslideidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slidespecifichyperlinkcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_build_event_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_build_event_count_cache_version(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_build_event_count_is_up_to_date(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_has_explicit_builds(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_has_explicit_builds_cache_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_has_explicit_builds_is_up_to_date(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_background_is_no_fill_or_color_fill_with_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::UUID& template_slide_id(const SlideNodeArchive* msg);
  static void set_has_template_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& database_thumbnail(const SlideNodeArchive* msg);
  static void set_has_database_thumbnail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000c40) ^ 0x00000c40) != 0;
  }
};

const ::TSP::Reference&
SlideNodeArchive::_Internal::slide(const SlideNodeArchive* msg) {
  return *msg->_impl_.slide_;
}
const ::TSP::UUID&
SlideNodeArchive::_Internal::template_slide_id(const SlideNodeArchive* msg) {
  return *msg->_impl_.template_slide_id_;
}
const ::TSP::Reference&
SlideNodeArchive::_Internal::database_thumbnail(const SlideNodeArchive* msg) {
  return *msg->_impl_.database_thumbnail_;
}
void SlideNodeArchive::clear_children() {
  _impl_.children_.Clear();
}
void SlideNodeArchive::clear_slide() {
  if (_impl_.slide_ != nullptr) _impl_.slide_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SlideNodeArchive::clear_thumbnails() {
  _impl_.thumbnails_.Clear();
}
void SlideNodeArchive::clear_thumbnailsizes() {
  _impl_.thumbnailsizes_.Clear();
}
void SlideNodeArchive::clear_template_slide_id() {
  if (_impl_.template_slide_id_ != nullptr) _impl_.template_slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void SlideNodeArchive::clear_live_video_source_ids() {
  _impl_.live_video_source_ids_.Clear();
}
void SlideNodeArchive::clear_database_thumbnail() {
  if (_impl_.database_thumbnail_ != nullptr) _impl_.database_thumbnail_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SlideNodeArchive::clear_database_thumbnails() {
  _impl_.database_thumbnails_.Clear();
}
SlideNodeArchive::SlideNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideNodeArchive)
}
SlideNodeArchive::SlideNodeArchive(const SlideNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.database_thumbnails_){from._impl_.database_thumbnails_}
    , decltype(_impl_.thumbnailsizes_){from._impl_.thumbnailsizes_}
    , decltype(_impl_.thumbnails_){from._impl_.thumbnails_}
    , decltype(_impl_.slidespecifichyperlinkmap_){from._impl_.slidespecifichyperlinkmap_}
    , decltype(_impl_.digests_for_datas_needing_download_for_thumbnail_){from._impl_.digests_for_datas_needing_download_for_thumbnail_}
    , decltype(_impl_.live_video_source_ids_){from._impl_.live_video_source_ids_}
    , decltype(_impl_.live_video_source_usage_entries_){from._impl_.live_video_source_usage_entries_}
    , decltype(_impl_.uniqueidentifier_){}
    , decltype(_impl_.copyfromslideidentifier_){}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.database_thumbnail_){nullptr}
    , decltype(_impl_.template_slide_id_){nullptr}
    , decltype(_impl_.thumbnailsaredirty_){}
    , decltype(_impl_.ishidden_){}
    , decltype(_impl_.iscollapsed_){}
    , decltype(_impl_.iscollapsedinoutlineview_){}
    , decltype(_impl_.hasbodyinoutlineview_){}
    , decltype(_impl_.hasbuilds_){}
    , decltype(_impl_.hastransition_){}
    , decltype(_impl_.hasnote_){}
    , decltype(_impl_.slidespecifichyperlinkcount_){}
    , decltype(_impl_.build_event_count_){}
    , decltype(_impl_.isslidenumbervisible_){}
    , decltype(_impl_.build_event_count_is_up_to_date_){}
    , decltype(_impl_.has_explicit_builds_){}
    , decltype(_impl_.has_explicit_builds_is_up_to_date_){}
    , decltype(_impl_.build_event_count_cache_version_){}
    , decltype(_impl_.has_explicit_builds_cache_version_){}
    , decltype(_impl_.background_is_no_fill_or_color_fill_with_alpha_){}
    , decltype(_impl_.depth_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uniqueidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uniqueidentifier()) {
    _this->_impl_.uniqueidentifier_.Set(from._internal_uniqueidentifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.copyfromslideidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyfromslideidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_copyfromslideidentifier()) {
    _this->_impl_.copyfromslideidentifier_.Set(from._internal_copyfromslideidentifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_slide()) {
    _this->_impl_.slide_ = new ::TSP::Reference(*from._impl_.slide_);
  }
  if (from._internal_has_database_thumbnail()) {
    _this->_impl_.database_thumbnail_ = new ::TSP::Reference(*from._impl_.database_thumbnail_);
  }
  if (from._internal_has_template_slide_id()) {
    _this->_impl_.template_slide_id_ = new ::TSP::UUID(*from._impl_.template_slide_id_);
  }
  ::memcpy(&_impl_.thumbnailsaredirty_, &from._impl_.thumbnailsaredirty_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.depth_) -
    reinterpret_cast<char*>(&_impl_.thumbnailsaredirty_)) + sizeof(_impl_.depth_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideNodeArchive)
}

inline void SlideNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.database_thumbnails_){arena}
    , decltype(_impl_.thumbnailsizes_){arena}
    , decltype(_impl_.thumbnails_){arena}
    , decltype(_impl_.slidespecifichyperlinkmap_){arena}
    , decltype(_impl_.digests_for_datas_needing_download_for_thumbnail_){arena}
    , decltype(_impl_.live_video_source_ids_){arena}
    , decltype(_impl_.live_video_source_usage_entries_){arena}
    , decltype(_impl_.uniqueidentifier_){}
    , decltype(_impl_.copyfromslideidentifier_){}
    , decltype(_impl_.slide_){nullptr}
    , decltype(_impl_.database_thumbnail_){nullptr}
    , decltype(_impl_.template_slide_id_){nullptr}
    , decltype(_impl_.thumbnailsaredirty_){false}
    , decltype(_impl_.ishidden_){false}
    , decltype(_impl_.iscollapsed_){false}
    , decltype(_impl_.iscollapsedinoutlineview_){false}
    , decltype(_impl_.hasbodyinoutlineview_){false}
    , decltype(_impl_.hasbuilds_){false}
    , decltype(_impl_.hastransition_){false}
    , decltype(_impl_.hasnote_){false}
    , decltype(_impl_.slidespecifichyperlinkcount_){0u}
    , decltype(_impl_.build_event_count_){0u}
    , decltype(_impl_.isslidenumbervisible_){false}
    , decltype(_impl_.build_event_count_is_up_to_date_){false}
    , decltype(_impl_.has_explicit_builds_){false}
    , decltype(_impl_.has_explicit_builds_is_up_to_date_){false}
    , decltype(_impl_.build_event_count_cache_version_){0u}
    , decltype(_impl_.has_explicit_builds_cache_version_){0u}
    , decltype(_impl_.background_is_no_fill_or_color_fill_with_alpha_){false}
    , decltype(_impl_.depth_){1u}
  };
  _impl_.uniqueidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uniqueidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.copyfromslideidentifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.copyfromslideidentifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SlideNodeArchive::~SlideNodeArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  _impl_.database_thumbnails_.~RepeatedPtrField();
  _impl_.thumbnailsizes_.~RepeatedPtrField();
  _impl_.thumbnails_.~RepeatedPtrField();
  _impl_.slidespecifichyperlinkmap_.~RepeatedPtrField();
  _impl_.digests_for_datas_needing_download_for_thumbnail_.~RepeatedPtrField();
  _impl_.live_video_source_ids_.~RepeatedPtrField();
  _impl_.live_video_source_usage_entries_.~RepeatedPtrField();
  _impl_.uniqueidentifier_.Destroy();
  _impl_.copyfromslideidentifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.slide_;
  if (this != internal_default_instance()) delete _impl_.database_thumbnail_;
  if (this != internal_default_instance()) delete _impl_.template_slide_id_;
}

void SlideNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_.database_thumbnails_.Clear();
  _impl_.thumbnailsizes_.Clear();
  _impl_.thumbnails_.Clear();
  _impl_.slidespecifichyperlinkmap_.Clear();
  _impl_.digests_for_datas_needing_download_for_thumbnail_.Clear();
  _impl_.live_video_source_ids_.Clear();
  _impl_.live_video_source_usage_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uniqueidentifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.copyfromslideidentifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slide_ != nullptr);
      _impl_.slide_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.database_thumbnail_ != nullptr);
      _impl_.database_thumbnail_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.template_slide_id_ != nullptr);
      _impl_.template_slide_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.thumbnailsaredirty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.iscollapsed_) -
        reinterpret_cast<char*>(&_impl_.thumbnailsaredirty_)) + sizeof(_impl_.iscollapsed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.iscollapsedinoutlineview_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isslidenumbervisible_) -
        reinterpret_cast<char*>(&_impl_.iscollapsedinoutlineview_)) + sizeof(_impl_.isslidenumbervisible_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.build_event_count_is_up_to_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.background_is_no_fill_or_color_fill_with_alpha_) -
        reinterpret_cast<char*>(&_impl_.build_event_count_is_up_to_date_)) + sizeof(_impl_.background_is_no_fill_or_color_fill_with_alpha_));
    _impl_.depth_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference slide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference database_thumbnail = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_thumbnail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool isHidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ishidden(&has_bits);
          _impl_.ishidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isCollapsed = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_iscollapsed(&has_bits);
          _impl_.iscollapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool hasBuilds = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_hasbuilds(&has_bits);
          _impl_.hasbuilds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool hasTransition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_hastransition(&has_bits);
          _impl_.hastransition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hasNote = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_hasnote(&has_bits);
          _impl_.hasnote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference database_thumbnails = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_database_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Size thumbnailSizes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thumbnailsizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string uniqueIdentifier = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_uniqueidentifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideNodeArchive.uniqueIdentifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string copyFromSlideIdentifier = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_copyfromslideidentifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.SlideNodeArchive.copyFromSlideIdentifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slideSpecificHyperlinkCount = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_slidespecifichyperlinkcount(&has_bits);
          _impl_.slidespecifichyperlinkcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool thumbnailsAreDirty = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_thumbnailsaredirty(&has_bits);
          _impl_.thumbnailsaredirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 build_event_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_build_event_count(&has_bits);
          _impl_.build_event_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataReference thumbnails = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool isCollapsedInOutlineView = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_iscollapsedinoutlineview(&has_bits);
          _impl_.iscollapsedinoutlineview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isSlideNumberVisible = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_isslidenumbervisible(&has_bits);
          _impl_.isslidenumbervisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hasBodyInOutlineView = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_hasbodyinoutlineview(&has_bits);
          _impl_.hasbodyinoutlineview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_explicit_builds = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_has_explicit_builds(&has_bits);
          _impl_.has_explicit_builds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 depth = 21 [default = 1];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_depth(&has_bits);
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool build_event_count_is_up_to_date = 22 [deprecated = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_build_event_count_is_up_to_date(&has_bits);
          _impl_.build_event_count_is_up_to_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_explicit_builds_is_up_to_date = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_has_explicit_builds_is_up_to_date(&has_bits);
          _impl_.has_explicit_builds_is_up_to_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry slideSpecificHyperlinkMap = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_slidespecifichyperlinkmap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string digests_for_datas_needing_download_for_thumbnail = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_digests_for_datas_needing_download_for_thumbnail();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 build_event_count_cache_version = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_build_event_count_cache_version(&has_bits);
          _impl_.build_event_count_cache_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 has_explicit_builds_cache_version = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_has_explicit_builds_cache_version(&has_bits);
          _impl_.has_explicit_builds_cache_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool background_is_no_fill_or_color_fill_with_alpha = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_background_is_no_fill_or_color_fill_with_alpha(&has_bits);
          _impl_.background_is_no_fill_or_color_fill_with_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID template_slide_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID live_video_source_ids = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_live_video_source_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.LiveVideoSourceUsageEntry live_video_source_usage_entries = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_live_video_source_usage_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference slide = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide(this),
        _Internal::slide(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference database_thumbnail = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::database_thumbnail(this),
        _Internal::database_thumbnail(this).GetCachedSize(), target, stream);
  }

  // required bool isHidden = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_ishidden(), target);
  }

  // optional bool isCollapsed = 5 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_iscollapsed(), target);
  }

  // required bool hasBuilds = 6 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_hasbuilds(), target);
  }

  // required bool hasTransition = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_hastransition(), target);
  }

  // optional bool hasNote = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_hasnote(), target);
  }

  // repeated .TSP.Reference database_thumbnails = 9 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_database_thumbnails_size()); i < n; i++) {
    const auto& repfield = this->_internal_database_thumbnails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Size thumbnailSizes = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_thumbnailsizes_size()); i < n; i++) {
    const auto& repfield = this->_internal_thumbnailsizes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string uniqueIdentifier = 11 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uniqueidentifier().data(), static_cast<int>(this->_internal_uniqueidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.uniqueIdentifier");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_uniqueidentifier(), target);
  }

  // optional string copyFromSlideIdentifier = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_copyfromslideidentifier().data(), static_cast<int>(this->_internal_copyfromslideidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.copyFromSlideIdentifier");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_copyfromslideidentifier(), target);
  }

  // optional uint32 slideSpecificHyperlinkCount = 13 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_slidespecifichyperlinkcount(), target);
  }

  // optional bool thumbnailsAreDirty = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_thumbnailsaredirty(), target);
  }

  // optional uint32 build_event_count = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_build_event_count(), target);
  }

  // repeated .TSP.DataReference thumbnails = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_thumbnails_size()); i < n; i++) {
    const auto& repfield = this->_internal_thumbnails(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool isCollapsedInOutlineView = 17 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_iscollapsedinoutlineview(), target);
  }

  // optional bool isSlideNumberVisible = 18 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_isslidenumbervisible(), target);
  }

  // optional bool hasBodyInOutlineView = 19 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_hasbodyinoutlineview(), target);
  }

  // optional bool has_explicit_builds = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_has_explicit_builds(), target);
  }

  // optional uint32 depth = 21 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_depth(), target);
  }

  // optional bool build_event_count_is_up_to_date = 22 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_build_event_count_is_up_to_date(), target);
  }

  // optional bool has_explicit_builds_is_up_to_date = 23 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_has_explicit_builds_is_up_to_date(), target);
  }

  // repeated .KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry slideSpecificHyperlinkMap = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slidespecifichyperlinkmap_size()); i < n; i++) {
    const auto& repfield = this->_internal_slidespecifichyperlinkmap(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string digests_for_datas_needing_download_for_thumbnail = 25;
  for (int i = 0, n = this->_internal_digests_for_datas_needing_download_for_thumbnail_size(); i < n; i++) {
    const auto& s = this->_internal_digests_for_datas_needing_download_for_thumbnail(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.SlideNodeArchive.digests_for_datas_needing_download_for_thumbnail");
    target = stream->WriteString(25, s, target);
  }

  // optional uint32 build_event_count_cache_version = 26;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_build_event_count_cache_version(), target);
  }

  // optional uint32 has_explicit_builds_cache_version = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_has_explicit_builds_cache_version(), target);
  }

  // optional bool background_is_no_fill_or_color_fill_with_alpha = 28;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_background_is_no_fill_or_color_fill_with_alpha(), target);
  }

  // optional .TSP.UUID template_slide_id = 29;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::template_slide_id(this),
        _Internal::template_slide_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID live_video_source_ids = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_live_video_source_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_live_video_source_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.LiveVideoSourceUsageEntry live_video_source_usage_entries = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_live_video_source_usage_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_live_video_source_usage_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideNodeArchive)
  return target;
}

size_t SlideNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideNodeArchive)
  size_t total_size = 0;

  if (_internal_has_ishidden()) {
    // required bool isHidden = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_hasbuilds()) {
    // required bool hasBuilds = 6 [deprecated = true];
    total_size += 1 + 1;
  }

  if (_internal_has_hastransition()) {
    // required bool hasTransition = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SlideNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000c40) ^ 0x00000c40) == 0) {  // All required fields are present.
    // required bool isHidden = 4;
    total_size += 1 + 1;

    // required bool hasBuilds = 6 [deprecated = true];
    total_size += 1 + 1;

    // required bool hasTransition = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 1;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference database_thumbnails = 9 [deprecated = true];
  total_size += 1UL * this->_internal_database_thumbnails_size();
  for (const auto& msg : this->_impl_.database_thumbnails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Size thumbnailSizes = 10;
  total_size += 1UL * this->_internal_thumbnailsizes_size();
  for (const auto& msg : this->_impl_.thumbnailsizes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.DataReference thumbnails = 16;
  total_size += 2UL * this->_internal_thumbnails_size();
  for (const auto& msg : this->_impl_.thumbnails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry slideSpecificHyperlinkMap = 24;
  total_size += 2UL * this->_internal_slidespecifichyperlinkmap_size();
  for (const auto& msg : this->_impl_.slidespecifichyperlinkmap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string digests_for_datas_needing_download_for_thumbnail = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.digests_for_datas_needing_download_for_thumbnail_.size());
  for (int i = 0, n = _impl_.digests_for_datas_needing_download_for_thumbnail_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.digests_for_datas_needing_download_for_thumbnail_.Get(i));
  }

  // repeated .TSP.UUID live_video_source_ids = 30;
  total_size += 2UL * this->_internal_live_video_source_ids_size();
  for (const auto& msg : this->_impl_.live_video_source_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.LiveVideoSourceUsageEntry live_video_source_usage_entries = 31;
  total_size += 2UL * this->_internal_live_video_source_usage_entries_size();
  for (const auto& msg : this->_impl_.live_video_source_usage_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string uniqueIdentifier = 11 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uniqueidentifier());
    }

    // optional string copyFromSlideIdentifier = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_copyfromslideidentifier());
    }

    // optional .TSP.Reference slide = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_);
    }

    // optional .TSP.Reference database_thumbnail = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_thumbnail_);
    }

    // optional .TSP.UUID template_slide_id = 29;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.template_slide_id_);
    }

    // optional bool thumbnailsAreDirty = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  // optional bool isCollapsed = 5 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x00000300u) {
    // optional bool isCollapsedInOutlineView = 17 [deprecated = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool hasBodyInOutlineView = 19 [deprecated = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000f000u) {
    // optional bool hasNote = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 slideSpecificHyperlinkCount = 13 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slidespecifichyperlinkcount());
    }

    // optional uint32 build_event_count = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_build_event_count());
    }

    // optional bool isSlideNumberVisible = 18 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool build_event_count_is_up_to_date = 22 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool has_explicit_builds = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool has_explicit_builds_is_up_to_date = 23 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional uint32 build_event_count_cache_version = 26;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_build_event_count_cache_version());
    }

    // optional uint32 has_explicit_builds_cache_version = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_has_explicit_builds_cache_version());
    }

    // optional bool background_is_no_fill_or_color_fill_with_alpha = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional uint32 depth = 21 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_depth());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideNodeArchive::GetClassData() const { return &_class_data_; }


void SlideNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideNodeArchive*>(&to_msg);
  auto& from = static_cast<const SlideNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  _this->_impl_.database_thumbnails_.MergeFrom(from._impl_.database_thumbnails_);
  _this->_impl_.thumbnailsizes_.MergeFrom(from._impl_.thumbnailsizes_);
  _this->_impl_.thumbnails_.MergeFrom(from._impl_.thumbnails_);
  _this->_impl_.slidespecifichyperlinkmap_.MergeFrom(from._impl_.slidespecifichyperlinkmap_);
  _this->_impl_.digests_for_datas_needing_download_for_thumbnail_.MergeFrom(from._impl_.digests_for_datas_needing_download_for_thumbnail_);
  _this->_impl_.live_video_source_ids_.MergeFrom(from._impl_.live_video_source_ids_);
  _this->_impl_.live_video_source_usage_entries_.MergeFrom(from._impl_.live_video_source_usage_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uniqueidentifier(from._internal_uniqueidentifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_copyfromslideidentifier(from._internal_copyfromslideidentifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slide()->::TSP::Reference::MergeFrom(
          from._internal_slide());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_database_thumbnail()->::TSP::Reference::MergeFrom(
          from._internal_database_thumbnail());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_template_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_template_slide_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.thumbnailsaredirty_ = from._impl_.thumbnailsaredirty_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ishidden_ = from._impl_.ishidden_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.iscollapsed_ = from._impl_.iscollapsed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.iscollapsedinoutlineview_ = from._impl_.iscollapsedinoutlineview_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.hasbodyinoutlineview_ = from._impl_.hasbodyinoutlineview_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.hasbuilds_ = from._impl_.hasbuilds_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.hastransition_ = from._impl_.hastransition_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.hasnote_ = from._impl_.hasnote_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.slidespecifichyperlinkcount_ = from._impl_.slidespecifichyperlinkcount_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.build_event_count_ = from._impl_.build_event_count_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.isslidenumbervisible_ = from._impl_.isslidenumbervisible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.build_event_count_is_up_to_date_ = from._impl_.build_event_count_is_up_to_date_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.has_explicit_builds_ = from._impl_.has_explicit_builds_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.has_explicit_builds_is_up_to_date_ = from._impl_.has_explicit_builds_is_up_to_date_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.build_event_count_cache_version_ = from._impl_.build_event_count_cache_version_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.has_explicit_builds_cache_version_ = from._impl_.has_explicit_builds_cache_version_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.background_is_no_fill_or_color_fill_with_alpha_ = from._impl_.background_is_no_fill_or_color_fill_with_alpha_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.depth_ = from._impl_.depth_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideNodeArchive::CopyFrom(const SlideNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.children_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.database_thumbnails_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.thumbnailsizes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.thumbnails_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slidespecifichyperlinkmap_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.live_video_source_ids_))
    return false;
  if (_internal_has_slide()) {
    if (!_impl_.slide_->IsInitialized()) return false;
  }
  if (_internal_has_database_thumbnail()) {
    if (!_impl_.database_thumbnail_->IsInitialized()) return false;
  }
  if (_internal_has_template_slide_id()) {
    if (!_impl_.template_slide_id_->IsInitialized()) return false;
  }
  return true;
}

void SlideNodeArchive::InternalSwap(SlideNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  _impl_.database_thumbnails_.InternalSwap(&other->_impl_.database_thumbnails_);
  _impl_.thumbnailsizes_.InternalSwap(&other->_impl_.thumbnailsizes_);
  _impl_.thumbnails_.InternalSwap(&other->_impl_.thumbnails_);
  _impl_.slidespecifichyperlinkmap_.InternalSwap(&other->_impl_.slidespecifichyperlinkmap_);
  _impl_.digests_for_datas_needing_download_for_thumbnail_.InternalSwap(&other->_impl_.digests_for_datas_needing_download_for_thumbnail_);
  _impl_.live_video_source_ids_.InternalSwap(&other->_impl_.live_video_source_ids_);
  _impl_.live_video_source_usage_entries_.InternalSwap(&other->_impl_.live_video_source_usage_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uniqueidentifier_, lhs_arena,
      &other->_impl_.uniqueidentifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.copyfromslideidentifier_, lhs_arena,
      &other->_impl_.copyfromslideidentifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideNodeArchive, _impl_.background_is_no_fill_or_color_fill_with_alpha_)
      + sizeof(SlideNodeArchive::_impl_.background_is_no_fill_or_color_fill_with_alpha_)
      - PROTOBUF_FIELD_OFFSET(SlideNodeArchive, _impl_.slide_)>(
          reinterpret_cast<char*>(&_impl_.slide_),
          reinterpret_cast<char*>(&other->_impl_.slide_));
  swap(_impl_.depth_, other->_impl_.depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[18]);
}

// ===================================================================

class DesktopUILayoutArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DesktopUILayoutArchive>()._impl_._has_bits_);
  static void set_has_sidebar_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sidebar_view_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notes_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_light_table_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inspector_pane_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_inspector_pane_view_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_showing_template_slides(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inspector_pane_autohidden(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_element_list_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_activity_stream_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_activity_stream_was_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

DesktopUILayoutArchive::DesktopUILayoutArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.DesktopUILayoutArchive)
}
DesktopUILayoutArchive::DesktopUILayoutArchive(const DesktopUILayoutArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DesktopUILayoutArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sidebar_view_mode_){}
    , decltype(_impl_.sidebar_visible_){}
    , decltype(_impl_.notes_visible_){}
    , decltype(_impl_.light_table_visible_){}
    , decltype(_impl_.showing_template_slides_){}
    , decltype(_impl_.inspector_pane_view_mode_){}
    , decltype(_impl_.inspector_pane_autohidden_){}
    , decltype(_impl_.element_list_visible_){}
    , decltype(_impl_.activity_stream_visible_){}
    , decltype(_impl_.activity_stream_was_visible_){}
    , decltype(_impl_.inspector_pane_visible_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sidebar_view_mode_, &from._impl_.sidebar_view_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inspector_pane_visible_) -
    reinterpret_cast<char*>(&_impl_.sidebar_view_mode_)) + sizeof(_impl_.inspector_pane_visible_));
  // @@protoc_insertion_point(copy_constructor:KN.DesktopUILayoutArchive)
}

inline void DesktopUILayoutArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sidebar_view_mode_){0}
    , decltype(_impl_.sidebar_visible_){false}
    , decltype(_impl_.notes_visible_){false}
    , decltype(_impl_.light_table_visible_){false}
    , decltype(_impl_.showing_template_slides_){false}
    , decltype(_impl_.inspector_pane_view_mode_){0}
    , decltype(_impl_.inspector_pane_autohidden_){false}
    , decltype(_impl_.element_list_visible_){false}
    , decltype(_impl_.activity_stream_visible_){false}
    , decltype(_impl_.activity_stream_was_visible_){false}
    , decltype(_impl_.inspector_pane_visible_){true}
  };
}

DesktopUILayoutArchive::~DesktopUILayoutArchive() {
  // @@protoc_insertion_point(destructor:KN.DesktopUILayoutArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DesktopUILayoutArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DesktopUILayoutArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DesktopUILayoutArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.DesktopUILayoutArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.sidebar_view_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.element_list_visible_) -
        reinterpret_cast<char*>(&_impl_.sidebar_view_mode_)) + sizeof(_impl_.element_list_visible_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.activity_stream_visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.activity_stream_was_visible_) -
        reinterpret_cast<char*>(&_impl_.activity_stream_visible_)) + sizeof(_impl_.activity_stream_was_visible_));
    _impl_.inspector_pane_visible_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DesktopUILayoutArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool sidebar_visible = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sidebar_visible(&has_bits);
          _impl_.sidebar_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::DesktopUILayoutArchive_SidebarViewMode_IsValid(val))) {
            _internal_set_sidebar_view_mode(static_cast<::KN::DesktopUILayoutArchive_SidebarViewMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool notes_visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_notes_visible(&has_bits);
          _impl_.notes_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool light_table_visible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_light_table_visible(&has_bits);
          _impl_.light_table_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inspector_pane_visible = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_inspector_pane_visible(&has_bits);
          _impl_.inspector_pane_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(val))) {
            _internal_set_inspector_pane_view_mode(static_cast<::KN::DesktopUILayoutArchive_InspectorPaneViewMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool showing_template_slides = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_showing_template_slides(&has_bits);
          _impl_.showing_template_slides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inspector_pane_autohidden = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_inspector_pane_autohidden(&has_bits);
          _impl_.inspector_pane_autohidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool element_list_visible = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_element_list_visible(&has_bits);
          _impl_.element_list_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool activity_stream_visible = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_activity_stream_visible(&has_bits);
          _impl_.activity_stream_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool activity_stream_was_visible = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_activity_stream_was_visible(&has_bits);
          _impl_.activity_stream_was_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DesktopUILayoutArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.DesktopUILayoutArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool sidebar_visible = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_sidebar_visible(), target);
  }

  // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sidebar_view_mode(), target);
  }

  // optional bool notes_visible = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_notes_visible(), target);
  }

  // optional bool light_table_visible = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_light_table_visible(), target);
  }

  // optional bool inspector_pane_visible = 6 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_inspector_pane_visible(), target);
  }

  // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_inspector_pane_view_mode(), target);
  }

  // optional bool showing_template_slides = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_showing_template_slides(), target);
  }

  // optional bool inspector_pane_autohidden = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_inspector_pane_autohidden(), target);
  }

  // optional bool element_list_visible = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_element_list_visible(), target);
  }

  // optional bool activity_stream_visible = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_activity_stream_visible(), target);
  }

  // optional bool activity_stream_was_visible = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_activity_stream_was_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.DesktopUILayoutArchive)
  return target;
}

size_t DesktopUILayoutArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.DesktopUILayoutArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sidebar_view_mode());
    }

    // optional bool sidebar_visible = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool notes_visible = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool light_table_visible = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool showing_template_slides = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_inspector_pane_view_mode());
    }

    // optional bool inspector_pane_autohidden = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool element_list_visible = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool activity_stream_visible = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool activity_stream_was_visible = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool inspector_pane_visible = 6 [default = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DesktopUILayoutArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DesktopUILayoutArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DesktopUILayoutArchive::GetClassData() const { return &_class_data_; }


void DesktopUILayoutArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DesktopUILayoutArchive*>(&to_msg);
  auto& from = static_cast<const DesktopUILayoutArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.DesktopUILayoutArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sidebar_view_mode_ = from._impl_.sidebar_view_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sidebar_visible_ = from._impl_.sidebar_visible_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.notes_visible_ = from._impl_.notes_visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.light_table_visible_ = from._impl_.light_table_visible_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.showing_template_slides_ = from._impl_.showing_template_slides_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.inspector_pane_view_mode_ = from._impl_.inspector_pane_view_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.inspector_pane_autohidden_ = from._impl_.inspector_pane_autohidden_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.element_list_visible_ = from._impl_.element_list_visible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.activity_stream_visible_ = from._impl_.activity_stream_visible_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.activity_stream_was_visible_ = from._impl_.activity_stream_was_visible_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.inspector_pane_visible_ = from._impl_.inspector_pane_visible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DesktopUILayoutArchive::CopyFrom(const DesktopUILayoutArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.DesktopUILayoutArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopUILayoutArchive::IsInitialized() const {
  return true;
}

void DesktopUILayoutArchive::InternalSwap(DesktopUILayoutArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DesktopUILayoutArchive, _impl_.activity_stream_was_visible_)
      + sizeof(DesktopUILayoutArchive::_impl_.activity_stream_was_visible_)
      - PROTOBUF_FIELD_OFFSET(DesktopUILayoutArchive, _impl_.sidebar_view_mode_)>(
          reinterpret_cast<char*>(&_impl_.sidebar_view_mode_),
          reinterpret_cast<char*>(&other->_impl_.sidebar_view_mode_));
  swap(_impl_.inspector_pane_visible_, other->_impl_.inspector_pane_visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DesktopUILayoutArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[19]);
}

// ===================================================================

class UIStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<UIStateArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& slidenodetoedit(const UIStateArchive* msg);
  static void set_has_slidenodetoedit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& deprecated_template_slide_node_to_apply(const UIStateArchive* msg);
  static void set_has_deprecated_template_slide_node_to_apply(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Size& deprecated_slidethumbnailsize(const UIStateArchive* msg);
  static void set_has_deprecated_slidethumbnailsize(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_canvasviewscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::Point& canvasoffset(const UIStateArchive* msg);
  static void set_has_canvasoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iphonecanvasviewscale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::Point& iphonecanvasoffset(const UIStateArchive* msg);
  static void set_has_iphonecanvasoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iphone568canvasviewscale(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Point& iphone568canvasoffset(const UIStateArchive* msg);
  static void set_has_iphone568canvasoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& desktop_ui_layout(const UIStateArchive* msg);
  static void set_has_desktop_ui_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_desktop_slide_view_content_fits_window(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_desktop_canvas_view_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::Point& desktop_canvas_offset(const UIStateArchive* msg);
  static void set_has_desktop_canvas_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_light_table_zoom_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_show_slide_guides(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_show_template_guides(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_shows_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_comments_printing_toggle_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_shows_ruler(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_desktop_navigator_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_desktop_outline_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_desktop_outline_view_default_fixed(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSP::Size& desktop_main_content_size(const UIStateArchive* msg);
  static void set_has_desktop_main_content_size(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_desktop_presenter_notes_view_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSP::Point& desktop_main_window_origin(const UIStateArchive* msg);
  static void set_has_desktop_main_window_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_light_table_hides_skipped_slides(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSK::SelectionPathArchive& selection_path(const UIStateArchive* msg);
  static void set_has_selection_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_desktop_element_list_view_width(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_shows_mobile_light_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_mobile_light_table_zoom_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_mobile_light_table_hides_skipped_slides(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSP::Reference& freehand_drawing_toolkit_state(const UIStateArchive* msg);
  static void set_has_freehand_drawing_toolkit_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& selection_path_transformer(const UIStateArchive* msg);
  static void set_has_selection_path_transformer(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_shows_mobile_outline(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_editing_disabled(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_desktop_activity_stream_view_width(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
};

const ::TSP::Reference&
UIStateArchive::_Internal::slidenodetoedit(const UIStateArchive* msg) {
  return *msg->_impl_.slidenodetoedit_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::deprecated_template_slide_node_to_apply(const UIStateArchive* msg) {
  return *msg->_impl_.deprecated_template_slide_node_to_apply_;
}
const ::TSP::Size&
UIStateArchive::_Internal::deprecated_slidethumbnailsize(const UIStateArchive* msg) {
  return *msg->_impl_.deprecated_slidethumbnailsize_;
}
const ::TSP::Point&
UIStateArchive::_Internal::canvasoffset(const UIStateArchive* msg) {
  return *msg->_impl_.canvasoffset_;
}
const ::TSP::Point&
UIStateArchive::_Internal::iphonecanvasoffset(const UIStateArchive* msg) {
  return *msg->_impl_.iphonecanvasoffset_;
}
const ::TSP::Point&
UIStateArchive::_Internal::iphone568canvasoffset(const UIStateArchive* msg) {
  return *msg->_impl_.iphone568canvasoffset_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::desktop_ui_layout(const UIStateArchive* msg) {
  return *msg->_impl_.desktop_ui_layout_;
}
const ::TSP::Point&
UIStateArchive::_Internal::desktop_canvas_offset(const UIStateArchive* msg) {
  return *msg->_impl_.desktop_canvas_offset_;
}
const ::TSP::Size&
UIStateArchive::_Internal::desktop_main_content_size(const UIStateArchive* msg) {
  return *msg->_impl_.desktop_main_content_size_;
}
const ::TSP::Point&
UIStateArchive::_Internal::desktop_main_window_origin(const UIStateArchive* msg) {
  return *msg->_impl_.desktop_main_window_origin_;
}
const ::TSK::SelectionPathArchive&
UIStateArchive::_Internal::selection_path(const UIStateArchive* msg) {
  return *msg->_impl_.selection_path_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::freehand_drawing_toolkit_state(const UIStateArchive* msg) {
  return *msg->_impl_.freehand_drawing_toolkit_state_;
}
const ::TSP::Reference&
UIStateArchive::_Internal::selection_path_transformer(const UIStateArchive* msg) {
  return *msg->_impl_.selection_path_transformer_;
}
void UIStateArchive::clear_slidenodetoedit() {
  if (_impl_.slidenodetoedit_ != nullptr) _impl_.slidenodetoedit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UIStateArchive::clear_deprecated_template_slide_node_to_apply() {
  if (_impl_.deprecated_template_slide_node_to_apply_ != nullptr) _impl_.deprecated_template_slide_node_to_apply_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void UIStateArchive::clear_deprecated_slidethumbnailsize() {
  if (_impl_.deprecated_slidethumbnailsize_ != nullptr) _impl_.deprecated_slidethumbnailsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void UIStateArchive::clear_canvasoffset() {
  if (_impl_.canvasoffset_ != nullptr) _impl_.canvasoffset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void UIStateArchive::clear_selectedslidenodes() {
  _impl_.selectedslidenodes_.Clear();
}
void UIStateArchive::clear_iphonecanvasoffset() {
  if (_impl_.iphonecanvasoffset_ != nullptr) _impl_.iphonecanvasoffset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void UIStateArchive::clear_iphone568canvasoffset() {
  if (_impl_.iphone568canvasoffset_ != nullptr) _impl_.iphone568canvasoffset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void UIStateArchive::clear_desktop_ui_layout() {
  if (_impl_.desktop_ui_layout_ != nullptr) _impl_.desktop_ui_layout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void UIStateArchive::clear_desktop_canvas_offset() {
  if (_impl_.desktop_canvas_offset_ != nullptr) _impl_.desktop_canvas_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void UIStateArchive::clear_chart_ui_state() {
  _impl_.chart_ui_state_.Clear();
}
void UIStateArchive::clear_collapsed_slide_nodes() {
  _impl_.collapsed_slide_nodes_.Clear();
}
void UIStateArchive::clear_outline_collapsed_slide_nodes() {
  _impl_.outline_collapsed_slide_nodes_.Clear();
}
void UIStateArchive::clear_outline_has_body_slide_nodes() {
  _impl_.outline_has_body_slide_nodes_.Clear();
}
void UIStateArchive::clear_desktop_main_content_size() {
  if (_impl_.desktop_main_content_size_ != nullptr) _impl_.desktop_main_content_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void UIStateArchive::clear_desktop_main_window_origin() {
  if (_impl_.desktop_main_window_origin_ != nullptr) _impl_.desktop_main_window_origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void UIStateArchive::clear_selection_path() {
  if (_impl_.selection_path_ != nullptr) _impl_.selection_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void UIStateArchive::clear_element_list_expanded_groups() {
  _impl_.element_list_expanded_groups_.Clear();
}
void UIStateArchive::clear_freehand_drawing_toolkit_state() {
  if (_impl_.freehand_drawing_toolkit_state_ != nullptr) _impl_.freehand_drawing_toolkit_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void UIStateArchive::clear_selection_path_transformer() {
  if (_impl_.selection_path_transformer_ != nullptr) _impl_.selection_path_transformer_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
UIStateArchive::UIStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.UIStateArchive)
}
UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UIStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedslidenodes_){from._impl_.selectedslidenodes_}
    , decltype(_impl_.chart_ui_state_){from._impl_.chart_ui_state_}
    , decltype(_impl_.collapsed_slide_nodes_){from._impl_.collapsed_slide_nodes_}
    , decltype(_impl_.outline_collapsed_slide_nodes_){from._impl_.outline_collapsed_slide_nodes_}
    , decltype(_impl_.outline_has_body_slide_nodes_){from._impl_.outline_has_body_slide_nodes_}
    , decltype(_impl_.element_list_expanded_groups_){from._impl_.element_list_expanded_groups_}
    , decltype(_impl_.slidenodetoedit_){nullptr}
    , decltype(_impl_.deprecated_template_slide_node_to_apply_){nullptr}
    , decltype(_impl_.deprecated_slidethumbnailsize_){nullptr}
    , decltype(_impl_.canvasoffset_){nullptr}
    , decltype(_impl_.iphonecanvasoffset_){nullptr}
    , decltype(_impl_.iphone568canvasoffset_){nullptr}
    , decltype(_impl_.desktop_ui_layout_){nullptr}
    , decltype(_impl_.desktop_canvas_offset_){nullptr}
    , decltype(_impl_.desktop_main_content_size_){nullptr}
    , decltype(_impl_.desktop_main_window_origin_){nullptr}
    , decltype(_impl_.selection_path_){nullptr}
    , decltype(_impl_.freehand_drawing_toolkit_state_){nullptr}
    , decltype(_impl_.selection_path_transformer_){nullptr}
    , decltype(_impl_.canvasviewscale_){}
    , decltype(_impl_.iphonecanvasviewscale_){}
    , decltype(_impl_.iphone568canvasviewscale_){}
    , decltype(_impl_.desktop_canvas_view_scale_){}
    , decltype(_impl_.light_table_zoom_scale_){}
    , decltype(_impl_.desktop_slide_view_content_fits_window_){}
    , decltype(_impl_.show_slide_guides_){}
    , decltype(_impl_.show_template_guides_){}
    , decltype(_impl_.shows_comments_){}
    , decltype(_impl_.desktop_navigator_view_width_){}
    , decltype(_impl_.desktop_outline_view_width_){}
    , decltype(_impl_.desktop_presenter_notes_view_height_){}
    , decltype(_impl_.comments_printing_toggle_enabled_){}
    , decltype(_impl_.shows_ruler_){}
    , decltype(_impl_.desktop_outline_view_default_fixed_){}
    , decltype(_impl_.light_table_hides_skipped_slides_){}
    , decltype(_impl_.desktop_element_list_view_width_){}
    , decltype(_impl_.mobile_light_table_zoom_scale_){}
    , decltype(_impl_.shows_mobile_light_table_){}
    , decltype(_impl_.mobile_light_table_hides_skipped_slides_){}
    , decltype(_impl_.shows_mobile_outline_){}
    , decltype(_impl_.editing_disabled_){}
    , decltype(_impl_.desktop_activity_stream_view_width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slidenodetoedit()) {
    _this->_impl_.slidenodetoedit_ = new ::TSP::Reference(*from._impl_.slidenodetoedit_);
  }
  if (from._internal_has_deprecated_template_slide_node_to_apply()) {
    _this->_impl_.deprecated_template_slide_node_to_apply_ = new ::TSP::Reference(*from._impl_.deprecated_template_slide_node_to_apply_);
  }
  if (from._internal_has_deprecated_slidethumbnailsize()) {
    _this->_impl_.deprecated_slidethumbnailsize_ = new ::TSP::Size(*from._impl_.deprecated_slidethumbnailsize_);
  }
  if (from._internal_has_canvasoffset()) {
    _this->_impl_.canvasoffset_ = new ::TSP::Point(*from._impl_.canvasoffset_);
  }
  if (from._internal_has_iphonecanvasoffset()) {
    _this->_impl_.iphonecanvasoffset_ = new ::TSP::Point(*from._impl_.iphonecanvasoffset_);
  }
  if (from._internal_has_iphone568canvasoffset()) {
    _this->_impl_.iphone568canvasoffset_ = new ::TSP::Point(*from._impl_.iphone568canvasoffset_);
  }
  if (from._internal_has_desktop_ui_layout()) {
    _this->_impl_.desktop_ui_layout_ = new ::TSP::Reference(*from._impl_.desktop_ui_layout_);
  }
  if (from._internal_has_desktop_canvas_offset()) {
    _this->_impl_.desktop_canvas_offset_ = new ::TSP::Point(*from._impl_.desktop_canvas_offset_);
  }
  if (from._internal_has_desktop_main_content_size()) {
    _this->_impl_.desktop_main_content_size_ = new ::TSP::Size(*from._impl_.desktop_main_content_size_);
  }
  if (from._internal_has_desktop_main_window_origin()) {
    _this->_impl_.desktop_main_window_origin_ = new ::TSP::Point(*from._impl_.desktop_main_window_origin_);
  }
  if (from._internal_has_selection_path()) {
    _this->_impl_.selection_path_ = new ::TSK::SelectionPathArchive(*from._impl_.selection_path_);
  }
  if (from._internal_has_freehand_drawing_toolkit_state()) {
    _this->_impl_.freehand_drawing_toolkit_state_ = new ::TSP::Reference(*from._impl_.freehand_drawing_toolkit_state_);
  }
  if (from._internal_has_selection_path_transformer()) {
    _this->_impl_.selection_path_transformer_ = new ::TSP::Reference(*from._impl_.selection_path_transformer_);
  }
  ::memcpy(&_impl_.canvasviewscale_, &from._impl_.canvasviewscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.desktop_activity_stream_view_width_) -
    reinterpret_cast<char*>(&_impl_.canvasviewscale_)) + sizeof(_impl_.desktop_activity_stream_view_width_));
  // @@protoc_insertion_point(copy_constructor:KN.UIStateArchive)
}

inline void UIStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.selectedslidenodes_){arena}
    , decltype(_impl_.chart_ui_state_){arena}
    , decltype(_impl_.collapsed_slide_nodes_){arena}
    , decltype(_impl_.outline_collapsed_slide_nodes_){arena}
    , decltype(_impl_.outline_has_body_slide_nodes_){arena}
    , decltype(_impl_.element_list_expanded_groups_){arena}
    , decltype(_impl_.slidenodetoedit_){nullptr}
    , decltype(_impl_.deprecated_template_slide_node_to_apply_){nullptr}
    , decltype(_impl_.deprecated_slidethumbnailsize_){nullptr}
    , decltype(_impl_.canvasoffset_){nullptr}
    , decltype(_impl_.iphonecanvasoffset_){nullptr}
    , decltype(_impl_.iphone568canvasoffset_){nullptr}
    , decltype(_impl_.desktop_ui_layout_){nullptr}
    , decltype(_impl_.desktop_canvas_offset_){nullptr}
    , decltype(_impl_.desktop_main_content_size_){nullptr}
    , decltype(_impl_.desktop_main_window_origin_){nullptr}
    , decltype(_impl_.selection_path_){nullptr}
    , decltype(_impl_.freehand_drawing_toolkit_state_){nullptr}
    , decltype(_impl_.selection_path_transformer_){nullptr}
    , decltype(_impl_.canvasviewscale_){0}
    , decltype(_impl_.iphonecanvasviewscale_){0}
    , decltype(_impl_.iphone568canvasviewscale_){0}
    , decltype(_impl_.desktop_canvas_view_scale_){0}
    , decltype(_impl_.light_table_zoom_scale_){0}
    , decltype(_impl_.desktop_slide_view_content_fits_window_){false}
    , decltype(_impl_.show_slide_guides_){false}
    , decltype(_impl_.show_template_guides_){false}
    , decltype(_impl_.shows_comments_){false}
    , decltype(_impl_.desktop_navigator_view_width_){0}
    , decltype(_impl_.desktop_outline_view_width_){0}
    , decltype(_impl_.desktop_presenter_notes_view_height_){0}
    , decltype(_impl_.comments_printing_toggle_enabled_){false}
    , decltype(_impl_.shows_ruler_){false}
    , decltype(_impl_.desktop_outline_view_default_fixed_){false}
    , decltype(_impl_.light_table_hides_skipped_slides_){false}
    , decltype(_impl_.desktop_element_list_view_width_){0}
    , decltype(_impl_.mobile_light_table_zoom_scale_){0}
    , decltype(_impl_.shows_mobile_light_table_){false}
    , decltype(_impl_.mobile_light_table_hides_skipped_slides_){false}
    , decltype(_impl_.shows_mobile_outline_){false}
    , decltype(_impl_.editing_disabled_){false}
    , decltype(_impl_.desktop_activity_stream_view_width_){0}
  };
}

UIStateArchive::~UIStateArchive() {
  // @@protoc_insertion_point(destructor:KN.UIStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UIStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.selectedslidenodes_.~RepeatedPtrField();
  _impl_.chart_ui_state_.~RepeatedPtrField();
  _impl_.collapsed_slide_nodes_.~RepeatedPtrField();
  _impl_.outline_collapsed_slide_nodes_.~RepeatedPtrField();
  _impl_.outline_has_body_slide_nodes_.~RepeatedPtrField();
  _impl_.element_list_expanded_groups_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.slidenodetoedit_;
  if (this != internal_default_instance()) delete _impl_.deprecated_template_slide_node_to_apply_;
  if (this != internal_default_instance()) delete _impl_.deprecated_slidethumbnailsize_;
  if (this != internal_default_instance()) delete _impl_.canvasoffset_;
  if (this != internal_default_instance()) delete _impl_.iphonecanvasoffset_;
  if (this != internal_default_instance()) delete _impl_.iphone568canvasoffset_;
  if (this != internal_default_instance()) delete _impl_.desktop_ui_layout_;
  if (this != internal_default_instance()) delete _impl_.desktop_canvas_offset_;
  if (this != internal_default_instance()) delete _impl_.desktop_main_content_size_;
  if (this != internal_default_instance()) delete _impl_.desktop_main_window_origin_;
  if (this != internal_default_instance()) delete _impl_.selection_path_;
  if (this != internal_default_instance()) delete _impl_.freehand_drawing_toolkit_state_;
  if (this != internal_default_instance()) delete _impl_.selection_path_transformer_;
}

void UIStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UIStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.UIStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.selectedslidenodes_.Clear();
  _impl_.chart_ui_state_.Clear();
  _impl_.collapsed_slide_nodes_.Clear();
  _impl_.outline_collapsed_slide_nodes_.Clear();
  _impl_.outline_has_body_slide_nodes_.Clear();
  _impl_.element_list_expanded_groups_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slidenodetoedit_ != nullptr);
      _impl_.slidenodetoedit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.deprecated_template_slide_node_to_apply_ != nullptr);
      _impl_.deprecated_template_slide_node_to_apply_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.deprecated_slidethumbnailsize_ != nullptr);
      _impl_.deprecated_slidethumbnailsize_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.canvasoffset_ != nullptr);
      _impl_.canvasoffset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.iphonecanvasoffset_ != nullptr);
      _impl_.iphonecanvasoffset_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.iphone568canvasoffset_ != nullptr);
      _impl_.iphone568canvasoffset_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.desktop_ui_layout_ != nullptr);
      _impl_.desktop_ui_layout_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.desktop_canvas_offset_ != nullptr);
      _impl_.desktop_canvas_offset_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.desktop_main_content_size_ != nullptr);
      _impl_.desktop_main_content_size_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.desktop_main_window_origin_ != nullptr);
      _impl_.desktop_main_window_origin_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.selection_path_ != nullptr);
      _impl_.selection_path_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.freehand_drawing_toolkit_state_ != nullptr);
      _impl_.freehand_drawing_toolkit_state_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.selection_path_transformer_ != nullptr);
      _impl_.selection_path_transformer_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.canvasviewscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.iphone568canvasviewscale_) -
        reinterpret_cast<char*>(&_impl_.canvasviewscale_)) + sizeof(_impl_.iphone568canvasviewscale_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.desktop_canvas_view_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.desktop_outline_view_width_) -
        reinterpret_cast<char*>(&_impl_.desktop_canvas_view_scale_)) + sizeof(_impl_.desktop_outline_view_width_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.desktop_presenter_notes_view_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shows_mobile_light_table_) -
        reinterpret_cast<char*>(&_impl_.desktop_presenter_notes_view_height_)) + sizeof(_impl_.shows_mobile_light_table_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.mobile_light_table_hides_skipped_slides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.desktop_activity_stream_view_width_) -
        reinterpret_cast<char*>(&_impl_.mobile_light_table_hides_skipped_slides_)) + sizeof(_impl_.desktop_activity_stream_view_width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UIStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference slideNodeToEdit = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidenodetoedit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference deprecated_template_slide_node_to_apply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_template_slide_node_to_apply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size deprecated_slideThumbnailSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_slidethumbnailsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float canvasViewScale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_canvasviewscale(&_impl_._has_bits_);
          _impl_.canvasviewscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point canvasOffset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_canvasoffset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference selectedSlideNodes = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selectedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float iPhoneCanvasViewScale = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_iphonecanvasviewscale(&_impl_._has_bits_);
          _impl_.iphonecanvasviewscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point iPhoneCanvasOffset = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_iphonecanvasoffset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float iPhone568CanvasViewScale = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_iphone568canvasviewscale(&_impl_._has_bits_);
          _impl_.iphone568canvasviewscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point iPhone568CanvasOffset = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_iphone568canvasoffset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference desktop_ui_layout = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_ui_layout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool desktop_slide_view_content_fits_window = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_desktop_slide_view_content_fits_window(&_impl_._has_bits_);
          _impl_.desktop_slide_view_content_fits_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float desktop_canvas_view_scale = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_desktop_canvas_view_scale(&_impl_._has_bits_);
          _impl_.desktop_canvas_view_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float light_table_zoom_scale = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_light_table_zoom_scale(&_impl_._has_bits_);
          _impl_.light_table_zoom_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.ChartUIState chart_ui_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chart_ui_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool show_slide_guides = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_show_slide_guides(&_impl_._has_bits_);
          _impl_.show_slide_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_template_guides = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_show_template_guides(&_impl_._has_bits_);
          _impl_.show_template_guides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shows_comments = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_shows_comments(&_impl_._has_bits_);
          _impl_.shows_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference collapsed_slide_nodes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_collapsed_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool shows_ruler = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_shows_ruler(&_impl_._has_bits_);
          _impl_.shows_ruler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point desktop_canvas_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_canvas_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float desktop_navigator_view_width = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_desktop_navigator_view_width(&_impl_._has_bits_);
          _impl_.desktop_navigator_view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float desktop_outline_view_width = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_desktop_outline_view_width(&_impl_._has_bits_);
          _impl_.desktop_outline_view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size desktop_main_content_size = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_main_content_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float desktop_presenter_notes_view_height = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_desktop_presenter_notes_view_height(&_impl_._has_bits_);
          _impl_.desktop_presenter_notes_view_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point desktop_main_window_origin = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_main_window_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool light_table_hides_skipped_slides = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_light_table_hides_skipped_slides(&_impl_._has_bits_);
          _impl_.light_table_hides_skipped_slides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference outline_collapsed_slide_nodes = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_outline_collapsed_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive selection_path = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference outline_has_body_slide_nodes = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_outline_has_body_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool desktop_outline_view_default_fixed = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_desktop_outline_view_default_fixed(&_impl_._has_bits_);
          _impl_.desktop_outline_view_default_fixed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float desktop_element_list_view_width = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _Internal::set_has_desktop_element_list_view_width(&_impl_._has_bits_);
          _impl_.desktop_element_list_view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference element_list_expanded_groups = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_element_list_expanded_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool shows_mobile_light_table = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_shows_mobile_light_table(&_impl_._has_bits_);
          _impl_.shows_mobile_light_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float mobile_light_table_zoom_scale = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_mobile_light_table_zoom_scale(&_impl_._has_bits_);
          _impl_.mobile_light_table_zoom_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool mobile_light_table_hides_skipped_slides = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mobile_light_table_hides_skipped_slides(&_impl_._has_bits_);
          _impl_.mobile_light_table_hides_skipped_slides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference freehand_drawing_toolkit_state = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_freehand_drawing_toolkit_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference selection_path_transformer = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_path_transformer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool comments_printing_toggle_enabled = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_comments_printing_toggle_enabled(&_impl_._has_bits_);
          _impl_.comments_printing_toggle_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool shows_mobile_outline = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_shows_mobile_outline(&_impl_._has_bits_);
          _impl_.shows_mobile_outline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool editing_disabled = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_editing_disabled(&_impl_._has_bits_);
          _impl_.editing_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float desktop_activity_stream_view_width = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_desktop_activity_stream_view_width(&_impl_._has_bits_);
          _impl_.desktop_activity_stream_view_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UIStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.UIStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference slideNodeToEdit = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slidenodetoedit(this),
        _Internal::slidenodetoedit(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference deprecated_template_slide_node_to_apply = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::deprecated_template_slide_node_to_apply(this),
        _Internal::deprecated_template_slide_node_to_apply(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Size deprecated_slideThumbnailSize = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::deprecated_slidethumbnailsize(this),
        _Internal::deprecated_slidethumbnailsize(this).GetCachedSize(), target, stream);
  }

  // optional float canvasViewScale = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_canvasviewscale(), target);
  }

  // optional .TSP.Point canvasOffset = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::canvasoffset(this),
        _Internal::canvasoffset(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference selectedSlideNodes = 6 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selectedslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_selectedslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional float iPhoneCanvasViewScale = 7 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_iphonecanvasviewscale(), target);
  }

  // optional .TSP.Point iPhoneCanvasOffset = 8 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::iphonecanvasoffset(this),
        _Internal::iphonecanvasoffset(this).GetCachedSize(), target, stream);
  }

  // optional float iPhone568CanvasViewScale = 9 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_iphone568canvasviewscale(), target);
  }

  // optional .TSP.Point iPhone568CanvasOffset = 10 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::iphone568canvasoffset(this),
        _Internal::iphone568canvasoffset(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference desktop_ui_layout = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::desktop_ui_layout(this),
        _Internal::desktop_ui_layout(this).GetCachedSize(), target, stream);
  }

  // optional bool desktop_slide_view_content_fits_window = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_desktop_slide_view_content_fits_window(), target);
  }

  // optional float desktop_canvas_view_scale = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_desktop_canvas_view_scale(), target);
  }

  // optional float light_table_zoom_scale = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_light_table_zoom_scale(), target);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chart_ui_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_chart_ui_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool show_slide_guides = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_show_slide_guides(), target);
  }

  // optional bool show_template_guides = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_show_template_guides(), target);
  }

  // optional bool shows_comments = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_shows_comments(), target);
  }

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collapsed_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_collapsed_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool shows_ruler = 20;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_shows_ruler(), target);
  }

  // optional .TSP.Point desktop_canvas_offset = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::desktop_canvas_offset(this),
        _Internal::desktop_canvas_offset(this).GetCachedSize(), target, stream);
  }

  // optional float desktop_navigator_view_width = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_desktop_navigator_view_width(), target);
  }

  // optional float desktop_outline_view_width = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_desktop_outline_view_width(), target);
  }

  // optional .TSP.Size desktop_main_content_size = 24;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::desktop_main_content_size(this),
        _Internal::desktop_main_content_size(this).GetCachedSize(), target, stream);
  }

  // optional float desktop_presenter_notes_view_height = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_desktop_presenter_notes_view_height(), target);
  }

  // optional .TSP.Point desktop_main_window_origin = 26;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::desktop_main_window_origin(this),
        _Internal::desktop_main_window_origin(this).GetCachedSize(), target, stream);
  }

  // optional bool light_table_hides_skipped_slides = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_light_table_hides_skipped_slides(), target);
  }

  // repeated .TSP.Reference outline_collapsed_slide_nodes = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outline_collapsed_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_outline_collapsed_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSK.SelectionPathArchive selection_path = 29;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::selection_path(this),
        _Internal::selection_path(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference outline_has_body_slide_nodes = 30;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outline_has_body_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_outline_has_body_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool desktop_outline_view_default_fixed = 31;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_desktop_outline_view_default_fixed(), target);
  }

  // optional float desktop_element_list_view_width = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_desktop_element_list_view_width(), target);
  }

  // repeated .TSP.Reference element_list_expanded_groups = 33;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_element_list_expanded_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_element_list_expanded_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool shows_mobile_light_table = 34;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_shows_mobile_light_table(), target);
  }

  // optional float mobile_light_table_zoom_scale = 35;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_mobile_light_table_zoom_scale(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool mobile_light_table_hides_skipped_slides = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_mobile_light_table_hides_skipped_slides(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference freehand_drawing_toolkit_state = 37;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::freehand_drawing_toolkit_state(this),
        _Internal::freehand_drawing_toolkit_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference selection_path_transformer = 38;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::selection_path_transformer(this),
        _Internal::selection_path_transformer(this).GetCachedSize(), target, stream);
  }

  // optional bool comments_printing_toggle_enabled = 39;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_comments_printing_toggle_enabled(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool shows_mobile_outline = 40;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_shows_mobile_outline(), target);
  }

  // optional bool editing_disabled = 41;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_editing_disabled(), target);
  }

  // optional float desktop_activity_stream_view_width = 42;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(42, this->_internal_desktop_activity_stream_view_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.UIStateArchive)
  return target;
}

size_t UIStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.UIStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference selectedSlideNodes = 6 [deprecated = true];
  total_size += 1UL * this->_internal_selectedslidenodes_size();
  for (const auto& msg : this->_impl_.selectedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  total_size += 1UL * this->_internal_chart_ui_state_size();
  for (const auto& msg : this->_impl_.chart_ui_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  total_size += 2UL * this->_internal_collapsed_slide_nodes_size();
  for (const auto& msg : this->_impl_.collapsed_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference outline_collapsed_slide_nodes = 28;
  total_size += 2UL * this->_internal_outline_collapsed_slide_nodes_size();
  for (const auto& msg : this->_impl_.outline_collapsed_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference outline_has_body_slide_nodes = 30;
  total_size += 2UL * this->_internal_outline_has_body_slide_nodes_size();
  for (const auto& msg : this->_impl_.outline_has_body_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference element_list_expanded_groups = 33;
  total_size += 2UL * this->_internal_element_list_expanded_groups_size();
  for (const auto& msg : this->_impl_.element_list_expanded_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference slideNodeToEdit = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slidenodetoedit_);
    }

    // optional .TSP.Reference deprecated_template_slide_node_to_apply = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_template_slide_node_to_apply_);
    }

    // optional .TSP.Size deprecated_slideThumbnailSize = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_slidethumbnailsize_);
    }

    // optional .TSP.Point canvasOffset = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.canvasoffset_);
    }

    // optional .TSP.Point iPhoneCanvasOffset = 8 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.iphonecanvasoffset_);
    }

    // optional .TSP.Point iPhone568CanvasOffset = 10 [deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.iphone568canvasoffset_);
    }

    // optional .TSP.Reference desktop_ui_layout = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.desktop_ui_layout_);
    }

    // optional .TSP.Point desktop_canvas_offset = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.desktop_canvas_offset_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Size desktop_main_content_size = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.desktop_main_content_size_);
    }

    // optional .TSP.Point desktop_main_window_origin = 26;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.desktop_main_window_origin_);
    }

    // optional .TSK.SelectionPathArchive selection_path = 29;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selection_path_);
    }

    // optional .TSP.Reference freehand_drawing_toolkit_state = 37;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.freehand_drawing_toolkit_state_);
    }

    // optional .TSP.Reference selection_path_transformer = 38;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.selection_path_transformer_);
    }

    // optional float canvasViewScale = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float iPhoneCanvasViewScale = 7 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float iPhone568CanvasViewScale = 9 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float desktop_canvas_view_scale = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float light_table_zoom_scale = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional bool desktop_slide_view_content_fits_window = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool show_slide_guides = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool show_template_guides = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_comments = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional float desktop_navigator_view_width = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float desktop_outline_view_width = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float desktop_presenter_notes_view_height = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional bool comments_printing_toggle_enabled = 39;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool shows_ruler = 20;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool desktop_outline_view_default_fixed = 31;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool light_table_hides_skipped_slides = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional float desktop_element_list_view_width = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float mobile_light_table_zoom_scale = 35;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional bool shows_mobile_light_table = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool mobile_light_table_hides_skipped_slides = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool shows_mobile_outline = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool editing_disabled = 41;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional float desktop_activity_stream_view_width = 42;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UIStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UIStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UIStateArchive::GetClassData() const { return &_class_data_; }


void UIStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UIStateArchive*>(&to_msg);
  auto& from = static_cast<const UIStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.UIStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.selectedslidenodes_.MergeFrom(from._impl_.selectedslidenodes_);
  _this->_impl_.chart_ui_state_.MergeFrom(from._impl_.chart_ui_state_);
  _this->_impl_.collapsed_slide_nodes_.MergeFrom(from._impl_.collapsed_slide_nodes_);
  _this->_impl_.outline_collapsed_slide_nodes_.MergeFrom(from._impl_.outline_collapsed_slide_nodes_);
  _this->_impl_.outline_has_body_slide_nodes_.MergeFrom(from._impl_.outline_has_body_slide_nodes_);
  _this->_impl_.element_list_expanded_groups_.MergeFrom(from._impl_.element_list_expanded_groups_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slidenodetoedit()->::TSP::Reference::MergeFrom(
          from._internal_slidenodetoedit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deprecated_template_slide_node_to_apply()->::TSP::Reference::MergeFrom(
          from._internal_deprecated_template_slide_node_to_apply());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deprecated_slidethumbnailsize()->::TSP::Size::MergeFrom(
          from._internal_deprecated_slidethumbnailsize());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_canvasoffset()->::TSP::Point::MergeFrom(
          from._internal_canvasoffset());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_iphonecanvasoffset()->::TSP::Point::MergeFrom(
          from._internal_iphonecanvasoffset());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_iphone568canvasoffset()->::TSP::Point::MergeFrom(
          from._internal_iphone568canvasoffset());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_desktop_ui_layout()->::TSP::Reference::MergeFrom(
          from._internal_desktop_ui_layout());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_desktop_canvas_offset()->::TSP::Point::MergeFrom(
          from._internal_desktop_canvas_offset());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_desktop_main_content_size()->::TSP::Size::MergeFrom(
          from._internal_desktop_main_content_size());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_desktop_main_window_origin()->::TSP::Point::MergeFrom(
          from._internal_desktop_main_window_origin());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_selection_path()->::TSK::SelectionPathArchive::MergeFrom(
          from._internal_selection_path());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_freehand_drawing_toolkit_state()->::TSP::Reference::MergeFrom(
          from._internal_freehand_drawing_toolkit_state());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_selection_path_transformer()->::TSP::Reference::MergeFrom(
          from._internal_selection_path_transformer());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.canvasviewscale_ = from._impl_.canvasviewscale_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.iphonecanvasviewscale_ = from._impl_.iphonecanvasviewscale_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.iphone568canvasviewscale_ = from._impl_.iphone568canvasviewscale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.desktop_canvas_view_scale_ = from._impl_.desktop_canvas_view_scale_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.light_table_zoom_scale_ = from._impl_.light_table_zoom_scale_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.desktop_slide_view_content_fits_window_ = from._impl_.desktop_slide_view_content_fits_window_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.show_slide_guides_ = from._impl_.show_slide_guides_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.show_template_guides_ = from._impl_.show_template_guides_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.shows_comments_ = from._impl_.shows_comments_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.desktop_navigator_view_width_ = from._impl_.desktop_navigator_view_width_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.desktop_outline_view_width_ = from._impl_.desktop_outline_view_width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.desktop_presenter_notes_view_height_ = from._impl_.desktop_presenter_notes_view_height_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.comments_printing_toggle_enabled_ = from._impl_.comments_printing_toggle_enabled_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.shows_ruler_ = from._impl_.shows_ruler_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.desktop_outline_view_default_fixed_ = from._impl_.desktop_outline_view_default_fixed_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.light_table_hides_skipped_slides_ = from._impl_.light_table_hides_skipped_slides_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.desktop_element_list_view_width_ = from._impl_.desktop_element_list_view_width_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.mobile_light_table_zoom_scale_ = from._impl_.mobile_light_table_zoom_scale_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.shows_mobile_light_table_ = from._impl_.shows_mobile_light_table_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mobile_light_table_hides_skipped_slides_ = from._impl_.mobile_light_table_hides_skipped_slides_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shows_mobile_outline_ = from._impl_.shows_mobile_outline_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.editing_disabled_ = from._impl_.editing_disabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.desktop_activity_stream_view_width_ = from._impl_.desktop_activity_stream_view_width_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.UIStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.selectedslidenodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.chart_ui_state_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.collapsed_slide_nodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.outline_collapsed_slide_nodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.outline_has_body_slide_nodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.element_list_expanded_groups_))
    return false;
  if (_internal_has_slidenodetoedit()) {
    if (!_impl_.slidenodetoedit_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_template_slide_node_to_apply()) {
    if (!_impl_.deprecated_template_slide_node_to_apply_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_slidethumbnailsize()) {
    if (!_impl_.deprecated_slidethumbnailsize_->IsInitialized()) return false;
  }
  if (_internal_has_canvasoffset()) {
    if (!_impl_.canvasoffset_->IsInitialized()) return false;
  }
  if (_internal_has_iphonecanvasoffset()) {
    if (!_impl_.iphonecanvasoffset_->IsInitialized()) return false;
  }
  if (_internal_has_iphone568canvasoffset()) {
    if (!_impl_.iphone568canvasoffset_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_ui_layout()) {
    if (!_impl_.desktop_ui_layout_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_canvas_offset()) {
    if (!_impl_.desktop_canvas_offset_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_main_content_size()) {
    if (!_impl_.desktop_main_content_size_->IsInitialized()) return false;
  }
  if (_internal_has_desktop_main_window_origin()) {
    if (!_impl_.desktop_main_window_origin_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path()) {
    if (!_impl_.selection_path_->IsInitialized()) return false;
  }
  if (_internal_has_freehand_drawing_toolkit_state()) {
    if (!_impl_.freehand_drawing_toolkit_state_->IsInitialized()) return false;
  }
  if (_internal_has_selection_path_transformer()) {
    if (!_impl_.selection_path_transformer_->IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::InternalSwap(UIStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.selectedslidenodes_.InternalSwap(&other->_impl_.selectedslidenodes_);
  _impl_.chart_ui_state_.InternalSwap(&other->_impl_.chart_ui_state_);
  _impl_.collapsed_slide_nodes_.InternalSwap(&other->_impl_.collapsed_slide_nodes_);
  _impl_.outline_collapsed_slide_nodes_.InternalSwap(&other->_impl_.outline_collapsed_slide_nodes_);
  _impl_.outline_has_body_slide_nodes_.InternalSwap(&other->_impl_.outline_has_body_slide_nodes_);
  _impl_.element_list_expanded_groups_.InternalSwap(&other->_impl_.element_list_expanded_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UIStateArchive, _impl_.desktop_activity_stream_view_width_)
      + sizeof(UIStateArchive::_impl_.desktop_activity_stream_view_width_)
      - PROTOBUF_FIELD_OFFSET(UIStateArchive, _impl_.slidenodetoedit_)>(
          reinterpret_cast<char*>(&_impl_.slidenodetoedit_),
          reinterpret_cast<char*>(&other->_impl_.slidenodetoedit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UIStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[20]);
}

// ===================================================================

class IOSRestorableViewStateRootArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<IOSRestorableViewStateRootArchive>()._impl_._has_bits_);
  static const ::KN::IOSSavedPlaybackStateArchive& saved_playback_state(const IOSRestorableViewStateRootArchive* msg);
  static void set_has_saved_playback_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::KN::IOSSavedPlaybackStateArchive&
IOSRestorableViewStateRootArchive::_Internal::saved_playback_state(const IOSRestorableViewStateRootArchive* msg) {
  return *msg->_impl_.saved_playback_state_;
}
IOSRestorableViewStateRootArchive::IOSRestorableViewStateRootArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.IOSRestorableViewStateRootArchive)
}
IOSRestorableViewStateRootArchive::IOSRestorableViewStateRootArchive(const IOSRestorableViewStateRootArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IOSRestorableViewStateRootArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.saved_playback_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_saved_playback_state()) {
    _this->_impl_.saved_playback_state_ = new ::KN::IOSSavedPlaybackStateArchive(*from._impl_.saved_playback_state_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.IOSRestorableViewStateRootArchive)
}

inline void IOSRestorableViewStateRootArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.saved_playback_state_){nullptr}
  };
}

IOSRestorableViewStateRootArchive::~IOSRestorableViewStateRootArchive() {
  // @@protoc_insertion_point(destructor:KN.IOSRestorableViewStateRootArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IOSRestorableViewStateRootArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.saved_playback_state_;
}

void IOSRestorableViewStateRootArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IOSRestorableViewStateRootArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.IOSRestorableViewStateRootArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.saved_playback_state_ != nullptr);
    _impl_.saved_playback_state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOSRestorableViewStateRootArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KN.IOSSavedPlaybackStateArchive saved_playback_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_playback_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IOSRestorableViewStateRootArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.IOSRestorableViewStateRootArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .KN.IOSSavedPlaybackStateArchive saved_playback_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::saved_playback_state(this),
        _Internal::saved_playback_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.IOSRestorableViewStateRootArchive)
  return target;
}

size_t IOSRestorableViewStateRootArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.IOSRestorableViewStateRootArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.IOSSavedPlaybackStateArchive saved_playback_state = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.saved_playback_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOSRestorableViewStateRootArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IOSRestorableViewStateRootArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOSRestorableViewStateRootArchive::GetClassData() const { return &_class_data_; }


void IOSRestorableViewStateRootArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IOSRestorableViewStateRootArchive*>(&to_msg);
  auto& from = static_cast<const IOSRestorableViewStateRootArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.IOSRestorableViewStateRootArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_saved_playback_state()) {
    _this->_internal_mutable_saved_playback_state()->::KN::IOSSavedPlaybackStateArchive::MergeFrom(
        from._internal_saved_playback_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOSRestorableViewStateRootArchive::CopyFrom(const IOSRestorableViewStateRootArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.IOSRestorableViewStateRootArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOSRestorableViewStateRootArchive::IsInitialized() const {
  return true;
}

void IOSRestorableViewStateRootArchive::InternalSwap(IOSRestorableViewStateRootArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.saved_playback_state_, other->_impl_.saved_playback_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOSRestorableViewStateRootArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[21]);
}

// ===================================================================

class IOSSavedPlaybackStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<IOSSavedPlaybackStateArchive>()._impl_._has_bits_);
  static void set_has_presentation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_slide_node_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_had_external_display(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_elapsed_time_started(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_elapsed_time_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_recording_playback_current_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_should_show_slide_navigator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_multi_presenter_show(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

IOSSavedPlaybackStateArchive::IOSSavedPlaybackStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.IOSSavedPlaybackStateArchive)
}
IOSSavedPlaybackStateArchive::IOSSavedPlaybackStateArchive(const IOSSavedPlaybackStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IOSSavedPlaybackStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.breadcrumb_trail_){from._impl_.breadcrumb_trail_}
    , decltype(_impl_.slide_node_index_){}
    , decltype(_impl_.event_index_){}
    , decltype(_impl_.elapsed_time_start_time_){}
    , decltype(_impl_.recording_playback_current_time_){}
    , decltype(_impl_.had_external_display_){}
    , decltype(_impl_.is_elapsed_time_started_){}
    , decltype(_impl_.should_show_slide_navigator_){}
    , decltype(_impl_.is_multi_presenter_show_){}
    , decltype(_impl_.presentation_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slide_node_index_, &from._impl_.slide_node_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.presentation_type_) -
    reinterpret_cast<char*>(&_impl_.slide_node_index_)) + sizeof(_impl_.presentation_type_));
  // @@protoc_insertion_point(copy_constructor:KN.IOSSavedPlaybackStateArchive)
}

inline void IOSSavedPlaybackStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.breadcrumb_trail_){arena}
    , decltype(_impl_.slide_node_index_){0u}
    , decltype(_impl_.event_index_){0u}
    , decltype(_impl_.elapsed_time_start_time_){0}
    , decltype(_impl_.recording_playback_current_time_){0}
    , decltype(_impl_.had_external_display_){false}
    , decltype(_impl_.is_elapsed_time_started_){false}
    , decltype(_impl_.should_show_slide_navigator_){false}
    , decltype(_impl_.is_multi_presenter_show_){false}
    , decltype(_impl_.presentation_type_){1}
  };
}

IOSSavedPlaybackStateArchive::~IOSSavedPlaybackStateArchive() {
  // @@protoc_insertion_point(destructor:KN.IOSSavedPlaybackStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IOSSavedPlaybackStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.breadcrumb_trail_.~RepeatedPtrField();
}

void IOSSavedPlaybackStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IOSSavedPlaybackStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.IOSSavedPlaybackStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.breadcrumb_trail_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.slide_node_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_multi_presenter_show_) -
        reinterpret_cast<char*>(&_impl_.slide_node_index_)) + sizeof(_impl_.is_multi_presenter_show_));
  }
  _impl_.presentation_type_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOSSavedPlaybackStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KN.IOSSavedPlaybackStateArchive.PresentationType presentation_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::IOSSavedPlaybackStateArchive_PresentationType_IsValid(val))) {
            _internal_set_presentation_type(static_cast<::KN::IOSSavedPlaybackStateArchive_PresentationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slide_node_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slide_node_index(&has_bits);
          _impl_.slide_node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_event_index(&has_bits);
          _impl_.event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string breadcrumb_trail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_breadcrumb_trail();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.IOSSavedPlaybackStateArchive.breadcrumb_trail");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool had_external_display = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_had_external_display(&has_bits);
          _impl_.had_external_display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_elapsed_time_started = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_elapsed_time_started(&has_bits);
          _impl_.is_elapsed_time_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double elapsed_time_start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_elapsed_time_start_time(&has_bits);
          _impl_.elapsed_time_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double recording_playback_current_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_recording_playback_current_time(&has_bits);
          _impl_.recording_playback_current_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_show_slide_navigator = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_should_show_slide_navigator(&has_bits);
          _impl_.should_show_slide_navigator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_multi_presenter_show = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_multi_presenter_show(&has_bits);
          _impl_.is_multi_presenter_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IOSSavedPlaybackStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.IOSSavedPlaybackStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .KN.IOSSavedPlaybackStateArchive.PresentationType presentation_type = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_presentation_type(), target);
  }

  // optional uint32 slide_node_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slide_node_index(), target);
  }

  // optional uint32 event_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_event_index(), target);
  }

  // repeated string breadcrumb_trail = 4;
  for (int i = 0, n = this->_internal_breadcrumb_trail_size(); i < n; i++) {
    const auto& s = this->_internal_breadcrumb_trail(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.IOSSavedPlaybackStateArchive.breadcrumb_trail");
    target = stream->WriteString(4, s, target);
  }

  // optional bool had_external_display = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_had_external_display(), target);
  }

  // optional bool is_elapsed_time_started = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_elapsed_time_started(), target);
  }

  // optional double elapsed_time_start_time = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_elapsed_time_start_time(), target);
  }

  // optional double recording_playback_current_time = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_recording_playback_current_time(), target);
  }

  // optional bool should_show_slide_navigator = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_should_show_slide_navigator(), target);
  }

  // optional bool is_multi_presenter_show = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_multi_presenter_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.IOSSavedPlaybackStateArchive)
  return target;
}

size_t IOSSavedPlaybackStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.IOSSavedPlaybackStateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string breadcrumb_trail = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.breadcrumb_trail_.size());
  for (int i = 0, n = _impl_.breadcrumb_trail_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.breadcrumb_trail_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 slide_node_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slide_node_index());
    }

    // optional uint32 event_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_index());
    }

    // optional double elapsed_time_start_time = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double recording_playback_current_time = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool had_external_display = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_elapsed_time_started = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool should_show_slide_navigator = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_multi_presenter_show = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional .KN.IOSSavedPlaybackStateArchive.PresentationType presentation_type = 1;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_presentation_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOSSavedPlaybackStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IOSSavedPlaybackStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOSSavedPlaybackStateArchive::GetClassData() const { return &_class_data_; }


void IOSSavedPlaybackStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IOSSavedPlaybackStateArchive*>(&to_msg);
  auto& from = static_cast<const IOSSavedPlaybackStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.IOSSavedPlaybackStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.breadcrumb_trail_.MergeFrom(from._impl_.breadcrumb_trail_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.slide_node_index_ = from._impl_.slide_node_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_index_ = from._impl_.event_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.elapsed_time_start_time_ = from._impl_.elapsed_time_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.recording_playback_current_time_ = from._impl_.recording_playback_current_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.had_external_display_ = from._impl_.had_external_display_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_elapsed_time_started_ = from._impl_.is_elapsed_time_started_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.should_show_slide_navigator_ = from._impl_.should_show_slide_navigator_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_multi_presenter_show_ = from._impl_.is_multi_presenter_show_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_presentation_type(from._internal_presentation_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOSSavedPlaybackStateArchive::CopyFrom(const IOSSavedPlaybackStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.IOSSavedPlaybackStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOSSavedPlaybackStateArchive::IsInitialized() const {
  return true;
}

void IOSSavedPlaybackStateArchive::InternalSwap(IOSSavedPlaybackStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.breadcrumb_trail_.InternalSwap(&other->_impl_.breadcrumb_trail_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOSSavedPlaybackStateArchive, _impl_.is_multi_presenter_show_)
      + sizeof(IOSSavedPlaybackStateArchive::_impl_.is_multi_presenter_show_)
      - PROTOBUF_FIELD_OFFSET(IOSSavedPlaybackStateArchive, _impl_.slide_node_index_)>(
          reinterpret_cast<char*>(&_impl_.slide_node_index_),
          reinterpret_cast<char*>(&other->_impl_.slide_node_index_));
  swap(_impl_.presentation_type_, other->_impl_.presentation_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOSSavedPlaybackStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[22]);
}

// ===================================================================

class CanvasSelectionArchive::_Internal {
 public:
};

void CanvasSelectionArchive::clear_infos() {
  _impl_.infos_.Clear();
}
void CanvasSelectionArchive::clear_non_interactive_infos() {
  _impl_.non_interactive_infos_.Clear();
}
void CanvasSelectionArchive::clear_infos_for_action_ghost_indexes() {
  _impl_.infos_for_action_ghost_indexes_.Clear();
}
void CanvasSelectionArchive::clear_action_ghost_indexes() {
  _impl_.action_ghost_indexes_.Clear();
}
void CanvasSelectionArchive::clear_build_chunks() {
  _impl_.build_chunks_.Clear();
}
CanvasSelectionArchive::CanvasSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.CanvasSelectionArchive)
}
CanvasSelectionArchive::CanvasSelectionArchive(const CanvasSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanvasSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){from._impl_.infos_}
    , decltype(_impl_.database_action_ghost_indexes_){from._impl_.database_action_ghost_indexes_}
    , decltype(_impl_.action_ghost_indexes_){from._impl_.action_ghost_indexes_}
    , decltype(_impl_.build_chunks_){from._impl_.build_chunks_}
    , decltype(_impl_.non_interactive_infos_){from._impl_.non_interactive_infos_}
    , decltype(_impl_.infos_for_action_ghost_indexes_){from._impl_.infos_for_action_ghost_indexes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.CanvasSelectionArchive)
}

inline void CanvasSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){arena}
    , decltype(_impl_.database_action_ghost_indexes_){arena}
    , decltype(_impl_.action_ghost_indexes_){arena}
    , decltype(_impl_.build_chunks_){arena}
    , decltype(_impl_.non_interactive_infos_){arena}
    , decltype(_impl_.infos_for_action_ghost_indexes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CanvasSelectionArchive::~CanvasSelectionArchive() {
  // @@protoc_insertion_point(destructor:KN.CanvasSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanvasSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.infos_.~RepeatedPtrField();
  _impl_.database_action_ghost_indexes_.~RepeatedField();
  _impl_.action_ghost_indexes_.~RepeatedPtrField();
  _impl_.build_chunks_.~RepeatedPtrField();
  _impl_.non_interactive_infos_.~RepeatedPtrField();
  _impl_.infos_for_action_ghost_indexes_.~RepeatedPtrField();
}

void CanvasSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanvasSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.CanvasSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _impl_.database_action_ghost_indexes_.Clear();
  _impl_.action_ghost_indexes_.Clear();
  _impl_.build_chunks_.Clear();
  _impl_.non_interactive_infos_.Clear();
  _impl_.infos_for_action_ghost_indexes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanvasSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_database_action_ghost_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_database_action_ghost_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.IndexSet action_ghost_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_ghost_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference build_chunks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_build_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference non_interactive_infos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_non_interactive_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference infos_for_action_ghost_indexes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos_for_action_ghost_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CanvasSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.CanvasSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  for (int i = 0, n = this->_internal_database_action_ghost_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_database_action_ghost_indexes(i), target);
  }

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_action_ghost_indexes_size()); i < n; i++) {
    const auto& repfield = this->_internal_action_ghost_indexes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference build_chunks = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_build_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_build_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference non_interactive_infos = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_non_interactive_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_non_interactive_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference infos_for_action_ghost_indexes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_for_action_ghost_indexes_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos_for_action_ghost_indexes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.CanvasSelectionArchive)
  return target;
}

size_t CanvasSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.CanvasSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_impl_.infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.database_action_ghost_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_database_action_ghost_indexes_size());
    total_size += data_size;
  }

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  total_size += 1UL * this->_internal_action_ghost_indexes_size();
  for (const auto& msg : this->_impl_.action_ghost_indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference build_chunks = 4;
  total_size += 1UL * this->_internal_build_chunks_size();
  for (const auto& msg : this->_impl_.build_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference non_interactive_infos = 5;
  total_size += 1UL * this->_internal_non_interactive_infos_size();
  for (const auto& msg : this->_impl_.non_interactive_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference infos_for_action_ghost_indexes = 6;
  total_size += 1UL * this->_internal_infos_for_action_ghost_indexes_size();
  for (const auto& msg : this->_impl_.infos_for_action_ghost_indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanvasSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanvasSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanvasSelectionArchive::GetClassData() const { return &_class_data_; }


void CanvasSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanvasSelectionArchive*>(&to_msg);
  auto& from = static_cast<const CanvasSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.CanvasSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.infos_.MergeFrom(from._impl_.infos_);
  _this->_impl_.database_action_ghost_indexes_.MergeFrom(from._impl_.database_action_ghost_indexes_);
  _this->_impl_.action_ghost_indexes_.MergeFrom(from._impl_.action_ghost_indexes_);
  _this->_impl_.build_chunks_.MergeFrom(from._impl_.build_chunks_);
  _this->_impl_.non_interactive_infos_.MergeFrom(from._impl_.non_interactive_infos_);
  _this->_impl_.infos_for_action_ghost_indexes_.MergeFrom(from._impl_.infos_for_action_ghost_indexes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanvasSelectionArchive::CopyFrom(const CanvasSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.CanvasSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.action_ghost_indexes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.build_chunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.non_interactive_infos_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.infos_for_action_ghost_indexes_))
    return false;
  return true;
}

void CanvasSelectionArchive::InternalSwap(CanvasSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
  _impl_.database_action_ghost_indexes_.InternalSwap(&other->_impl_.database_action_ghost_indexes_);
  _impl_.action_ghost_indexes_.InternalSwap(&other->_impl_.action_ghost_indexes_);
  _impl_.build_chunks_.InternalSwap(&other->_impl_.build_chunks_);
  _impl_.non_interactive_infos_.InternalSwap(&other->_impl_.non_interactive_infos_);
  _impl_.infos_for_action_ghost_indexes_.InternalSwap(&other->_impl_.infos_for_action_ghost_indexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanvasSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[23]);
}

// ===================================================================

class ActionGhostSelectionArchive::_Internal {
 public:
};

ActionGhostSelectionArchive::ActionGhostSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:KN.ActionGhostSelectionArchive)
}
ActionGhostSelectionArchive::ActionGhostSelectionArchive(const ActionGhostSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ActionGhostSelectionArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.ActionGhostSelectionArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionGhostSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionGhostSelectionArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ActionGhostSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[24]);
}

// ===================================================================

class ThemeCustomTimingCurveArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeCustomTimingCurveArchive>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::PathSourceArchive& curve(const ThemeCustomTimingCurveArchive* msg);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSD::PathSourceArchive&
ThemeCustomTimingCurveArchive::_Internal::curve(const ThemeCustomTimingCurveArchive* msg) {
  return *msg->_impl_.curve_;
}
void ThemeCustomTimingCurveArchive::clear_curve() {
  if (_impl_.curve_ != nullptr) _impl_.curve_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ThemeCustomTimingCurveArchive::ThemeCustomTimingCurveArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ThemeCustomTimingCurveArchive)
}
ThemeCustomTimingCurveArchive::ThemeCustomTimingCurveArchive(const ThemeCustomTimingCurveArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeCustomTimingCurveArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.curve_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_curve()) {
    _this->_impl_.curve_ = new ::TSD::PathSourceArchive(*from._impl_.curve_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.ThemeCustomTimingCurveArchive)
}

inline void ThemeCustomTimingCurveArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.curve_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThemeCustomTimingCurveArchive::~ThemeCustomTimingCurveArchive() {
  // @@protoc_insertion_point(destructor:KN.ThemeCustomTimingCurveArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeCustomTimingCurveArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.curve_;
}

void ThemeCustomTimingCurveArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeCustomTimingCurveArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ThemeCustomTimingCurveArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.curve_ != nullptr);
      _impl_.curve_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeCustomTimingCurveArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.ThemeCustomTimingCurveArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSD.PathSourceArchive curve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeCustomTimingCurveArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ThemeCustomTimingCurveArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.ThemeCustomTimingCurveArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .TSD.PathSourceArchive curve = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::curve(this),
        _Internal::curve(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ThemeCustomTimingCurveArchive)
  return target;
}

size_t ThemeCustomTimingCurveArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.ThemeCustomTimingCurveArchive)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_curve()) {
    // required .TSD.PathSourceArchive curve = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.curve_);
  }

  return total_size;
}
size_t ThemeCustomTimingCurveArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ThemeCustomTimingCurveArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .TSD.PathSourceArchive curve = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.curve_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeCustomTimingCurveArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeCustomTimingCurveArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeCustomTimingCurveArchive::GetClassData() const { return &_class_data_; }


void ThemeCustomTimingCurveArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeCustomTimingCurveArchive*>(&to_msg);
  auto& from = static_cast<const ThemeCustomTimingCurveArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ThemeCustomTimingCurveArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_curve()->::TSD::PathSourceArchive::MergeFrom(
          from._internal_curve());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeCustomTimingCurveArchive::CopyFrom(const ThemeCustomTimingCurveArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ThemeCustomTimingCurveArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeCustomTimingCurveArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_curve()) {
    if (!_impl_.curve_->IsInitialized()) return false;
  }
  return true;
}

void ThemeCustomTimingCurveArchive::InternalSwap(ThemeCustomTimingCurveArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.curve_, other->_impl_.curve_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeCustomTimingCurveArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[25]);
}

// ===================================================================

class ThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeArchive>()._impl_._has_bits_);
  static const ::TSS::ThemeArchive& super(const ThemeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& default_template_slide_node(const ThemeArchive* msg);
  static void set_has_default_template_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& default_template_slide_node_reference(const ThemeArchive* msg);
  static void set_has_default_template_slide_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_default_template_slide_node_is_our_best_guess(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& live_video_source_collection(const ThemeArchive* msg);
  static void set_has_live_video_source_collection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::ThemeArchive&
ThemeArchive::_Internal::super(const ThemeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ThemeArchive::_Internal::default_template_slide_node(const ThemeArchive* msg) {
  return *msg->_impl_.default_template_slide_node_;
}
const ::TSP::Reference&
ThemeArchive::_Internal::default_template_slide_node_reference(const ThemeArchive* msg) {
  return *msg->_impl_.default_template_slide_node_reference_;
}
const ::TSP::Reference&
ThemeArchive::_Internal::live_video_source_collection(const ThemeArchive* msg) {
  return *msg->_impl_.live_video_source_collection_;
}
void ThemeArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ThemeArchive::clear_templates() {
  _impl_.templates_.Clear();
}
void ThemeArchive::clear_classicthemerecords() {
  _impl_.classicthemerecords_.Clear();
}
void ThemeArchive::clear_default_template_slide_node() {
  if (_impl_.default_template_slide_node_ != nullptr) _impl_.default_template_slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ThemeArchive::clear_default_template_slide_node_reference() {
  if (_impl_.default_template_slide_node_reference_ != nullptr) _impl_.default_template_slide_node_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ThemeArchive::clear_live_video_source_collection() {
  if (_impl_.live_video_source_collection_ != nullptr) _impl_.live_video_source_collection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ThemeArchive::clear_motion_background_style_presets() {
  _impl_.motion_background_style_presets_.Clear();
}
ThemeArchive::ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ThemeArchive)
}
ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.templates_){from._impl_.templates_}
    , decltype(_impl_.classicthemerecords_){from._impl_.classicthemerecords_}
    , decltype(_impl_.custom_effect_timing_curves_){from._impl_.custom_effect_timing_curves_}
    , decltype(_impl_.motion_background_style_presets_){from._impl_.motion_background_style_presets_}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.default_template_slide_node_){nullptr}
    , decltype(_impl_.default_template_slide_node_reference_){nullptr}
    , decltype(_impl_.live_video_source_collection_){nullptr}
    , decltype(_impl_.default_template_slide_node_is_our_best_guess_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::ThemeArchive(*from._impl_.super_);
  }
  if (from._internal_has_default_template_slide_node()) {
    _this->_impl_.default_template_slide_node_ = new ::TSP::Reference(*from._impl_.default_template_slide_node_);
  }
  if (from._internal_has_default_template_slide_node_reference()) {
    _this->_impl_.default_template_slide_node_reference_ = new ::TSP::Reference(*from._impl_.default_template_slide_node_reference_);
  }
  if (from._internal_has_live_video_source_collection()) {
    _this->_impl_.live_video_source_collection_ = new ::TSP::Reference(*from._impl_.live_video_source_collection_);
  }
  _this->_impl_.default_template_slide_node_is_our_best_guess_ = from._impl_.default_template_slide_node_is_our_best_guess_;
  // @@protoc_insertion_point(copy_constructor:KN.ThemeArchive)
}

inline void ThemeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.templates_){arena}
    , decltype(_impl_.classicthemerecords_){arena}
    , decltype(_impl_.custom_effect_timing_curves_){arena}
    , decltype(_impl_.motion_background_style_presets_){arena}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.default_template_slide_node_){nullptr}
    , decltype(_impl_.default_template_slide_node_reference_){nullptr}
    , decltype(_impl_.live_video_source_collection_){nullptr}
    , decltype(_impl_.default_template_slide_node_is_our_best_guess_){false}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThemeArchive::~ThemeArchive() {
  // @@protoc_insertion_point(destructor:KN.ThemeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.templates_.~RepeatedPtrField();
  _impl_.classicthemerecords_.~RepeatedPtrField();
  _impl_.custom_effect_timing_curves_.~RepeatedPtrField();
  _impl_.motion_background_style_presets_.~RepeatedPtrField();
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.default_template_slide_node_;
  if (this != internal_default_instance()) delete _impl_.default_template_slide_node_reference_;
  if (this != internal_default_instance()) delete _impl_.live_video_source_collection_;
}

void ThemeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ThemeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.templates_.Clear();
  _impl_.classicthemerecords_.Clear();
  _impl_.custom_effect_timing_curves_.Clear();
  _impl_.motion_background_style_presets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.default_template_slide_node_ != nullptr);
      _impl_.default_template_slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.default_template_slide_node_reference_ != nullptr);
      _impl_.default_template_slide_node_reference_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.live_video_source_collection_ != nullptr);
      _impl_.live_video_source_collection_->Clear();
    }
  }
  _impl_.default_template_slide_node_is_our_best_guess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.ThemeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference templates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_templates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.ThemeArchive.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference classicThemeRecords = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classicthemerecords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference default_template_slide_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_template_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference default_template_slide_node_reference = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_template_slide_node_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool default_template_slide_node_is_our_best_guess = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_default_template_slide_node_is_our_best_guess(&has_bits);
          _impl_.default_template_slide_node_is_our_best_guess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_effect_timing_curves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference live_video_source_collection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_video_source_collection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference motion_background_style_presets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motion_background_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ThemeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.ThemeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference templates = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_templates_size()); i < n; i++) {
    const auto& repfield = this->_internal_templates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string uuid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.ThemeArchive.uuid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uuid(), target);
  }

  // repeated .TSP.Reference classicThemeRecords = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classicthemerecords_size()); i < n; i++) {
    const auto& repfield = this->_internal_classicthemerecords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference default_template_slide_node = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::default_template_slide_node(this),
        _Internal::default_template_slide_node(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference default_template_slide_node_reference = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::default_template_slide_node_reference(this),
        _Internal::default_template_slide_node_reference(this).GetCachedSize(), target, stream);
  }

  // optional bool default_template_slide_node_is_our_best_guess = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_default_template_slide_node_is_our_best_guess(), target);
  }

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_effect_timing_curves_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_effect_timing_curves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference live_video_source_collection = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::live_video_source_collection(this),
        _Internal::live_video_source_collection(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference motion_background_style_presets = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_motion_background_style_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_motion_background_style_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ThemeArchive)
  return target;
}

size_t ThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ThemeArchive)
  size_t total_size = 0;

  // required .TSS.ThemeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference templates = 2;
  total_size += 1UL * this->_internal_templates_size();
  for (const auto& msg : this->_impl_.templates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference classicThemeRecords = 4;
  total_size += 1UL * this->_internal_classicthemerecords_size();
  for (const auto& msg : this->_impl_.classicthemerecords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 8;
  total_size += 1UL * this->_internal_custom_effect_timing_curves_size();
  for (const auto& msg : this->_impl_.custom_effect_timing_curves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference motion_background_style_presets = 10;
  total_size += 1UL * this->_internal_motion_background_style_presets_size();
  for (const auto& msg : this->_impl_.motion_background_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string uuid = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.Reference default_template_slide_node = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.default_template_slide_node_);
    }

    // optional .TSP.Reference default_template_slide_node_reference = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.default_template_slide_node_reference_);
    }

    // optional .TSP.Reference live_video_source_collection = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.live_video_source_collection_);
    }

    // optional bool default_template_slide_node_is_our_best_guess = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeArchive::GetClassData() const { return &_class_data_; }


void ThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeArchive*>(&to_msg);
  auto& from = static_cast<const ThemeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.templates_.MergeFrom(from._impl_.templates_);
  _this->_impl_.classicthemerecords_.MergeFrom(from._impl_.classicthemerecords_);
  _this->_impl_.custom_effect_timing_curves_.MergeFrom(from._impl_.custom_effect_timing_curves_);
  _this->_impl_.motion_background_style_presets_.MergeFrom(from._impl_.motion_background_style_presets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSS::ThemeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_default_template_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_default_template_slide_node());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_default_template_slide_node_reference()->::TSP::Reference::MergeFrom(
          from._internal_default_template_slide_node_reference());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_live_video_source_collection()->::TSP::Reference::MergeFrom(
          from._internal_live_video_source_collection());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.default_template_slide_node_is_our_best_guess_ = from._impl_.default_template_slide_node_is_our_best_guess_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.templates_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.classicthemerecords_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_effect_timing_curves_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.motion_background_style_presets_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_default_template_slide_node()) {
    if (!_impl_.default_template_slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_default_template_slide_node_reference()) {
    if (!_impl_.default_template_slide_node_reference_->IsInitialized()) return false;
  }
  if (_internal_has_live_video_source_collection()) {
    if (!_impl_.live_video_source_collection_->IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::InternalSwap(ThemeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.templates_.InternalSwap(&other->_impl_.templates_);
  _impl_.classicthemerecords_.InternalSwap(&other->_impl_.classicthemerecords_);
  _impl_.custom_effect_timing_curves_.InternalSwap(&other->_impl_.custom_effect_timing_curves_);
  _impl_.motion_background_style_presets_.InternalSwap(&other->_impl_.motion_background_style_presets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeArchive, _impl_.default_template_slide_node_is_our_best_guess_)
      + sizeof(ThemeArchive::_impl_.default_template_slide_node_is_our_best_guess_)
      - PROTOBUF_FIELD_OFFSET(ThemeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[26]);
}

// ===================================================================

class SlideTreeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideTreeArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& rootslidenode(const SlideTreeArchive* msg);
  static void set_has_rootslidenode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
SlideTreeArchive::_Internal::rootslidenode(const SlideTreeArchive* msg) {
  return *msg->_impl_.rootslidenode_;
}
void SlideTreeArchive::clear_rootslidenode() {
  if (_impl_.rootslidenode_ != nullptr) _impl_.rootslidenode_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SlideTreeArchive::clear_slides() {
  _impl_.slides_.Clear();
}
SlideTreeArchive::SlideTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideTreeArchive)
}
SlideTreeArchive::SlideTreeArchive(const SlideTreeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideTreeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slides_){from._impl_.slides_}
    , decltype(_impl_.rootslidenode_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rootslidenode()) {
    _this->_impl_.rootslidenode_ = new ::TSP::Reference(*from._impl_.rootslidenode_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideTreeArchive)
}

inline void SlideTreeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slides_){arena}
    , decltype(_impl_.rootslidenode_){nullptr}
  };
}

SlideTreeArchive::~SlideTreeArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideTreeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideTreeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slides_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.rootslidenode_;
}

void SlideTreeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideTreeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideTreeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slides_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.rootslidenode_ != nullptr);
    _impl_.rootslidenode_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideTreeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference rootSlideNode = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rootslidenode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideTreeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideTreeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference rootSlideNode = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::rootslidenode(this),
        _Internal::rootslidenode(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference slides = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slides_size()); i < n; i++) {
    const auto& repfield = this->_internal_slides(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideTreeArchive)
  return target;
}

size_t SlideTreeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideTreeArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slides = 2;
  total_size += 1UL * this->_internal_slides_size();
  for (const auto& msg : this->_impl_.slides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference rootSlideNode = 1 [deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rootslidenode_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideTreeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideTreeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideTreeArchive::GetClassData() const { return &_class_data_; }


void SlideTreeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideTreeArchive*>(&to_msg);
  auto& from = static_cast<const SlideTreeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideTreeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slides_.MergeFrom(from._impl_.slides_);
  if (from._internal_has_rootslidenode()) {
    _this->_internal_mutable_rootslidenode()->::TSP::Reference::MergeFrom(
        from._internal_rootslidenode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideTreeArchive::CopyFrom(const SlideTreeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideTreeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideTreeArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slides_))
    return false;
  if (_internal_has_rootslidenode()) {
    if (!_impl_.rootslidenode_->IsInitialized()) return false;
  }
  return true;
}

void SlideTreeArchive::InternalSwap(SlideTreeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slides_.InternalSwap(&other->_impl_.slides_);
  swap(_impl_.rootslidenode_, other->_impl_.rootslidenode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideTreeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[27]);
}

// ===================================================================

class ShowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& uistate(const ShowArchive* msg);
  static void set_has_uistate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const ShowArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::SlideTreeArchive& slidetree(const ShowArchive* msg);
  static void set_has_slidetree(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Size& size(const ShowArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& stylesheet(const ShowArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_slidenumbersvisible(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& recording(const ShowArchive* msg);
  static void set_has_recording(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_loop_presentation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_autoplay_transition_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_autoplay_build_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_idle_timer_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_idle_timer_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& soundtrack(const ShowArchive* msg);
  static void set_has_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_automatically_plays_upon_open(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& slidelist(const ShowArchive* msg);
  static void set_has_slidelist(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

const ::TSP::Reference&
ShowArchive::_Internal::uistate(const ShowArchive* msg) {
  return *msg->_impl_.uistate_;
}
const ::TSP::Reference&
ShowArchive::_Internal::theme(const ShowArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::KN::SlideTreeArchive&
ShowArchive::_Internal::slidetree(const ShowArchive* msg) {
  return *msg->_impl_.slidetree_;
}
const ::TSP::Size&
ShowArchive::_Internal::size(const ShowArchive* msg) {
  return *msg->_impl_.size_;
}
const ::TSP::Reference&
ShowArchive::_Internal::stylesheet(const ShowArchive* msg) {
  return *msg->_impl_.stylesheet_;
}
const ::TSP::Reference&
ShowArchive::_Internal::recording(const ShowArchive* msg) {
  return *msg->_impl_.recording_;
}
const ::TSP::Reference&
ShowArchive::_Internal::soundtrack(const ShowArchive* msg) {
  return *msg->_impl_.soundtrack_;
}
const ::TSP::Reference&
ShowArchive::_Internal::slidelist(const ShowArchive* msg) {
  return *msg->_impl_.slidelist_;
}
void ShowArchive::clear_uistate() {
  if (_impl_.uistate_ != nullptr) _impl_.uistate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ShowArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ShowArchive::clear_size() {
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ShowArchive::clear_stylesheet() {
  if (_impl_.stylesheet_ != nullptr) _impl_.stylesheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ShowArchive::clear_recording() {
  if (_impl_.recording_ != nullptr) _impl_.recording_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ShowArchive::clear_soundtrack() {
  if (_impl_.soundtrack_ != nullptr) _impl_.soundtrack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ShowArchive::clear_slidelist() {
  if (_impl_.slidelist_ != nullptr) _impl_.slidelist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
ShowArchive::ShowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.ShowArchive)
}
ShowArchive::ShowArchive(const ShowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShowArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uistate_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.slidetree_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.recording_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.slidelist_){nullptr}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.slidenumbersvisible_){}
    , decltype(_impl_.loop_presentation_){}
    , decltype(_impl_.idle_timer_active_){}
    , decltype(_impl_.automatically_plays_upon_open_){}
    , decltype(_impl_.autoplay_transition_delay_){}
    , decltype(_impl_.autoplay_build_delay_){}
    , decltype(_impl_.idle_timer_delay_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uistate()) {
    _this->_impl_.uistate_ = new ::TSP::Reference(*from._impl_.uistate_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_slidetree()) {
    _this->_impl_.slidetree_ = new ::KN::SlideTreeArchive(*from._impl_.slidetree_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::TSP::Size(*from._impl_.size_);
  }
  if (from._internal_has_stylesheet()) {
    _this->_impl_.stylesheet_ = new ::TSP::Reference(*from._impl_.stylesheet_);
  }
  if (from._internal_has_recording()) {
    _this->_impl_.recording_ = new ::TSP::Reference(*from._impl_.recording_);
  }
  if (from._internal_has_soundtrack()) {
    _this->_impl_.soundtrack_ = new ::TSP::Reference(*from._impl_.soundtrack_);
  }
  if (from._internal_has_slidelist()) {
    _this->_impl_.slidelist_ = new ::TSP::Reference(*from._impl_.slidelist_);
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.idle_timer_delay_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.idle_timer_delay_));
  // @@protoc_insertion_point(copy_constructor:KN.ShowArchive)
}

inline void ShowArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uistate_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.slidetree_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.recording_){nullptr}
    , decltype(_impl_.soundtrack_){nullptr}
    , decltype(_impl_.slidelist_){nullptr}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.slidenumbersvisible_){false}
    , decltype(_impl_.loop_presentation_){false}
    , decltype(_impl_.idle_timer_active_){false}
    , decltype(_impl_.automatically_plays_upon_open_){false}
    , decltype(_impl_.autoplay_transition_delay_){5}
    , decltype(_impl_.autoplay_build_delay_){2}
    , decltype(_impl_.idle_timer_delay_){900}
  };
}

ShowArchive::~ShowArchive() {
  // @@protoc_insertion_point(destructor:KN.ShowArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uistate_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.slidetree_;
  if (this != internal_default_instance()) delete _impl_.size_;
  if (this != internal_default_instance()) delete _impl_.stylesheet_;
  if (this != internal_default_instance()) delete _impl_.recording_;
  if (this != internal_default_instance()) delete _impl_.soundtrack_;
  if (this != internal_default_instance()) delete _impl_.slidelist_;
}

void ShowArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.ShowArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.uistate_ != nullptr);
      _impl_.uistate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slidetree_ != nullptr);
      _impl_.slidetree_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.stylesheet_ != nullptr);
      _impl_.stylesheet_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.recording_ != nullptr);
      _impl_.recording_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.soundtrack_ != nullptr);
      _impl_.soundtrack_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.slidelist_ != nullptr);
      _impl_.slidelist_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.automatically_plays_upon_open_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.automatically_plays_upon_open_));
    _impl_.autoplay_transition_delay_ = 5;
    _impl_.autoplay_build_delay_ = 2;
    _impl_.idle_timer_delay_ = 900;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShowArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference uiState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uistate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .KN.SlideTreeArchive slideTree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidetree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Size size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference stylesheet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool slideNumbersVisible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_slidenumbersvisible(&has_bits);
          _impl_.slidenumbersvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference recording = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_recording(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool loop_presentation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_loop_presentation(&has_bits);
          _impl_.loop_presentation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::ShowArchive_KNShowMode_IsValid(val))) {
            _internal_set_mode(static_cast<::KN::ShowArchive_KNShowMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double autoplay_transition_delay = 10 [default = 5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_autoplay_transition_delay(&has_bits);
          _impl_.autoplay_transition_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double autoplay_build_delay = 11 [default = 2];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_autoplay_build_delay(&has_bits);
          _impl_.autoplay_build_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool idle_timer_active = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_idle_timer_active(&has_bits);
          _impl_.idle_timer_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double idle_timer_delay = 16 [default = 900];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_idle_timer_delay(&has_bits);
          _impl_.idle_timer_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference soundtrack = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_soundtrack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automatically_plays_upon_open = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_automatically_plays_upon_open(&has_bits);
          _impl_.automatically_plays_upon_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference slideList = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_slidelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShowArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.ShowArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference uiState = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uistate(this),
        _Internal::uistate(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .KN.SlideTreeArchive slideTree = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::slidetree(this),
        _Internal::slidetree(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Size size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference stylesheet = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stylesheet(this),
        _Internal::stylesheet(this).GetCachedSize(), target, stream);
  }

  // optional bool slideNumbersVisible = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_slidenumbersvisible(), target);
  }

  // optional .TSP.Reference recording = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::recording(this),
        _Internal::recording(this).GetCachedSize(), target, stream);
  }

  // optional bool loop_presentation = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_loop_presentation(), target);
  }

  // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_mode(), target);
  }

  // optional double autoplay_transition_delay = 10 [default = 5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_autoplay_transition_delay(), target);
  }

  // optional double autoplay_build_delay = 11 [default = 2];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_autoplay_build_delay(), target);
  }

  // optional bool idle_timer_active = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_idle_timer_active(), target);
  }

  // optional double idle_timer_delay = 16 [default = 900];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_idle_timer_delay(), target);
  }

  // optional .TSP.Reference soundtrack = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::soundtrack(this),
        _Internal::soundtrack(this).GetCachedSize(), target, stream);
  }

  // optional bool automatically_plays_upon_open = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_automatically_plays_upon_open(), target);
  }

  // optional .TSP.Reference slideList = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::slidelist(this),
        _Internal::slidelist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.ShowArchive)
  return target;
}

size_t ShowArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.ShowArchive)
  size_t total_size = 0;

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_slidetree()) {
    // required .KN.SlideTreeArchive slideTree = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidetree_);
  }

  if (_internal_has_size()) {
    // required .TSP.Size size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  if (_internal_has_stylesheet()) {
    // required .TSP.Reference stylesheet = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stylesheet_);
  }

  return total_size;
}
size_t ShowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.ShowArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .KN.SlideTreeArchive slideTree = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slidetree_);

    // required .TSP.Size size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);

    // required .TSP.Reference stylesheet = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stylesheet_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference uiState = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uistate_);
  }

  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference recording = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recording_);
    }

    // optional .TSP.Reference soundtrack = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.soundtrack_);
    }

    // optional .TSP.Reference slideList = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slidelist_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional bool slideNumbersVisible = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool loop_presentation = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool idle_timer_active = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool automatically_plays_upon_open = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional double autoplay_transition_delay = 10 [default = 5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double autoplay_build_delay = 11 [default = 2];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double idle_timer_delay = 16 [default = 900];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShowArchive::GetClassData() const { return &_class_data_; }


void ShowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShowArchive*>(&to_msg);
  auto& from = static_cast<const ShowArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.ShowArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_uistate()->::TSP::Reference::MergeFrom(
          from._internal_uistate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slidetree()->::KN::SlideTreeArchive::MergeFrom(
          from._internal_slidetree());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_size()->::TSP::Size::MergeFrom(
          from._internal_size());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(
          from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_recording()->::TSP::Reference::MergeFrom(
          from._internal_recording());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_soundtrack()->::TSP::Reference::MergeFrom(
          from._internal_soundtrack());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_slidelist()->::TSP::Reference::MergeFrom(
          from._internal_slidelist());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.slidenumbersvisible_ = from._impl_.slidenumbersvisible_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.loop_presentation_ = from._impl_.loop_presentation_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.idle_timer_active_ = from._impl_.idle_timer_active_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.automatically_plays_upon_open_ = from._impl_.automatically_plays_upon_open_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.autoplay_transition_delay_ = from._impl_.autoplay_transition_delay_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.autoplay_build_delay_ = from._impl_.autoplay_build_delay_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.idle_timer_delay_ = from._impl_.idle_timer_delay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShowArchive::CopyFrom(const ShowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.ShowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_uistate()) {
    if (!_impl_.uistate_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_slidetree()) {
    if (!_impl_.slidetree_->IsInitialized()) return false;
  }
  if (_internal_has_size()) {
    if (!_impl_.size_->IsInitialized()) return false;
  }
  if (_internal_has_stylesheet()) {
    if (!_impl_.stylesheet_->IsInitialized()) return false;
  }
  if (_internal_has_recording()) {
    if (!_impl_.recording_->IsInitialized()) return false;
  }
  if (_internal_has_soundtrack()) {
    if (!_impl_.soundtrack_->IsInitialized()) return false;
  }
  if (_internal_has_slidelist()) {
    if (!_impl_.slidelist_->IsInitialized()) return false;
  }
  return true;
}

void ShowArchive::InternalSwap(ShowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShowArchive, _impl_.automatically_plays_upon_open_)
      + sizeof(ShowArchive::_impl_.automatically_plays_upon_open_)
      - PROTOBUF_FIELD_OFFSET(ShowArchive, _impl_.uistate_)>(
          reinterpret_cast<char*>(&_impl_.uistate_),
          reinterpret_cast<char*>(&other->_impl_.uistate_));
  swap(_impl_.autoplay_transition_delay_, other->_impl_.autoplay_transition_delay_);
  swap(_impl_.autoplay_build_delay_, other->_impl_.autoplay_build_delay_);
  swap(_impl_.idle_timer_delay_, other->_impl_.idle_timer_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[28]);
}

// ===================================================================

class DocumentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentArchive>()._impl_._has_bits_);
  static const ::TSA::DocumentArchive& super(const DocumentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& show(const DocumentArchive* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tables_custom_format_list(const DocumentArchive* msg);
  static void set_has_tables_custom_format_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSA::DocumentArchive&
DocumentArchive::_Internal::super(const DocumentArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::show(const DocumentArchive* msg) {
  return *msg->_impl_.show_;
}
const ::TSP::Reference&
DocumentArchive::_Internal::tables_custom_format_list(const DocumentArchive* msg) {
  return *msg->_impl_.tables_custom_format_list_;
}
void DocumentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DocumentArchive::clear_show() {
  if (_impl_.show_ != nullptr) _impl_.show_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DocumentArchive::clear_tables_custom_format_list() {
  if (_impl_.tables_custom_format_list_ != nullptr) _impl_.tables_custom_format_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DocumentArchive::DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.DocumentArchive)
}
DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocumentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tables_custom_format_list_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_show()) {
    _this->_impl_.show_ = new ::TSP::Reference(*from._impl_.show_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSA::DocumentArchive(*from._impl_.super_);
  }
  if (from._internal_has_tables_custom_format_list()) {
    _this->_impl_.tables_custom_format_list_ = new ::TSP::Reference(*from._impl_.tables_custom_format_list_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.DocumentArchive)
}

inline void DocumentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.show_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tables_custom_format_list_){nullptr}
  };
}

DocumentArchive::~DocumentArchive() {
  // @@protoc_insertion_point(destructor:KN.DocumentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocumentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.show_;
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tables_custom_format_list_;
}

void DocumentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocumentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.DocumentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.show_ != nullptr);
      _impl_.show_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tables_custom_format_list_ != nullptr);
      _impl_.tables_custom_format_list_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSA.DocumentArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference tables_custom_format_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tables_custom_format_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.DocumentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference show = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::show(this),
        _Internal::show(this).GetCachedSize(), target, stream);
  }

  // required .TSA.DocumentArchive super = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference tables_custom_format_list = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tables_custom_format_list(this),
        _Internal::tables_custom_format_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.DocumentArchive)
  return target;
}

size_t DocumentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.DocumentArchive)
  size_t total_size = 0;

  if (_internal_has_show()) {
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);
  }

  if (_internal_has_super()) {
    // required .TSA.DocumentArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t DocumentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.DocumentArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference show = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.show_);

    // required .TSA.DocumentArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference tables_custom_format_list = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tables_custom_format_list_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocumentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentArchive::GetClassData() const { return &_class_data_; }


void DocumentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocumentArchive*>(&to_msg);
  auto& from = static_cast<const DocumentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.DocumentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_show()->::TSP::Reference::MergeFrom(
          from._internal_show());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSA::DocumentArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tables_custom_format_list()->::TSP::Reference::MergeFrom(
          from._internal_tables_custom_format_list());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.DocumentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_show()) {
    if (!_impl_.show_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tables_custom_format_list()) {
    if (!_impl_.tables_custom_format_list_->IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::InternalSwap(DocumentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.tables_custom_format_list_)
      + sizeof(DocumentArchive::_impl_.tables_custom_format_list_)
      - PROTOBUF_FIELD_OFFSET(DocumentArchive, _impl_.show_)>(
          reinterpret_cast<char*>(&_impl_.show_),
          reinterpret_cast<char*>(&other->_impl_.show_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[29]);
}

// ===================================================================

class SlideStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideStylePropertiesArchive>()._impl_._has_bits_);
  static const ::TSD::FillArchive& fill(const SlideStylePropertiesArchive* msg);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::TransitionAttributesArchive& transition(const SlideStylePropertiesArchive* msg);
  static void set_has_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transition_null(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_titleplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bodyplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_objectplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_slidenumberplaceholdervisibility(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSD::FillArchive&
SlideStylePropertiesArchive::_Internal::fill(const SlideStylePropertiesArchive* msg) {
  return *msg->_impl_.fill_;
}
const ::KN::TransitionAttributesArchive&
SlideStylePropertiesArchive::_Internal::transition(const SlideStylePropertiesArchive* msg) {
  return *msg->_impl_.transition_;
}
void SlideStylePropertiesArchive::clear_fill() {
  if (_impl_.fill_ != nullptr) _impl_.fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SlideStylePropertiesArchive::SlideStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideStylePropertiesArchive)
}
SlideStylePropertiesArchive::SlideStylePropertiesArchive(const SlideStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.transition_null_){}
    , decltype(_impl_.titleplaceholdervisibility_){}
    , decltype(_impl_.bodyplaceholdervisibility_){}
    , decltype(_impl_.objectplaceholdervisibility_){}
    , decltype(_impl_.slidenumberplaceholdervisibility_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    _this->_impl_.fill_ = new ::TSD::FillArchive(*from._impl_.fill_);
  }
  if (from._internal_has_transition()) {
    _this->_impl_.transition_ = new ::KN::TransitionAttributesArchive(*from._impl_.transition_);
  }
  ::memcpy(&_impl_.transition_null_, &from._impl_.transition_null_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slidenumberplaceholdervisibility_) -
    reinterpret_cast<char*>(&_impl_.transition_null_)) + sizeof(_impl_.slidenumberplaceholdervisibility_));
  // @@protoc_insertion_point(copy_constructor:KN.SlideStylePropertiesArchive)
}

inline void SlideStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fill_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.transition_null_){false}
    , decltype(_impl_.titleplaceholdervisibility_){false}
    , decltype(_impl_.bodyplaceholdervisibility_){false}
    , decltype(_impl_.objectplaceholdervisibility_){false}
    , decltype(_impl_.slidenumberplaceholdervisibility_){false}
  };
}

SlideStylePropertiesArchive::~SlideStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fill_;
  if (this != internal_default_instance()) delete _impl_.transition_;
}

void SlideStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.fill_ != nullptr);
      _impl_.fill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.transition_ != nullptr);
      _impl_.transition_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.transition_null_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.slidenumberplaceholdervisibility_) -
        reinterpret_cast<char*>(&_impl_.transition_null_)) + sizeof(_impl_.slidenumberplaceholdervisibility_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.TransitionAttributesArchive transition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool transition_null = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_transition_null(&has_bits);
          _impl_.transition_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool titlePlaceholderVisibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_titleplaceholdervisibility(&has_bits);
          _impl_.titleplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bodyPlaceholderVisibility = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bodyplaceholdervisibility(&has_bits);
          _impl_.bodyplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool slideNumberPlaceholderVisibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_slidenumberplaceholdervisibility(&has_bits);
          _impl_.slidenumberplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool objectPlaceholderVisibility = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_objectplaceholdervisibility(&has_bits);
          _impl_.objectplaceholdervisibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fill(this),
        _Internal::fill(this).GetCachedSize(), target, stream);
  }

  // optional .KN.TransitionAttributesArchive transition = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transition(this),
        _Internal::transition(this).GetCachedSize(), target, stream);
  }

  // optional bool transition_null = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_transition_null(), target);
  }

  // optional bool titlePlaceholderVisibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_titleplaceholdervisibility(), target);
  }

  // optional bool bodyPlaceholderVisibility = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_bodyplaceholdervisibility(), target);
  }

  // optional bool slideNumberPlaceholderVisibility = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_slidenumberplaceholdervisibility(), target);
  }

  // optional bool objectPlaceholderVisibility = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_objectplaceholdervisibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideStylePropertiesArchive)
  return target;
}

size_t SlideStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSD.FillArchive fill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fill_);
    }

    // optional .KN.TransitionAttributesArchive transition = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transition_);
    }

    // optional bool transition_null = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool titlePlaceholderVisibility = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bodyPlaceholderVisibility = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool objectPlaceholderVisibility = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool slideNumberPlaceholderVisibility = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void SlideStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const SlideStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transition()->::KN::TransitionAttributesArchive::MergeFrom(
          from._internal_transition());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.transition_null_ = from._impl_.transition_null_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.titleplaceholdervisibility_ = from._impl_.titleplaceholdervisibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bodyplaceholdervisibility_ = from._impl_.bodyplaceholdervisibility_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.objectplaceholdervisibility_ = from._impl_.objectplaceholdervisibility_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.slidenumberplaceholdervisibility_ = from._impl_.slidenumberplaceholdervisibility_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideStylePropertiesArchive::CopyFrom(const SlideStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_fill()) {
    if (!_impl_.fill_->IsInitialized()) return false;
  }
  if (_internal_has_transition()) {
    if (!_impl_.transition_->IsInitialized()) return false;
  }
  return true;
}

void SlideStylePropertiesArchive::InternalSwap(SlideStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideStylePropertiesArchive, _impl_.slidenumberplaceholdervisibility_)
      + sizeof(SlideStylePropertiesArchive::_impl_.slidenumberplaceholdervisibility_)
      - PROTOBUF_FIELD_OFFSET(SlideStylePropertiesArchive, _impl_.fill_)>(
          reinterpret_cast<char*>(&_impl_.fill_),
          reinterpret_cast<char*>(&other->_impl_.fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[30]);
}

// ===================================================================

class SlideStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const SlideStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::SlideStylePropertiesArchive& slide_properties(const SlideStyleArchive* msg);
  static void set_has_slide_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
SlideStyleArchive::_Internal::super(const SlideStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::KN::SlideStylePropertiesArchive&
SlideStyleArchive::_Internal::slide_properties(const SlideStyleArchive* msg) {
  return *msg->_impl_.slide_properties_;
}
void SlideStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SlideStyleArchive::SlideStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideStyleArchive)
}
SlideStyleArchive::SlideStyleArchive(const SlideStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_properties_){nullptr}
    , decltype(_impl_.override_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_properties()) {
    _this->_impl_.slide_properties_ = new ::KN::SlideStylePropertiesArchive(*from._impl_.slide_properties_);
  }
  _this->_impl_.override_count_ = from._impl_.override_count_;
  // @@protoc_insertion_point(copy_constructor:KN.SlideStyleArchive)
}

inline void SlideStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_properties_){nullptr}
    , decltype(_impl_.override_count_){0u}
  };
}

SlideStyleArchive::~SlideStyleArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_properties_;
}

void SlideStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_properties_ != nullptr);
      _impl_.slide_properties_->Clear();
    }
  }
  _impl_.override_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::slide_properties(this),
        _Internal::slide_properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideStyleArchive)
  return target;
}

size_t SlideStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_properties_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideStyleArchive::GetClassData() const { return &_class_data_; }


void SlideStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideStyleArchive*>(&to_msg);
  auto& from = static_cast<const SlideStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_properties()->::KN::SlideStylePropertiesArchive::MergeFrom(
          from._internal_slide_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideStyleArchive::CopyFrom(const SlideStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_properties()) {
    if (!_impl_.slide_properties_->IsInitialized()) return false;
  }
  return true;
}

void SlideStyleArchive::InternalSwap(SlideStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideStyleArchive, _impl_.override_count_)
      + sizeof(SlideStyleArchive::_impl_.override_count_)
      - PROTOBUF_FIELD_OFFSET(SlideStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[31]);
}

// ===================================================================

class PasteboardNativeStorageArchive_LiveVideoSourcePair::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteboardNativeStorageArchive_LiveVideoSourcePair>()._impl_._has_bits_);
  static const ::TSP::Reference& live_video_info(const PasteboardNativeStorageArchive_LiveVideoSourcePair* msg);
  static void set_has_live_video_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& live_video_source(const PasteboardNativeStorageArchive_LiveVideoSourcePair* msg);
  static void set_has_live_video_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
PasteboardNativeStorageArchive_LiveVideoSourcePair::_Internal::live_video_info(const PasteboardNativeStorageArchive_LiveVideoSourcePair* msg) {
  return *msg->_impl_.live_video_info_;
}
const ::TSP::Reference&
PasteboardNativeStorageArchive_LiveVideoSourcePair::_Internal::live_video_source(const PasteboardNativeStorageArchive_LiveVideoSourcePair* msg) {
  return *msg->_impl_.live_video_source_;
}
void PasteboardNativeStorageArchive_LiveVideoSourcePair::clear_live_video_info() {
  if (_impl_.live_video_info_ != nullptr) _impl_.live_video_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PasteboardNativeStorageArchive_LiveVideoSourcePair::clear_live_video_source() {
  if (_impl_.live_video_source_ != nullptr) _impl_.live_video_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PasteboardNativeStorageArchive_LiveVideoSourcePair::PasteboardNativeStorageArchive_LiveVideoSourcePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.PasteboardNativeStorageArchive.LiveVideoSourcePair)
}
PasteboardNativeStorageArchive_LiveVideoSourcePair::PasteboardNativeStorageArchive_LiveVideoSourcePair(const PasteboardNativeStorageArchive_LiveVideoSourcePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PasteboardNativeStorageArchive_LiveVideoSourcePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.live_video_info_){nullptr}
    , decltype(_impl_.live_video_source_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_live_video_info()) {
    _this->_impl_.live_video_info_ = new ::TSP::Reference(*from._impl_.live_video_info_);
  }
  if (from._internal_has_live_video_source()) {
    _this->_impl_.live_video_source_ = new ::TSP::Reference(*from._impl_.live_video_source_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.PasteboardNativeStorageArchive.LiveVideoSourcePair)
}

inline void PasteboardNativeStorageArchive_LiveVideoSourcePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.live_video_info_){nullptr}
    , decltype(_impl_.live_video_source_){nullptr}
  };
}

PasteboardNativeStorageArchive_LiveVideoSourcePair::~PasteboardNativeStorageArchive_LiveVideoSourcePair() {
  // @@protoc_insertion_point(destructor:KN.PasteboardNativeStorageArchive.LiveVideoSourcePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasteboardNativeStorageArchive_LiveVideoSourcePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.live_video_info_;
  if (this != internal_default_instance()) delete _impl_.live_video_source_;
}

void PasteboardNativeStorageArchive_LiveVideoSourcePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PasteboardNativeStorageArchive_LiveVideoSourcePair::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PasteboardNativeStorageArchive.LiveVideoSourcePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.live_video_info_ != nullptr);
      _impl_.live_video_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.live_video_source_ != nullptr);
      _impl_.live_video_source_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteboardNativeStorageArchive_LiveVideoSourcePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference live_video_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_video_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference live_video_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_video_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasteboardNativeStorageArchive_LiveVideoSourcePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PasteboardNativeStorageArchive.LiveVideoSourcePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference live_video_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::live_video_info(this),
        _Internal::live_video_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference live_video_source = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::live_video_source(this),
        _Internal::live_video_source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PasteboardNativeStorageArchive.LiveVideoSourcePair)
  return target;
}

size_t PasteboardNativeStorageArchive_LiveVideoSourcePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PasteboardNativeStorageArchive.LiveVideoSourcePair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference live_video_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.live_video_info_);
    }

    // optional .TSP.Reference live_video_source = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.live_video_source_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PasteboardNativeStorageArchive_LiveVideoSourcePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PasteboardNativeStorageArchive_LiveVideoSourcePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PasteboardNativeStorageArchive_LiveVideoSourcePair::GetClassData() const { return &_class_data_; }


void PasteboardNativeStorageArchive_LiveVideoSourcePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PasteboardNativeStorageArchive_LiveVideoSourcePair*>(&to_msg);
  auto& from = static_cast<const PasteboardNativeStorageArchive_LiveVideoSourcePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.PasteboardNativeStorageArchive.LiveVideoSourcePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_live_video_info()->::TSP::Reference::MergeFrom(
          from._internal_live_video_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_live_video_source()->::TSP::Reference::MergeFrom(
          from._internal_live_video_source());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PasteboardNativeStorageArchive_LiveVideoSourcePair::CopyFrom(const PasteboardNativeStorageArchive_LiveVideoSourcePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PasteboardNativeStorageArchive.LiveVideoSourcePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardNativeStorageArchive_LiveVideoSourcePair::IsInitialized() const {
  if (_internal_has_live_video_info()) {
    if (!_impl_.live_video_info_->IsInitialized()) return false;
  }
  if (_internal_has_live_video_source()) {
    if (!_impl_.live_video_source_->IsInitialized()) return false;
  }
  return true;
}

void PasteboardNativeStorageArchive_LiveVideoSourcePair::InternalSwap(PasteboardNativeStorageArchive_LiveVideoSourcePair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteboardNativeStorageArchive_LiveVideoSourcePair, _impl_.live_video_source_)
      + sizeof(PasteboardNativeStorageArchive_LiveVideoSourcePair::_impl_.live_video_source_)
      - PROTOBUF_FIELD_OFFSET(PasteboardNativeStorageArchive_LiveVideoSourcePair, _impl_.live_video_info_)>(
          reinterpret_cast<char*>(&_impl_.live_video_info_),
          reinterpret_cast<char*>(&other->_impl_.live_video_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteboardNativeStorageArchive_LiveVideoSourcePair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[32]);
}

// ===================================================================

class PasteboardNativeStorageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PasteboardNativeStorageArchive>()._impl_._has_bits_);
  static const ::TSP::Size& originalshowsize(const PasteboardNativeStorageArchive* msg);
  static void set_has_originalshowsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slide_node_unique_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slide_nodes_have_datas_needing_download(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::TransitionArchive& transition(const PasteboardNativeStorageArchive* msg);
  static void set_has_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Size&
PasteboardNativeStorageArchive::_Internal::originalshowsize(const PasteboardNativeStorageArchive* msg) {
  return *msg->_impl_.originalshowsize_;
}
const ::KN::TransitionArchive&
PasteboardNativeStorageArchive::_Internal::transition(const PasteboardNativeStorageArchive* msg) {
  return *msg->_impl_.transition_;
}
void PasteboardNativeStorageArchive::clear_drawables() {
  _impl_.drawables_.Clear();
}
void PasteboardNativeStorageArchive::clear_builds() {
  _impl_.builds_.Clear();
}
void PasteboardNativeStorageArchive::clear_buildchunks() {
  _impl_.buildchunks_.Clear();
}
void PasteboardNativeStorageArchive::clear_slidenodes() {
  _impl_.slidenodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_displayed_slide_nodes() {
  _impl_.displayed_slide_nodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_template_slide_nodes() {
  _impl_.template_slide_nodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_collapsedslidenodes() {
  _impl_.collapsedslidenodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_outlinecollapsedslidenodes() {
  _impl_.outlinecollapsedslidenodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_outlinehasbodyslidenodes() {
  _impl_.outlinehasbodyslidenodes_.Clear();
}
void PasteboardNativeStorageArchive::clear_originalshowsize() {
  if (_impl_.originalshowsize_ != nullptr) _impl_.originalshowsize_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PasteboardNativeStorageArchive::clear_titleranges() {
  _impl_.titleranges_.Clear();
}
void PasteboardNativeStorageArchive::clear_geometries_in_root() {
  _impl_.geometries_in_root_.Clear();
}
PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.PasteboardNativeStorageArchive)
}
PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(const PasteboardNativeStorageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PasteboardNativeStorageArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){from._impl_.drawables_}
    , decltype(_impl_.builds_){from._impl_.builds_}
    , decltype(_impl_.buildchunks_){from._impl_.buildchunks_}
    , decltype(_impl_.slidenodes_){from._impl_.slidenodes_}
    , decltype(_impl_.titleranges_){from._impl_.titleranges_}
    , decltype(_impl_.geometries_in_root_){from._impl_.geometries_in_root_}
    , decltype(_impl_.template_slide_nodes_){from._impl_.template_slide_nodes_}
    , decltype(_impl_.collapsedslidenodes_){from._impl_.collapsedslidenodes_}
    , decltype(_impl_.outlinecollapsedslidenodes_){from._impl_.outlinecollapsedslidenodes_}
    , decltype(_impl_.displayed_slide_nodes_){from._impl_.displayed_slide_nodes_}
    , decltype(_impl_.outlinehasbodyslidenodes_){from._impl_.outlinehasbodyslidenodes_}
    , decltype(_impl_.custom_effect_timing_curves_){from._impl_.custom_effect_timing_curves_}
    , decltype(_impl_.original_slide_node_uuids_){from._impl_.original_slide_node_uuids_}
    , decltype(_impl_.live_video_sources_){from._impl_.live_video_sources_}
    , decltype(_impl_.slide_node_unique_identifier_){}
    , decltype(_impl_.originalshowsize_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.slide_nodes_have_datas_needing_download_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.slide_node_unique_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slide_node_unique_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_slide_node_unique_identifier()) {
    _this->_impl_.slide_node_unique_identifier_.Set(from._internal_slide_node_unique_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_originalshowsize()) {
    _this->_impl_.originalshowsize_ = new ::TSP::Size(*from._impl_.originalshowsize_);
  }
  if (from._internal_has_transition()) {
    _this->_impl_.transition_ = new ::KN::TransitionArchive(*from._impl_.transition_);
  }
  _this->_impl_.slide_nodes_have_datas_needing_download_ = from._impl_.slide_nodes_have_datas_needing_download_;
  // @@protoc_insertion_point(copy_constructor:KN.PasteboardNativeStorageArchive)
}

inline void PasteboardNativeStorageArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawables_){arena}
    , decltype(_impl_.builds_){arena}
    , decltype(_impl_.buildchunks_){arena}
    , decltype(_impl_.slidenodes_){arena}
    , decltype(_impl_.titleranges_){arena}
    , decltype(_impl_.geometries_in_root_){arena}
    , decltype(_impl_.template_slide_nodes_){arena}
    , decltype(_impl_.collapsedslidenodes_){arena}
    , decltype(_impl_.outlinecollapsedslidenodes_){arena}
    , decltype(_impl_.displayed_slide_nodes_){arena}
    , decltype(_impl_.outlinehasbodyslidenodes_){arena}
    , decltype(_impl_.custom_effect_timing_curves_){arena}
    , decltype(_impl_.original_slide_node_uuids_){arena}
    , decltype(_impl_.live_video_sources_){arena}
    , decltype(_impl_.slide_node_unique_identifier_){}
    , decltype(_impl_.originalshowsize_){nullptr}
    , decltype(_impl_.transition_){nullptr}
    , decltype(_impl_.slide_nodes_have_datas_needing_download_){false}
  };
  _impl_.slide_node_unique_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slide_node_unique_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PasteboardNativeStorageArchive::~PasteboardNativeStorageArchive() {
  // @@protoc_insertion_point(destructor:KN.PasteboardNativeStorageArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PasteboardNativeStorageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawables_.~RepeatedPtrField();
  _impl_.builds_.~RepeatedPtrField();
  _impl_.buildchunks_.~RepeatedPtrField();
  _impl_.slidenodes_.~RepeatedPtrField();
  _impl_.titleranges_.~RepeatedPtrField();
  _impl_.geometries_in_root_.~RepeatedPtrField();
  _impl_.template_slide_nodes_.~RepeatedPtrField();
  _impl_.collapsedslidenodes_.~RepeatedPtrField();
  _impl_.outlinecollapsedslidenodes_.~RepeatedPtrField();
  _impl_.displayed_slide_nodes_.~RepeatedPtrField();
  _impl_.outlinehasbodyslidenodes_.~RepeatedPtrField();
  _impl_.custom_effect_timing_curves_.~RepeatedPtrField();
  _impl_.original_slide_node_uuids_.~RepeatedPtrField();
  _impl_.live_video_sources_.~RepeatedPtrField();
  _impl_.slide_node_unique_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.originalshowsize_;
  if (this != internal_default_instance()) delete _impl_.transition_;
}

void PasteboardNativeStorageArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PasteboardNativeStorageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PasteboardNativeStorageArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawables_.Clear();
  _impl_.builds_.Clear();
  _impl_.buildchunks_.Clear();
  _impl_.slidenodes_.Clear();
  _impl_.titleranges_.Clear();
  _impl_.geometries_in_root_.Clear();
  _impl_.template_slide_nodes_.Clear();
  _impl_.collapsedslidenodes_.Clear();
  _impl_.outlinecollapsedslidenodes_.Clear();
  _impl_.displayed_slide_nodes_.Clear();
  _impl_.outlinehasbodyslidenodes_.Clear();
  _impl_.custom_effect_timing_curves_.Clear();
  _impl_.original_slide_node_uuids_.Clear();
  _impl_.live_video_sources_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.slide_node_unique_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.originalshowsize_ != nullptr);
      _impl_.originalshowsize_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.transition_ != nullptr);
      _impl_.transition_->Clear();
    }
  }
  _impl_.slide_nodes_have_datas_needing_download_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PasteboardNativeStorageArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference drawables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference builds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_builds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference buildChunks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildchunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference slideNodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size originalShowSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_originalshowsize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Range titleRanges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_titleranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSD.GeometryArchive geometries_in_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geometries_in_root(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string slide_node_unique_identifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_slide_node_unique_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.PasteboardNativeStorageArchive.slide_node_unique_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference template_slide_nodes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_template_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference collapsedSlideNodes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collapsedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference outlineCollapsedSlideNodes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outlinecollapsedslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference displayed_slide_nodes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_displayed_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference outlineHasBodySlideNodes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outlinehasbodyslidenodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_effect_timing_curves(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string original_slide_node_UUIDs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_original_slide_node_uuids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool slide_nodes_have_datas_needing_download = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_slide_nodes_have_datas_needing_download(&has_bits);
          _impl_.slide_nodes_have_datas_needing_download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.TransitionArchive transition = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.PasteboardNativeStorageArchive.LiveVideoSourcePair live_video_sources = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_live_video_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PasteboardNativeStorageArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PasteboardNativeStorageArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawables_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference builds = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_builds_size()); i < n; i++) {
    const auto& repfield = this->_internal_builds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference buildChunks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buildchunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_buildchunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference slideNodes = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_slidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Size originalShowSize = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::originalshowsize(this),
        _Internal::originalshowsize(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Range titleRanges = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_titleranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_titleranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSD.GeometryArchive geometries_in_root = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_geometries_in_root_size()); i < n; i++) {
    const auto& repfield = this->_internal_geometries_in_root(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string slide_node_unique_identifier = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_slide_node_unique_identifier().data(), static_cast<int>(this->_internal_slide_node_unique_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.PasteboardNativeStorageArchive.slide_node_unique_identifier");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_slide_node_unique_identifier(), target);
  }

  // repeated .TSP.Reference template_slide_nodes = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_template_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_template_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference collapsedSlideNodes = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collapsedslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_collapsedslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference outlineCollapsedSlideNodes = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outlinecollapsedslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_outlinecollapsedslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference displayed_slide_nodes = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_displayed_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_displayed_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference outlineHasBodySlideNodes = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outlinehasbodyslidenodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_outlinehasbodyslidenodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_effect_timing_curves_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_effect_timing_curves(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string original_slide_node_UUIDs = 15;
  for (int i = 0, n = this->_internal_original_slide_node_uuids_size(); i < n; i++) {
    const auto& s = this->_internal_original_slide_node_uuids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.PasteboardNativeStorageArchive.original_slide_node_UUIDs");
    target = stream->WriteString(15, s, target);
  }

  // optional bool slide_nodes_have_datas_needing_download = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_slide_nodes_have_datas_needing_download(), target);
  }

  // optional .KN.TransitionArchive transition = 17;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::transition(this),
        _Internal::transition(this).GetCachedSize(), target, stream);
  }

  // repeated .KN.PasteboardNativeStorageArchive.LiveVideoSourcePair live_video_sources = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_live_video_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_live_video_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PasteboardNativeStorageArchive)
  return target;
}

size_t PasteboardNativeStorageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PasteboardNativeStorageArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference drawables = 1;
  total_size += 1UL * this->_internal_drawables_size();
  for (const auto& msg : this->_impl_.drawables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference builds = 2;
  total_size += 1UL * this->_internal_builds_size();
  for (const auto& msg : this->_impl_.builds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference buildChunks = 3;
  total_size += 1UL * this->_internal_buildchunks_size();
  for (const auto& msg : this->_impl_.buildchunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference slideNodes = 4;
  total_size += 1UL * this->_internal_slidenodes_size();
  for (const auto& msg : this->_impl_.slidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Range titleRanges = 6;
  total_size += 1UL * this->_internal_titleranges_size();
  for (const auto& msg : this->_impl_.titleranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSD.GeometryArchive geometries_in_root = 7;
  total_size += 1UL * this->_internal_geometries_in_root_size();
  for (const auto& msg : this->_impl_.geometries_in_root_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference template_slide_nodes = 9;
  total_size += 1UL * this->_internal_template_slide_nodes_size();
  for (const auto& msg : this->_impl_.template_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference collapsedSlideNodes = 10;
  total_size += 1UL * this->_internal_collapsedslidenodes_size();
  for (const auto& msg : this->_impl_.collapsedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference outlineCollapsedSlideNodes = 11;
  total_size += 1UL * this->_internal_outlinecollapsedslidenodes_size();
  for (const auto& msg : this->_impl_.outlinecollapsedslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference displayed_slide_nodes = 12;
  total_size += 1UL * this->_internal_displayed_slide_nodes_size();
  for (const auto& msg : this->_impl_.displayed_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference outlineHasBodySlideNodes = 13;
  total_size += 1UL * this->_internal_outlinehasbodyslidenodes_size();
  for (const auto& msg : this->_impl_.outlinehasbodyslidenodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.ThemeCustomTimingCurveArchive custom_effect_timing_curves = 14;
  total_size += 1UL * this->_internal_custom_effect_timing_curves_size();
  for (const auto& msg : this->_impl_.custom_effect_timing_curves_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string original_slide_node_UUIDs = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.original_slide_node_uuids_.size());
  for (int i = 0, n = _impl_.original_slide_node_uuids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.original_slide_node_uuids_.Get(i));
  }

  // repeated .KN.PasteboardNativeStorageArchive.LiveVideoSourcePair live_video_sources = 18;
  total_size += 2UL * this->_internal_live_video_sources_size();
  for (const auto& msg : this->_impl_.live_video_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string slide_node_unique_identifier = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_slide_node_unique_identifier());
    }

    // optional .TSP.Size originalShowSize = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.originalshowsize_);
    }

    // optional .KN.TransitionArchive transition = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transition_);
    }

    // optional bool slide_nodes_have_datas_needing_download = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PasteboardNativeStorageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PasteboardNativeStorageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PasteboardNativeStorageArchive::GetClassData() const { return &_class_data_; }


void PasteboardNativeStorageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PasteboardNativeStorageArchive*>(&to_msg);
  auto& from = static_cast<const PasteboardNativeStorageArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.PasteboardNativeStorageArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawables_.MergeFrom(from._impl_.drawables_);
  _this->_impl_.builds_.MergeFrom(from._impl_.builds_);
  _this->_impl_.buildchunks_.MergeFrom(from._impl_.buildchunks_);
  _this->_impl_.slidenodes_.MergeFrom(from._impl_.slidenodes_);
  _this->_impl_.titleranges_.MergeFrom(from._impl_.titleranges_);
  _this->_impl_.geometries_in_root_.MergeFrom(from._impl_.geometries_in_root_);
  _this->_impl_.template_slide_nodes_.MergeFrom(from._impl_.template_slide_nodes_);
  _this->_impl_.collapsedslidenodes_.MergeFrom(from._impl_.collapsedslidenodes_);
  _this->_impl_.outlinecollapsedslidenodes_.MergeFrom(from._impl_.outlinecollapsedslidenodes_);
  _this->_impl_.displayed_slide_nodes_.MergeFrom(from._impl_.displayed_slide_nodes_);
  _this->_impl_.outlinehasbodyslidenodes_.MergeFrom(from._impl_.outlinehasbodyslidenodes_);
  _this->_impl_.custom_effect_timing_curves_.MergeFrom(from._impl_.custom_effect_timing_curves_);
  _this->_impl_.original_slide_node_uuids_.MergeFrom(from._impl_.original_slide_node_uuids_);
  _this->_impl_.live_video_sources_.MergeFrom(from._impl_.live_video_sources_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_slide_node_unique_identifier(from._internal_slide_node_unique_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_originalshowsize()->::TSP::Size::MergeFrom(
          from._internal_originalshowsize());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_transition()->::KN::TransitionArchive::MergeFrom(
          from._internal_transition());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.slide_nodes_have_datas_needing_download_ = from._impl_.slide_nodes_have_datas_needing_download_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PasteboardNativeStorageArchive::CopyFrom(const PasteboardNativeStorageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PasteboardNativeStorageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardNativeStorageArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.builds_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.buildchunks_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slidenodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.titleranges_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.geometries_in_root_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.template_slide_nodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.collapsedslidenodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.outlinecollapsedslidenodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.displayed_slide_nodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.outlinehasbodyslidenodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_effect_timing_curves_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.live_video_sources_))
    return false;
  if (_internal_has_originalshowsize()) {
    if (!_impl_.originalshowsize_->IsInitialized()) return false;
  }
  if (_internal_has_transition()) {
    if (!_impl_.transition_->IsInitialized()) return false;
  }
  return true;
}

void PasteboardNativeStorageArchive::InternalSwap(PasteboardNativeStorageArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawables_.InternalSwap(&other->_impl_.drawables_);
  _impl_.builds_.InternalSwap(&other->_impl_.builds_);
  _impl_.buildchunks_.InternalSwap(&other->_impl_.buildchunks_);
  _impl_.slidenodes_.InternalSwap(&other->_impl_.slidenodes_);
  _impl_.titleranges_.InternalSwap(&other->_impl_.titleranges_);
  _impl_.geometries_in_root_.InternalSwap(&other->_impl_.geometries_in_root_);
  _impl_.template_slide_nodes_.InternalSwap(&other->_impl_.template_slide_nodes_);
  _impl_.collapsedslidenodes_.InternalSwap(&other->_impl_.collapsedslidenodes_);
  _impl_.outlinecollapsedslidenodes_.InternalSwap(&other->_impl_.outlinecollapsedslidenodes_);
  _impl_.displayed_slide_nodes_.InternalSwap(&other->_impl_.displayed_slide_nodes_);
  _impl_.outlinehasbodyslidenodes_.InternalSwap(&other->_impl_.outlinehasbodyslidenodes_);
  _impl_.custom_effect_timing_curves_.InternalSwap(&other->_impl_.custom_effect_timing_curves_);
  _impl_.original_slide_node_uuids_.InternalSwap(&other->_impl_.original_slide_node_uuids_);
  _impl_.live_video_sources_.InternalSwap(&other->_impl_.live_video_sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.slide_node_unique_identifier_, lhs_arena,
      &other->_impl_.slide_node_unique_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PasteboardNativeStorageArchive, _impl_.slide_nodes_have_datas_needing_download_)
      + sizeof(PasteboardNativeStorageArchive::_impl_.slide_nodes_have_datas_needing_download_)
      - PROTOBUF_FIELD_OFFSET(PasteboardNativeStorageArchive, _impl_.originalshowsize_)>(
          reinterpret_cast<char*>(&_impl_.originalshowsize_),
          reinterpret_cast<char*>(&other->_impl_.originalshowsize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PasteboardNativeStorageArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[33]);
}

// ===================================================================

class PrototypeForUndoTemplateChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PrototypeForUndoTemplateChangeArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& slide_style(const PrototypeForUndoTemplateChangeArchive* msg);
  static void set_has_slide_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& template_slide_id(const PrototypeForUndoTemplateChangeArchive* msg);
  static void set_has_template_slide_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
PrototypeForUndoTemplateChangeArchive::_Internal::slide_style(const PrototypeForUndoTemplateChangeArchive* msg) {
  return *msg->_impl_.slide_style_;
}
const ::TSP::UUID&
PrototypeForUndoTemplateChangeArchive::_Internal::template_slide_id(const PrototypeForUndoTemplateChangeArchive* msg) {
  return *msg->_impl_.template_slide_id_;
}
void PrototypeForUndoTemplateChangeArchive::clear_slide_style() {
  if (_impl_.slide_style_ != nullptr) _impl_.slide_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PrototypeForUndoTemplateChangeArchive::clear_template_slide_id() {
  if (_impl_.template_slide_id_ != nullptr) _impl_.template_slide_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PrototypeForUndoTemplateChangeArchive::clear_drawable_info_id_list() {
  _impl_.drawable_info_id_list_.Clear();
}
void PrototypeForUndoTemplateChangeArchive::clear_placeholders() {
  _impl_.placeholders_.Clear();
}
PrototypeForUndoTemplateChangeArchive::PrototypeForUndoTemplateChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.PrototypeForUndoTemplateChangeArchive)
}
PrototypeForUndoTemplateChangeArchive::PrototypeForUndoTemplateChangeArchive(const PrototypeForUndoTemplateChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrototypeForUndoTemplateChangeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_info_id_list_){from._impl_.drawable_info_id_list_}
    , decltype(_impl_.placeholders_){from._impl_.placeholders_}
    , decltype(_impl_.placeholder_tags_list_){from._impl_.placeholder_tags_list_}
    , decltype(_impl_.slide_style_){nullptr}
    , decltype(_impl_.template_slide_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_style()) {
    _this->_impl_.slide_style_ = new ::TSP::Reference(*from._impl_.slide_style_);
  }
  if (from._internal_has_template_slide_id()) {
    _this->_impl_.template_slide_id_ = new ::TSP::UUID(*from._impl_.template_slide_id_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.PrototypeForUndoTemplateChangeArchive)
}

inline void PrototypeForUndoTemplateChangeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drawable_info_id_list_){arena}
    , decltype(_impl_.placeholders_){arena}
    , decltype(_impl_.placeholder_tags_list_){arena}
    , decltype(_impl_.slide_style_){nullptr}
    , decltype(_impl_.template_slide_id_){nullptr}
  };
}

PrototypeForUndoTemplateChangeArchive::~PrototypeForUndoTemplateChangeArchive() {
  // @@protoc_insertion_point(destructor:KN.PrototypeForUndoTemplateChangeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrototypeForUndoTemplateChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drawable_info_id_list_.~RepeatedPtrField();
  _impl_.placeholders_.~RepeatedPtrField();
  _impl_.placeholder_tags_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.slide_style_;
  if (this != internal_default_instance()) delete _impl_.template_slide_id_;
}

void PrototypeForUndoTemplateChangeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrototypeForUndoTemplateChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PrototypeForUndoTemplateChangeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drawable_info_id_list_.Clear();
  _impl_.placeholders_.Clear();
  _impl_.placeholder_tags_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slide_style_ != nullptr);
      _impl_.slide_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.template_slide_id_ != nullptr);
      _impl_.template_slide_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrototypeForUndoTemplateChangeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference slide_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID template_slide_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_template_slide_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID drawable_info_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_info_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference placeholders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_placeholders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string placeholder_tags_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_placeholder_tags_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrototypeForUndoTemplateChangeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PrototypeForUndoTemplateChangeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference slide_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slide_style(this),
        _Internal::slide_style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID template_slide_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::template_slide_id(this),
        _Internal::template_slide_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID drawable_info_id_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawable_info_id_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawable_info_id_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference placeholders = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_placeholders_size()); i < n; i++) {
    const auto& repfield = this->_internal_placeholders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string placeholder_tags_list = 5;
  for (int i = 0, n = this->_internal_placeholder_tags_list_size(); i < n; i++) {
    const auto& s = this->_internal_placeholder_tags_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.PrototypeForUndoTemplateChangeArchive.placeholder_tags_list");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PrototypeForUndoTemplateChangeArchive)
  return target;
}

size_t PrototypeForUndoTemplateChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PrototypeForUndoTemplateChangeArchive)
  size_t total_size = 0;

  // required .TSP.UUID template_slide_id = 2;
  if (_internal_has_template_slide_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.template_slide_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID drawable_info_id_list = 3;
  total_size += 1UL * this->_internal_drawable_info_id_list_size();
  for (const auto& msg : this->_impl_.drawable_info_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference placeholders = 4;
  total_size += 1UL * this->_internal_placeholders_size();
  for (const auto& msg : this->_impl_.placeholders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string placeholder_tags_list = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.placeholder_tags_list_.size());
  for (int i = 0, n = _impl_.placeholder_tags_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.placeholder_tags_list_.Get(i));
  }

  // optional .TSP.Reference slide_style = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_style_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrototypeForUndoTemplateChangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrototypeForUndoTemplateChangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrototypeForUndoTemplateChangeArchive::GetClassData() const { return &_class_data_; }


void PrototypeForUndoTemplateChangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrototypeForUndoTemplateChangeArchive*>(&to_msg);
  auto& from = static_cast<const PrototypeForUndoTemplateChangeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.PrototypeForUndoTemplateChangeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drawable_info_id_list_.MergeFrom(from._impl_.drawable_info_id_list_);
  _this->_impl_.placeholders_.MergeFrom(from._impl_.placeholders_);
  _this->_impl_.placeholder_tags_list_.MergeFrom(from._impl_.placeholder_tags_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slide_style()->::TSP::Reference::MergeFrom(
          from._internal_slide_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_template_slide_id()->::TSP::UUID::MergeFrom(
          from._internal_template_slide_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrototypeForUndoTemplateChangeArchive::CopyFrom(const PrototypeForUndoTemplateChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PrototypeForUndoTemplateChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrototypeForUndoTemplateChangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.drawable_info_id_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.placeholders_))
    return false;
  if (_internal_has_slide_style()) {
    if (!_impl_.slide_style_->IsInitialized()) return false;
  }
  if (_internal_has_template_slide_id()) {
    if (!_impl_.template_slide_id_->IsInitialized()) return false;
  }
  return true;
}

void PrototypeForUndoTemplateChangeArchive::InternalSwap(PrototypeForUndoTemplateChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drawable_info_id_list_.InternalSwap(&other->_impl_.drawable_info_id_list_);
  _impl_.placeholders_.InternalSwap(&other->_impl_.placeholders_);
  _impl_.placeholder_tags_list_.InternalSwap(&other->_impl_.placeholder_tags_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrototypeForUndoTemplateChangeArchive, _impl_.template_slide_id_)
      + sizeof(PrototypeForUndoTemplateChangeArchive::_impl_.template_slide_id_)
      - PROTOBUF_FIELD_OFFSET(PrototypeForUndoTemplateChangeArchive, _impl_.slide_style_)>(
          reinterpret_cast<char*>(&_impl_.slide_style_),
          reinterpret_cast<char*>(&other->_impl_.slide_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrototypeForUndoTemplateChangeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[34]);
}

// ===================================================================

class RecordingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& movie_track(const RecordingArchive* msg);
  static void set_has_movie_track(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sync_state_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Date& modification_date(const RecordingArchive* msg);
  static void set_has_modification_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::RecordingSyncState& sync_state(const RecordingArchive* msg);
  static void set_has_sync_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::RecordingCorrectionHistory& correction_history(const RecordingArchive* msg);
  static void set_has_correction_history(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Reference&
RecordingArchive::_Internal::movie_track(const RecordingArchive* msg) {
  return *msg->_impl_.movie_track_;
}
const ::TSP::Date&
RecordingArchive::_Internal::modification_date(const RecordingArchive* msg) {
  return *msg->_impl_.modification_date_;
}
const ::KN::RecordingSyncState&
RecordingArchive::_Internal::sync_state(const RecordingArchive* msg) {
  return *msg->_impl_.sync_state_;
}
const ::KN::RecordingCorrectionHistory&
RecordingArchive::_Internal::correction_history(const RecordingArchive* msg) {
  return *msg->_impl_.correction_history_;
}
void RecordingArchive::clear_event_tracks() {
  _impl_.event_tracks_.Clear();
}
void RecordingArchive::clear_movie_track() {
  if (_impl_.movie_track_ != nullptr) _impl_.movie_track_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RecordingArchive::clear_modification_date() {
  if (_impl_.modification_date_ != nullptr) _impl_.modification_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RecordingArchive::RecordingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingArchive)
}
RecordingArchive::RecordingArchive(const RecordingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_tracks_){from._impl_.event_tracks_}
    , decltype(_impl_.movie_track_){nullptr}
    , decltype(_impl_.modification_date_){nullptr}
    , decltype(_impl_.sync_state_){nullptr}
    , decltype(_impl_.correction_history_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.sync_state_enum_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movie_track()) {
    _this->_impl_.movie_track_ = new ::TSP::Reference(*from._impl_.movie_track_);
  }
  if (from._internal_has_modification_date()) {
    _this->_impl_.modification_date_ = new ::TSP::Date(*from._impl_.modification_date_);
  }
  if (from._internal_has_sync_state()) {
    _this->_impl_.sync_state_ = new ::KN::RecordingSyncState(*from._impl_.sync_state_);
  }
  if (from._internal_has_correction_history()) {
    _this->_impl_.correction_history_ = new ::KN::RecordingCorrectionHistory(*from._impl_.correction_history_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sync_state_enum_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.sync_state_enum_));
  // @@protoc_insertion_point(copy_constructor:KN.RecordingArchive)
}

inline void RecordingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_tracks_){arena}
    , decltype(_impl_.movie_track_){nullptr}
    , decltype(_impl_.modification_date_){nullptr}
    , decltype(_impl_.sync_state_){nullptr}
    , decltype(_impl_.correction_history_){nullptr}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.sync_state_enum_){0}
  };
}

RecordingArchive::~RecordingArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_tracks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.movie_track_;
  if (this != internal_default_instance()) delete _impl_.modification_date_;
  if (this != internal_default_instance()) delete _impl_.sync_state_;
  if (this != internal_default_instance()) delete _impl_.correction_history_;
}

void RecordingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_tracks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.movie_track_ != nullptr);
      _impl_.movie_track_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.modification_date_ != nullptr);
      _impl_.modification_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.sync_state_ != nullptr);
      _impl_.sync_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.correction_history_ != nullptr);
      _impl_.correction_history_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sync_state_enum_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.sync_state_enum_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference event_tracks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference movie_track = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_track(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingArchive.RecordingSyncStateEnum sync_state_enum = 4 [default = kRecordingSyncStateInSyncWithShow, deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingArchive_RecordingSyncStateEnum_IsValid(val))) {
            _internal_set_sync_state_enum(static_cast<::KN::RecordingArchive_RecordingSyncStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Date modification_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modification_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingSyncState sync_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingCorrectionHistory correction_history = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_correction_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference event_tracks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_tracks_size()); i < n; i++) {
    const auto& repfield = this->_internal_event_tracks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference movie_track = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::movie_track(this),
        _Internal::movie_track(this).GetCachedSize(), target, stream);
  }

  // optional double duration = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  // optional .KN.RecordingArchive.RecordingSyncStateEnum sync_state_enum = 4 [default = kRecordingSyncStateInSyncWithShow, deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sync_state_enum(), target);
  }

  // optional .TSP.Date modification_date = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::modification_date(this),
        _Internal::modification_date(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingSyncState sync_state = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sync_state(this),
        _Internal::sync_state(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingCorrectionHistory correction_history = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::correction_history(this),
        _Internal::correction_history(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingArchive)
  return target;
}

size_t RecordingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference event_tracks = 1;
  total_size += 1UL * this->_internal_event_tracks_size();
  for (const auto& msg : this->_impl_.event_tracks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSP.Reference movie_track = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_track_);
    }

    // optional .TSP.Date modification_date = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.modification_date_);
    }

    // optional .KN.RecordingSyncState sync_state = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sync_state_);
    }

    // optional .KN.RecordingCorrectionHistory correction_history = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.correction_history_);
    }

    // optional double duration = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .KN.RecordingArchive.RecordingSyncStateEnum sync_state_enum = 4 [default = kRecordingSyncStateInSyncWithShow, deprecated = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sync_state_enum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingArchive::GetClassData() const { return &_class_data_; }


void RecordingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingArchive*>(&to_msg);
  auto& from = static_cast<const RecordingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_tracks_.MergeFrom(from._impl_.event_tracks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_movie_track()->::TSP::Reference::MergeFrom(
          from._internal_movie_track());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_modification_date()->::TSP::Date::MergeFrom(
          from._internal_modification_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sync_state()->::KN::RecordingSyncState::MergeFrom(
          from._internal_sync_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_correction_history()->::KN::RecordingCorrectionHistory::MergeFrom(
          from._internal_correction_history());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.sync_state_enum_ = from._impl_.sync_state_enum_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingArchive::CopyFrom(const RecordingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.event_tracks_))
    return false;
  if (_internal_has_movie_track()) {
    if (!_impl_.movie_track_->IsInitialized()) return false;
  }
  if (_internal_has_modification_date()) {
    if (!_impl_.modification_date_->IsInitialized()) return false;
  }
  if (_internal_has_sync_state()) {
    if (!_impl_.sync_state_->IsInitialized()) return false;
  }
  return true;
}

void RecordingArchive::InternalSwap(RecordingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.event_tracks_.InternalSwap(&other->_impl_.event_tracks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingArchive, _impl_.sync_state_enum_)
      + sizeof(RecordingArchive::_impl_.sync_state_enum_)
      - PROTOBUF_FIELD_OFFSET(RecordingArchive, _impl_.movie_track_)>(
          reinterpret_cast<char*>(&_impl_.movie_track_),
          reinterpret_cast<char*>(&other->_impl_.movie_track_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[35]);
}

// ===================================================================

class RecordingSyncState::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingSyncState>()._impl_._has_bits_);
  static const ::TSP::UUID& out_of_sync_token(const RecordingSyncState* msg);
  static void set_has_out_of_sync_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_clear_out_of_sync_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::UUID&
RecordingSyncState::_Internal::out_of_sync_token(const RecordingSyncState* msg) {
  return *msg->_impl_.out_of_sync_token_;
}
void RecordingSyncState::clear_out_of_sync_token() {
  if (_impl_.out_of_sync_token_ != nullptr) _impl_.out_of_sync_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RecordingSyncState::RecordingSyncState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingSyncState)
}
RecordingSyncState::RecordingSyncState(const RecordingSyncState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingSyncState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.out_of_sync_token_){nullptr}
    , decltype(_impl_.can_clear_out_of_sync_token_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_out_of_sync_token()) {
    _this->_impl_.out_of_sync_token_ = new ::TSP::UUID(*from._impl_.out_of_sync_token_);
  }
  _this->_impl_.can_clear_out_of_sync_token_ = from._impl_.can_clear_out_of_sync_token_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingSyncState)
}

inline void RecordingSyncState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.out_of_sync_token_){nullptr}
    , decltype(_impl_.can_clear_out_of_sync_token_){false}
  };
}

RecordingSyncState::~RecordingSyncState() {
  // @@protoc_insertion_point(destructor:KN.RecordingSyncState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingSyncState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.out_of_sync_token_;
}

void RecordingSyncState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingSyncState::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingSyncState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.out_of_sync_token_ != nullptr);
    _impl_.out_of_sync_token_->Clear();
  }
  _impl_.can_clear_out_of_sync_token_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingSyncState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID out_of_sync_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_of_sync_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_clear_out_of_sync_token = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_can_clear_out_of_sync_token(&has_bits);
          _impl_.can_clear_out_of_sync_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingSyncState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingSyncState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID out_of_sync_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::out_of_sync_token(this),
        _Internal::out_of_sync_token(this).GetCachedSize(), target, stream);
  }

  // optional bool can_clear_out_of_sync_token = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_can_clear_out_of_sync_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingSyncState)
  return target;
}

size_t RecordingSyncState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingSyncState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.UUID out_of_sync_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.out_of_sync_token_);
    }

    // optional bool can_clear_out_of_sync_token = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingSyncState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingSyncState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingSyncState::GetClassData() const { return &_class_data_; }


void RecordingSyncState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingSyncState*>(&to_msg);
  auto& from = static_cast<const RecordingSyncState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingSyncState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_out_of_sync_token()->::TSP::UUID::MergeFrom(
          from._internal_out_of_sync_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.can_clear_out_of_sync_token_ = from._impl_.can_clear_out_of_sync_token_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingSyncState::CopyFrom(const RecordingSyncState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingSyncState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingSyncState::IsInitialized() const {
  if (_internal_has_out_of_sync_token()) {
    if (!_impl_.out_of_sync_token_->IsInitialized()) return false;
  }
  return true;
}

void RecordingSyncState::InternalSwap(RecordingSyncState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingSyncState, _impl_.can_clear_out_of_sync_token_)
      + sizeof(RecordingSyncState::_impl_.can_clear_out_of_sync_token_)
      - PROTOBUF_FIELD_OFFSET(RecordingSyncState, _impl_.out_of_sync_token_)>(
          reinterpret_cast<char*>(&_impl_.out_of_sync_token_),
          reinterpret_cast<char*>(&other->_impl_.out_of_sync_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingSyncState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[36]);
}

// ===================================================================

class RecordingCorrectionHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingCorrectionHistory>()._impl_._has_bits_);
  static void set_has_did_add_missing_events_for_radar_49654305(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingCorrectionHistory::RecordingCorrectionHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingCorrectionHistory)
}
RecordingCorrectionHistory::RecordingCorrectionHistory(const RecordingCorrectionHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingCorrectionHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.did_add_missing_events_for_radar_49654305_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.did_add_missing_events_for_radar_49654305_ = from._impl_.did_add_missing_events_for_radar_49654305_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingCorrectionHistory)
}

inline void RecordingCorrectionHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.did_add_missing_events_for_radar_49654305_){false}
  };
}

RecordingCorrectionHistory::~RecordingCorrectionHistory() {
  // @@protoc_insertion_point(destructor:KN.RecordingCorrectionHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingCorrectionHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordingCorrectionHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingCorrectionHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingCorrectionHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.did_add_missing_events_for_radar_49654305_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingCorrectionHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool did_add_missing_events_for_radar_49654305 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_did_add_missing_events_for_radar_49654305(&has_bits);
          _impl_.did_add_missing_events_for_radar_49654305_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingCorrectionHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingCorrectionHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool did_add_missing_events_for_radar_49654305 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_did_add_missing_events_for_radar_49654305(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingCorrectionHistory)
  return target;
}

size_t RecordingCorrectionHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingCorrectionHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool did_add_missing_events_for_radar_49654305 = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingCorrectionHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingCorrectionHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingCorrectionHistory::GetClassData() const { return &_class_data_; }


void RecordingCorrectionHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingCorrectionHistory*>(&to_msg);
  auto& from = static_cast<const RecordingCorrectionHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingCorrectionHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_did_add_missing_events_for_radar_49654305()) {
    _this->_internal_set_did_add_missing_events_for_radar_49654305(from._internal_did_add_missing_events_for_radar_49654305());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingCorrectionHistory::CopyFrom(const RecordingCorrectionHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingCorrectionHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingCorrectionHistory::IsInitialized() const {
  return true;
}

void RecordingCorrectionHistory::InternalSwap(RecordingCorrectionHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.did_add_missing_events_for_radar_49654305_, other->_impl_.did_add_missing_events_for_radar_49654305_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingCorrectionHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[37]);
}

// ===================================================================

class RecordingEventTrackArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingEventTrackArchive>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingEventTrackArchive::RecordingEventTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingEventTrackArchive)
}
RecordingEventTrackArchive::RecordingEventTrackArchive(const RecordingEventTrackArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingEventTrackArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KN.RecordingEventTrackArchive)
}

inline void RecordingEventTrackArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.type_){}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecordingEventTrackArchive::~RecordingEventTrackArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingEventTrackArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingEventTrackArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.type_.Destroy();
}

void RecordingEventTrackArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingEventTrackArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingEventTrackArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.type_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingEventTrackArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.RecordingEventTrackArchive.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.RecordingEventArchive events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingEventTrackArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingEventTrackArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.RecordingEventTrackArchive.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .KN.RecordingEventArchive events = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingEventTrackArchive)
  return target;
}

size_t RecordingEventTrackArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingEventTrackArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.RecordingEventArchive events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingEventTrackArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingEventTrackArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingEventTrackArchive::GetClassData() const { return &_class_data_; }


void RecordingEventTrackArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingEventTrackArchive*>(&to_msg);
  auto& from = static_cast<const RecordingEventTrackArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingEventTrackArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingEventTrackArchive::CopyFrom(const RecordingEventTrackArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingEventTrackArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingEventTrackArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.events_))
    return false;
  return true;
}

void RecordingEventTrackArchive::InternalSwap(RecordingEventTrackArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingEventTrackArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[38]);
}

// ===================================================================

class RecordingEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingEventArchive>()._impl_._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::KN::RecordingNavigationEventArchive& navigation_event_archive(const RecordingEventArchive* msg);
  static void set_has_navigation_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::RecordingLaserEventArchive& laser_event_archive(const RecordingEventArchive* msg);
  static void set_has_laser_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KN::RecordingPauseEventArchive& pause_event_archive(const RecordingEventArchive* msg);
  static void set_has_pause_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::RecordingMovieEventArchive& movie_event_archive(const RecordingEventArchive* msg);
  static void set_has_movie_event_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::KN::RecordingNavigationEventArchive&
RecordingEventArchive::_Internal::navigation_event_archive(const RecordingEventArchive* msg) {
  return *msg->_impl_.navigation_event_archive_;
}
const ::KN::RecordingLaserEventArchive&
RecordingEventArchive::_Internal::laser_event_archive(const RecordingEventArchive* msg) {
  return *msg->_impl_.laser_event_archive_;
}
const ::KN::RecordingPauseEventArchive&
RecordingEventArchive::_Internal::pause_event_archive(const RecordingEventArchive* msg) {
  return *msg->_impl_.pause_event_archive_;
}
const ::KN::RecordingMovieEventArchive&
RecordingEventArchive::_Internal::movie_event_archive(const RecordingEventArchive* msg) {
  return *msg->_impl_.movie_event_archive_;
}
RecordingEventArchive::RecordingEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingEventArchive)
}
RecordingEventArchive::RecordingEventArchive(const RecordingEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.navigation_event_archive_){nullptr}
    , decltype(_impl_.laser_event_archive_){nullptr}
    , decltype(_impl_.pause_event_archive_){nullptr}
    , decltype(_impl_.movie_event_archive_){nullptr}
    , decltype(_impl_.start_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_navigation_event_archive()) {
    _this->_impl_.navigation_event_archive_ = new ::KN::RecordingNavigationEventArchive(*from._impl_.navigation_event_archive_);
  }
  if (from._internal_has_laser_event_archive()) {
    _this->_impl_.laser_event_archive_ = new ::KN::RecordingLaserEventArchive(*from._impl_.laser_event_archive_);
  }
  if (from._internal_has_pause_event_archive()) {
    _this->_impl_.pause_event_archive_ = new ::KN::RecordingPauseEventArchive(*from._impl_.pause_event_archive_);
  }
  if (from._internal_has_movie_event_archive()) {
    _this->_impl_.movie_event_archive_ = new ::KN::RecordingMovieEventArchive(*from._impl_.movie_event_archive_);
  }
  _this->_impl_.start_time_ = from._impl_.start_time_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingEventArchive)
}

inline void RecordingEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.navigation_event_archive_){nullptr}
    , decltype(_impl_.laser_event_archive_){nullptr}
    , decltype(_impl_.pause_event_archive_){nullptr}
    , decltype(_impl_.movie_event_archive_){nullptr}
    , decltype(_impl_.start_time_){-1}
  };
}

RecordingEventArchive::~RecordingEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.navigation_event_archive_;
  if (this != internal_default_instance()) delete _impl_.laser_event_archive_;
  if (this != internal_default_instance()) delete _impl_.pause_event_archive_;
  if (this != internal_default_instance()) delete _impl_.movie_event_archive_;
}

void RecordingEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.navigation_event_archive_ != nullptr);
      _impl_.navigation_event_archive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.laser_event_archive_ != nullptr);
      _impl_.laser_event_archive_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.pause_event_archive_ != nullptr);
      _impl_.pause_event_archive_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.movie_event_archive_ != nullptr);
      _impl_.movie_event_archive_->Clear();
    }
    _impl_.start_time_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_time = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_event_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_laser_event_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_event_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_event_archive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_time = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_time(), target);
  }

  // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1000, _Internal::navigation_event_archive(this),
        _Internal::navigation_event_archive(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1001, _Internal::laser_event_archive(this),
        _Internal::laser_event_archive(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1002, _Internal::pause_event_archive(this),
        _Internal::pause_event_archive(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1003, _Internal::movie_event_archive(this),
        _Internal::movie_event_archive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingEventArchive)
  return target;
}

size_t RecordingEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navigation_event_archive_);
    }

    // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.laser_event_archive_);
    }

    // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pause_event_archive_);
    }

    // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_event_archive_);
    }

    // optional double start_time = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingEventArchive::GetClassData() const { return &_class_data_; }


void RecordingEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_navigation_event_archive()->::KN::RecordingNavigationEventArchive::MergeFrom(
          from._internal_navigation_event_archive());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_laser_event_archive()->::KN::RecordingLaserEventArchive::MergeFrom(
          from._internal_laser_event_archive());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_pause_event_archive()->::KN::RecordingPauseEventArchive::MergeFrom(
          from._internal_pause_event_archive());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_movie_event_archive()->::KN::RecordingMovieEventArchive::MergeFrom(
          from._internal_movie_event_archive());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingEventArchive::CopyFrom(const RecordingEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingEventArchive::IsInitialized() const {
  if (_internal_has_navigation_event_archive()) {
    if (!_impl_.navigation_event_archive_->IsInitialized()) return false;
  }
  if (_internal_has_laser_event_archive()) {
    if (!_impl_.laser_event_archive_->IsInitialized()) return false;
  }
  if (_internal_has_movie_event_archive()) {
    if (!_impl_.movie_event_archive_->IsInitialized()) return false;
  }
  return true;
}

void RecordingEventArchive::InternalSwap(RecordingEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingEventArchive, _impl_.movie_event_archive_)
      + sizeof(RecordingEventArchive::_impl_.movie_event_archive_)
      - PROTOBUF_FIELD_OFFSET(RecordingEventArchive, _impl_.navigation_event_archive_)>(
          reinterpret_cast<char*>(&_impl_.navigation_event_archive_),
          reinterpret_cast<char*>(&other->_impl_.navigation_event_archive_));
  swap(_impl_.start_time_, other->_impl_.start_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[39]);
}

// ===================================================================

class RecordingNavigationEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingNavigationEventArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& target_slide_node_id(const RecordingNavigationEventArchive* msg);
  static void set_has_target_slide_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& target_slide_node_reference(const RecordingNavigationEventArchive* msg);
  static void set_has_target_slide_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_event_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_animation_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::UUID&
RecordingNavigationEventArchive::_Internal::target_slide_node_id(const RecordingNavigationEventArchive* msg) {
  return *msg->_impl_.target_slide_node_id_;
}
const ::TSP::Reference&
RecordingNavigationEventArchive::_Internal::target_slide_node_reference(const RecordingNavigationEventArchive* msg) {
  return *msg->_impl_.target_slide_node_reference_;
}
void RecordingNavigationEventArchive::clear_target_slide_node_id() {
  if (_impl_.target_slide_node_id_ != nullptr) _impl_.target_slide_node_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RecordingNavigationEventArchive::clear_target_slide_node_reference() {
  if (_impl_.target_slide_node_reference_ != nullptr) _impl_.target_slide_node_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RecordingNavigationEventArchive::RecordingNavigationEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingNavigationEventArchive)
}
RecordingNavigationEventArchive::RecordingNavigationEventArchive(const RecordingNavigationEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingNavigationEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_slide_node_reference_){nullptr}
    , decltype(_impl_.target_slide_node_id_){nullptr}
    , decltype(_impl_.target_event_index_){}
    , decltype(_impl_.animation_phase_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_slide_node_reference()) {
    _this->_impl_.target_slide_node_reference_ = new ::TSP::Reference(*from._impl_.target_slide_node_reference_);
  }
  if (from._internal_has_target_slide_node_id()) {
    _this->_impl_.target_slide_node_id_ = new ::TSP::UUID(*from._impl_.target_slide_node_id_);
  }
  ::memcpy(&_impl_.target_event_index_, &from._impl_.target_event_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.animation_phase_) -
    reinterpret_cast<char*>(&_impl_.target_event_index_)) + sizeof(_impl_.animation_phase_));
  // @@protoc_insertion_point(copy_constructor:KN.RecordingNavigationEventArchive)
}

inline void RecordingNavigationEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_slide_node_reference_){nullptr}
    , decltype(_impl_.target_slide_node_id_){nullptr}
    , decltype(_impl_.target_event_index_){0u}
    , decltype(_impl_.animation_phase_){0}
  };
}

RecordingNavigationEventArchive::~RecordingNavigationEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingNavigationEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingNavigationEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_slide_node_reference_;
  if (this != internal_default_instance()) delete _impl_.target_slide_node_id_;
}

void RecordingNavigationEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingNavigationEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingNavigationEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.target_slide_node_reference_ != nullptr);
      _impl_.target_slide_node_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.target_slide_node_id_ != nullptr);
      _impl_.target_slide_node_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.target_event_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.animation_phase_) -
        reinterpret_cast<char*>(&_impl_.target_event_index_)) + sizeof(_impl_.animation_phase_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingNavigationEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference target_slide_node_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_slide_node_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_event_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_event_index(&has_bits);
          _impl_.target_event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(val))) {
            _internal_set_animation_phase(static_cast<::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID target_slide_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_slide_node_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingNavigationEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingNavigationEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference target_slide_node_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target_slide_node_reference(this),
        _Internal::target_slide_node_reference(this).GetCachedSize(), target, stream);
  }

  // optional uint32 target_event_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_event_index(), target);
  }

  // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_animation_phase(), target);
  }

  // optional .TSP.UUID target_slide_node_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::target_slide_node_id(this),
        _Internal::target_slide_node_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingNavigationEventArchive)
  return target;
}

size_t RecordingNavigationEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingNavigationEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSP.Reference target_slide_node_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_slide_node_reference_);
    }

    // optional .TSP.UUID target_slide_node_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_slide_node_id_);
    }

    // optional uint32 target_event_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_event_index());
    }

    // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_animation_phase());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingNavigationEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingNavigationEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingNavigationEventArchive::GetClassData() const { return &_class_data_; }


void RecordingNavigationEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingNavigationEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingNavigationEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingNavigationEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target_slide_node_reference()->::TSP::Reference::MergeFrom(
          from._internal_target_slide_node_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_target_slide_node_id()->::TSP::UUID::MergeFrom(
          from._internal_target_slide_node_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_event_index_ = from._impl_.target_event_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.animation_phase_ = from._impl_.animation_phase_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingNavigationEventArchive::CopyFrom(const RecordingNavigationEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingNavigationEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingNavigationEventArchive::IsInitialized() const {
  if (_internal_has_target_slide_node_reference()) {
    if (!_impl_.target_slide_node_reference_->IsInitialized()) return false;
  }
  if (_internal_has_target_slide_node_id()) {
    if (!_impl_.target_slide_node_id_->IsInitialized()) return false;
  }
  return true;
}

void RecordingNavigationEventArchive::InternalSwap(RecordingNavigationEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingNavigationEventArchive, _impl_.animation_phase_)
      + sizeof(RecordingNavigationEventArchive::_impl_.animation_phase_)
      - PROTOBUF_FIELD_OFFSET(RecordingNavigationEventArchive, _impl_.target_slide_node_reference_)>(
          reinterpret_cast<char*>(&_impl_.target_slide_node_reference_),
          reinterpret_cast<char*>(&other->_impl_.target_slide_node_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingNavigationEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[40]);
}

// ===================================================================

class RecordingLaserEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingLaserEventArchive>()._impl_._has_bits_);
  static const ::TSP::Point& unscaled_location(const RecordingLaserEventArchive* msg);
  static void set_has_unscaled_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Point& unit_location(const RecordingLaserEventArchive* msg);
  static void set_has_unit_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Point&
RecordingLaserEventArchive::_Internal::unscaled_location(const RecordingLaserEventArchive* msg) {
  return *msg->_impl_.unscaled_location_;
}
const ::TSP::Point&
RecordingLaserEventArchive::_Internal::unit_location(const RecordingLaserEventArchive* msg) {
  return *msg->_impl_.unit_location_;
}
void RecordingLaserEventArchive::clear_unscaled_location() {
  if (_impl_.unscaled_location_ != nullptr) _impl_.unscaled_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RecordingLaserEventArchive::clear_unit_location() {
  if (_impl_.unit_location_ != nullptr) _impl_.unit_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RecordingLaserEventArchive::RecordingLaserEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingLaserEventArchive)
}
RecordingLaserEventArchive::RecordingLaserEventArchive(const RecordingLaserEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingLaserEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unscaled_location_){nullptr}
    , decltype(_impl_.unit_location_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unscaled_location()) {
    _this->_impl_.unscaled_location_ = new ::TSP::Point(*from._impl_.unscaled_location_);
  }
  if (from._internal_has_unit_location()) {
    _this->_impl_.unit_location_ = new ::TSP::Point(*from._impl_.unit_location_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.RecordingLaserEventArchive)
}

inline void RecordingLaserEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unscaled_location_){nullptr}
    , decltype(_impl_.unit_location_){nullptr}
  };
}

RecordingLaserEventArchive::~RecordingLaserEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingLaserEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingLaserEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.unscaled_location_;
  if (this != internal_default_instance()) delete _impl_.unit_location_;
}

void RecordingLaserEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingLaserEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingLaserEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.unscaled_location_ != nullptr);
      _impl_.unscaled_location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.unit_location_ != nullptr);
      _impl_.unit_location_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingLaserEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Point unscaled_location = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unscaled_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point unit_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingLaserEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingLaserEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Point unscaled_location = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unscaled_location(this),
        _Internal::unscaled_location(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Point unit_location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::unit_location(this),
        _Internal::unit_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingLaserEventArchive)
  return target;
}

size_t RecordingLaserEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingLaserEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Point unscaled_location = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unscaled_location_);
    }

    // optional .TSP.Point unit_location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unit_location_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingLaserEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingLaserEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingLaserEventArchive::GetClassData() const { return &_class_data_; }


void RecordingLaserEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingLaserEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingLaserEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingLaserEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_unscaled_location()->::TSP::Point::MergeFrom(
          from._internal_unscaled_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_unit_location()->::TSP::Point::MergeFrom(
          from._internal_unit_location());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingLaserEventArchive::CopyFrom(const RecordingLaserEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingLaserEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingLaserEventArchive::IsInitialized() const {
  if (_internal_has_unscaled_location()) {
    if (!_impl_.unscaled_location_->IsInitialized()) return false;
  }
  if (_internal_has_unit_location()) {
    if (!_impl_.unit_location_->IsInitialized()) return false;
  }
  return true;
}

void RecordingLaserEventArchive::InternalSwap(RecordingLaserEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingLaserEventArchive, _impl_.unit_location_)
      + sizeof(RecordingLaserEventArchive::_impl_.unit_location_)
      - PROTOBUF_FIELD_OFFSET(RecordingLaserEventArchive, _impl_.unscaled_location_)>(
          reinterpret_cast<char*>(&_impl_.unscaled_location_),
          reinterpret_cast<char*>(&other->_impl_.unscaled_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingLaserEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[41]);
}

// ===================================================================

class RecordingPauseEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingPauseEventArchive>()._impl_._has_bits_);
  static void set_has_pause_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingPauseEventArchive::RecordingPauseEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingPauseEventArchive)
}
RecordingPauseEventArchive::RecordingPauseEventArchive(const RecordingPauseEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingPauseEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pause_event_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pause_event_type_ = from._impl_.pause_event_type_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingPauseEventArchive)
}

inline void RecordingPauseEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pause_event_type_){0}
  };
}

RecordingPauseEventArchive::~RecordingPauseEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingPauseEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingPauseEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordingPauseEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingPauseEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingPauseEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pause_event_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingPauseEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingPauseEventArchive_RecordingPauseEventType_IsValid(val))) {
            _internal_set_pause_event_type(static_cast<::KN::RecordingPauseEventArchive_RecordingPauseEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingPauseEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingPauseEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pause_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingPauseEventArchive)
  return target;
}

size_t RecordingPauseEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingPauseEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pause_event_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingPauseEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingPauseEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingPauseEventArchive::GetClassData() const { return &_class_data_; }


void RecordingPauseEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingPauseEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingPauseEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingPauseEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pause_event_type()) {
    _this->_internal_set_pause_event_type(from._internal_pause_event_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingPauseEventArchive::CopyFrom(const RecordingPauseEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingPauseEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingPauseEventArchive::IsInitialized() const {
  return true;
}

void RecordingPauseEventArchive::InternalSwap(RecordingPauseEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pause_event_type_, other->_impl_.pause_event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingPauseEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[42]);
}

// ===================================================================

class RecordingMovieEventArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingMovieEventArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& movie_info_reference(const RecordingMovieEventArchive* msg);
  static void set_has_movie_info_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_movie_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_movie_event_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& movie_info_that_played_across_slides_reference(const RecordingMovieEventArchive* msg);
  static void set_has_movie_info_that_played_across_slides_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& movie_slide_node_id(const RecordingMovieEventArchive* msg);
  static void set_has_movie_slide_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
RecordingMovieEventArchive::_Internal::movie_info_reference(const RecordingMovieEventArchive* msg) {
  return *msg->_impl_.movie_info_reference_;
}
const ::TSP::Reference&
RecordingMovieEventArchive::_Internal::movie_info_that_played_across_slides_reference(const RecordingMovieEventArchive* msg) {
  return *msg->_impl_.movie_info_that_played_across_slides_reference_;
}
const ::TSP::UUID&
RecordingMovieEventArchive::_Internal::movie_slide_node_id(const RecordingMovieEventArchive* msg) {
  return *msg->_impl_.movie_slide_node_id_;
}
void RecordingMovieEventArchive::clear_movie_info_reference() {
  if (_impl_.movie_info_reference_ != nullptr) _impl_.movie_info_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RecordingMovieEventArchive::clear_movie_info_that_played_across_slides_reference() {
  if (_impl_.movie_info_that_played_across_slides_reference_ != nullptr) _impl_.movie_info_that_played_across_slides_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RecordingMovieEventArchive::clear_movie_slide_node_id() {
  if (_impl_.movie_slide_node_id_ != nullptr) _impl_.movie_slide_node_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
RecordingMovieEventArchive::RecordingMovieEventArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingMovieEventArchive)
}
RecordingMovieEventArchive::RecordingMovieEventArchive(const RecordingMovieEventArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingMovieEventArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_info_reference_){nullptr}
    , decltype(_impl_.movie_info_that_played_across_slides_reference_){nullptr}
    , decltype(_impl_.movie_slide_node_id_){nullptr}
    , decltype(_impl_.movie_event_value_){}
    , decltype(_impl_.movie_event_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movie_info_reference()) {
    _this->_impl_.movie_info_reference_ = new ::TSP::Reference(*from._impl_.movie_info_reference_);
  }
  if (from._internal_has_movie_info_that_played_across_slides_reference()) {
    _this->_impl_.movie_info_that_played_across_slides_reference_ = new ::TSP::Reference(*from._impl_.movie_info_that_played_across_slides_reference_);
  }
  if (from._internal_has_movie_slide_node_id()) {
    _this->_impl_.movie_slide_node_id_ = new ::TSP::UUID(*from._impl_.movie_slide_node_id_);
  }
  ::memcpy(&_impl_.movie_event_value_, &from._impl_.movie_event_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.movie_event_type_) -
    reinterpret_cast<char*>(&_impl_.movie_event_value_)) + sizeof(_impl_.movie_event_type_));
  // @@protoc_insertion_point(copy_constructor:KN.RecordingMovieEventArchive)
}

inline void RecordingMovieEventArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_info_reference_){nullptr}
    , decltype(_impl_.movie_info_that_played_across_slides_reference_){nullptr}
    , decltype(_impl_.movie_slide_node_id_){nullptr}
    , decltype(_impl_.movie_event_value_){0}
    , decltype(_impl_.movie_event_type_){1}
  };
}

RecordingMovieEventArchive::~RecordingMovieEventArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingMovieEventArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingMovieEventArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.movie_info_reference_;
  if (this != internal_default_instance()) delete _impl_.movie_info_that_played_across_slides_reference_;
  if (this != internal_default_instance()) delete _impl_.movie_slide_node_id_;
}

void RecordingMovieEventArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingMovieEventArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingMovieEventArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.movie_info_reference_ != nullptr);
      _impl_.movie_info_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.movie_info_that_played_across_slides_reference_ != nullptr);
      _impl_.movie_info_that_played_across_slides_reference_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.movie_slide_node_id_ != nullptr);
      _impl_.movie_slide_node_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    _impl_.movie_event_value_ = 0;
    _impl_.movie_event_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingMovieEventArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference movie_info_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_info_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::RecordingMovieEventArchive_RecordingMovieEventType_IsValid(val))) {
            _internal_set_movie_event_type(static_cast<::KN::RecordingMovieEventArchive_RecordingMovieEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double movie_event_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_movie_event_value(&has_bits);
          _impl_.movie_event_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference movie_info_that_played_across_slides_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_info_that_played_across_slides_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID movie_slide_node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_slide_node_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingMovieEventArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingMovieEventArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference movie_info_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::movie_info_reference(this),
        _Internal::movie_info_reference(this).GetCachedSize(), target, stream);
  }

  // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_movie_event_type(), target);
  }

  // optional double movie_event_value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_movie_event_value(), target);
  }

  // optional .TSP.Reference movie_info_that_played_across_slides_reference = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::movie_info_that_played_across_slides_reference(this),
        _Internal::movie_info_that_played_across_slides_reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID movie_slide_node_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::movie_slide_node_id(this),
        _Internal::movie_slide_node_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingMovieEventArchive)
  return target;
}

size_t RecordingMovieEventArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingMovieEventArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSP.Reference movie_info_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_info_reference_);
    }

    // optional .TSP.Reference movie_info_that_played_across_slides_reference = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_info_that_played_across_slides_reference_);
    }

    // optional .TSP.UUID movie_slide_node_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_slide_node_id_);
    }

    // optional double movie_event_value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_movie_event_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingMovieEventArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingMovieEventArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingMovieEventArchive::GetClassData() const { return &_class_data_; }


void RecordingMovieEventArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingMovieEventArchive*>(&to_msg);
  auto& from = static_cast<const RecordingMovieEventArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingMovieEventArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_movie_info_reference()->::TSP::Reference::MergeFrom(
          from._internal_movie_info_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_movie_info_that_played_across_slides_reference()->::TSP::Reference::MergeFrom(
          from._internal_movie_info_that_played_across_slides_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_movie_slide_node_id()->::TSP::UUID::MergeFrom(
          from._internal_movie_slide_node_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.movie_event_value_ = from._impl_.movie_event_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.movie_event_type_ = from._impl_.movie_event_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingMovieEventArchive::CopyFrom(const RecordingMovieEventArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingMovieEventArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingMovieEventArchive::IsInitialized() const {
  if (_internal_has_movie_info_reference()) {
    if (!_impl_.movie_info_reference_->IsInitialized()) return false;
  }
  if (_internal_has_movie_info_that_played_across_slides_reference()) {
    if (!_impl_.movie_info_that_played_across_slides_reference_->IsInitialized()) return false;
  }
  if (_internal_has_movie_slide_node_id()) {
    if (!_impl_.movie_slide_node_id_->IsInitialized()) return false;
  }
  return true;
}

void RecordingMovieEventArchive::InternalSwap(RecordingMovieEventArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingMovieEventArchive, _impl_.movie_event_value_)
      + sizeof(RecordingMovieEventArchive::_impl_.movie_event_value_)
      - PROTOBUF_FIELD_OFFSET(RecordingMovieEventArchive, _impl_.movie_info_reference_)>(
          reinterpret_cast<char*>(&_impl_.movie_info_reference_),
          reinterpret_cast<char*>(&other->_impl_.movie_info_reference_));
  swap(_impl_.movie_event_type_, other->_impl_.movie_event_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingMovieEventArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[43]);
}

// ===================================================================

class RecordingMovieTrackArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingMovieTrackArchive>()._impl_._has_bits_);
  static void set_has_is_movie_segment_data_trimmed_to_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingMovieTrackArchive::RecordingMovieTrackArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.RecordingMovieTrackArchive)
}
RecordingMovieTrackArchive::RecordingMovieTrackArchive(const RecordingMovieTrackArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordingMovieTrackArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_segments_){from._impl_.movie_segments_}
    , decltype(_impl_.is_movie_segment_data_trimmed_to_duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_movie_segment_data_trimmed_to_duration_ = from._impl_.is_movie_segment_data_trimmed_to_duration_;
  // @@protoc_insertion_point(copy_constructor:KN.RecordingMovieTrackArchive)
}

inline void RecordingMovieTrackArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_segments_){arena}
    , decltype(_impl_.is_movie_segment_data_trimmed_to_duration_){false}
  };
}

RecordingMovieTrackArchive::~RecordingMovieTrackArchive() {
  // @@protoc_insertion_point(destructor:KN.RecordingMovieTrackArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordingMovieTrackArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.movie_segments_.~RepeatedPtrField();
}

void RecordingMovieTrackArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordingMovieTrackArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.RecordingMovieTrackArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.movie_segments_.Clear();
  _impl_.is_movie_segment_data_trimmed_to_duration_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingMovieTrackArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KN.MovieSegmentArchive movie_segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movie_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_movie_segment_data_trimmed_to_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_movie_segment_data_trimmed_to_duration(&has_bits);
          _impl_.is_movie_segment_data_trimmed_to_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordingMovieTrackArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.RecordingMovieTrackArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_movie_segments_size()); i < n; i++) {
    const auto& repfield = this->_internal_movie_segments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_movie_segment_data_trimmed_to_duration = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_movie_segment_data_trimmed_to_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.RecordingMovieTrackArchive)
  return target;
}

size_t RecordingMovieTrackArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.RecordingMovieTrackArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  total_size += 1UL * this->_internal_movie_segments_size();
  for (const auto& msg : this->_impl_.movie_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_movie_segment_data_trimmed_to_duration = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordingMovieTrackArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordingMovieTrackArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordingMovieTrackArchive::GetClassData() const { return &_class_data_; }


void RecordingMovieTrackArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordingMovieTrackArchive*>(&to_msg);
  auto& from = static_cast<const RecordingMovieTrackArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.RecordingMovieTrackArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.movie_segments_.MergeFrom(from._impl_.movie_segments_);
  if (from._internal_has_is_movie_segment_data_trimmed_to_duration()) {
    _this->_internal_set_is_movie_segment_data_trimmed_to_duration(from._internal_is_movie_segment_data_trimmed_to_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordingMovieTrackArchive::CopyFrom(const RecordingMovieTrackArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.RecordingMovieTrackArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingMovieTrackArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.movie_segments_))
    return false;
  return true;
}

void RecordingMovieTrackArchive::InternalSwap(RecordingMovieTrackArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.movie_segments_.InternalSwap(&other->_impl_.movie_segments_);
  swap(_impl_.is_movie_segment_data_trimmed_to_duration_, other->_impl_.is_movie_segment_data_trimmed_to_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingMovieTrackArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[44]);
}

// ===================================================================

class MovieSegmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieSegmentArchive>()._impl_._has_bits_);
  static const ::TSP::DataReference& movie_data(const MovieSegmentArchive* msg);
  static void set_has_movie_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& database_movie_data(const MovieSegmentArchive* msg);
  static void set_has_database_movie_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::DataReference&
MovieSegmentArchive::_Internal::movie_data(const MovieSegmentArchive* msg) {
  return *msg->_impl_.movie_data_;
}
const ::TSP::Reference&
MovieSegmentArchive::_Internal::database_movie_data(const MovieSegmentArchive* msg) {
  return *msg->_impl_.database_movie_data_;
}
void MovieSegmentArchive::clear_movie_data() {
  if (_impl_.movie_data_ != nullptr) _impl_.movie_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MovieSegmentArchive::clear_database_movie_data() {
  if (_impl_.database_movie_data_ != nullptr) _impl_.database_movie_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MovieSegmentArchive::MovieSegmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.MovieSegmentArchive)
}
MovieSegmentArchive::MovieSegmentArchive(const MovieSegmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MovieSegmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_movie_data_){nullptr}
    , decltype(_impl_.movie_data_){nullptr}
    , decltype(_impl_.start_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_database_movie_data()) {
    _this->_impl_.database_movie_data_ = new ::TSP::Reference(*from._impl_.database_movie_data_);
  }
  if (from._internal_has_movie_data()) {
    _this->_impl_.movie_data_ = new ::TSP::DataReference(*from._impl_.movie_data_);
  }
  _this->_impl_.start_time_ = from._impl_.start_time_;
  // @@protoc_insertion_point(copy_constructor:KN.MovieSegmentArchive)
}

inline void MovieSegmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.database_movie_data_){nullptr}
    , decltype(_impl_.movie_data_){nullptr}
    , decltype(_impl_.start_time_){-1}
  };
}

MovieSegmentArchive::~MovieSegmentArchive() {
  // @@protoc_insertion_point(destructor:KN.MovieSegmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MovieSegmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.database_movie_data_;
  if (this != internal_default_instance()) delete _impl_.movie_data_;
}

void MovieSegmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MovieSegmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.MovieSegmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.database_movie_data_ != nullptr);
      _impl_.database_movie_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.movie_data_ != nullptr);
      _impl_.movie_data_->Clear();
    }
    _impl_.start_time_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieSegmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference database_movie_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_database_movie_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double start_time = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference movie_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_movie_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovieSegmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.MovieSegmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference database_movie_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::database_movie_data(this),
        _Internal::database_movie_data(this).GetCachedSize(), target, stream);
  }

  // optional double start_time = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_time(), target);
  }

  // optional .TSP.DataReference movie_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::movie_data(this),
        _Internal::movie_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.MovieSegmentArchive)
  return target;
}

size_t MovieSegmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.MovieSegmentArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference database_movie_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.database_movie_data_);
    }

    // optional .TSP.DataReference movie_data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.movie_data_);
    }

    // optional double start_time = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovieSegmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MovieSegmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovieSegmentArchive::GetClassData() const { return &_class_data_; }


void MovieSegmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MovieSegmentArchive*>(&to_msg);
  auto& from = static_cast<const MovieSegmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.MovieSegmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_database_movie_data()->::TSP::Reference::MergeFrom(
          from._internal_database_movie_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_movie_data()->::TSP::DataReference::MergeFrom(
          from._internal_movie_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovieSegmentArchive::CopyFrom(const MovieSegmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.MovieSegmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSegmentArchive::IsInitialized() const {
  if (_internal_has_database_movie_data()) {
    if (!_impl_.database_movie_data_->IsInitialized()) return false;
  }
  if (_internal_has_movie_data()) {
    if (!_impl_.movie_data_->IsInitialized()) return false;
  }
  return true;
}

void MovieSegmentArchive::InternalSwap(MovieSegmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieSegmentArchive, _impl_.movie_data_)
      + sizeof(MovieSegmentArchive::_impl_.movie_data_)
      - PROTOBUF_FIELD_OFFSET(MovieSegmentArchive, _impl_.database_movie_data_)>(
          reinterpret_cast<char*>(&_impl_.database_movie_data_),
          reinterpret_cast<char*>(&other->_impl_.database_movie_data_));
  swap(_impl_.start_time_, other->_impl_.start_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieSegmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[45]);
}

// ===================================================================

class Soundtrack::_Internal {
 public:
  using HasBits = decltype(std::declval<Soundtrack>()._impl_._has_bits_);
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void Soundtrack::clear_movie_media() {
  _impl_.movie_media_.Clear();
}
Soundtrack::Soundtrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.Soundtrack)
}
Soundtrack::Soundtrack(const Soundtrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Soundtrack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_media_){from._impl_.movie_media_}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.volume_, &from._impl_.volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:KN.Soundtrack)
}

inline void Soundtrack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.movie_media_){arena}
    , decltype(_impl_.volume_){0}
    , decltype(_impl_.mode_){0}
  };
}

Soundtrack::~Soundtrack() {
  // @@protoc_insertion_point(destructor:KN.Soundtrack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Soundtrack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.movie_media_.~RepeatedPtrField();
}

void Soundtrack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Soundtrack::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.Soundtrack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.movie_media_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mode_) -
        reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Soundtrack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_volume(&has_bits);
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::Soundtrack_SoundtrackMode_IsValid(val))) {
            _internal_set_mode(static_cast<::KN::Soundtrack_SoundtrackMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.DataReference movie_media = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movie_media(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Soundtrack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.Soundtrack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double volume = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_volume(), target);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // repeated .TSP.DataReference movie_media = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_movie_media_size()); i < n; i++) {
    const auto& repfield = this->_internal_movie_media(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.Soundtrack)
  return target;
}

size_t Soundtrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.Soundtrack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.DataReference movie_media = 3;
  total_size += 1UL * this->_internal_movie_media_size();
  for (const auto& msg : this->_impl_.movie_media_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double volume = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Soundtrack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Soundtrack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Soundtrack::GetClassData() const { return &_class_data_; }


void Soundtrack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Soundtrack*>(&to_msg);
  auto& from = static_cast<const Soundtrack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.Soundtrack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.movie_media_.MergeFrom(from._impl_.movie_media_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.volume_ = from._impl_.volume_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Soundtrack::CopyFrom(const Soundtrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.Soundtrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soundtrack::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.movie_media_))
    return false;
  return true;
}

void Soundtrack::InternalSwap(Soundtrack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.movie_media_.InternalSwap(&other->_impl_.movie_media_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Soundtrack, _impl_.mode_)
      + sizeof(Soundtrack::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(Soundtrack, _impl_.volume_)>(
          reinterpret_cast<char*>(&_impl_.volume_),
          reinterpret_cast<char*>(&other->_impl_.volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Soundtrack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[46]);
}

// ===================================================================

class SlideNumberAttachmentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideNumberAttachmentArchive>()._impl_._has_bits_);
  static const ::TSWP::TextualAttachmentArchive& super(const SlideNumberAttachmentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSWP::TextualAttachmentArchive&
SlideNumberAttachmentArchive::_Internal::super(const SlideNumberAttachmentArchive* msg) {
  return *msg->_impl_.super_;
}
void SlideNumberAttachmentArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideNumberAttachmentArchive)
}
SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(const SlideNumberAttachmentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideNumberAttachmentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSWP::TextualAttachmentArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideNumberAttachmentArchive)
}

inline void SlideNumberAttachmentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

SlideNumberAttachmentArchive::~SlideNumberAttachmentArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideNumberAttachmentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideNumberAttachmentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void SlideNumberAttachmentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideNumberAttachmentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideNumberAttachmentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideNumberAttachmentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSWP.TextualAttachmentArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideNumberAttachmentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideNumberAttachmentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSWP.TextualAttachmentArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideNumberAttachmentArchive)
  return target;
}

size_t SlideNumberAttachmentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideNumberAttachmentArchive)
  size_t total_size = 0;

  // required .TSWP.TextualAttachmentArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideNumberAttachmentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideNumberAttachmentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideNumberAttachmentArchive::GetClassData() const { return &_class_data_; }


void SlideNumberAttachmentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideNumberAttachmentArchive*>(&to_msg);
  auto& from = static_cast<const SlideNumberAttachmentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideNumberAttachmentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideNumberAttachmentArchive::CopyFrom(const SlideNumberAttachmentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideNumberAttachmentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNumberAttachmentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SlideNumberAttachmentArchive::InternalSwap(SlideNumberAttachmentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideNumberAttachmentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[47]);
}

// ===================================================================

class SlideCollectionSelectionArchive_OutlineSelection::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionArchive_OutlineSelection>()._impl_._has_bits_);
  static const ::TSP::Reference& slide_node(const SlideCollectionSelectionArchive_OutlineSelection* msg);
  static void set_has_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::IndexSet& selected_paragraph_indexes(const SlideCollectionSelectionArchive_OutlineSelection* msg);
  static void set_has_selected_paragraph_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
SlideCollectionSelectionArchive_OutlineSelection::_Internal::slide_node(const SlideCollectionSelectionArchive_OutlineSelection* msg) {
  return *msg->_impl_.slide_node_;
}
const ::TSP::IndexSet&
SlideCollectionSelectionArchive_OutlineSelection::_Internal::selected_paragraph_indexes(const SlideCollectionSelectionArchive_OutlineSelection* msg) {
  return *msg->_impl_.selected_paragraph_indexes_;
}
void SlideCollectionSelectionArchive_OutlineSelection::clear_slide_node() {
  if (_impl_.slide_node_ != nullptr) _impl_.slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SlideCollectionSelectionArchive_OutlineSelection::clear_selected_paragraph_indexes() {
  if (_impl_.selected_paragraph_indexes_ != nullptr) _impl_.selected_paragraph_indexes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionArchive.OutlineSelection)
}
SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(const SlideCollectionSelectionArchive_OutlineSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideCollectionSelectionArchive_OutlineSelection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_node_){nullptr}
    , decltype(_impl_.selected_paragraph_indexes_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node()) {
    _this->_impl_.slide_node_ = new ::TSP::Reference(*from._impl_.slide_node_);
  }
  if (from._internal_has_selected_paragraph_indexes()) {
    _this->_impl_.selected_paragraph_indexes_ = new ::TSP::IndexSet(*from._impl_.selected_paragraph_indexes_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionArchive.OutlineSelection)
}

inline void SlideCollectionSelectionArchive_OutlineSelection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_node_){nullptr}
    , decltype(_impl_.selected_paragraph_indexes_){nullptr}
  };
}

SlideCollectionSelectionArchive_OutlineSelection::~SlideCollectionSelectionArchive_OutlineSelection() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionArchive.OutlineSelection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideCollectionSelectionArchive_OutlineSelection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.slide_node_;
  if (this != internal_default_instance()) delete _impl_.selected_paragraph_indexes_;
}

void SlideCollectionSelectionArchive_OutlineSelection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideCollectionSelectionArchive_OutlineSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slide_node_ != nullptr);
      _impl_.slide_node_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.selected_paragraph_indexes_ != nullptr);
      _impl_.selected_paragraph_indexes_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionArchive_OutlineSelection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference slide_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.IndexSet selected_paragraph_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selected_paragraph_indexes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideCollectionSelectionArchive_OutlineSelection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference slide_node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slide_node(this),
        _Internal::slide_node(this).GetCachedSize(), target, stream);
  }

  // required .TSP.IndexSet selected_paragraph_indexes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::selected_paragraph_indexes(this),
        _Internal::selected_paragraph_indexes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionArchive.OutlineSelection)
  return target;
}

size_t SlideCollectionSelectionArchive_OutlineSelection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  size_t total_size = 0;

  if (_internal_has_slide_node()) {
    // required .TSP.Reference slide_node = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_);
  }

  if (_internal_has_selected_paragraph_indexes()) {
    // required .TSP.IndexSet selected_paragraph_indexes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selected_paragraph_indexes_);
  }

  return total_size;
}
size_t SlideCollectionSelectionArchive_OutlineSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference slide_node = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_);

    // required .TSP.IndexSet selected_paragraph_indexes = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selected_paragraph_indexes_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionArchive_OutlineSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideCollectionSelectionArchive_OutlineSelection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionArchive_OutlineSelection::GetClassData() const { return &_class_data_; }


void SlideCollectionSelectionArchive_OutlineSelection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideCollectionSelectionArchive_OutlineSelection*>(&to_msg);
  auto& from = static_cast<const SlideCollectionSelectionArchive_OutlineSelection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slide_node()->::TSP::Reference::MergeFrom(
          from._internal_slide_node());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_selected_paragraph_indexes()->::TSP::IndexSet::MergeFrom(
          from._internal_selected_paragraph_indexes());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionArchive_OutlineSelection::CopyFrom(const SlideCollectionSelectionArchive_OutlineSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionArchive.OutlineSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionArchive_OutlineSelection::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_slide_node()) {
    if (!_impl_.slide_node_->IsInitialized()) return false;
  }
  if (_internal_has_selected_paragraph_indexes()) {
    if (!_impl_.selected_paragraph_indexes_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionArchive_OutlineSelection::InternalSwap(SlideCollectionSelectionArchive_OutlineSelection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, _impl_.selected_paragraph_indexes_)
      + sizeof(SlideCollectionSelectionArchive_OutlineSelection::_impl_.selected_paragraph_indexes_)
      - PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, _impl_.slide_node_)>(
          reinterpret_cast<char*>(&_impl_.slide_node_),
          reinterpret_cast<char*>(&other->_impl_.slide_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionArchive_OutlineSelection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[48]);
}

// ===================================================================

class SlideCollectionSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SlideCollectionSelectionArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& slide_node_to_edit(const SlideCollectionSelectionArchive* msg);
  static void set_has_slide_node_to_edit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Range& range_in_selected_paragraph(const SlideCollectionSelectionArchive* msg);
  static void set_has_range_in_selected_paragraph(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
SlideCollectionSelectionArchive::_Internal::slide_node_to_edit(const SlideCollectionSelectionArchive* msg) {
  return *msg->_impl_.slide_node_to_edit_;
}
const ::TSP::Range&
SlideCollectionSelectionArchive::_Internal::range_in_selected_paragraph(const SlideCollectionSelectionArchive* msg) {
  return *msg->_impl_.range_in_selected_paragraph_;
}
void SlideCollectionSelectionArchive::clear_slide_nodes() {
  _impl_.slide_nodes_.Clear();
}
void SlideCollectionSelectionArchive::clear_slide_node_to_edit() {
  if (_impl_.slide_node_to_edit_ != nullptr) _impl_.slide_node_to_edit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SlideCollectionSelectionArchive::clear_range_in_selected_paragraph() {
  if (_impl_.range_in_selected_paragraph_ != nullptr) _impl_.range_in_selected_paragraph_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.SlideCollectionSelectionArchive)
}
SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(const SlideCollectionSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlideCollectionSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_){from._impl_.slide_nodes_}
    , decltype(_impl_.selected_paragraph_indexes_for_slide_nodes_){from._impl_.selected_paragraph_indexes_for_slide_nodes_}
    , decltype(_impl_.slide_node_to_edit_){nullptr}
    , decltype(_impl_.range_in_selected_paragraph_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node_to_edit()) {
    _this->_impl_.slide_node_to_edit_ = new ::TSP::Reference(*from._impl_.slide_node_to_edit_);
  }
  if (from._internal_has_range_in_selected_paragraph()) {
    _this->_impl_.range_in_selected_paragraph_ = new ::TSP::Range(*from._impl_.range_in_selected_paragraph_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.SlideCollectionSelectionArchive)
}

inline void SlideCollectionSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_nodes_){arena}
    , decltype(_impl_.selected_paragraph_indexes_for_slide_nodes_){arena}
    , decltype(_impl_.slide_node_to_edit_){nullptr}
    , decltype(_impl_.range_in_selected_paragraph_){nullptr}
  };
}

SlideCollectionSelectionArchive::~SlideCollectionSelectionArchive() {
  // @@protoc_insertion_point(destructor:KN.SlideCollectionSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlideCollectionSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slide_nodes_.~RepeatedPtrField();
  _impl_.selected_paragraph_indexes_for_slide_nodes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.slide_node_to_edit_;
  if (this != internal_default_instance()) delete _impl_.range_in_selected_paragraph_;
}

void SlideCollectionSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlideCollectionSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.SlideCollectionSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slide_nodes_.Clear();
  _impl_.selected_paragraph_indexes_for_slide_nodes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.slide_node_to_edit_ != nullptr);
      _impl_.slide_node_to_edit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.range_in_selected_paragraph_ != nullptr);
      _impl_.range_in_selected_paragraph_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlideCollectionSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference slide_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference slide_node_to_edit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node_to_edit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selected_paragraph_indexes_for_slide_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Range range_in_selected_paragraph = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_in_selected_paragraph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlideCollectionSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.SlideCollectionSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference slide_node_to_edit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slide_node_to_edit(this),
        _Internal::slide_node_to_edit(this).GetCachedSize(), target, stream);
  }

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selected_paragraph_indexes_for_slide_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_selected_paragraph_indexes_for_slide_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Range range_in_selected_paragraph = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::range_in_selected_paragraph(this),
        _Internal::range_in_selected_paragraph(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.SlideCollectionSelectionArchive)
  return target;
}

size_t SlideCollectionSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.SlideCollectionSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference slide_nodes = 1;
  total_size += 1UL * this->_internal_slide_nodes_size();
  for (const auto& msg : this->_impl_.slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  total_size += 1UL * this->_internal_selected_paragraph_indexes_for_slide_nodes_size();
  for (const auto& msg : this->_impl_.selected_paragraph_indexes_for_slide_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference slide_node_to_edit = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_node_to_edit_);
    }

    // optional .TSP.Range range_in_selected_paragraph = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_in_selected_paragraph_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlideCollectionSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlideCollectionSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlideCollectionSelectionArchive::GetClassData() const { return &_class_data_; }


void SlideCollectionSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlideCollectionSelectionArchive*>(&to_msg);
  auto& from = static_cast<const SlideCollectionSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.SlideCollectionSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slide_nodes_.MergeFrom(from._impl_.slide_nodes_);
  _this->_impl_.selected_paragraph_indexes_for_slide_nodes_.MergeFrom(from._impl_.selected_paragraph_indexes_for_slide_nodes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_slide_node_to_edit()->::TSP::Reference::MergeFrom(
          from._internal_slide_node_to_edit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_range_in_selected_paragraph()->::TSP::Range::MergeFrom(
          from._internal_range_in_selected_paragraph());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlideCollectionSelectionArchive::CopyFrom(const SlideCollectionSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.SlideCollectionSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.slide_nodes_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.selected_paragraph_indexes_for_slide_nodes_))
    return false;
  if (_internal_has_slide_node_to_edit()) {
    if (!_impl_.slide_node_to_edit_->IsInitialized()) return false;
  }
  if (_internal_has_range_in_selected_paragraph()) {
    if (!_impl_.range_in_selected_paragraph_->IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionArchive::InternalSwap(SlideCollectionSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slide_nodes_.InternalSwap(&other->_impl_.slide_nodes_);
  _impl_.selected_paragraph_indexes_for_slide_nodes_.InternalSwap(&other->_impl_.selected_paragraph_indexes_for_slide_nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive, _impl_.range_in_selected_paragraph_)
      + sizeof(SlideCollectionSelectionArchive::_impl_.range_in_selected_paragraph_)
      - PROTOBUF_FIELD_OFFSET(SlideCollectionSelectionArchive, _impl_.slide_node_to_edit_)>(
          reinterpret_cast<char*>(&_impl_.slide_node_to_edit_),
          reinterpret_cast<char*>(&other->_impl_.slide_node_to_edit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlideCollectionSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[49]);
}

// ===================================================================

class PresenterNotesSelectionArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PresenterNotesSelectionArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& slide_node(const PresenterNotesSelectionArchive* msg);
  static void set_has_slide_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
PresenterNotesSelectionArchive::_Internal::slide_node(const PresenterNotesSelectionArchive* msg) {
  return *msg->_impl_.slide_node_;
}
void PresenterNotesSelectionArchive::clear_slide_node() {
  if (_impl_.slide_node_ != nullptr) _impl_.slide_node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PresenterNotesSelectionArchive::PresenterNotesSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.PresenterNotesSelectionArchive)
}
PresenterNotesSelectionArchive::PresenterNotesSelectionArchive(const PresenterNotesSelectionArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PresenterNotesSelectionArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_node_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_slide_node()) {
    _this->_impl_.slide_node_ = new ::TSP::Reference(*from._impl_.slide_node_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.PresenterNotesSelectionArchive)
}

inline void PresenterNotesSelectionArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slide_node_){nullptr}
  };
}

PresenterNotesSelectionArchive::~PresenterNotesSelectionArchive() {
  // @@protoc_insertion_point(destructor:KN.PresenterNotesSelectionArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PresenterNotesSelectionArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.slide_node_;
}

void PresenterNotesSelectionArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PresenterNotesSelectionArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.PresenterNotesSelectionArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.slide_node_ != nullptr);
    _impl_.slide_node_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PresenterNotesSelectionArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference slide_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PresenterNotesSelectionArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.PresenterNotesSelectionArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference slide_node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::slide_node(this),
        _Internal::slide_node(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.PresenterNotesSelectionArchive)
  return target;
}

size_t PresenterNotesSelectionArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.PresenterNotesSelectionArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference slide_node = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slide_node_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PresenterNotesSelectionArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PresenterNotesSelectionArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PresenterNotesSelectionArchive::GetClassData() const { return &_class_data_; }


void PresenterNotesSelectionArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PresenterNotesSelectionArchive*>(&to_msg);
  auto& from = static_cast<const PresenterNotesSelectionArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.PresenterNotesSelectionArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slide_node()) {
    _this->_internal_mutable_slide_node()->::TSP::Reference::MergeFrom(
        from._internal_slide_node());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PresenterNotesSelectionArchive::CopyFrom(const PresenterNotesSelectionArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.PresenterNotesSelectionArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenterNotesSelectionArchive::IsInitialized() const {
  if (_internal_has_slide_node()) {
    if (!_impl_.slide_node_->IsInitialized()) return false;
  }
  return true;
}

void PresenterNotesSelectionArchive::InternalSwap(PresenterNotesSelectionArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.slide_node_, other->_impl_.slide_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PresenterNotesSelectionArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[50]);
}

// ===================================================================

class MixedIdOperationArgs::_Internal {
 public:
};

void MixedIdOperationArgs::clear_add_args_list() {
  _impl_.add_args_list_.Clear();
}
void MixedIdOperationArgs::clear_show_placeholder_args_list() {
  _impl_.show_placeholder_args_list_.Clear();
}
void MixedIdOperationArgs::clear_remove_args_list() {
  _impl_.remove_args_list_.Clear();
}
void MixedIdOperationArgs::clear_hide_placeholder_args_list() {
  _impl_.hide_placeholder_args_list_.Clear();
}
MixedIdOperationArgs::MixedIdOperationArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.MixedIdOperationArgs)
}
MixedIdOperationArgs::MixedIdOperationArgs(const MixedIdOperationArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MixedIdOperationArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_list_types_){from._impl_.args_list_types_}
    , decltype(_impl_.add_args_list_){from._impl_.add_args_list_}
    , decltype(_impl_.show_placeholder_args_list_){from._impl_.show_placeholder_args_list_}
    , decltype(_impl_.remove_args_list_){from._impl_.remove_args_list_}
    , decltype(_impl_.hide_placeholder_args_list_){from._impl_.hide_placeholder_args_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.MixedIdOperationArgs)
}

inline void MixedIdOperationArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_list_types_){arena}
    , decltype(_impl_.add_args_list_){arena}
    , decltype(_impl_.show_placeholder_args_list_){arena}
    , decltype(_impl_.remove_args_list_){arena}
    , decltype(_impl_.hide_placeholder_args_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MixedIdOperationArgs::~MixedIdOperationArgs() {
  // @@protoc_insertion_point(destructor:KN.MixedIdOperationArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MixedIdOperationArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_list_types_.~RepeatedField();
  _impl_.add_args_list_.~RepeatedPtrField();
  _impl_.show_placeholder_args_list_.~RepeatedPtrField();
  _impl_.remove_args_list_.~RepeatedPtrField();
  _impl_.hide_placeholder_args_list_.~RepeatedPtrField();
}

void MixedIdOperationArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MixedIdOperationArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.MixedIdOperationArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_list_types_.Clear();
  _impl_.add_args_list_.Clear();
  _impl_.show_placeholder_args_list_.Clear();
  _impl_.remove_args_list_.Clear();
  _impl_.hide_placeholder_args_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MixedIdOperationArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KN.MixedIdOperationArgs.ArgsListKind args_list_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::KN::MixedIdOperationArgs_ArgsListKind_IsValid(val))) {
              _internal_add_args_list_types(static_cast<::KN::MixedIdOperationArgs_ArgsListKind>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_args_list_types(), ptr, ctx, ::KN::MixedIdOperationArgs_ArgsListKind_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.AddIdOperationArgs add_args_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_add_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.IdPlacementOperationArgs show_placeholder_args_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_show_placeholder_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.RemoveIdOperationArgs remove_args_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remove_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSK.IdPlacementOperationArgs hide_placeholder_args_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hide_placeholder_args_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MixedIdOperationArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.MixedIdOperationArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KN.MixedIdOperationArgs.ArgsListKind args_list_types = 1;
  for (int i = 0, n = this->_internal_args_list_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_args_list_types(i), target);
  }

  // repeated .TSK.AddIdOperationArgs add_args_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_add_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_add_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.IdPlacementOperationArgs show_placeholder_args_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_show_placeholder_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_show_placeholder_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.RemoveIdOperationArgs remove_args_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remove_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_remove_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSK.IdPlacementOperationArgs hide_placeholder_args_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hide_placeholder_args_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_hide_placeholder_args_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.MixedIdOperationArgs)
  return target;
}

size_t MixedIdOperationArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.MixedIdOperationArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KN.MixedIdOperationArgs.ArgsListKind args_list_types = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_args_list_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_args_list_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TSK.AddIdOperationArgs add_args_list = 2;
  total_size += 1UL * this->_internal_add_args_list_size();
  for (const auto& msg : this->_impl_.add_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.IdPlacementOperationArgs show_placeholder_args_list = 3;
  total_size += 1UL * this->_internal_show_placeholder_args_list_size();
  for (const auto& msg : this->_impl_.show_placeholder_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.RemoveIdOperationArgs remove_args_list = 4;
  total_size += 1UL * this->_internal_remove_args_list_size();
  for (const auto& msg : this->_impl_.remove_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSK.IdPlacementOperationArgs hide_placeholder_args_list = 5;
  total_size += 1UL * this->_internal_hide_placeholder_args_list_size();
  for (const auto& msg : this->_impl_.hide_placeholder_args_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MixedIdOperationArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MixedIdOperationArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MixedIdOperationArgs::GetClassData() const { return &_class_data_; }


void MixedIdOperationArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MixedIdOperationArgs*>(&to_msg);
  auto& from = static_cast<const MixedIdOperationArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.MixedIdOperationArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_list_types_.MergeFrom(from._impl_.args_list_types_);
  _this->_impl_.add_args_list_.MergeFrom(from._impl_.add_args_list_);
  _this->_impl_.show_placeholder_args_list_.MergeFrom(from._impl_.show_placeholder_args_list_);
  _this->_impl_.remove_args_list_.MergeFrom(from._impl_.remove_args_list_);
  _this->_impl_.hide_placeholder_args_list_.MergeFrom(from._impl_.hide_placeholder_args_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MixedIdOperationArgs::CopyFrom(const MixedIdOperationArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.MixedIdOperationArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixedIdOperationArgs::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.add_args_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.show_placeholder_args_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.remove_args_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.hide_placeholder_args_list_))
    return false;
  return true;
}

void MixedIdOperationArgs::InternalSwap(MixedIdOperationArgs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_list_types_.InternalSwap(&other->_impl_.args_list_types_);
  _impl_.add_args_list_.InternalSwap(&other->_impl_.add_args_list_);
  _impl_.show_placeholder_args_list_.InternalSwap(&other->_impl_.show_placeholder_args_list_);
  _impl_.remove_args_list_.InternalSwap(&other->_impl_.remove_args_list_);
  _impl_.hide_placeholder_args_list_.InternalSwap(&other->_impl_.hide_placeholder_args_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MixedIdOperationArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[51]);
}

// ===================================================================

class LiveVideoInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveVideoInfo>()._impl_._has_bits_);
  static const ::TSP::UUID& source_id(const LiveVideoInfo* msg);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Point& normalized_offset(const LiveVideoInfo* msg);
  static void set_has_normalized_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mask_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mask_corner_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_background_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::FillArchive& background_fill(const LiveVideoInfo* msg);
  static void set_has_background_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::UUID&
LiveVideoInfo::_Internal::source_id(const LiveVideoInfo* msg) {
  return *msg->_impl_.source_id_;
}
const ::TSP::Point&
LiveVideoInfo::_Internal::normalized_offset(const LiveVideoInfo* msg) {
  return *msg->_impl_.normalized_offset_;
}
const ::TSD::FillArchive&
LiveVideoInfo::_Internal::background_fill(const LiveVideoInfo* msg) {
  return *msg->_impl_.background_fill_;
}
void LiveVideoInfo::clear_source_id() {
  if (_impl_.source_id_ != nullptr) _impl_.source_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LiveVideoInfo::clear_normalized_offset() {
  if (_impl_.normalized_offset_ != nullptr) _impl_.normalized_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LiveVideoInfo::clear_background_fill() {
  if (_impl_.background_fill_ != nullptr) _impl_.background_fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
LiveVideoInfo::LiveVideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.LiveVideoInfo)
}
LiveVideoInfo::LiveVideoInfo(const LiveVideoInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiveVideoInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.normalized_offset_){nullptr}
    , decltype(_impl_.background_fill_){nullptr}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.is_placeholder_){}
    , decltype(_impl_.mask_kind_){}
    , decltype(_impl_.mask_corner_radius_){}
    , decltype(_impl_.background_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    _this->_impl_.source_id_ = new ::TSP::UUID(*from._impl_.source_id_);
  }
  if (from._internal_has_normalized_offset()) {
    _this->_impl_.normalized_offset_ = new ::TSP::Point(*from._impl_.normalized_offset_);
  }
  if (from._internal_has_background_fill()) {
    _this->_impl_.background_fill_ = new ::TSD::FillArchive(*from._impl_.background_fill_);
  }
  ::memcpy(&_impl_.scale_, &from._impl_.scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.background_kind_) -
    reinterpret_cast<char*>(&_impl_.scale_)) + sizeof(_impl_.background_kind_));
  // @@protoc_insertion_point(copy_constructor:KN.LiveVideoInfo)
}

inline void LiveVideoInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_id_){nullptr}
    , decltype(_impl_.normalized_offset_){nullptr}
    , decltype(_impl_.background_fill_){nullptr}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.is_placeholder_){false}
    , decltype(_impl_.mask_kind_){0}
    , decltype(_impl_.mask_corner_radius_){0}
    , decltype(_impl_.background_kind_){0}
  };
}

LiveVideoInfo::~LiveVideoInfo() {
  // @@protoc_insertion_point(destructor:KN.LiveVideoInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiveVideoInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_id_;
  if (this != internal_default_instance()) delete _impl_.normalized_offset_;
  if (this != internal_default_instance()) delete _impl_.background_fill_;
}

void LiveVideoInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiveVideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.LiveVideoInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.normalized_offset_ != nullptr);
      _impl_.normalized_offset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.background_fill_ != nullptr);
      _impl_.background_fill_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.background_kind_) -
        reinterpret_cast<char*>(&_impl_.scale_)) + sizeof(_impl_.background_kind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveVideoInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_placeholder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_placeholder(&has_bits);
          _impl_.is_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point normalized_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalized_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mask_kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mask_kind(&has_bits);
          _impl_.mask_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mask_corner_radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_mask_corner_radius(&has_bits);
          _impl_.mask_corner_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 background_kind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_background_kind(&has_bits);
          _impl_.background_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive background_fill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiveVideoInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.LiveVideoInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  // optional bool is_placeholder = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_placeholder(), target);
  }

  // optional double scale = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_scale(), target);
  }

  // optional .TSP.Point normalized_offset = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::normalized_offset(this),
        _Internal::normalized_offset(this).GetCachedSize(), target, stream);
  }

  // optional int32 mask_kind = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mask_kind(), target);
  }

  // optional double mask_corner_radius = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_mask_corner_radius(), target);
  }

  // optional int32 background_kind = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_background_kind(), target);
  }

  // optional .TSD.FillArchive background_fill = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::background_fill(this),
        _Internal::background_fill(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.LiveVideoInfo)
  return target;
}

size_t LiveVideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.LiveVideoInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.UUID source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_id_);
    }

    // optional .TSP.Point normalized_offset = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.normalized_offset_);
    }

    // optional .TSD.FillArchive background_fill = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.background_fill_);
    }

    // optional double scale = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool is_placeholder = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 mask_kind = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mask_kind());
    }

    // optional double mask_corner_radius = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 background_kind = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_background_kind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiveVideoInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiveVideoInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiveVideoInfo::GetClassData() const { return &_class_data_; }


void LiveVideoInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiveVideoInfo*>(&to_msg);
  auto& from = static_cast<const LiveVideoInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.LiveVideoInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_source_id()->::TSP::UUID::MergeFrom(
          from._internal_source_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_normalized_offset()->::TSP::Point::MergeFrom(
          from._internal_normalized_offset());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_background_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_background_fill());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_placeholder_ = from._impl_.is_placeholder_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.mask_kind_ = from._impl_.mask_kind_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mask_corner_radius_ = from._impl_.mask_corner_radius_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.background_kind_ = from._impl_.background_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiveVideoInfo::CopyFrom(const LiveVideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.LiveVideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveVideoInfo::IsInitialized() const {
  if (_internal_has_source_id()) {
    if (!_impl_.source_id_->IsInitialized()) return false;
  }
  if (_internal_has_normalized_offset()) {
    if (!_impl_.normalized_offset_->IsInitialized()) return false;
  }
  if (_internal_has_background_fill()) {
    if (!_impl_.background_fill_->IsInitialized()) return false;
  }
  return true;
}

void LiveVideoInfo::InternalSwap(LiveVideoInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveVideoInfo, _impl_.background_kind_)
      + sizeof(LiveVideoInfo::_impl_.background_kind_)
      - PROTOBUF_FIELD_OFFSET(LiveVideoInfo, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveVideoInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[52]);
}

// ===================================================================

class LiveVideoSource::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveVideoSource>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::KN::LiveVideoCaptureDeviceDescription& capture_device_description(const LiveVideoSource* msg);
  static void set_has_capture_device_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::KN::LiveVideoSourceCollaborationCommandUsageState& collaboration_command_usage_state(const LiveVideoSource* msg);
  static void set_has_collaboration_command_usage_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::DataReference& poster_image_data(const LiveVideoSource* msg);
  static void set_has_poster_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_symbol_abbreviation_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_symbol_image_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_symbol_tint_color_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_default_source(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::KN::LiveVideoCaptureDeviceDescription&
LiveVideoSource::_Internal::capture_device_description(const LiveVideoSource* msg) {
  return *msg->_impl_.capture_device_description_;
}
const ::KN::LiveVideoSourceCollaborationCommandUsageState&
LiveVideoSource::_Internal::collaboration_command_usage_state(const LiveVideoSource* msg) {
  return *msg->_impl_.collaboration_command_usage_state_;
}
const ::TSP::DataReference&
LiveVideoSource::_Internal::poster_image_data(const LiveVideoSource* msg) {
  return *msg->_impl_.poster_image_data_;
}
void LiveVideoSource::clear_poster_image_data() {
  if (_impl_.poster_image_data_ != nullptr) _impl_.poster_image_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
LiveVideoSource::LiveVideoSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.LiveVideoSource)
}
LiveVideoSource::LiveVideoSource(const LiveVideoSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiveVideoSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.symbol_abbreviation_text_){}
    , decltype(_impl_.capture_device_description_){nullptr}
    , decltype(_impl_.collaboration_command_usage_state_){nullptr}
    , decltype(_impl_.poster_image_data_){nullptr}
    , decltype(_impl_.symbol_image_identifier_){}
    , decltype(_impl_.symbol_tint_color_identifier_){}
    , decltype(_impl_.is_default_source_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.symbol_abbreviation_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_abbreviation_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_symbol_abbreviation_text()) {
    _this->_impl_.symbol_abbreviation_text_.Set(from._internal_symbol_abbreviation_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_capture_device_description()) {
    _this->_impl_.capture_device_description_ = new ::KN::LiveVideoCaptureDeviceDescription(*from._impl_.capture_device_description_);
  }
  if (from._internal_has_collaboration_command_usage_state()) {
    _this->_impl_.collaboration_command_usage_state_ = new ::KN::LiveVideoSourceCollaborationCommandUsageState(*from._impl_.collaboration_command_usage_state_);
  }
  if (from._internal_has_poster_image_data()) {
    _this->_impl_.poster_image_data_ = new ::TSP::DataReference(*from._impl_.poster_image_data_);
  }
  ::memcpy(&_impl_.symbol_image_identifier_, &from._impl_.symbol_image_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_default_source_) -
    reinterpret_cast<char*>(&_impl_.symbol_image_identifier_)) + sizeof(_impl_.is_default_source_));
  // @@protoc_insertion_point(copy_constructor:KN.LiveVideoSource)
}

inline void LiveVideoSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.symbol_abbreviation_text_){}
    , decltype(_impl_.capture_device_description_){nullptr}
    , decltype(_impl_.collaboration_command_usage_state_){nullptr}
    , decltype(_impl_.poster_image_data_){nullptr}
    , decltype(_impl_.symbol_image_identifier_){0}
    , decltype(_impl_.symbol_tint_color_identifier_){0}
    , decltype(_impl_.is_default_source_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_abbreviation_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_abbreviation_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LiveVideoSource::~LiveVideoSource() {
  // @@protoc_insertion_point(destructor:KN.LiveVideoSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiveVideoSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.symbol_abbreviation_text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.capture_device_description_;
  if (this != internal_default_instance()) delete _impl_.collaboration_command_usage_state_;
  if (this != internal_default_instance()) delete _impl_.poster_image_data_;
}

void LiveVideoSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiveVideoSource::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.LiveVideoSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.symbol_abbreviation_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.capture_device_description_ != nullptr);
      _impl_.capture_device_description_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.collaboration_command_usage_state_ != nullptr);
      _impl_.collaboration_command_usage_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.poster_image_data_ != nullptr);
      _impl_.poster_image_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.symbol_image_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_default_source_) -
        reinterpret_cast<char*>(&_impl_.symbol_image_identifier_)) + sizeof(_impl_.is_default_source_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveVideoSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.LiveVideoSource.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .KN.LiveVideoCaptureDeviceDescription capture_device_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_device_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.LiveVideoSourceCollaborationCommandUsageState collaboration_command_usage_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaboration_command_usage_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference poster_image_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_poster_image_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string symbol_abbreviation_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_symbol_abbreviation_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.LiveVideoSource.symbol_abbreviation_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 symbol_image_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_symbol_image_identifier(&has_bits);
          _impl_.symbol_image_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 symbol_tint_color_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_symbol_tint_color_identifier(&has_bits);
          _impl_.symbol_tint_color_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_default_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_default_source(&has_bits);
          _impl_.is_default_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiveVideoSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.LiveVideoSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.LiveVideoSource.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .KN.LiveVideoCaptureDeviceDescription capture_device_description = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::capture_device_description(this),
        _Internal::capture_device_description(this).GetCachedSize(), target, stream);
  }

  // optional .KN.LiveVideoSourceCollaborationCommandUsageState collaboration_command_usage_state = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::collaboration_command_usage_state(this),
        _Internal::collaboration_command_usage_state(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference poster_image_data = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::poster_image_data(this),
        _Internal::poster_image_data(this).GetCachedSize(), target, stream);
  }

  // optional string symbol_abbreviation_text = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol_abbreviation_text().data(), static_cast<int>(this->_internal_symbol_abbreviation_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.LiveVideoSource.symbol_abbreviation_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_symbol_abbreviation_text(), target);
  }

  // optional int32 symbol_image_identifier = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_symbol_image_identifier(), target);
  }

  // optional int32 symbol_tint_color_identifier = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_symbol_tint_color_identifier(), target);
  }

  // optional bool is_default_source = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_default_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.LiveVideoSource)
  return target;
}

size_t LiveVideoSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.LiveVideoSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string symbol_abbreviation_text = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol_abbreviation_text());
    }

    // optional .KN.LiveVideoCaptureDeviceDescription capture_device_description = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.capture_device_description_);
    }

    // optional .KN.LiveVideoSourceCollaborationCommandUsageState collaboration_command_usage_state = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collaboration_command_usage_state_);
    }

    // optional .TSP.DataReference poster_image_data = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.poster_image_data_);
    }

    // optional int32 symbol_image_identifier = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_symbol_image_identifier());
    }

    // optional int32 symbol_tint_color_identifier = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_symbol_tint_color_identifier());
    }

    // optional bool is_default_source = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiveVideoSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiveVideoSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiveVideoSource::GetClassData() const { return &_class_data_; }


void LiveVideoSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiveVideoSource*>(&to_msg);
  auto& from = static_cast<const LiveVideoSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.LiveVideoSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_symbol_abbreviation_text(from._internal_symbol_abbreviation_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_capture_device_description()->::KN::LiveVideoCaptureDeviceDescription::MergeFrom(
          from._internal_capture_device_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_collaboration_command_usage_state()->::KN::LiveVideoSourceCollaborationCommandUsageState::MergeFrom(
          from._internal_collaboration_command_usage_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_poster_image_data()->::TSP::DataReference::MergeFrom(
          from._internal_poster_image_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.symbol_image_identifier_ = from._impl_.symbol_image_identifier_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.symbol_tint_color_identifier_ = from._impl_.symbol_tint_color_identifier_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_default_source_ = from._impl_.is_default_source_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiveVideoSource::CopyFrom(const LiveVideoSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.LiveVideoSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveVideoSource::IsInitialized() const {
  if (_internal_has_capture_device_description()) {
    if (!_impl_.capture_device_description_->IsInitialized()) return false;
  }
  if (_internal_has_collaboration_command_usage_state()) {
    if (!_impl_.collaboration_command_usage_state_->IsInitialized()) return false;
  }
  if (_internal_has_poster_image_data()) {
    if (!_impl_.poster_image_data_->IsInitialized()) return false;
  }
  return true;
}

void LiveVideoSource::InternalSwap(LiveVideoSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_abbreviation_text_, lhs_arena,
      &other->_impl_.symbol_abbreviation_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveVideoSource, _impl_.is_default_source_)
      + sizeof(LiveVideoSource::_impl_.is_default_source_)
      - PROTOBUF_FIELD_OFFSET(LiveVideoSource, _impl_.capture_device_description_)>(
          reinterpret_cast<char*>(&_impl_.capture_device_description_),
          reinterpret_cast<char*>(&other->_impl_.capture_device_description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveVideoSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[53]);
}

// ===================================================================

class LiveVideoSourceCollaborationCommandUsageState::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveVideoSourceCollaborationCommandUsageState>()._impl_._has_bits_);
  static const ::TSP::UUID& single_collaboration_command_usage_token(const LiveVideoSourceCollaborationCommandUsageState* msg);
  static void set_has_single_collaboration_command_usage_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_multiple_collaboration_command_usage_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::UUID&
LiveVideoSourceCollaborationCommandUsageState::_Internal::single_collaboration_command_usage_token(const LiveVideoSourceCollaborationCommandUsageState* msg) {
  return *msg->_impl_.single_collaboration_command_usage_token_;
}
void LiveVideoSourceCollaborationCommandUsageState::clear_single_collaboration_command_usage_token() {
  if (_impl_.single_collaboration_command_usage_token_ != nullptr) _impl_.single_collaboration_command_usage_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LiveVideoSourceCollaborationCommandUsageState::LiveVideoSourceCollaborationCommandUsageState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.LiveVideoSourceCollaborationCommandUsageState)
}
LiveVideoSourceCollaborationCommandUsageState::LiveVideoSourceCollaborationCommandUsageState(const LiveVideoSourceCollaborationCommandUsageState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiveVideoSourceCollaborationCommandUsageState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.single_collaboration_command_usage_token_){nullptr}
    , decltype(_impl_.has_multiple_collaboration_command_usage_tokens_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_single_collaboration_command_usage_token()) {
    _this->_impl_.single_collaboration_command_usage_token_ = new ::TSP::UUID(*from._impl_.single_collaboration_command_usage_token_);
  }
  _this->_impl_.has_multiple_collaboration_command_usage_tokens_ = from._impl_.has_multiple_collaboration_command_usage_tokens_;
  // @@protoc_insertion_point(copy_constructor:KN.LiveVideoSourceCollaborationCommandUsageState)
}

inline void LiveVideoSourceCollaborationCommandUsageState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.single_collaboration_command_usage_token_){nullptr}
    , decltype(_impl_.has_multiple_collaboration_command_usage_tokens_){false}
  };
}

LiveVideoSourceCollaborationCommandUsageState::~LiveVideoSourceCollaborationCommandUsageState() {
  // @@protoc_insertion_point(destructor:KN.LiveVideoSourceCollaborationCommandUsageState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiveVideoSourceCollaborationCommandUsageState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.single_collaboration_command_usage_token_;
}

void LiveVideoSourceCollaborationCommandUsageState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiveVideoSourceCollaborationCommandUsageState::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.LiveVideoSourceCollaborationCommandUsageState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.single_collaboration_command_usage_token_ != nullptr);
    _impl_.single_collaboration_command_usage_token_->Clear();
  }
  _impl_.has_multiple_collaboration_command_usage_tokens_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveVideoSourceCollaborationCommandUsageState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID single_collaboration_command_usage_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_collaboration_command_usage_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_multiple_collaboration_command_usage_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_multiple_collaboration_command_usage_tokens(&has_bits);
          _impl_.has_multiple_collaboration_command_usage_tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiveVideoSourceCollaborationCommandUsageState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.LiveVideoSourceCollaborationCommandUsageState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID single_collaboration_command_usage_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::single_collaboration_command_usage_token(this),
        _Internal::single_collaboration_command_usage_token(this).GetCachedSize(), target, stream);
  }

  // optional bool has_multiple_collaboration_command_usage_tokens = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_multiple_collaboration_command_usage_tokens(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.LiveVideoSourceCollaborationCommandUsageState)
  return target;
}

size_t LiveVideoSourceCollaborationCommandUsageState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.LiveVideoSourceCollaborationCommandUsageState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.UUID single_collaboration_command_usage_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.single_collaboration_command_usage_token_);
    }

    // optional bool has_multiple_collaboration_command_usage_tokens = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiveVideoSourceCollaborationCommandUsageState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiveVideoSourceCollaborationCommandUsageState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiveVideoSourceCollaborationCommandUsageState::GetClassData() const { return &_class_data_; }


void LiveVideoSourceCollaborationCommandUsageState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiveVideoSourceCollaborationCommandUsageState*>(&to_msg);
  auto& from = static_cast<const LiveVideoSourceCollaborationCommandUsageState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.LiveVideoSourceCollaborationCommandUsageState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_single_collaboration_command_usage_token()->::TSP::UUID::MergeFrom(
          from._internal_single_collaboration_command_usage_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.has_multiple_collaboration_command_usage_tokens_ = from._impl_.has_multiple_collaboration_command_usage_tokens_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiveVideoSourceCollaborationCommandUsageState::CopyFrom(const LiveVideoSourceCollaborationCommandUsageState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.LiveVideoSourceCollaborationCommandUsageState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveVideoSourceCollaborationCommandUsageState::IsInitialized() const {
  if (_internal_has_single_collaboration_command_usage_token()) {
    if (!_impl_.single_collaboration_command_usage_token_->IsInitialized()) return false;
  }
  return true;
}

void LiveVideoSourceCollaborationCommandUsageState::InternalSwap(LiveVideoSourceCollaborationCommandUsageState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveVideoSourceCollaborationCommandUsageState, _impl_.has_multiple_collaboration_command_usage_tokens_)
      + sizeof(LiveVideoSourceCollaborationCommandUsageState::_impl_.has_multiple_collaboration_command_usage_tokens_)
      - PROTOBUF_FIELD_OFFSET(LiveVideoSourceCollaborationCommandUsageState, _impl_.single_collaboration_command_usage_token_)>(
          reinterpret_cast<char*>(&_impl_.single_collaboration_command_usage_token_),
          reinterpret_cast<char*>(&other->_impl_.single_collaboration_command_usage_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveVideoSourceCollaborationCommandUsageState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[54]);
}

// ===================================================================

class LiveVideoCaptureDeviceDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveVideoCaptureDeviceDescription>()._impl_._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localized_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_ios_screen_recording_device(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Size& default_video_resolution(const LiveVideoCaptureDeviceDescription* msg);
  static void set_has_default_video_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSP::Size&
LiveVideoCaptureDeviceDescription::_Internal::default_video_resolution(const LiveVideoCaptureDeviceDescription* msg) {
  return *msg->_impl_.default_video_resolution_;
}
void LiveVideoCaptureDeviceDescription::clear_default_video_resolution() {
  if (_impl_.default_video_resolution_ != nullptr) _impl_.default_video_resolution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
LiveVideoCaptureDeviceDescription::LiveVideoCaptureDeviceDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.LiveVideoCaptureDeviceDescription)
}
LiveVideoCaptureDeviceDescription::LiveVideoCaptureDeviceDescription(const LiveVideoCaptureDeviceDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiveVideoCaptureDeviceDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_id_){}
    , decltype(_impl_.device_type_){}
    , decltype(_impl_.localized_name_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.default_video_resolution_){nullptr}
    , decltype(_impl_.position_){}
    , decltype(_impl_.is_ios_screen_recording_device_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_id()) {
    _this->_impl_.unique_id_.Set(from._internal_unique_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device_type()) {
    _this->_impl_.device_type_.Set(from._internal_device_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localized_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localized_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localized_name()) {
    _this->_impl_.localized_name_.Set(from._internal_localized_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model_id()) {
    _this->_impl_.model_id_.Set(from._internal_model_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_default_video_resolution()) {
    _this->_impl_.default_video_resolution_ = new ::TSP::Size(*from._impl_.default_video_resolution_);
  }
  ::memcpy(&_impl_.position_, &from._impl_.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_ios_screen_recording_device_) -
    reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.is_ios_screen_recording_device_));
  // @@protoc_insertion_point(copy_constructor:KN.LiveVideoCaptureDeviceDescription)
}

inline void LiveVideoCaptureDeviceDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_id_){}
    , decltype(_impl_.device_type_){}
    , decltype(_impl_.localized_name_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.default_video_resolution_){nullptr}
    , decltype(_impl_.position_){0}
    , decltype(_impl_.is_ios_screen_recording_device_){false}
  };
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localized_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localized_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LiveVideoCaptureDeviceDescription::~LiveVideoCaptureDeviceDescription() {
  // @@protoc_insertion_point(destructor:KN.LiveVideoCaptureDeviceDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiveVideoCaptureDeviceDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unique_id_.Destroy();
  _impl_.device_type_.Destroy();
  _impl_.localized_name_.Destroy();
  _impl_.model_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.default_video_resolution_;
}

void LiveVideoCaptureDeviceDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiveVideoCaptureDeviceDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.LiveVideoCaptureDeviceDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.unique_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.device_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.localized_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.model_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.default_video_resolution_ != nullptr);
      _impl_.default_video_resolution_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&_impl_.position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_ios_screen_recording_device_) -
        reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.is_ios_screen_recording_device_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveVideoCaptureDeviceDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.LiveVideoCaptureDeviceDescription.unique_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .KN.LiveVideoCaptureDeviceDescription.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::KN::LiveVideoCaptureDeviceDescription_Position_IsValid(val))) {
            _internal_set_position(static_cast<::KN::LiveVideoCaptureDeviceDescription_Position>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string device_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.LiveVideoCaptureDeviceDescription.device_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string localized_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_localized_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.LiveVideoCaptureDeviceDescription.localized_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_ios_screen_recording_device = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_ios_screen_recording_device(&has_bits);
          _impl_.is_ios_screen_recording_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_model_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.LiveVideoCaptureDeviceDescription.model_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Size default_video_resolution = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_video_resolution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiveVideoCaptureDeviceDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.LiveVideoCaptureDeviceDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unique_id().data(), static_cast<int>(this->_internal_unique_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.LiveVideoCaptureDeviceDescription.unique_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unique_id(), target);
  }

  // optional .KN.LiveVideoCaptureDeviceDescription.Position position = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_position(), target);
  }

  // optional string device_type = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.LiveVideoCaptureDeviceDescription.device_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_type(), target);
  }

  // optional string localized_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localized_name().data(), static_cast<int>(this->_internal_localized_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.LiveVideoCaptureDeviceDescription.localized_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_localized_name(), target);
  }

  // optional bool is_ios_screen_recording_device = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_ios_screen_recording_device(), target);
  }

  // optional string model_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.LiveVideoCaptureDeviceDescription.model_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_model_id(), target);
  }

  // optional .TSP.Size default_video_resolution = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::default_video_resolution(this),
        _Internal::default_video_resolution(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.LiveVideoCaptureDeviceDescription)
  return target;
}

size_t LiveVideoCaptureDeviceDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.LiveVideoCaptureDeviceDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_id());
    }

    // optional string device_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device_type());
    }

    // optional string localized_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localized_name());
    }

    // optional string model_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_id());
    }

    // optional .TSP.Size default_video_resolution = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.default_video_resolution_);
    }

    // optional .KN.LiveVideoCaptureDeviceDescription.Position position = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_position());
    }

    // optional bool is_ios_screen_recording_device = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiveVideoCaptureDeviceDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiveVideoCaptureDeviceDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiveVideoCaptureDeviceDescription::GetClassData() const { return &_class_data_; }


void LiveVideoCaptureDeviceDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiveVideoCaptureDeviceDescription*>(&to_msg);
  auto& from = static_cast<const LiveVideoCaptureDeviceDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.LiveVideoCaptureDeviceDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_unique_id(from._internal_unique_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_device_type(from._internal_device_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_localized_name(from._internal_localized_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_model_id(from._internal_model_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_default_video_resolution()->::TSP::Size::MergeFrom(
          from._internal_default_video_resolution());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.position_ = from._impl_.position_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_ios_screen_recording_device_ = from._impl_.is_ios_screen_recording_device_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiveVideoCaptureDeviceDescription::CopyFrom(const LiveVideoCaptureDeviceDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.LiveVideoCaptureDeviceDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveVideoCaptureDeviceDescription::IsInitialized() const {
  if (_internal_has_default_video_resolution()) {
    if (!_impl_.default_video_resolution_->IsInitialized()) return false;
  }
  return true;
}

void LiveVideoCaptureDeviceDescription::InternalSwap(LiveVideoCaptureDeviceDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unique_id_, lhs_arena,
      &other->_impl_.unique_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_type_, lhs_arena,
      &other->_impl_.device_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localized_name_, lhs_arena,
      &other->_impl_.localized_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_id_, lhs_arena,
      &other->_impl_.model_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiveVideoCaptureDeviceDescription, _impl_.is_ios_screen_recording_device_)
      + sizeof(LiveVideoCaptureDeviceDescription::_impl_.is_ios_screen_recording_device_)
      - PROTOBUF_FIELD_OFFSET(LiveVideoCaptureDeviceDescription, _impl_.default_video_resolution_)>(
          reinterpret_cast<char*>(&_impl_.default_video_resolution_),
          reinterpret_cast<char*>(&other->_impl_.default_video_resolution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveVideoCaptureDeviceDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[55]);
}

// ===================================================================

class LiveVideoSourceCollection::_Internal {
 public:
  using HasBits = decltype(std::declval<LiveVideoSourceCollection>()._impl_._has_bits_);
  static const ::TSP::Reference& default_source(const LiveVideoSourceCollection* msg);
  static void set_has_default_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSP::Reference&
LiveVideoSourceCollection::_Internal::default_source(const LiveVideoSourceCollection* msg) {
  return *msg->_impl_.default_source_;
}
void LiveVideoSourceCollection::clear_sources() {
  _impl_.sources_.Clear();
}
void LiveVideoSourceCollection::clear_default_source() {
  if (_impl_.default_source_ != nullptr) _impl_.default_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LiveVideoSourceCollection::LiveVideoSourceCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.LiveVideoSourceCollection)
}
LiveVideoSourceCollection::LiveVideoSourceCollection(const LiveVideoSourceCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiveVideoSourceCollection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sources_){from._impl_.sources_}
    , decltype(_impl_.default_source_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_default_source()) {
    _this->_impl_.default_source_ = new ::TSP::Reference(*from._impl_.default_source_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.LiveVideoSourceCollection)
}

inline void LiveVideoSourceCollection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sources_){arena}
    , decltype(_impl_.default_source_){nullptr}
  };
}

LiveVideoSourceCollection::~LiveVideoSourceCollection() {
  // @@protoc_insertion_point(destructor:KN.LiveVideoSourceCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiveVideoSourceCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sources_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.default_source_;
}

void LiveVideoSourceCollection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiveVideoSourceCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.LiveVideoSourceCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sources_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.default_source_ != nullptr);
    _impl_.default_source_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveVideoSourceCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference sources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference default_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiveVideoSourceCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.LiveVideoSourceCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference sources = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sources_size()); i < n; i++) {
    const auto& repfield = this->_internal_sources(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference default_source = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::default_source(this),
        _Internal::default_source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.LiveVideoSourceCollection)
  return target;
}

size_t LiveVideoSourceCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.LiveVideoSourceCollection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference sources = 1;
  total_size += 1UL * this->_internal_sources_size();
  for (const auto& msg : this->_impl_.sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference default_source = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiveVideoSourceCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiveVideoSourceCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiveVideoSourceCollection::GetClassData() const { return &_class_data_; }


void LiveVideoSourceCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiveVideoSourceCollection*>(&to_msg);
  auto& from = static_cast<const LiveVideoSourceCollection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.LiveVideoSourceCollection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sources_.MergeFrom(from._impl_.sources_);
  if (from._internal_has_default_source()) {
    _this->_internal_mutable_default_source()->::TSP::Reference::MergeFrom(
        from._internal_default_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiveVideoSourceCollection::CopyFrom(const LiveVideoSourceCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.LiveVideoSourceCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveVideoSourceCollection::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.sources_))
    return false;
  if (_internal_has_default_source()) {
    if (!_impl_.default_source_->IsInitialized()) return false;
  }
  return true;
}

void LiveVideoSourceCollection::InternalSwap(LiveVideoSourceCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sources_.InternalSwap(&other->_impl_.sources_);
  swap(_impl_.default_source_, other->_impl_.default_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveVideoSourceCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[56]);
}

// ===================================================================

class LiveVideoSourceUsageEntry::_Internal {
 public:
};

LiveVideoSourceUsageEntry::LiveVideoSourceUsageEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.LiveVideoSourceUsageEntry)
}
LiveVideoSourceUsageEntry::LiveVideoSourceUsageEntry(const LiveVideoSourceUsageEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiveVideoSourceUsageEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.background_kinds_){from._impl_.background_kinds_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KN.LiveVideoSourceUsageEntry)
}

inline void LiveVideoSourceUsageEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.background_kinds_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LiveVideoSourceUsageEntry::~LiveVideoSourceUsageEntry() {
  // @@protoc_insertion_point(destructor:KN.LiveVideoSourceUsageEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiveVideoSourceUsageEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.background_kinds_.~RepeatedField();
}

void LiveVideoSourceUsageEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiveVideoSourceUsageEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.LiveVideoSourceUsageEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.background_kinds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiveVideoSourceUsageEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 background_kinds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_background_kinds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_background_kinds(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LiveVideoSourceUsageEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.LiveVideoSourceUsageEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 background_kinds = 1;
  for (int i = 0, n = this->_internal_background_kinds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_background_kinds(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.LiveVideoSourceUsageEntry)
  return target;
}

size_t LiveVideoSourceUsageEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.LiveVideoSourceUsageEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 background_kinds = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.background_kinds_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_background_kinds_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiveVideoSourceUsageEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiveVideoSourceUsageEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiveVideoSourceUsageEntry::GetClassData() const { return &_class_data_; }


void LiveVideoSourceUsageEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiveVideoSourceUsageEntry*>(&to_msg);
  auto& from = static_cast<const LiveVideoSourceUsageEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.LiveVideoSourceUsageEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.background_kinds_.MergeFrom(from._impl_.background_kinds_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiveVideoSourceUsageEntry::CopyFrom(const LiveVideoSourceUsageEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.LiveVideoSourceUsageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveVideoSourceUsageEntry::IsInitialized() const {
  return true;
}

void LiveVideoSourceUsageEntry::InternalSwap(LiveVideoSourceUsageEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.background_kinds_.InternalSwap(&other->_impl_.background_kinds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LiveVideoSourceUsageEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[57]);
}

// ===================================================================

class MotionBackgroundStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionBackgroundStylePropertiesArchive>()._impl_._has_bits_);
  static void set_has_background_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::FillArchive& color_gradient(const MotionBackgroundStylePropertiesArchive* msg);
  static void set_has_color_gradient(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_random_number_seed(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_color_blur_sigma(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_noise_amplitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_noise_octaves(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_noise_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_noise_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_color_palette_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_zoom(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_invert(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_blend_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_blend_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dest_blend_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Color& background_color(const MotionBackgroundStylePropertiesArchive* msg);
  static void set_has_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Color& foreground_color(const MotionBackgroundStylePropertiesArchive* msg);
  static void set_has_foreground_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Color& line_color(const MotionBackgroundStylePropertiesArchive* msg);
  static void set_has_line_color(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Color& point_color(const MotionBackgroundStylePropertiesArchive* msg);
  static void set_has_point_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_border(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_blend(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_border_lightness(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_damping(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_density(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_diffuse_power(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_distortion(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_entropy(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_exposure(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_fog_distance(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_fog_power(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_gamma(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_grain_amount(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_grain_intensity(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_hue(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_lightness(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_line_alpha(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_line_center(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_line_fade(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_line_fade_power(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_line_length(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_line_width(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_noise_size_scale(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_noise_size_weight(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_noise_variance(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_motion_background_opacity(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_point_depth_alpha(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_point_size(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_refraction(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_shadow_alpha(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_shadow_angle(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_shadow_offset(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_shadow_scale(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_shadow_value(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_texture_power(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_draw_points(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_draw_lines(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_draw_shadows(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_pixels_per_division(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_symmetry(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_lock_focus(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_amplitude(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_envelope(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_y_offset(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_focus(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_blur(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_grain_speed(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static const ::TSP::Color& mesh_color(const MotionBackgroundStylePropertiesArchive* msg);
  static void set_has_mesh_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_mesh_line_width(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_delta_time(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_time_start(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_color_contrast(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_color_gamma(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_color_saturation(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_color_brightness(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_color_hue(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_color_vibrance(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_noise_movement(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_noise_scale_horizontal(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_noise_scale_vertical(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_noise_gain(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_noise_lacunarity(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_instance_count(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_extrusion(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_noise_offset(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_color_hue_offset(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_shadow_hue(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_shadow_hue_offset(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_shadow_saturation(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_shadow_brightness(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_shadow_intensity(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static void set_has_shadow_power(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static void set_has_noise_octaves_iterations(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
};

const ::TSD::FillArchive&
MotionBackgroundStylePropertiesArchive::_Internal::color_gradient(const MotionBackgroundStylePropertiesArchive* msg) {
  return *msg->_impl_.color_gradient_;
}
const ::TSP::Color&
MotionBackgroundStylePropertiesArchive::_Internal::background_color(const MotionBackgroundStylePropertiesArchive* msg) {
  return *msg->_impl_.background_color_;
}
const ::TSP::Color&
MotionBackgroundStylePropertiesArchive::_Internal::foreground_color(const MotionBackgroundStylePropertiesArchive* msg) {
  return *msg->_impl_.foreground_color_;
}
const ::TSP::Color&
MotionBackgroundStylePropertiesArchive::_Internal::line_color(const MotionBackgroundStylePropertiesArchive* msg) {
  return *msg->_impl_.line_color_;
}
const ::TSP::Color&
MotionBackgroundStylePropertiesArchive::_Internal::point_color(const MotionBackgroundStylePropertiesArchive* msg) {
  return *msg->_impl_.point_color_;
}
const ::TSP::Color&
MotionBackgroundStylePropertiesArchive::_Internal::mesh_color(const MotionBackgroundStylePropertiesArchive* msg) {
  return *msg->_impl_.mesh_color_;
}
void MotionBackgroundStylePropertiesArchive::clear_color_gradient() {
  if (_impl_.color_gradient_ != nullptr) _impl_.color_gradient_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void MotionBackgroundStylePropertiesArchive::clear_background_color() {
  if (_impl_.background_color_ != nullptr) _impl_.background_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void MotionBackgroundStylePropertiesArchive::clear_foreground_color() {
  if (_impl_.foreground_color_ != nullptr) _impl_.foreground_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void MotionBackgroundStylePropertiesArchive::clear_line_color() {
  if (_impl_.line_color_ != nullptr) _impl_.line_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void MotionBackgroundStylePropertiesArchive::clear_point_color() {
  if (_impl_.point_color_ != nullptr) _impl_.point_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void MotionBackgroundStylePropertiesArchive::clear_mesh_color() {
  if (_impl_.mesh_color_ != nullptr) _impl_.mesh_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
MotionBackgroundStylePropertiesArchive::MotionBackgroundStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.MotionBackgroundStylePropertiesArchive)
}
MotionBackgroundStylePropertiesArchive::MotionBackgroundStylePropertiesArchive(const MotionBackgroundStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MotionBackgroundStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.background_name_){}
    , decltype(_impl_.variant_){}
    , decltype(_impl_.blend_mode_){}
    , decltype(_impl_.source_blend_factor_){}
    , decltype(_impl_.dest_blend_factor_){}
    , decltype(_impl_.motion_){}
    , decltype(_impl_.color_gradient_){nullptr}
    , decltype(_impl_.background_color_){nullptr}
    , decltype(_impl_.foreground_color_){nullptr}
    , decltype(_impl_.line_color_){nullptr}
    , decltype(_impl_.point_color_){nullptr}
    , decltype(_impl_.mesh_color_){nullptr}
    , decltype(_impl_.color_blur_sigma_){}
    , decltype(_impl_.noise_amplitude_){}
    , decltype(_impl_.noise_octaves_){}
    , decltype(_impl_.noise_scale_){}
    , decltype(_impl_.noise_speed_){}
    , decltype(_impl_.color_palette_offset_){}
    , decltype(_impl_.zoom_){}
    , decltype(_impl_.alpha_){}
    , decltype(_impl_.border_){}
    , decltype(_impl_.blend_){}
    , decltype(_impl_.brightness_){}
    , decltype(_impl_.border_lightness_){}
    , decltype(_impl_.contrast_){}
    , decltype(_impl_.damping_){}
    , decltype(_impl_.density_){}
    , decltype(_impl_.diffuse_power_){}
    , decltype(_impl_.distortion_){}
    , decltype(_impl_.entropy_){}
    , decltype(_impl_.exposure_){}
    , decltype(_impl_.filter_){}
    , decltype(_impl_.fog_distance_){}
    , decltype(_impl_.fog_power_){}
    , decltype(_impl_.gamma_){}
    , decltype(_impl_.grain_amount_){}
    , decltype(_impl_.grain_intensity_){}
    , decltype(_impl_.hue_){}
    , decltype(_impl_.lightness_){}
    , decltype(_impl_.line_alpha_){}
    , decltype(_impl_.line_center_){}
    , decltype(_impl_.line_fade_){}
    , decltype(_impl_.line_fade_power_){}
    , decltype(_impl_.random_number_seed_){}
    , decltype(_impl_.invert_){}
    , decltype(_impl_.draw_points_){}
    , decltype(_impl_.draw_lines_){}
    , decltype(_impl_.draw_shadows_){}
    , decltype(_impl_.line_length_){}
    , decltype(_impl_.line_width_){}
    , decltype(_impl_.noise_size_scale_){}
    , decltype(_impl_.noise_size_weight_){}
    , decltype(_impl_.noise_variance_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.motion_background_opacity_){}
    , decltype(_impl_.point_depth_alpha_){}
    , decltype(_impl_.point_size_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.refraction_){}
    , decltype(_impl_.resolution_){}
    , decltype(_impl_.saturation_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.shadow_alpha_){}
    , decltype(_impl_.shadow_angle_){}
    , decltype(_impl_.shadow_offset_){}
    , decltype(_impl_.shadow_scale_){}
    , decltype(_impl_.shadow_value_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.texture_power_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.pixels_per_division_){}
    , decltype(_impl_.symmetry_){}
    , decltype(_impl_.lock_focus_){}
    , decltype(_impl_.amplitude_){}
    , decltype(_impl_.envelope_){}
    , decltype(_impl_.y_offset_){}
    , decltype(_impl_.focus_){}
    , decltype(_impl_.blur_){}
    , decltype(_impl_.grain_speed_){}
    , decltype(_impl_.angle_){}
    , decltype(_impl_.mesh_line_width_){}
    , decltype(_impl_.delta_time_){}
    , decltype(_impl_.time_start_){}
    , decltype(_impl_.color_contrast_){}
    , decltype(_impl_.color_gamma_){}
    , decltype(_impl_.color_saturation_){}
    , decltype(_impl_.color_brightness_){}
    , decltype(_impl_.color_hue_){}
    , decltype(_impl_.color_vibrance_){}
    , decltype(_impl_.noise_movement_){}
    , decltype(_impl_.power_){}
    , decltype(_impl_.threshold_){}
    , decltype(_impl_.noise_scale_horizontal_){}
    , decltype(_impl_.noise_scale_vertical_){}
    , decltype(_impl_.noise_gain_){}
    , decltype(_impl_.noise_lacunarity_){}
    , decltype(_impl_.extrusion_){}
    , decltype(_impl_.noise_offset_){}
    , decltype(_impl_.color_hue_offset_){}
    , decltype(_impl_.shadow_hue_){}
    , decltype(_impl_.shadow_hue_offset_){}
    , decltype(_impl_.instance_count_){}
    , decltype(_impl_.noise_octaves_iterations_){}
    , decltype(_impl_.shadow_saturation_){}
    , decltype(_impl_.shadow_brightness_){}
    , decltype(_impl_.shadow_intensity_){}
    , decltype(_impl_.shadow_power_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.background_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.background_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_background_name()) {
    _this->_impl_.background_name_.Set(from._internal_background_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.variant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.variant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_variant()) {
    _this->_impl_.variant_.Set(from._internal_variant(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blend_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blend_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_blend_mode()) {
    _this->_impl_.blend_mode_.Set(from._internal_blend_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_blend_factor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_blend_factor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_blend_factor()) {
    _this->_impl_.source_blend_factor_.Set(from._internal_source_blend_factor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dest_blend_factor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dest_blend_factor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dest_blend_factor()) {
    _this->_impl_.dest_blend_factor_.Set(from._internal_dest_blend_factor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.motion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.motion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_motion()) {
    _this->_impl_.motion_.Set(from._internal_motion(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_color_gradient()) {
    _this->_impl_.color_gradient_ = new ::TSD::FillArchive(*from._impl_.color_gradient_);
  }
  if (from._internal_has_background_color()) {
    _this->_impl_.background_color_ = new ::TSP::Color(*from._impl_.background_color_);
  }
  if (from._internal_has_foreground_color()) {
    _this->_impl_.foreground_color_ = new ::TSP::Color(*from._impl_.foreground_color_);
  }
  if (from._internal_has_line_color()) {
    _this->_impl_.line_color_ = new ::TSP::Color(*from._impl_.line_color_);
  }
  if (from._internal_has_point_color()) {
    _this->_impl_.point_color_ = new ::TSP::Color(*from._impl_.point_color_);
  }
  if (from._internal_has_mesh_color()) {
    _this->_impl_.mesh_color_ = new ::TSP::Color(*from._impl_.mesh_color_);
  }
  ::memcpy(&_impl_.color_blur_sigma_, &from._impl_.color_blur_sigma_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shadow_power_) -
    reinterpret_cast<char*>(&_impl_.color_blur_sigma_)) + sizeof(_impl_.shadow_power_));
  // @@protoc_insertion_point(copy_constructor:KN.MotionBackgroundStylePropertiesArchive)
}

inline void MotionBackgroundStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.background_name_){}
    , decltype(_impl_.variant_){}
    , decltype(_impl_.blend_mode_){}
    , decltype(_impl_.source_blend_factor_){}
    , decltype(_impl_.dest_blend_factor_){}
    , decltype(_impl_.motion_){}
    , decltype(_impl_.color_gradient_){nullptr}
    , decltype(_impl_.background_color_){nullptr}
    , decltype(_impl_.foreground_color_){nullptr}
    , decltype(_impl_.line_color_){nullptr}
    , decltype(_impl_.point_color_){nullptr}
    , decltype(_impl_.mesh_color_){nullptr}
    , decltype(_impl_.color_blur_sigma_){0}
    , decltype(_impl_.noise_amplitude_){0}
    , decltype(_impl_.noise_octaves_){0}
    , decltype(_impl_.noise_scale_){0}
    , decltype(_impl_.noise_speed_){0}
    , decltype(_impl_.color_palette_offset_){0}
    , decltype(_impl_.zoom_){0}
    , decltype(_impl_.alpha_){0}
    , decltype(_impl_.border_){0}
    , decltype(_impl_.blend_){0}
    , decltype(_impl_.brightness_){0}
    , decltype(_impl_.border_lightness_){0}
    , decltype(_impl_.contrast_){0}
    , decltype(_impl_.damping_){0}
    , decltype(_impl_.density_){0}
    , decltype(_impl_.diffuse_power_){0}
    , decltype(_impl_.distortion_){0}
    , decltype(_impl_.entropy_){0}
    , decltype(_impl_.exposure_){0}
    , decltype(_impl_.filter_){0}
    , decltype(_impl_.fog_distance_){0}
    , decltype(_impl_.fog_power_){0}
    , decltype(_impl_.gamma_){0}
    , decltype(_impl_.grain_amount_){0}
    , decltype(_impl_.grain_intensity_){0}
    , decltype(_impl_.hue_){0}
    , decltype(_impl_.lightness_){0}
    , decltype(_impl_.line_alpha_){0}
    , decltype(_impl_.line_center_){0}
    , decltype(_impl_.line_fade_){0}
    , decltype(_impl_.line_fade_power_){0}
    , decltype(_impl_.random_number_seed_){0}
    , decltype(_impl_.invert_){false}
    , decltype(_impl_.draw_points_){false}
    , decltype(_impl_.draw_lines_){false}
    , decltype(_impl_.draw_shadows_){false}
    , decltype(_impl_.line_length_){0}
    , decltype(_impl_.line_width_){0}
    , decltype(_impl_.noise_size_scale_){0}
    , decltype(_impl_.noise_size_weight_){0}
    , decltype(_impl_.noise_variance_){0}
    , decltype(_impl_.offset_){0}
    , decltype(_impl_.motion_background_opacity_){0}
    , decltype(_impl_.point_depth_alpha_){0}
    , decltype(_impl_.point_size_){0}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.refraction_){0}
    , decltype(_impl_.resolution_){0}
    , decltype(_impl_.saturation_){0}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.shadow_alpha_){0}
    , decltype(_impl_.shadow_angle_){0}
    , decltype(_impl_.shadow_offset_){0}
    , decltype(_impl_.shadow_scale_){0}
    , decltype(_impl_.shadow_value_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.texture_power_){0}
    , decltype(_impl_.time_){0}
    , decltype(_impl_.pixels_per_division_){0u}
    , decltype(_impl_.symmetry_){false}
    , decltype(_impl_.lock_focus_){false}
    , decltype(_impl_.amplitude_){0}
    , decltype(_impl_.envelope_){0}
    , decltype(_impl_.y_offset_){0}
    , decltype(_impl_.focus_){0}
    , decltype(_impl_.blur_){0}
    , decltype(_impl_.grain_speed_){0}
    , decltype(_impl_.angle_){0}
    , decltype(_impl_.mesh_line_width_){0}
    , decltype(_impl_.delta_time_){0}
    , decltype(_impl_.time_start_){0}
    , decltype(_impl_.color_contrast_){0}
    , decltype(_impl_.color_gamma_){0}
    , decltype(_impl_.color_saturation_){0}
    , decltype(_impl_.color_brightness_){0}
    , decltype(_impl_.color_hue_){0}
    , decltype(_impl_.color_vibrance_){0}
    , decltype(_impl_.noise_movement_){0}
    , decltype(_impl_.power_){0}
    , decltype(_impl_.threshold_){0}
    , decltype(_impl_.noise_scale_horizontal_){0}
    , decltype(_impl_.noise_scale_vertical_){0}
    , decltype(_impl_.noise_gain_){0}
    , decltype(_impl_.noise_lacunarity_){0}
    , decltype(_impl_.extrusion_){0}
    , decltype(_impl_.noise_offset_){0}
    , decltype(_impl_.color_hue_offset_){0}
    , decltype(_impl_.shadow_hue_){0}
    , decltype(_impl_.shadow_hue_offset_){0}
    , decltype(_impl_.instance_count_){0}
    , decltype(_impl_.noise_octaves_iterations_){0}
    , decltype(_impl_.shadow_saturation_){0}
    , decltype(_impl_.shadow_brightness_){0}
    , decltype(_impl_.shadow_intensity_){0}
    , decltype(_impl_.shadow_power_){0}
  };
  _impl_.background_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.background_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.variant_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.variant_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blend_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blend_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_blend_factor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_blend_factor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dest_blend_factor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dest_blend_factor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.motion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.motion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MotionBackgroundStylePropertiesArchive::~MotionBackgroundStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:KN.MotionBackgroundStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotionBackgroundStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.background_name_.Destroy();
  _impl_.variant_.Destroy();
  _impl_.blend_mode_.Destroy();
  _impl_.source_blend_factor_.Destroy();
  _impl_.dest_blend_factor_.Destroy();
  _impl_.motion_.Destroy();
  if (this != internal_default_instance()) delete _impl_.color_gradient_;
  if (this != internal_default_instance()) delete _impl_.background_color_;
  if (this != internal_default_instance()) delete _impl_.foreground_color_;
  if (this != internal_default_instance()) delete _impl_.line_color_;
  if (this != internal_default_instance()) delete _impl_.point_color_;
  if (this != internal_default_instance()) delete _impl_.mesh_color_;
}

void MotionBackgroundStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MotionBackgroundStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.MotionBackgroundStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.background_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.variant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.blend_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.source_blend_factor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.dest_blend_factor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.motion_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.color_gradient_ != nullptr);
      _impl_.color_gradient_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.background_color_ != nullptr);
      _impl_.background_color_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.foreground_color_ != nullptr);
      _impl_.foreground_color_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.line_color_ != nullptr);
      _impl_.line_color_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.point_color_ != nullptr);
      _impl_.point_color_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.mesh_color_ != nullptr);
      _impl_.mesh_color_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&_impl_.color_blur_sigma_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.noise_scale_) -
        reinterpret_cast<char*>(&_impl_.color_blur_sigma_)) + sizeof(_impl_.noise_scale_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.noise_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.border_lightness_) -
        reinterpret_cast<char*>(&_impl_.noise_speed_)) + sizeof(_impl_.border_lightness_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.contrast_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.filter_) -
        reinterpret_cast<char*>(&_impl_.contrast_)) + sizeof(_impl_.filter_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.fog_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.line_alpha_) -
        reinterpret_cast<char*>(&_impl_.fog_distance_)) + sizeof(_impl_.line_alpha_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.line_center_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.draw_shadows_) -
        reinterpret_cast<char*>(&_impl_.line_center_)) + sizeof(_impl_.draw_shadows_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.line_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.point_depth_alpha_) -
        reinterpret_cast<char*>(&_impl_.line_length_)) + sizeof(_impl_.point_depth_alpha_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.point_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shadow_angle_) -
        reinterpret_cast<char*>(&_impl_.point_size_)) + sizeof(_impl_.shadow_angle_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.shadow_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.symmetry_) -
        reinterpret_cast<char*>(&_impl_.shadow_offset_)) + sizeof(_impl_.symmetry_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.lock_focus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.angle_) -
        reinterpret_cast<char*>(&_impl_.lock_focus_)) + sizeof(_impl_.angle_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.mesh_line_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.color_hue_) -
        reinterpret_cast<char*>(&_impl_.mesh_line_width_)) + sizeof(_impl_.color_hue_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.color_vibrance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.noise_lacunarity_) -
        reinterpret_cast<char*>(&_impl_.color_vibrance_)) + sizeof(_impl_.noise_lacunarity_));
  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.extrusion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shadow_saturation_) -
        reinterpret_cast<char*>(&_impl_.extrusion_)) + sizeof(_impl_.shadow_saturation_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.shadow_brightness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.shadow_power_) -
        reinterpret_cast<char*>(&_impl_.shadow_brightness_)) + sizeof(_impl_.shadow_power_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionBackgroundStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string background_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_background_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.MotionBackgroundStylePropertiesArchive.background_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string variant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_variant();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.MotionBackgroundStylePropertiesArchive.variant");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive color_gradient = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_gradient(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 random_number_seed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_random_number_seed(&_impl_._has_bits_);
          _impl_.random_number_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double color_blur_sigma = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_color_blur_sigma(&_impl_._has_bits_);
          _impl_.color_blur_sigma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_amplitude = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_noise_amplitude(&_impl_._has_bits_);
          _impl_.noise_amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_octaves = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_noise_octaves(&_impl_._has_bits_);
          _impl_.noise_octaves_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_scale = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_noise_scale(&_impl_._has_bits_);
          _impl_.noise_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_speed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_noise_speed(&_impl_._has_bits_);
          _impl_.noise_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double color_palette_offset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_color_palette_offset(&_impl_._has_bits_);
          _impl_.color_palette_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double zoom = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_zoom(&_impl_._has_bits_);
          _impl_.zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool invert = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_invert(&_impl_._has_bits_);
          _impl_.invert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string blend_mode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_blend_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.MotionBackgroundStylePropertiesArchive.blend_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string source_blend_factor = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_source_blend_factor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.MotionBackgroundStylePropertiesArchive.source_blend_factor");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string dest_blend_factor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_dest_blend_factor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.MotionBackgroundStylePropertiesArchive.dest_blend_factor");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string motion = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_motion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "KN.MotionBackgroundStylePropertiesArchive.motion");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color background_color = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color foreground_color = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreground_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color line_color = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_line_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color point_color = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double alpha = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_alpha(&_impl_._has_bits_);
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double border = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _Internal::set_has_border(&_impl_._has_bits_);
          _impl_.border_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double blend = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_blend(&_impl_._has_bits_);
          _impl_.blend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brightness = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_brightness(&_impl_._has_bits_);
          _impl_.brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double border_lightness = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_border_lightness(&_impl_._has_bits_);
          _impl_.border_lightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double contrast = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_contrast(&_impl_._has_bits_);
          _impl_.contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double damping = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_damping(&_impl_._has_bits_);
          _impl_.damping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double density = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_density(&_impl_._has_bits_);
          _impl_.density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double diffuse_power = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_diffuse_power(&_impl_._has_bits_);
          _impl_.diffuse_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double distortion = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_distortion(&_impl_._has_bits_);
          _impl_.distortion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double entropy = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_entropy(&_impl_._has_bits_);
          _impl_.entropy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double exposure = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_exposure(&_impl_._has_bits_);
          _impl_.exposure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double filter = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_filter(&_impl_._has_bits_);
          _impl_.filter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double fog_distance = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_fog_distance(&_impl_._has_bits_);
          _impl_.fog_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double fog_power = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_fog_power(&_impl_._has_bits_);
          _impl_.fog_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double gamma = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_gamma(&_impl_._has_bits_);
          _impl_.gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double grain_amount = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_grain_amount(&_impl_._has_bits_);
          _impl_.grain_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double grain_intensity = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_grain_intensity(&_impl_._has_bits_);
          _impl_.grain_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double hue = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_hue(&_impl_._has_bits_);
          _impl_.hue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lightness = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_lightness(&_impl_._has_bits_);
          _impl_.lightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double line_alpha = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_line_alpha(&_impl_._has_bits_);
          _impl_.line_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double line_center = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_line_center(&_impl_._has_bits_);
          _impl_.line_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double line_fade = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_line_fade(&_impl_._has_bits_);
          _impl_.line_fade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double line_fade_power = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_line_fade_power(&_impl_._has_bits_);
          _impl_.line_fade_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double line_length = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_line_length(&_impl_._has_bits_);
          _impl_.line_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double line_width = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_line_width(&_impl_._has_bits_);
          _impl_.line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_size_scale = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_noise_size_scale(&_impl_._has_bits_);
          _impl_.noise_size_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_size_weight = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_noise_size_weight(&_impl_._has_bits_);
          _impl_.noise_size_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_variance = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_noise_variance(&_impl_._has_bits_);
          _impl_.noise_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double offset = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_offset(&_impl_._has_bits_);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double motion_background_opacity = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_motion_background_opacity(&_impl_._has_bits_);
          _impl_.motion_background_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double point_depth_alpha = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_point_depth_alpha(&_impl_._has_bits_);
          _impl_.point_depth_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double point_size = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_point_size(&_impl_._has_bits_);
          _impl_.point_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double radius = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _Internal::set_has_radius(&_impl_._has_bits_);
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double refraction = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_refraction(&_impl_._has_bits_);
          _impl_.refraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double resolution = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_resolution(&_impl_._has_bits_);
          _impl_.resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double saturation = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_saturation(&_impl_._has_bits_);
          _impl_.saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double scale = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_scale(&_impl_._has_bits_);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_alpha = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_shadow_alpha(&_impl_._has_bits_);
          _impl_.shadow_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_angle = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_shadow_angle(&_impl_._has_bits_);
          _impl_.shadow_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_offset = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_shadow_offset(&_impl_._has_bits_);
          _impl_.shadow_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_scale = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_shadow_scale(&_impl_._has_bits_);
          _impl_.shadow_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_value = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_shadow_value(&_impl_._has_bits_);
          _impl_.shadow_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_speed(&_impl_._has_bits_);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double texture_power = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_texture_power(&_impl_._has_bits_);
          _impl_.texture_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_time(&_impl_._has_bits_);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool draw_points = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_draw_points(&_impl_._has_bits_);
          _impl_.draw_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool draw_lines = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_draw_lines(&_impl_._has_bits_);
          _impl_.draw_lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool draw_shadows = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_draw_shadows(&_impl_._has_bits_);
          _impl_.draw_shadows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pixels_per_division = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_pixels_per_division(&_impl_._has_bits_);
          _impl_.pixels_per_division_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool symmetry = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_symmetry(&_impl_._has_bits_);
          _impl_.symmetry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool lock_focus = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_lock_focus(&_impl_._has_bits_);
          _impl_.lock_focus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double amplitude = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_amplitude(&_impl_._has_bits_);
          _impl_.amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double envelope = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_envelope(&_impl_._has_bits_);
          _impl_.envelope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y_offset = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_y_offset(&_impl_._has_bits_);
          _impl_.y_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double focus = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_focus(&_impl_._has_bits_);
          _impl_.focus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double blur = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_blur(&_impl_._has_bits_);
          _impl_.blur_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double grain_speed = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_grain_speed(&_impl_._has_bits_);
          _impl_.grain_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color mesh_color = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double angle = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_angle(&_impl_._has_bits_);
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double mesh_line_width = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _Internal::set_has_mesh_line_width(&_impl_._has_bits_);
          _impl_.mesh_line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double delta_time = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_delta_time(&_impl_._has_bits_);
          _impl_.delta_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_start = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_time_start(&_impl_._has_bits_);
          _impl_.time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double color_contrast = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_color_contrast(&_impl_._has_bits_);
          _impl_.color_contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double color_gamma = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_color_gamma(&_impl_._has_bits_);
          _impl_.color_gamma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double color_saturation = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _Internal::set_has_color_saturation(&_impl_._has_bits_);
          _impl_.color_saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double color_brightness = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_color_brightness(&_impl_._has_bits_);
          _impl_.color_brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double color_hue = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_color_hue(&_impl_._has_bits_);
          _impl_.color_hue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double color_vibrance = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_color_vibrance(&_impl_._has_bits_);
          _impl_.color_vibrance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_movement = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _Internal::set_has_noise_movement(&_impl_._has_bits_);
          _impl_.noise_movement_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double power = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_power(&_impl_._has_bits_);
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double threshold = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_threshold(&_impl_._has_bits_);
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_scale_horizontal = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_noise_scale_horizontal(&_impl_._has_bits_);
          _impl_.noise_scale_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_scale_vertical = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_noise_scale_vertical(&_impl_._has_bits_);
          _impl_.noise_scale_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_gain = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_noise_gain(&_impl_._has_bits_);
          _impl_.noise_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_lacunarity = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_noise_lacunarity(&_impl_._has_bits_);
          _impl_.noise_lacunarity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 instance_count = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_instance_count(&_impl_._has_bits_);
          _impl_.instance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double extrusion = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_extrusion(&_impl_._has_bits_);
          _impl_.extrusion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double noise_offset = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_noise_offset(&_impl_._has_bits_);
          _impl_.noise_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double color_hue_offset = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_color_hue_offset(&_impl_._has_bits_);
          _impl_.color_hue_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_hue = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_shadow_hue(&_impl_._has_bits_);
          _impl_.shadow_hue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_hue_offset = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_shadow_hue_offset(&_impl_._has_bits_);
          _impl_.shadow_hue_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_saturation = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_shadow_saturation(&_impl_._has_bits_);
          _impl_.shadow_saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_brightness = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_shadow_brightness(&_impl_._has_bits_);
          _impl_.shadow_brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_intensity = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_shadow_intensity(&_impl_._has_bits_);
          _impl_.shadow_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double shadow_power = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_shadow_power(&_impl_._has_bits_);
          _impl_.shadow_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 noise_octaves_iterations = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_noise_octaves_iterations(&_impl_._has_bits_);
          _impl_.noise_octaves_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotionBackgroundStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.MotionBackgroundStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string background_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_background_name().data(), static_cast<int>(this->_internal_background_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.MotionBackgroundStylePropertiesArchive.background_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_background_name(), target);
  }

  // optional string variant = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_variant().data(), static_cast<int>(this->_internal_variant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.MotionBackgroundStylePropertiesArchive.variant");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_variant(), target);
  }

  // optional .TSD.FillArchive color_gradient = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::color_gradient(this),
        _Internal::color_gradient(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 random_number_seed = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_random_number_seed(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double color_blur_sigma = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_color_blur_sigma(), target);
  }

  // optional double noise_amplitude = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_noise_amplitude(), target);
  }

  // optional double noise_octaves = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_noise_octaves(), target);
  }

  // optional double noise_scale = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_noise_scale(), target);
  }

  // optional double noise_speed = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_noise_speed(), target);
  }

  // optional double color_palette_offset = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_color_palette_offset(), target);
  }

  // optional double zoom = 17;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_zoom(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool invert = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_invert(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string blend_mode = 19;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_blend_mode().data(), static_cast<int>(this->_internal_blend_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.MotionBackgroundStylePropertiesArchive.blend_mode");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_blend_mode(), target);
  }

  // optional string source_blend_factor = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_blend_factor().data(), static_cast<int>(this->_internal_source_blend_factor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.MotionBackgroundStylePropertiesArchive.source_blend_factor");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_source_blend_factor(), target);
  }

  // optional string dest_blend_factor = 21;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dest_blend_factor().data(), static_cast<int>(this->_internal_dest_blend_factor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.MotionBackgroundStylePropertiesArchive.dest_blend_factor");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_dest_blend_factor(), target);
  }

  // optional string motion = 22;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_motion().data(), static_cast<int>(this->_internal_motion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "KN.MotionBackgroundStylePropertiesArchive.motion");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_motion(), target);
  }

  // optional .TSP.Color background_color = 23;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::background_color(this),
        _Internal::background_color(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Color foreground_color = 24;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::foreground_color(this),
        _Internal::foreground_color(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Color line_color = 25;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::line_color(this),
        _Internal::line_color(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Color point_color = 26;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::point_color(this),
        _Internal::point_color(this).GetCachedSize(), target, stream);
  }

  // optional double alpha = 27;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_alpha(), target);
  }

  // optional double border = 28;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_border(), target);
  }

  // optional double blend = 29;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_blend(), target);
  }

  // optional double brightness = 30;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_brightness(), target);
  }

  // optional double border_lightness = 31;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_border_lightness(), target);
  }

  // optional double contrast = 32;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_contrast(), target);
  }

  // optional double damping = 33;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_damping(), target);
  }

  // optional double density = 34;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(34, this->_internal_density(), target);
  }

  // optional double diffuse_power = 35;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(35, this->_internal_diffuse_power(), target);
  }

  // optional double distortion = 36;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(36, this->_internal_distortion(), target);
  }

  // optional double entropy = 37;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(37, this->_internal_entropy(), target);
  }

  // optional double exposure = 38;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(38, this->_internal_exposure(), target);
  }

  // optional double filter = 39;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(39, this->_internal_filter(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional double fog_distance = 40;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(40, this->_internal_fog_distance(), target);
  }

  // optional double fog_power = 41;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(41, this->_internal_fog_power(), target);
  }

  // optional double gamma = 42;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(42, this->_internal_gamma(), target);
  }

  // optional double grain_amount = 43;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(43, this->_internal_grain_amount(), target);
  }

  // optional double grain_intensity = 44;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(44, this->_internal_grain_intensity(), target);
  }

  // optional double hue = 45;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(45, this->_internal_hue(), target);
  }

  // optional double lightness = 46;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(46, this->_internal_lightness(), target);
  }

  // optional double line_alpha = 47;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(47, this->_internal_line_alpha(), target);
  }

  // optional double line_center = 48;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(48, this->_internal_line_center(), target);
  }

  // optional double line_fade = 49;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(49, this->_internal_line_fade(), target);
  }

  // optional double line_fade_power = 50;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(50, this->_internal_line_fade_power(), target);
  }

  // optional double line_length = 51;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(51, this->_internal_line_length(), target);
  }

  // optional double line_width = 52;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(52, this->_internal_line_width(), target);
  }

  // optional double noise_size_scale = 53;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(53, this->_internal_noise_size_scale(), target);
  }

  // optional double noise_size_weight = 54;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(54, this->_internal_noise_size_weight(), target);
  }

  // optional double noise_variance = 55;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(55, this->_internal_noise_variance(), target);
  }

  // optional double offset = 56;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(56, this->_internal_offset(), target);
  }

  // optional double motion_background_opacity = 57;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(57, this->_internal_motion_background_opacity(), target);
  }

  // optional double point_depth_alpha = 58;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(58, this->_internal_point_depth_alpha(), target);
  }

  // optional double point_size = 59;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(59, this->_internal_point_size(), target);
  }

  // optional double radius = 60;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(60, this->_internal_radius(), target);
  }

  // optional double refraction = 61;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(61, this->_internal_refraction(), target);
  }

  // optional double resolution = 62;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(62, this->_internal_resolution(), target);
  }

  // optional double saturation = 63;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(63, this->_internal_saturation(), target);
  }

  // optional double scale = 64;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(64, this->_internal_scale(), target);
  }

  // optional double shadow_alpha = 65;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(65, this->_internal_shadow_alpha(), target);
  }

  // optional double shadow_angle = 66;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(66, this->_internal_shadow_angle(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional double shadow_offset = 67;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(67, this->_internal_shadow_offset(), target);
  }

  // optional double shadow_scale = 68;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(68, this->_internal_shadow_scale(), target);
  }

  // optional double shadow_value = 69;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(69, this->_internal_shadow_value(), target);
  }

  // optional double speed = 70;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(70, this->_internal_speed(), target);
  }

  // optional double texture_power = 71;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(71, this->_internal_texture_power(), target);
  }

  // optional double time = 72;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(72, this->_internal_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool draw_points = 73;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(73, this->_internal_draw_points(), target);
  }

  // optional bool draw_lines = 74;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(74, this->_internal_draw_lines(), target);
  }

  // optional bool draw_shadows = 75;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(75, this->_internal_draw_shadows(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional uint32 pixels_per_division = 76;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(76, this->_internal_pixels_per_division(), target);
  }

  // optional bool symmetry = 77;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(77, this->_internal_symmetry(), target);
  }

  // optional bool lock_focus = 78;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(78, this->_internal_lock_focus(), target);
  }

  // optional double amplitude = 79;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(79, this->_internal_amplitude(), target);
  }

  // optional double envelope = 80;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(80, this->_internal_envelope(), target);
  }

  // optional double y_offset = 81;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(81, this->_internal_y_offset(), target);
  }

  // optional double focus = 82;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(82, this->_internal_focus(), target);
  }

  // optional double blur = 83;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(83, this->_internal_blur(), target);
  }

  // optional double grain_speed = 84;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(84, this->_internal_grain_speed(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Color mesh_color = 85;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::mesh_color(this),
        _Internal::mesh_color(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional double angle = 86;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(86, this->_internal_angle(), target);
  }

  // optional double mesh_line_width = 87;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(87, this->_internal_mesh_line_width(), target);
  }

  // optional double delta_time = 88;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(88, this->_internal_delta_time(), target);
  }

  // optional double time_start = 89;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(89, this->_internal_time_start(), target);
  }

  // optional double color_contrast = 90;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(90, this->_internal_color_contrast(), target);
  }

  // optional double color_gamma = 91;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(91, this->_internal_color_gamma(), target);
  }

  // optional double color_saturation = 92;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(92, this->_internal_color_saturation(), target);
  }

  // optional double color_brightness = 93;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(93, this->_internal_color_brightness(), target);
  }

  // optional double color_hue = 94;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(94, this->_internal_color_hue(), target);
  }

  // optional double color_vibrance = 95;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(95, this->_internal_color_vibrance(), target);
  }

  // optional double noise_movement = 96;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(96, this->_internal_noise_movement(), target);
  }

  // optional double power = 97;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(97, this->_internal_power(), target);
  }

  // optional double threshold = 98;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(98, this->_internal_threshold(), target);
  }

  // optional double noise_scale_horizontal = 99;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(99, this->_internal_noise_scale_horizontal(), target);
  }

  // optional double noise_scale_vertical = 100;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(100, this->_internal_noise_scale_vertical(), target);
  }

  // optional double noise_gain = 101;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(101, this->_internal_noise_gain(), target);
  }

  // optional double noise_lacunarity = 102;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(102, this->_internal_noise_lacunarity(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 instance_count = 103;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(103, this->_internal_instance_count(), target);
  }

  // optional double extrusion = 104;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(104, this->_internal_extrusion(), target);
  }

  // optional double noise_offset = 105;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(105, this->_internal_noise_offset(), target);
  }

  // optional double color_hue_offset = 106;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(106, this->_internal_color_hue_offset(), target);
  }

  // optional double shadow_hue = 107;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(107, this->_internal_shadow_hue(), target);
  }

  // optional double shadow_hue_offset = 108;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(108, this->_internal_shadow_hue_offset(), target);
  }

  // optional double shadow_saturation = 109;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(109, this->_internal_shadow_saturation(), target);
  }

  // optional double shadow_brightness = 110;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(110, this->_internal_shadow_brightness(), target);
  }

  // optional double shadow_intensity = 111;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(111, this->_internal_shadow_intensity(), target);
  }

  // optional double shadow_power = 112;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(112, this->_internal_shadow_power(), target);
  }

  // optional int32 noise_octaves_iterations = 113;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(113, this->_internal_noise_octaves_iterations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.MotionBackgroundStylePropertiesArchive)
  return target;
}

size_t MotionBackgroundStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.MotionBackgroundStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string background_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_background_name());
    }

    // optional string variant = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_variant());
    }

    // optional string blend_mode = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_blend_mode());
    }

    // optional string source_blend_factor = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_blend_factor());
    }

    // optional string dest_blend_factor = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dest_blend_factor());
    }

    // optional string motion = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_motion());
    }

    // optional .TSD.FillArchive color_gradient = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_gradient_);
    }

    // optional .TSP.Color background_color = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.background_color_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Color foreground_color = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.foreground_color_);
    }

    // optional .TSP.Color line_color = 25;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.line_color_);
    }

    // optional .TSP.Color point_color = 26;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.point_color_);
    }

    // optional .TSP.Color mesh_color = 85;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mesh_color_);
    }

    // optional double color_blur_sigma = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double noise_amplitude = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double noise_octaves = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double noise_scale = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double noise_speed = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double color_palette_offset = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double zoom = 17;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double alpha = 27;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double border = 28;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double blend = 29;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double brightness = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double border_lightness = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double contrast = 32;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double damping = 33;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double density = 34;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double diffuse_power = 35;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double distortion = 36;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double entropy = 37;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double exposure = 38;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double filter = 39;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional double fog_distance = 40;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double fog_power = 41;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double gamma = 42;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double grain_amount = 43;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double grain_intensity = 44;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double hue = 45;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double lightness = 46;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double line_alpha = 47;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double line_center = 48;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double line_fade = 49;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double line_fade_power = 50;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional int32 random_number_seed = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_random_number_seed());
    }

    // optional bool invert = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool draw_points = 73;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool draw_lines = 74;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool draw_shadows = 75;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double line_length = 51;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double line_width = 52;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double noise_size_scale = 53;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double noise_size_weight = 54;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double noise_variance = 55;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double offset = 56;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double motion_background_opacity = 57;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double point_depth_alpha = 58;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double point_size = 59;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double radius = 60;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double refraction = 61;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double resolution = 62;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double saturation = 63;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double scale = 64;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double shadow_alpha = 65;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double shadow_angle = 66;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional double shadow_offset = 67;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double shadow_scale = 68;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double shadow_value = 69;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double speed = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double texture_power = 71;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double time = 72;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional uint32 pixels_per_division = 76;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_pixels_per_division());
    }

    // optional bool symmetry = 77;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool lock_focus = 78;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional double amplitude = 79;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double envelope = 80;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double y_offset = 81;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double focus = 82;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double blur = 83;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double grain_speed = 84;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double angle = 86;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double mesh_line_width = 87;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double delta_time = 88;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double time_start = 89;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double color_contrast = 90;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double color_gamma = 91;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double color_saturation = 92;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double color_brightness = 93;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double color_hue = 94;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double color_vibrance = 95;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double noise_movement = 96;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double power = 97;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double threshold = 98;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double noise_scale_horizontal = 99;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double noise_scale_vertical = 100;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double noise_gain = 101;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double noise_lacunarity = 102;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional double extrusion = 104;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double noise_offset = 105;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double color_hue_offset = 106;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double shadow_hue = 107;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double shadow_hue_offset = 108;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional int32 instance_count = 103;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_instance_count());
    }

    // optional int32 noise_octaves_iterations = 113;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_noise_octaves_iterations());
    }

    // optional double shadow_saturation = 109;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double shadow_brightness = 110;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double shadow_intensity = 111;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double shadow_power = 112;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionBackgroundStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MotionBackgroundStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionBackgroundStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void MotionBackgroundStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MotionBackgroundStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const MotionBackgroundStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.MotionBackgroundStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_background_name(from._internal_background_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_variant(from._internal_variant());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_blend_mode(from._internal_blend_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_source_blend_factor(from._internal_source_blend_factor());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_dest_blend_factor(from._internal_dest_blend_factor());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_motion(from._internal_motion());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_color_gradient()->::TSD::FillArchive::MergeFrom(
          from._internal_color_gradient());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_background_color()->::TSP::Color::MergeFrom(
          from._internal_background_color());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_foreground_color()->::TSP::Color::MergeFrom(
          from._internal_foreground_color());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_line_color()->::TSP::Color::MergeFrom(
          from._internal_line_color());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_point_color()->::TSP::Color::MergeFrom(
          from._internal_point_color());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_mesh_color()->::TSP::Color::MergeFrom(
          from._internal_mesh_color());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.color_blur_sigma_ = from._impl_.color_blur_sigma_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.noise_amplitude_ = from._impl_.noise_amplitude_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.noise_octaves_ = from._impl_.noise_octaves_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.noise_scale_ = from._impl_.noise_scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.noise_speed_ = from._impl_.noise_speed_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.color_palette_offset_ = from._impl_.color_palette_offset_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.zoom_ = from._impl_.zoom_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.alpha_ = from._impl_.alpha_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.border_ = from._impl_.border_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.blend_ = from._impl_.blend_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.brightness_ = from._impl_.brightness_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.border_lightness_ = from._impl_.border_lightness_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.contrast_ = from._impl_.contrast_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.damping_ = from._impl_.damping_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.density_ = from._impl_.density_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.diffuse_power_ = from._impl_.diffuse_power_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.distortion_ = from._impl_.distortion_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.entropy_ = from._impl_.entropy_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.exposure_ = from._impl_.exposure_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.filter_ = from._impl_.filter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fog_distance_ = from._impl_.fog_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fog_power_ = from._impl_.fog_power_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gamma_ = from._impl_.gamma_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.grain_amount_ = from._impl_.grain_amount_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.grain_intensity_ = from._impl_.grain_intensity_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.hue_ = from._impl_.hue_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.lightness_ = from._impl_.lightness_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.line_alpha_ = from._impl_.line_alpha_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.line_center_ = from._impl_.line_center_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.line_fade_ = from._impl_.line_fade_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.line_fade_power_ = from._impl_.line_fade_power_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.random_number_seed_ = from._impl_.random_number_seed_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.invert_ = from._impl_.invert_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.draw_points_ = from._impl_.draw_points_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.draw_lines_ = from._impl_.draw_lines_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.draw_shadows_ = from._impl_.draw_shadows_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.line_length_ = from._impl_.line_length_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.line_width_ = from._impl_.line_width_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.noise_size_scale_ = from._impl_.noise_size_scale_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.noise_size_weight_ = from._impl_.noise_size_weight_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.noise_variance_ = from._impl_.noise_variance_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.motion_background_opacity_ = from._impl_.motion_background_opacity_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.point_depth_alpha_ = from._impl_.point_depth_alpha_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.point_size_ = from._impl_.point_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.radius_ = from._impl_.radius_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.refraction_ = from._impl_.refraction_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.resolution_ = from._impl_.resolution_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.saturation_ = from._impl_.saturation_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.shadow_alpha_ = from._impl_.shadow_alpha_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.shadow_angle_ = from._impl_.shadow_angle_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.shadow_offset_ = from._impl_.shadow_offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shadow_scale_ = from._impl_.shadow_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.shadow_value_ = from._impl_.shadow_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.texture_power_ = from._impl_.texture_power_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pixels_per_division_ = from._impl_.pixels_per_division_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.symmetry_ = from._impl_.symmetry_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.lock_focus_ = from._impl_.lock_focus_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.amplitude_ = from._impl_.amplitude_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.envelope_ = from._impl_.envelope_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.y_offset_ = from._impl_.y_offset_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.focus_ = from._impl_.focus_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.blur_ = from._impl_.blur_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.grain_speed_ = from._impl_.grain_speed_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.angle_ = from._impl_.angle_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.mesh_line_width_ = from._impl_.mesh_line_width_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.delta_time_ = from._impl_.delta_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.time_start_ = from._impl_.time_start_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.color_contrast_ = from._impl_.color_contrast_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.color_gamma_ = from._impl_.color_gamma_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.color_saturation_ = from._impl_.color_saturation_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.color_brightness_ = from._impl_.color_brightness_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.color_hue_ = from._impl_.color_hue_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.color_vibrance_ = from._impl_.color_vibrance_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.noise_movement_ = from._impl_.noise_movement_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.power_ = from._impl_.power_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.threshold_ = from._impl_.threshold_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.noise_scale_horizontal_ = from._impl_.noise_scale_horizontal_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.noise_scale_vertical_ = from._impl_.noise_scale_vertical_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.noise_gain_ = from._impl_.noise_gain_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.noise_lacunarity_ = from._impl_.noise_lacunarity_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.extrusion_ = from._impl_.extrusion_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.noise_offset_ = from._impl_.noise_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.color_hue_offset_ = from._impl_.color_hue_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.shadow_hue_ = from._impl_.shadow_hue_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shadow_hue_offset_ = from._impl_.shadow_hue_offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.instance_count_ = from._impl_.instance_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.noise_octaves_iterations_ = from._impl_.noise_octaves_iterations_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.shadow_saturation_ = from._impl_.shadow_saturation_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.shadow_brightness_ = from._impl_.shadow_brightness_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.shadow_intensity_ = from._impl_.shadow_intensity_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.shadow_power_ = from._impl_.shadow_power_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionBackgroundStylePropertiesArchive::CopyFrom(const MotionBackgroundStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.MotionBackgroundStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionBackgroundStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_color_gradient()) {
    if (!_impl_.color_gradient_->IsInitialized()) return false;
  }
  if (_internal_has_background_color()) {
    if (!_impl_.background_color_->IsInitialized()) return false;
  }
  if (_internal_has_foreground_color()) {
    if (!_impl_.foreground_color_->IsInitialized()) return false;
  }
  if (_internal_has_line_color()) {
    if (!_impl_.line_color_->IsInitialized()) return false;
  }
  if (_internal_has_point_color()) {
    if (!_impl_.point_color_->IsInitialized()) return false;
  }
  if (_internal_has_mesh_color()) {
    if (!_impl_.mesh_color_->IsInitialized()) return false;
  }
  return true;
}

void MotionBackgroundStylePropertiesArchive::InternalSwap(MotionBackgroundStylePropertiesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  swap(_impl_._has_bits_[3], other->_impl_._has_bits_[3]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.background_name_, lhs_arena,
      &other->_impl_.background_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.variant_, lhs_arena,
      &other->_impl_.variant_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blend_mode_, lhs_arena,
      &other->_impl_.blend_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_blend_factor_, lhs_arena,
      &other->_impl_.source_blend_factor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dest_blend_factor_, lhs_arena,
      &other->_impl_.dest_blend_factor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.motion_, lhs_arena,
      &other->_impl_.motion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionBackgroundStylePropertiesArchive, _impl_.shadow_power_)
      + sizeof(MotionBackgroundStylePropertiesArchive::_impl_.shadow_power_)
      - PROTOBUF_FIELD_OFFSET(MotionBackgroundStylePropertiesArchive, _impl_.color_gradient_)>(
          reinterpret_cast<char*>(&_impl_.color_gradient_),
          reinterpret_cast<char*>(&other->_impl_.color_gradient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionBackgroundStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[58]);
}

// ===================================================================

class MotionBackgroundStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionBackgroundStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const MotionBackgroundStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::KN::MotionBackgroundStylePropertiesArchive& slide_properties(const MotionBackgroundStyleArchive* msg);
  static void set_has_slide_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::DataReference& poster_frame_data(const MotionBackgroundStyleArchive* msg);
  static void set_has_poster_frame_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
MotionBackgroundStyleArchive::_Internal::super(const MotionBackgroundStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::KN::MotionBackgroundStylePropertiesArchive&
MotionBackgroundStyleArchive::_Internal::slide_properties(const MotionBackgroundStyleArchive* msg) {
  return *msg->_impl_.slide_properties_;
}
const ::TSP::DataReference&
MotionBackgroundStyleArchive::_Internal::poster_frame_data(const MotionBackgroundStyleArchive* msg) {
  return *msg->_impl_.poster_frame_data_;
}
void MotionBackgroundStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MotionBackgroundStyleArchive::clear_poster_frame_data() {
  if (_impl_.poster_frame_data_ != nullptr) _impl_.poster_frame_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
MotionBackgroundStyleArchive::MotionBackgroundStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.MotionBackgroundStyleArchive)
}
MotionBackgroundStyleArchive::MotionBackgroundStyleArchive(const MotionBackgroundStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MotionBackgroundStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_properties_){nullptr}
    , decltype(_impl_.poster_frame_data_){nullptr}
    , decltype(_impl_.override_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_slide_properties()) {
    _this->_impl_.slide_properties_ = new ::KN::MotionBackgroundStylePropertiesArchive(*from._impl_.slide_properties_);
  }
  if (from._internal_has_poster_frame_data()) {
    _this->_impl_.poster_frame_data_ = new ::TSP::DataReference(*from._impl_.poster_frame_data_);
  }
  _this->_impl_.override_count_ = from._impl_.override_count_;
  // @@protoc_insertion_point(copy_constructor:KN.MotionBackgroundStyleArchive)
}

inline void MotionBackgroundStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.slide_properties_){nullptr}
    , decltype(_impl_.poster_frame_data_){nullptr}
    , decltype(_impl_.override_count_){0u}
  };
}

MotionBackgroundStyleArchive::~MotionBackgroundStyleArchive() {
  // @@protoc_insertion_point(destructor:KN.MotionBackgroundStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotionBackgroundStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.slide_properties_;
  if (this != internal_default_instance()) delete _impl_.poster_frame_data_;
}

void MotionBackgroundStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MotionBackgroundStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.MotionBackgroundStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.slide_properties_ != nullptr);
      _impl_.slide_properties_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.poster_frame_data_ != nullptr);
      _impl_.poster_frame_data_->Clear();
    }
  }
  _impl_.override_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionBackgroundStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 override_count = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_override_count(&has_bits);
          _impl_.override_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .KN.MotionBackgroundStylePropertiesArchive slide_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_slide_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.DataReference poster_frame_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_poster_frame_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotionBackgroundStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.MotionBackgroundStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_override_count(), target);
  }

  // optional .KN.MotionBackgroundStylePropertiesArchive slide_properties = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::slide_properties(this),
        _Internal::slide_properties(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.DataReference poster_frame_data = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::poster_frame_data(this),
        _Internal::poster_frame_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.MotionBackgroundStyleArchive)
  return target;
}

size_t MotionBackgroundStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.MotionBackgroundStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .KN.MotionBackgroundStylePropertiesArchive slide_properties = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slide_properties_);
    }

    // optional .TSP.DataReference poster_frame_data = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.poster_frame_data_);
    }

    // optional uint32 override_count = 10 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_override_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionBackgroundStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MotionBackgroundStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionBackgroundStyleArchive::GetClassData() const { return &_class_data_; }


void MotionBackgroundStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MotionBackgroundStyleArchive*>(&to_msg);
  auto& from = static_cast<const MotionBackgroundStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.MotionBackgroundStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_slide_properties()->::KN::MotionBackgroundStylePropertiesArchive::MergeFrom(
          from._internal_slide_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_poster_frame_data()->::TSP::DataReference::MergeFrom(
          from._internal_poster_frame_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.override_count_ = from._impl_.override_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionBackgroundStyleArchive::CopyFrom(const MotionBackgroundStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.MotionBackgroundStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionBackgroundStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_slide_properties()) {
    if (!_impl_.slide_properties_->IsInitialized()) return false;
  }
  if (_internal_has_poster_frame_data()) {
    if (!_impl_.poster_frame_data_->IsInitialized()) return false;
  }
  return true;
}

void MotionBackgroundStyleArchive::InternalSwap(MotionBackgroundStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionBackgroundStyleArchive, _impl_.override_count_)
      + sizeof(MotionBackgroundStyleArchive::_impl_.override_count_)
      - PROTOBUF_FIELD_OFFSET(MotionBackgroundStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionBackgroundStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[59]);
}

// ===================================================================

class MotionBackgroundFillArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionBackgroundFillArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& motion_background_style(const MotionBackgroundFillArchive* msg);
  static void set_has_motion_background_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
MotionBackgroundFillArchive::_Internal::motion_background_style(const MotionBackgroundFillArchive* msg) {
  return *msg->_impl_.motion_background_style_;
}
void MotionBackgroundFillArchive::clear_motion_background_style() {
  if (_impl_.motion_background_style_ != nullptr) _impl_.motion_background_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MotionBackgroundFillArchive::MotionBackgroundFillArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KN.MotionBackgroundFillArchive)
}
MotionBackgroundFillArchive::MotionBackgroundFillArchive(const MotionBackgroundFillArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MotionBackgroundFillArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motion_background_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_motion_background_style()) {
    _this->_impl_.motion_background_style_ = new ::TSP::Reference(*from._impl_.motion_background_style_);
  }
  // @@protoc_insertion_point(copy_constructor:KN.MotionBackgroundFillArchive)
}

inline void MotionBackgroundFillArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motion_background_style_){nullptr}
  };
}

MotionBackgroundFillArchive::~MotionBackgroundFillArchive() {
  // @@protoc_insertion_point(destructor:KN.MotionBackgroundFillArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotionBackgroundFillArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.motion_background_style_;
}

void MotionBackgroundFillArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MotionBackgroundFillArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:KN.MotionBackgroundFillArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.motion_background_style_ != nullptr);
    _impl_.motion_background_style_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionBackgroundFillArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference motion_background_style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_background_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotionBackgroundFillArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KN.MotionBackgroundFillArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference motion_background_style = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::motion_background_style(this),
        _Internal::motion_background_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KN.MotionBackgroundFillArchive)
  return target;
}

size_t MotionBackgroundFillArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KN.MotionBackgroundFillArchive)
  size_t total_size = 0;

  // required .TSP.Reference motion_background_style = 1;
  if (_internal_has_motion_background_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.motion_background_style_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionBackgroundFillArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MotionBackgroundFillArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionBackgroundFillArchive::GetClassData() const { return &_class_data_; }


void MotionBackgroundFillArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MotionBackgroundFillArchive*>(&to_msg);
  auto& from = static_cast<const MotionBackgroundFillArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KN.MotionBackgroundFillArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_motion_background_style()) {
    _this->_internal_mutable_motion_background_style()->::TSP::Reference::MergeFrom(
        from._internal_motion_background_style());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionBackgroundFillArchive::CopyFrom(const MotionBackgroundFillArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KN.MotionBackgroundFillArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionBackgroundFillArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_motion_background_style()) {
    if (!_impl_.motion_background_style_->IsInitialized()) return false;
  }
  return true;
}

void MotionBackgroundFillArchive::InternalSwap(MotionBackgroundFillArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.motion_background_style_, other->_impl_.motion_background_style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionBackgroundFillArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KNArchives_2eproto_getter, &descriptor_table_KNArchives_2eproto_once,
      file_level_metadata_KNArchives_2eproto[60]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int LiveVideoInfo::kLiveVideoInfoFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::MovieArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::KN::LiveVideoInfo >, 11, false>
  LiveVideoInfo::live_video_info(kLiveVideoInfoFieldNumber, ::KN::LiveVideoInfo::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::FillArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::KN::MotionBackgroundFillArchive >, 11, false>
  motionBackgroundFill(kMotionBackgroundFillFieldNumber, ::KN::MotionBackgroundFillArchive::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace KN
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KN::AnimationAttributesArchive*
Arena::CreateMaybeMessage< ::KN::AnimationAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::AnimationAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::TransitionAttributesArchive*
Arena::CreateMaybeMessage< ::KN::TransitionAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::TransitionAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::TransitionArchive*
Arena::CreateMaybeMessage< ::KN::TransitionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::TransitionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildChunkArchive*
Arena::CreateMaybeMessage< ::KN::BuildChunkArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildChunkArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildChunkIdentifierArchive*
Arena::CreateMaybeMessage< ::KN::BuildChunkIdentifierArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildChunkIdentifierArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildAttributeValueArchive*
Arena::CreateMaybeMessage< ::KN::BuildAttributeValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildAttributeValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildAttributeTupleArchive*
Arena::CreateMaybeMessage< ::KN::BuildAttributeTupleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildAttributeTupleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildAttributesArchive*
Arena::CreateMaybeMessage< ::KN::BuildAttributesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildAttributesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::BuildArchive*
Arena::CreateMaybeMessage< ::KN::BuildArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::BuildArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PlaceholderArchive*
Arena::CreateMaybeMessage< ::KN::PlaceholderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PlaceholderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::NoteArchive*
Arena::CreateMaybeMessage< ::KN::NoteArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::NoteArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ClassicStylesheetRecordArchive*
Arena::CreateMaybeMessage< ::KN::ClassicStylesheetRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ClassicStylesheetRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ClassicThemeRecordArchive*
Arena::CreateMaybeMessage< ::KN::ClassicThemeRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ClassicThemeRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive_SageTagMapEntry*
Arena::CreateMaybeMessage< ::KN::SlideArchive_SageTagMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive_SageTagMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry*
Arena::CreateMaybeMessage< ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive_InstructionalTextMap_InstructionalTextMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive_InstructionalTextMap*
Arena::CreateMaybeMessage< ::KN::SlideArchive_InstructionalTextMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive_InstructionalTextMap >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideArchive*
Arena::CreateMaybeMessage< ::KN::SlideArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry*
Arena::CreateMaybeMessage< ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideNodeArchive_SlideSpecificHyperlinkMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideNodeArchive*
Arena::CreateMaybeMessage< ::KN::SlideNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::DesktopUILayoutArchive*
Arena::CreateMaybeMessage< ::KN::DesktopUILayoutArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::DesktopUILayoutArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::UIStateArchive*
Arena::CreateMaybeMessage< ::KN::UIStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::UIStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::IOSRestorableViewStateRootArchive*
Arena::CreateMaybeMessage< ::KN::IOSRestorableViewStateRootArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::IOSRestorableViewStateRootArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::IOSSavedPlaybackStateArchive*
Arena::CreateMaybeMessage< ::KN::IOSSavedPlaybackStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::IOSSavedPlaybackStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::CanvasSelectionArchive*
Arena::CreateMaybeMessage< ::KN::CanvasSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::CanvasSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ActionGhostSelectionArchive*
Arena::CreateMaybeMessage< ::KN::ActionGhostSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ActionGhostSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ThemeCustomTimingCurveArchive*
Arena::CreateMaybeMessage< ::KN::ThemeCustomTimingCurveArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ThemeCustomTimingCurveArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ThemeArchive*
Arena::CreateMaybeMessage< ::KN::ThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideTreeArchive*
Arena::CreateMaybeMessage< ::KN::SlideTreeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideTreeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::ShowArchive*
Arena::CreateMaybeMessage< ::KN::ShowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::ShowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::DocumentArchive*
Arena::CreateMaybeMessage< ::KN::DocumentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::DocumentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideStylePropertiesArchive*
Arena::CreateMaybeMessage< ::KN::SlideStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideStyleArchive*
Arena::CreateMaybeMessage< ::KN::SlideStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PasteboardNativeStorageArchive_LiveVideoSourcePair*
Arena::CreateMaybeMessage< ::KN::PasteboardNativeStorageArchive_LiveVideoSourcePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PasteboardNativeStorageArchive_LiveVideoSourcePair >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PasteboardNativeStorageArchive*
Arena::CreateMaybeMessage< ::KN::PasteboardNativeStorageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PasteboardNativeStorageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PrototypeForUndoTemplateChangeArchive*
Arena::CreateMaybeMessage< ::KN::PrototypeForUndoTemplateChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PrototypeForUndoTemplateChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingArchive*
Arena::CreateMaybeMessage< ::KN::RecordingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingSyncState*
Arena::CreateMaybeMessage< ::KN::RecordingSyncState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingSyncState >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingCorrectionHistory*
Arena::CreateMaybeMessage< ::KN::RecordingCorrectionHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingCorrectionHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingEventTrackArchive*
Arena::CreateMaybeMessage< ::KN::RecordingEventTrackArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingEventTrackArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingNavigationEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingNavigationEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingNavigationEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingLaserEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingLaserEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingLaserEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingPauseEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingPauseEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingPauseEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingMovieEventArchive*
Arena::CreateMaybeMessage< ::KN::RecordingMovieEventArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingMovieEventArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::RecordingMovieTrackArchive*
Arena::CreateMaybeMessage< ::KN::RecordingMovieTrackArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::RecordingMovieTrackArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::MovieSegmentArchive*
Arena::CreateMaybeMessage< ::KN::MovieSegmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::MovieSegmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::Soundtrack*
Arena::CreateMaybeMessage< ::KN::Soundtrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::Soundtrack >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideNumberAttachmentArchive*
Arena::CreateMaybeMessage< ::KN::SlideNumberAttachmentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideNumberAttachmentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionArchive_OutlineSelection*
Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionArchive_OutlineSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionArchive_OutlineSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::SlideCollectionSelectionArchive*
Arena::CreateMaybeMessage< ::KN::SlideCollectionSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::SlideCollectionSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::PresenterNotesSelectionArchive*
Arena::CreateMaybeMessage< ::KN::PresenterNotesSelectionArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::PresenterNotesSelectionArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::MixedIdOperationArgs*
Arena::CreateMaybeMessage< ::KN::MixedIdOperationArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::MixedIdOperationArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::LiveVideoInfo*
Arena::CreateMaybeMessage< ::KN::LiveVideoInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::LiveVideoInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::LiveVideoSource*
Arena::CreateMaybeMessage< ::KN::LiveVideoSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::LiveVideoSource >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::LiveVideoSourceCollaborationCommandUsageState*
Arena::CreateMaybeMessage< ::KN::LiveVideoSourceCollaborationCommandUsageState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::LiveVideoSourceCollaborationCommandUsageState >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::LiveVideoCaptureDeviceDescription*
Arena::CreateMaybeMessage< ::KN::LiveVideoCaptureDeviceDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::LiveVideoCaptureDeviceDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::LiveVideoSourceCollection*
Arena::CreateMaybeMessage< ::KN::LiveVideoSourceCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::LiveVideoSourceCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::LiveVideoSourceUsageEntry*
Arena::CreateMaybeMessage< ::KN::LiveVideoSourceUsageEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::LiveVideoSourceUsageEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::MotionBackgroundStylePropertiesArchive*
Arena::CreateMaybeMessage< ::KN::MotionBackgroundStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::MotionBackgroundStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::MotionBackgroundStyleArchive*
Arena::CreateMaybeMessage< ::KN::MotionBackgroundStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::MotionBackgroundStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::KN::MotionBackgroundFillArchive*
Arena::CreateMaybeMessage< ::KN::MotionBackgroundFillArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KN::MotionBackgroundFillArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
