// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHPreUFFArchives.proto

#include "TSCHPreUFFArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSCH {
namespace PreUFF {
PROTOBUF_CONSTEXPR ChartInfoArchive::ChartInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_axis_styles_)*/{}
  , /*decltype(_impl_.category_axis_styles_)*/{}
  , /*decltype(_impl_.value_axis_nonstyles_)*/{}
  , /*decltype(_impl_.category_axis_nonstyles_)*/{}
  , /*decltype(_impl_.series_theme_styles_)*/{}
  , /*decltype(_impl_.paragraph_styles_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.chart_model_)*/nullptr
  , /*decltype(_impl_.style_)*/nullptr
  , /*decltype(_impl_.legend_model_)*/nullptr
  , /*decltype(_impl_.inner_chart_frame_)*/nullptr
  , /*decltype(_impl_.series_private_styles_)*/nullptr
  , /*decltype(_impl_.series_non_styles_)*/nullptr
  , /*decltype(_impl_.non_style_)*/nullptr
  , /*decltype(_impl_.mediator_)*/nullptr
  , /*decltype(_impl_.cde_preview_origin_)*/nullptr
  , /*decltype(_impl_.chart_style_preset_)*/nullptr
  , /*decltype(_impl_.chart_type_)*/0
  , /*decltype(_impl_.last_row_sected_in_the_cde_)*/0
  , /*decltype(_impl_.last_column_sected_in_the_cde_)*/0
  , /*decltype(_impl_.chart_style_preset_index_)*/0
  , /*decltype(_impl_.needs_calc_engine_deferred_import_action_)*/false} {}
struct ChartInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartInfoArchiveDefaultTypeInternal() {}
  union {
    ChartInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartInfoArchiveDefaultTypeInternal _ChartInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR LegendModelArchive::LegendModelArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.frame_)*/nullptr
  , /*decltype(_impl_.style_)*/nullptr
  , /*decltype(_impl_.non_style_)*/nullptr} {}
struct LegendModelArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegendModelArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegendModelArchiveDefaultTypeInternal() {}
  union {
    LegendModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegendModelArchiveDefaultTypeInternal _LegendModelArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartModelArchive::ChartModelArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.series_types_)*/{}
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.grid_)*/nullptr
  , /*decltype(_impl_.inline_grid_)*/nullptr
  , /*decltype(_impl_.scatter_format_)*/0u
  , /*decltype(_impl_.multidataset_index_)*/0u} {}
struct ChartModelArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartModelArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartModelArchiveDefaultTypeInternal() {}
  union {
    ChartModelArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartModelArchiveDefaultTypeInternal _ChartModelArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartGridArchive_ValueRow::ChartGridArchive_ValueRow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChartGridArchive_ValueRowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGridArchive_ValueRowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGridArchive_ValueRowDefaultTypeInternal() {}
  union {
    ChartGridArchive_ValueRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGridArchive_ValueRowDefaultTypeInternal _ChartGridArchive_ValueRow_default_instance_;
PROTOBUF_CONSTEXPR ChartGridArchive::ChartGridArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_name_)*/{}
  , /*decltype(_impl_.column_name_)*/{}
  , /*decltype(_impl_.value_row_)*/{}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.dirty_)*/false} {}
struct ChartGridArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGridArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGridArchiveDefaultTypeInternal() {}
  union {
    ChartGridArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGridArchiveDefaultTypeInternal _ChartGridArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartsNumberFormatArchive::ChartsNumberFormatArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interstitial_strings_)*/{}
  , /*decltype(_impl_.format_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.suffix_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prefix_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interstitial_string_insertion_indexes_)*/nullptr
  , /*decltype(_impl_.value_type_)*/0
  , /*decltype(_impl_.decimal_places_)*/0u
  , /*decltype(_impl_.negative_style_)*/0
  , /*decltype(_impl_.fraction_accuracy_)*/0
  , /*decltype(_impl_.base_)*/0u
  , /*decltype(_impl_.base_places_)*/0u
  , /*decltype(_impl_.show_thousands_separator_)*/false
  , /*decltype(_impl_.base_use_minus_sign_)*/false
  , /*decltype(_impl_.use_accounting_style_)*/false
  , /*decltype(_impl_.is_custom_)*/false
  , /*decltype(_impl_.index_from_right_of_last_digit_placeholder_)*/0u
  , /*decltype(_impl_.scale_factor_)*/0
  , /*decltype(_impl_.is_text_format_)*/false
  , /*decltype(_impl_.minimum_integer_width_)*/0u
  , /*decltype(_impl_.decimal_width_)*/0u
  , /*decltype(_impl_.number_of_non_space_integer_placeholder_digits_)*/0u
  , /*decltype(_impl_.number_of_non_space_decimal_placeholder_digits_)*/0u} {}
struct ChartsNumberFormatArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartsNumberFormatArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartsNumberFormatArchiveDefaultTypeInternal() {}
  union {
    ChartsNumberFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartsNumberFormatArchiveDefaultTypeInternal _ChartsNumberFormatArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartStyleArchive::ChartStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedmainfontfamily_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultbackgroundfill_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultbackgroundstroke_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultgridbackgroundfill_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultborderstroke_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaulttitlecolor_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultbordershadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfobardeprecated3dshadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfocolumndeprecated3dshadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfolinedeprecated3dshadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfoareadeprecated3dshadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfopiedeprecated3dshadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfocolumn3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfobar3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfoline3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfoarea3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfopie3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultintersetgap_)*/0
  , /*decltype(_impl_.tschchartinfodefaultinterbargap_)*/0
  , /*decltype(_impl_.tschchartinfodefaultgridbackgroundopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaultborderopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaulttitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedmainfontnamedsize_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedtrendlineequationopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaultshowborder_)*/false
  , /*decltype(_impl_.tschchartinfodefaultcombinelayers_)*/false
  , /*decltype(_impl_.tschchartinfodefaultdeprecated3dbeveledges_)*/false
  , /*decltype(_impl_.tschchartinfopiedeprecated3dbeveledges_)*/false
  , /*decltype(_impl_.tschchartinfobardeprecated3dbeveledges_)*/false
  , /*decltype(_impl_.tschchartinfocolumndeprecated3dbeveledges_)*/false
  , /*decltype(_impl_.tschchartinfodefaultdeprecated3dbarshape_)*/0
  , /*decltype(_impl_.tschchartinfodefault3dchartopacity_)*/0} {}
struct ChartStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartStyleArchiveDefaultTypeInternal() {}
  union {
    ChartStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartStyleArchiveDefaultTypeInternal _ChartStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartNonStyleArchive::ChartNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartinfodefaulttitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3drotation_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfocolumn3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfobar3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfoline3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfoarea3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfopie3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dviewport_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultdeprecated3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfocolumndeprecated3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfobardeprecated3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfolinedeprecated3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfoareadeprecated3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfopiedeprecated3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultpiestartangle_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedagainmainfontnamedsize_)*/0
  , /*decltype(_impl_.tschchartinfodefaultshowlegend_)*/false
  , /*decltype(_impl_.tschchartinfodefaultshowtitle_)*/false
  , /*decltype(_impl_.tschchartinfodefaultskiphiddendata_)*/false
  , /*decltype(_impl_.tschchartinfodefault3dbeveledges_)*/false
  , /*decltype(_impl_.tschchartinfodefault3dintersetdepthgap_)*/0
  , /*decltype(_impl_.tschchartinfodefault3dbarshape_)*/0} {}
struct ChartNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartNonStyleArchiveDefaultTypeInternal _ChartNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR LegendStyleArchive::LegendStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultfill_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultstroke_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultshadow_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultopacity_)*/0
  , /*decltype(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_)*/0} {}
struct LegendStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegendStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegendStyleArchiveDefaultTypeInternal() {}
  union {
    LegendStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegendStyleArchiveDefaultTypeInternal _LegendStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR LegendNonStyleArchive::LegendNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct LegendNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegendNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegendNonStyleArchiveDefaultTypeInternal() {}
  union {
    LegendNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegendNonStyleArchiveDefaultTypeInternal _LegendNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisStyleArchive::ChartAxisStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvaluemajorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalueminorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvaluemajorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalueminorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategorymajorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategoryminorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategorymajorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategoryminorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalue3dgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategory3dgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalueshowmajorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowminorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowmajortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowminortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisvaluetickmarklocation_)*/0
  , /*decltype(_impl_.tschchartaxisvaluelabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxisvaluemajorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisvalueminorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisvalueshowminimumlabel_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowaxis_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowmajorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowminorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxiscategorytickmarklocation_)*/0
  , /*decltype(_impl_.tschchartaxiscategorylabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryhorizontalspacing_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryverticalspacing_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryshowmajortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowminortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowlastlabel_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowaxis_)*/false
  , /*decltype(_impl_.tschchartaxiscategorymajorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryminorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultlabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxisdefaulttitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisvaluetitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisvaluelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxiscategorytitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxiscategorylabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisvalue3dgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxiscategory3dgridlineopacity_)*/0} {}
struct ChartAxisStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisStyleArchiveDefaultTypeInternal _ChartAxisStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartaxisvaluetitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartaxiscategorytitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultusermin_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultusermax_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvaluenumberofminorgridlines_)*/0
  , /*decltype(_impl_.tschchartaxisvaluescale_)*/0
  , /*decltype(_impl_.tschchartaxisvaluenumberofdecades_)*/0
  , /*decltype(_impl_.tschchartaxisvaluenumberofmajorgridlines_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowtitle_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowtitle_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryplottoedges_)*/false
  , /*decltype(_impl_.tschchartaxisdefaultnumberformattype_)*/0
  , /*decltype(_impl_.tschchartaxisdefault3dlabelposition_)*/0} {}
struct ChartAxisNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisNonStyleArchiveDefaultTypeInternal _ChartAxisNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSeriesStyleArchive::ChartSeriesStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarstroke_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinesymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinesymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareastroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareasymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareasymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriespiefill_)*/nullptr
  , /*decltype(_impl_.tschchartseriespiestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscatterstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscattersymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscattersymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriescolumnfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriespieshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscattershadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedcolumnshadow_)*/nullptr
  , /*decltype(_impl_.tschchartserieslineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedcolumnfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedcolumnstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareastroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareasymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareasymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarlineend_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubblesymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubblestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubblesymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubbleshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultdeprecated3dfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbardeprecated3dfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriescolumndeprecated3dfill_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinedeprecated3dfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareadeprecated3dfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriespiedeprecated3dfill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dcolumnshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dpieshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dbarfill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dcolumnfill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dlinefill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dpiefill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartserieslinesymbolsize_)*/0
  , /*decltype(_impl_.tschchartserieslinevaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesareasymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesscattersymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesscattervaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesbarlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartserieslinelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesarealabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriespielabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultopacity_)*/0
  , /*decltype(_impl_.tschchartseriesscattersymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartserieslinesymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesareasymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriespiedeprecatedserieslabelson_)*/false
  , /*decltype(_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartserieslinesymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesareasymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesmixedareasymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesmixedcolumnvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinevaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesmixedareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesstackedbarvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesstackedareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationopacity_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_)*/0
  , /*decltype(_impl_.tschchartseriesbubblevaluelabelposition_)*/0} {}
struct ChartSeriesStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSeriesStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSeriesStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSeriesStyleArchiveDefaultTypeInternal _ChartSeriesStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinelabelstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriespienumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesstackedpercentnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultnumberformattype_)*/0
  , /*decltype(_impl_.tschchartserieslinesymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesbarshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartserieslineshowsymbol_)*/false
  , /*decltype(_impl_.tschchartserieslineshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesareashowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartserieslinelinetype_)*/0
  , /*decltype(_impl_.tschchartseriesareasymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesareashowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriespieshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesscattershowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriespiewedgeexplosion_)*/0
  , /*decltype(_impl_.tschchartseriespienumberformattype_)*/0
  , /*decltype(_impl_.tschchartseriespielabelexplosion_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinesymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesmixedareasymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlineshowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesmixedareashowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesmixedshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriespieshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartseriesmixedlinelinetype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultyaxisordinal_)*/0
  , /*decltype(_impl_.tschchartseriesscattersymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesscatterlinetype_)*/0
  , /*decltype(_impl_.tschchartseriesscattershowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesscattershowline_)*/false
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshowlabel_)*/false
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshowequation_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultseriestype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinetype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineorder_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineperiod_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarsetting_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarsettingscatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbartype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbartypescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarfixedvalue_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarpercentvalue_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstddevvalue_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshowr2value_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowtrendline_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowerrorbar_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowerrorbarscatterx_)*/false
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsetx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsety_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_)*/0
  , /*decltype(_impl_.tschchartseriesbubblesizedimension_)*/0
  , /*decltype(_impl_.tschchartseriesbubblelinetype_)*/0
  , /*decltype(_impl_.tschchartseriesbubbleshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesbubbleshownegativedata_)*/false
  , /*decltype(_impl_.tschchartseriesbubbleadjustmentscale_)*/0} {}
struct ChartSeriesNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSeriesNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSeriesNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSeriesNonStyleArchiveDefaultTypeInternal _ChartSeriesNonStyleArchive_default_instance_;
}  // namespace PreUFF
}  // namespace TSCH
static ::_pb::Metadata file_level_metadata_TSCHPreUFFArchives_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TSCHPreUFFArchives_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSCHPreUFFArchives_2eproto = nullptr;

const uint32_t TableStruct_TSCHPreUFFArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.chart_model_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.chart_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.legend_model_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.inner_chart_frame_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.value_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.category_axis_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.value_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.category_axis_nonstyles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.series_theme_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.series_private_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.series_non_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.non_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.mediator_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.cde_preview_origin_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.chart_style_preset_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.paragraph_styles_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.last_row_sected_in_the_cde_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.last_column_sected_in_the_cde_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.chart_style_preset_index_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartInfoArchive, _impl_.needs_calc_engine_deferred_import_action_),
  0,
  1,
  2,
  11,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, _impl_.frame_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, _impl_.style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendModelArchive, _impl_.non_style_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _impl_.grid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _impl_.series_types_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _impl_.scatter_format_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _impl_.inline_grid_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartModelArchive, _impl_.multidataset_index_),
  0,
  1,
  ~0u,
  3,
  2,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive_ValueRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive_ValueRow, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, _impl_.row_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, _impl_.column_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, _impl_.value_row_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartGridArchive, _impl_.dirty_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.value_type_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.format_string_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.decimal_places_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.negative_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.show_thousands_separator_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.fraction_accuracy_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.suffix_string_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.base_places_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.base_use_minus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.use_accounting_style_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.is_custom_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.scale_factor_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.interstitial_strings_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.interstitial_string_insertion_indexes_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.index_from_right_of_last_digit_placeholder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.is_text_format_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.minimum_integer_width_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.decimal_width_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.number_of_non_space_integer_placeholder_digits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.number_of_non_space_decimal_placeholder_digits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.format_name_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartsNumberFormatArchive, _impl_.prefix_string_),
  6,
  0,
  7,
  1,
  8,
  12,
  9,
  2,
  10,
  11,
  13,
  14,
  15,
  17,
  ~0u,
  5,
  16,
  18,
  19,
  20,
  21,
  22,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultbackgroundstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultgridbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultintersetgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultinterbargap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultshowborder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultborderstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaulttitlecolor_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultgridbackgroundopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultcombinelayers_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultbordershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultborderopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaulttitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecatedmainfontfamily_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecatedmainfontnamedsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecatedtrendlineequationopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecatedtrendlinersquaredopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfobardeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfocolumndeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfolinedeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfoareadeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfopiedeprecated3dshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefault3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfocolumn3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfobar3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfoline3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfoarea3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfopie3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecated3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfopiedeprecated3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfobardeprecated3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfocolumndeprecated3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefaultdeprecated3dbarshape_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartStyleArchive, _impl_.tschchartinfodefault3dchartopacity_),
  1,
  2,
  3,
  4,
  21,
  22,
  31,
  5,
  6,
  23,
  32,
  7,
  24,
  25,
  0,
  26,
  27,
  28,
  8,
  9,
  29,
  30,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  33,
  34,
  35,
  36,
  37,
  38,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefaulttitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefaultshowlegend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefaultpiestartangle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefaultshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefaultdeprecatedagainmainfontnamedsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefault3drotation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefault3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfocolumn3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfobar3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfoline3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfoarea3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfopie3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefault3dviewport_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefaultdeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfocolumndeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfobardeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfolinedeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfoareadeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfopiedeprecated3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefaultskiphiddendata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefault3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefault3dbarshape_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartNonStyleArchive, _impl_.tschchartinfodefault3dintersetdepthgap_),
  1,
  0,
  18,
  16,
  19,
  17,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  20,
  21,
  23,
  22,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _impl_.tschlegendmodeldefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _impl_.tschlegendmodeldefaultstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _impl_.tschlegendmodeldefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _impl_.tschlegendmodeldefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendStyleArchive, _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::LegendNonStyleArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvaluemajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalueminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvaluetickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvaluelabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowminimumlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvaluemajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalueminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvaluemajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalueminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategorymajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategorytickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategorylabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryhorizontalspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryverticalspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowlastlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategorymajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategorymajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisdefaultlabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisdefaulttitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvaluetitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvaluelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategorytitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategorylabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalue3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategory3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxisvalue3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisStyleArchive, _impl_.tschchartaxiscategory3dgridlineopacity_),
  0,
  11,
  12,
  1,
  2,
  15,
  13,
  14,
  16,
  19,
  3,
  4,
  17,
  18,
  20,
  21,
  22,
  5,
  6,
  23,
  27,
  28,
  24,
  25,
  26,
  29,
  7,
  8,
  31,
  32,
  30,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  9,
  10,
  40,
  41,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultusermin_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultusermax_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluenumberofminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluescale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluenumberofdecades_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisvalueshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisvalueshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluenumberofmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluetitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategorytitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefault3dlabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryplottoedges_),
  2,
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  11,
  12,
  9,
  0,
  13,
  14,
  15,
  1,
  17,
  18,
  16,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbarvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriespiefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriespiestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesscatterstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesscattervaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriespiedeprecatedserieslabelson_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriescolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriespieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesscattershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbubbleshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dpieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbarlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslinelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesarealabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriespielabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriespieoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesstackedbarvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesstackedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarstrokescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarlineendscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultdeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesbardeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriescolumndeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartserieslinedeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriesareadeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseriespiedeprecated3dfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dlinefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesStyleArchive, _impl_.tschchartseries3dpiefill_),
  0,
  100,
  101,
  102,
  103,
  1,
  2,
  62,
  3,
  4,
  5,
  63,
  64,
  6,
  7,
  65,
  8,
  9,
  66,
  10,
  11,
  12,
  13,
  14,
  67,
  68,
  15,
  69,
  84,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  42,
  43,
  44,
  104,
  45,
  85,
  52,
  53,
  54,
  55,
  56,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  86,
  87,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  26,
  27,
  28,
  29,
  30,
  88,
  89,
  31,
  32,
  33,
  34,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  46,
  47,
  48,
  49,
  50,
  51,
  57,
  58,
  59,
  60,
  61,
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbarshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartserieslinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartserieslineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartserieslineshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareashowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartserieslinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriespieshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriespiewedgeexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriespienumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriespienumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriespielabelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedlineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedlinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedlinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultyaxisordinal_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriespieshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattersymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscatterlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesstackedpercentnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultseriestype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineorder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineperiod_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinelabelstring_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineshowequation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineshowr2value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarsetting_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarsettingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbartype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbartypescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarfixedvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarpercentvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarstddevvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustompositivedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowtrendline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowerrorbar_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowerrorbarscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubblesizedimension_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubblelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleshownegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::PreUFF::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleadjustmentscale_),
  1,
  2,
  9,
  11,
  10,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  21,
  20,
  3,
  22,
  23,
  26,
  27,
  24,
  25,
  28,
  30,
  31,
  29,
  34,
  32,
  33,
  35,
  4,
  38,
  39,
  40,
  41,
  36,
  0,
  37,
  52,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  5,
  6,
  7,
  8,
  56,
  57,
  58,
  59,
  53,
  54,
  55,
  60,
  62,
  61,
  63,
  64,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, -1, sizeof(::TSCH::PreUFF::ChartInfoArchive)},
  { 50, 60, -1, sizeof(::TSCH::PreUFF::LegendModelArchive)},
  { 64, 76, -1, sizeof(::TSCH::PreUFF::ChartModelArchive)},
  { 82, -1, -1, sizeof(::TSCH::PreUFF::ChartGridArchive_ValueRow)},
  { 89, 100, -1, sizeof(::TSCH::PreUFF::ChartGridArchive)},
  { 105, 135, -1, sizeof(::TSCH::PreUFF::ChartsNumberFormatArchive)},
  { 159, 204, -1, sizeof(::TSCH::PreUFF::ChartStyleArchive)},
  { 243, 273, -1, sizeof(::TSCH::PreUFF::ChartNonStyleArchive)},
  { 297, 309, -1, sizeof(::TSCH::PreUFF::LegendStyleArchive)},
  { 315, 322, -1, sizeof(::TSCH::PreUFF::LegendNonStyleArchive)},
  { 323, 371, -1, sizeof(::TSCH::PreUFF::ChartAxisStyleArchive)},
  { 413, 438, -1, sizeof(::TSCH::PreUFF::ChartAxisNonStyleArchive)},
  { 457, 568, -1, sizeof(::TSCH::PreUFF::ChartSeriesStyleArchive)},
  { 673, 744, -1, sizeof(::TSCH::PreUFF::ChartSeriesNonStyleArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSCH::PreUFF::_ChartInfoArchive_default_instance_._instance,
  &::TSCH::PreUFF::_LegendModelArchive_default_instance_._instance,
  &::TSCH::PreUFF::_ChartModelArchive_default_instance_._instance,
  &::TSCH::PreUFF::_ChartGridArchive_ValueRow_default_instance_._instance,
  &::TSCH::PreUFF::_ChartGridArchive_default_instance_._instance,
  &::TSCH::PreUFF::_ChartsNumberFormatArchive_default_instance_._instance,
  &::TSCH::PreUFF::_ChartStyleArchive_default_instance_._instance,
  &::TSCH::PreUFF::_ChartNonStyleArchive_default_instance_._instance,
  &::TSCH::PreUFF::_LegendStyleArchive_default_instance_._instance,
  &::TSCH::PreUFF::_LegendNonStyleArchive_default_instance_._instance,
  &::TSCH::PreUFF::_ChartAxisStyleArchive_default_instance_._instance,
  &::TSCH::PreUFF::_ChartAxisNonStyleArchive_default_instance_._instance,
  &::TSCH::PreUFF::_ChartSeriesStyleArchive_default_instance_._instance,
  &::TSCH::PreUFF::_ChartSeriesNonStyleArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSCHPreUFFArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TSCHPreUFFArchives.proto\022\013TSCH.PreUFF\032"
  "\021TSPMessages.proto\032\021TSKArchives.proto\032\021T"
  "SDArchives.proto\032\021TSSArchives.proto\032\031TSC"
  "HArchives.Common.proto\032\024TSCH3DArchives.p"
  "roto\"\314\007\n\020ChartInfoArchive\022#\n\005super\030\001 \002(\013"
  "2\024.TSD.DrawableArchive\0223\n\013chart_model\030\002 "
  "\002(\0132\036.TSCH.PreUFF.ChartModelArchive\022\035\n\005s"
  "tyle\030\003 \001(\0132\016.TSP.Reference\022#\n\nchart_type"
  "\030\004 \002(\0162\017.TSCH.ChartType\0225\n\014legend_model\030"
  "\005 \001(\0132\037.TSCH.PreUFF.LegendModelArchive\022,"
  "\n\021inner_chart_frame\030\006 \002(\0132\021.TSCH.RectArc"
  "hive\022)\n\021value_axis_styles\030\007 \003(\0132\016.TSP.Re"
  "ference\022,\n\024category_axis_styles\030\010 \003(\0132\016."
  "TSP.Reference\022,\n\024value_axis_nonstyles\030\t "
  "\003(\0132\016.TSP.Reference\022/\n\027category_axis_non"
  "styles\030\n \003(\0132\016.TSP.Reference\022+\n\023series_t"
  "heme_styles\030\013 \003(\0132\016.TSP.Reference\0228\n\025ser"
  "ies_private_styles\030\014 \001(\0132\031.TSP.SparseRef"
  "erenceArray\0224\n\021series_non_styles\030\r \001(\0132\031"
  ".TSP.SparseReferenceArray\022!\n\tnon_style\030\016"
  " \001(\0132\016.TSP.Reference\022 \n\010mediator\030\017 \001(\0132\016"
  ".TSP.Reference\022&\n\022cde_preview_origin\030\020 \001"
  "(\0132\n.TSP.Point\022*\n\022chart_style_preset\030\021 \001"
  "(\0132\016.TSP.Reference\022(\n\020paragraph_styles\030\022"
  " \003(\0132\016.TSP.Reference\022\"\n\032last_row_sected_"
  "in_the_cde\030\023 \001(\005\022%\n\035last_column_sected_i"
  "n_the_cde\030\024 \001(\005\022 \n\030chart_style_preset_in"
  "dex\030\025 \001(\005\0220\n(needs_calc_engine_deferred_"
  "import_action\030\026 \001(\010\"\226\001\n\022LegendModelArchi"
  "ve\022\034\n\004info\030\001 \001(\0132\016.TSP.Reference\022 \n\005fram"
  "e\030\002 \002(\0132\021.TSCH.RectArchive\022\035\n\005style\030\003 \002("
  "\0132\016.TSP.Reference\022!\n\tnon_style\030\004 \002(\0132\016.T"
  "SP.Reference\"\315\001\n\021ChartModelArchive\022\034\n\004in"
  "fo\030\001 \001(\0132\016.TSP.Reference\022\034\n\004grid\030\002 \002(\0132\016"
  ".TSP.Reference\022\024\n\014series_types\030\003 \003(\r\022\026\n\016"
  "scatter_format\030\004 \001(\r\0222\n\013inline_grid\030\005 \001("
  "\0132\035.TSCH.PreUFF.ChartGridArchive\022\032\n\022mult"
  "idataset_index\030\006 \001(\r\"\261\001\n\020ChartGridArchiv"
  "e\022\021\n\tdirection\030\001 \002(\005\022\020\n\010row_name\030\002 \003(\t\022\023"
  "\n\013column_name\030\003 \003(\t\0229\n\tvalue_row\030\004 \003(\0132&"
  ".TSCH.PreUFF.ChartGridArchive.ValueRow\022\r"
  "\n\005dirty\030\006 \002(\010\032\031\n\010ValueRow\022\r\n\005value\030\001 \003(\001"
  "\"\254\006\n\031ChartsNumberFormatArchive\022)\n\nvalue_"
  "type\030\001 \002(\0162\025.TSCH.NumberValueType\022\025\n\rfor"
  "mat_string\030\002 \001(\t\022\026\n\016decimal_places\030\003 \002(\r"
  "\022\025\n\rcurrency_code\030\004 \001(\t\0221\n\016negative_styl"
  "e\030\005 \002(\0162\031.TSCH.NegativeNumberStyle\022 \n\030sh"
  "ow_thousands_separator\030\006 \002(\010\0221\n\021fraction"
  "_accuracy\030\007 \002(\0162\026.TSCH.FractionAccuracy\022"
  "\025\n\rsuffix_string\030\010 \001(\t\022\014\n\004base\030\t \002(\r\022\023\n\013"
  "base_places\030\n \002(\r\022\033\n\023base_use_minus_sign"
  "\030\013 \002(\010\022\034\n\024use_accounting_style\030\014 \002(\010\022\021\n\t"
  "is_custom\030\r \002(\010\022\024\n\014scale_factor\030\016 \002(\001\022\034\n"
  "\024interstitial_strings\030\017 \003(\t\022<\n%interstit"
  "ial_string_insertion_indexes\030\020 \002(\0132\r.TSP"
  ".IndexSet\0222\n*index_from_right_of_last_di"
  "git_placeholder\030\021 \002(\r\022\026\n\016is_text_format\030"
  "\022 \002(\010\022\035\n\025minimum_integer_width\030\023 \002(\r\022\025\n\r"
  "decimal_width\030\024 \002(\r\0226\n.number_of_non_spa"
  "ce_integer_placeholder_digits\030\025 \002(\r\0226\n.n"
  "umber_of_non_space_decimal_placeholder_d"
  "igits\030\026 \002(\r\022\023\n\013format_name\030\027 \001(\t\022\025\n\rpref"
  "ix_string\030\030 \001(\t\"\361\022\n\021ChartStyleArchive\022 \n"
  "\005super\030\001 \002(\0132\021.TSS.StyleArchive\022<\n\"tschc"
  "hartinfodefaultbackgroundfill\030\n \001(\0132\020.TS"
  "D.FillArchive\022@\n$tschchartinfodefaultbac"
  "kgroundstroke\030\013 \001(\0132\022.TSD.StrokeArchive\022"
  "@\n&tschchartinfodefaultgridbackgroundfil"
  "l\030\014 \001(\0132\020.TSD.FillArchive\022\'\n\037tschchartin"
  "fodefaultintersetgap\030\r \001(\002\022\'\n\037tschcharti"
  "nfodefaultinterbargap\030\016 \001(\002\022&\n\036tschchart"
  "infodefaultshowborder\030\017 \001(\010\022<\n tschchart"
  "infodefaultborderstroke\030\020 \001(\0132\022.TSD.Stro"
  "keArchive\0222\n\036tschchartinfodefaulttitleco"
  "lor\030\022 \001(\0132\n.TSP.Color\0221\n)tschchartinfode"
  "faultgridbackgroundopacity\030\023 \001(\002\022)\n!tsch"
  "chartinfodefaultcombinelayers\030\024 \001(\010\022<\n t"
  "schchartinfodefaultbordershadow\030\025 \001(\0132\022."
  "TSD.ShadowArchive\022)\n!tschchartinfodefaul"
  "tborderopacity\030\026 \001(\002\0224\n,tschchartinfodef"
  "aulttitleparagraphstyleindex\030\027 \001(\005\0224\n,ts"
  "chchartinfodefaultdeprecatedmainfontfami"
  "ly\030\030 \001(\t\0227\n/tschchartinfodefaultdeprecat"
  "edmainfontnamedsize\030\031 \001(\005\022J\nBtschchartin"
  "fodefaultdeprecatedtrendlineequationpara"
  "graphstyleindex\030\036 \001(\005\022J\nBtschchartinfode"
  "faultdeprecatedtrendlinersquaredparagrap"
  "hstyleindex\030\037 \001(\005\022Q\n5tschchartinfodefaul"
  "tdeprecatedtrendlineequationshadow\030  \001(\013"
  "2\022.TSD.ShadowArchive\022Q\n5tschchartinfodef"
  "aultdeprecatedtrendlinersquaredshadow\030! "
  "\001(\0132\022.TSD.ShadowArchive\022>\n6tschchartinfo"
  "defaultdeprecatedtrendlineequationopacit"
  "y\030\" \001(\002\022>\n6tschchartinfodefaultdeprecate"
  "dtrendlinersquaredopacity\030# \001(\002\022\?\n\"tschc"
  "hartinfobardeprecated3dshadow\030\264\002 \001(\0132\022.T"
  "SD.ShadowArchive\022B\n%tschchartinfocolumnd"
  "eprecated3dshadow\030\265\002 \001(\0132\022.TSD.ShadowArc"
  "hive\022@\n#tschchartinfolinedeprecated3dsha"
  "dow\030\266\002 \001(\0132\022.TSD.ShadowArchive\022@\n#tschch"
  "artinfoareadeprecated3dshadow\030\267\002 \001(\0132\022.T"
  "SD.ShadowArchive\022\?\n\"tschchartinfopiedepr"
  "ecated3dshadow\030\270\002 \001(\0132\022.TSD.ShadowArchiv"
  "e\022S\n%tschchartinfodefault3dlightingpacka"
  "ge\030\271\002 \001(\0132#.TSCH.Chart3DLightingPackageA"
  "rchive\022R\n$tschchartinfocolumn3dlightingp"
  "ackage\030\272\002 \001(\0132#.TSCH.Chart3DLightingPack"
  "ageArchive\022O\n!tschchartinfobar3dlighting"
  "package\030\273\002 \001(\0132#.TSCH.Chart3DLightingPac"
  "kageArchive\022P\n\"tschchartinfoline3dlighti"
  "ngpackage\030\274\002 \001(\0132#.TSCH.Chart3DLightingP"
  "ackageArchive\022P\n\"tschchartinfoarea3dligh"
  "tingpackage\030\275\002 \001(\0132#.TSCH.Chart3DLightin"
  "gPackageArchive\022O\n!tschchartinfopie3dlig"
  "htingpackage\030\276\002 \001(\0132#.TSCH.Chart3DLighti"
  "ngPackageArchive\0223\n*tschchartinfodefault"
  "deprecated3dbeveledges\030\306\002 \001(\010\022/\n&tschcha"
  "rtinfopiedeprecated3dbeveledges\030\307\002 \001(\010\022/"
  "\n&tschchartinfobardeprecated3dbeveledges"
  "\030\310\002 \001(\010\0222\n)tschchartinfocolumndeprecated"
  "3dbeveledges\030\311\002 \001(\010\0221\n(tschchartinfodefa"
  "ultdeprecated3dbarshape\030\312\002 \001(\005\022+\n\"tschch"
  "artinfodefault3dchartopacity\030\317\002 \001(\002\"\367\013\n\024"
  "ChartNonStyleArchive\022 \n\005super\030\001 \002(\0132\021.TS"
  "S.StyleArchive\022!\n\031tschchartinfodefaultti"
  "tle\030\n \001(\t\022&\n\036tschchartinfodefaultshowleg"
  "end\030\013 \001(\010\022)\n!tschchartinfodefaultpiestar"
  "tangle\030\014 \001(\002\022%\n\035tschchartinfodefaultshow"
  "title\030\r \001(\010\022<\n4tschchartinfodefaultdepre"
  "catedagainmainfontnamedsize\030\031 \001(\005\022C\n\036tsc"
  "hchartinfodefault3drotation\030\254\002 \001(\0132\032.TSC"
  "H.Chart3DVectorArchive\022@\n\033tschchartinfod"
  "efault3dscale\030\255\002 \001(\0132\032.TSCH.Chart3DVecto"
  "rArchive\022\?\n\032tschchartinfocolumn3dscale\030\256"
  "\002 \001(\0132\032.TSCH.Chart3DVectorArchive\022<\n\027tsc"
  "hchartinfobar3dscale\030\257\002 \001(\0132\032.TSCH.Chart"
  "3DVectorArchive\022=\n\030tschchartinfoline3dsc"
  "ale\030\260\002 \001(\0132\032.TSCH.Chart3DVectorArchive\022="
  "\n\030tschchartinfoarea3dscale\030\261\002 \001(\0132\032.TSCH"
  ".Chart3DVectorArchive\022<\n\027tschchartinfopi"
  "e3dscale\030\262\002 \001(\0132\032.TSCH.Chart3DVectorArch"
  "ive\022C\n\036tschchartinfodefault3dviewport\030\271\002"
  " \001(\0132\032.TSCH.Chart3DVectorArchive\022]\n/tsch"
  "chartinfodefaultdeprecated3dlightingpack"
  "age\030\300\002 \001(\0132#.TSCH.Chart3DLightingPackage"
  "Archive\022\\\n.tschchartinfocolumndeprecated"
  "3dlightingpackage\030\301\002 \001(\0132#.TSCH.Chart3DL"
  "ightingPackageArchive\022Y\n+tschchartinfoba"
  "rdeprecated3dlightingpackage\030\302\002 \001(\0132#.TS"
  "CH.Chart3DLightingPackageArchive\022Z\n,tsch"
  "chartinfolinedeprecated3dlightingpackage"
  "\030\303\002 \001(\0132#.TSCH.Chart3DLightingPackageArc"
  "hive\022Z\n,tschchartinfoareadeprecated3dlig"
  "htingpackage\030\304\002 \001(\0132#.TSCH.Chart3DLighti"
  "ngPackageArchive\022Y\n+tschchartinfopiedepr"
  "ecated3dlightingpackage\030\305\002 \001(\0132#.TSCH.Ch"
  "art3DLightingPackageArchive\022+\n\"tschchart"
  "infodefaultskiphiddendata\030\306\002 \001(\010\022)\n tsch"
  "chartinfodefault3dbeveledges\030\307\002 \001(\010\022\'\n\036t"
  "schchartinfodefault3dbarshape\030\320\002 \001(\005\022/\n&"
  "tschchartinfodefault3dintersetdepthgap\030\313"
  "\002 \001(\002\"\277\002\n\022LegendStyleArchive\022 \n\005super\030\001 "
  "\002(\0132\021.TSS.StyleArchive\0224\n\032tschlegendmode"
  "ldefaultfill\030\n \001(\0132\020.TSD.FillArchive\0228\n\034"
  "tschlegendmodeldefaultstroke\030\013 \001(\0132\022.TSD"
  ".StrokeArchive\0228\n\034tschlegendmodeldefault"
  "shadow\030\016 \001(\0132\022.TSD.ShadowArchive\022%\n\035tsch"
  "legendmodeldefaultopacity\030\017 \001(\002\0226\n.tschl"
  "egendmodeldefaultlabelparagraphstyleinde"
  "x\030\020 \001(\005\"9\n\025LegendNonStyleArchive\022 \n\005supe"
  "r\030\001 \002(\0132\021.TSS.StyleArchive\"\255\021\n\025ChartAxis"
  "StyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleA"
  "rchive\022,\n$tschchartaxisvalueshowmajorgri"
  "dlines\030\n \001(\010\022,\n$tschchartaxisvalueshowmi"
  "norgridlines\030\013 \001(\010\022A\n%tschchartaxisvalue"
  "majorgridlinestroke\030\014 \001(\0132\022.TSD.StrokeAr"
  "chive\022A\n%tschchartaxisvalueminorgridline"
  "stroke\030\r \001(\0132\022.TSD.StrokeArchive\022*\n\"tsch"
  "chartaxisvaluetickmarklocation\030\016 \001(\005\022,\n$"
  "tschchartaxisvalueshowmajortickmarks\030\017 \001"
  "(\010\022,\n$tschchartaxisvalueshowminortickmar"
  "ks\030\020 \001(\010\022+\n#tschchartaxisvaluelabelsorie"
  "ntation\030\021 \001(\002\022*\n\"tschchartaxisvalueshowm"
  "inimumlabel\030\022 \001(\010\022A\n%tschchartaxisvaluem"
  "ajorgridlineshadow\030\025 \001(\0132\022.TSD.ShadowArc"
  "hive\022A\n%tschchartaxisvalueminorgridlines"
  "hadow\030\026 \001(\0132\022.TSD.ShadowArchive\022.\n&tschc"
  "hartaxisvaluemajorgridlineopacity\030\027 \001(\002\022"
  ".\n&tschchartaxisvalueminorgridlineopacit"
  "y\030\030 \001(\002\022\"\n\032tschchartaxisvalueshowaxis\030\031 "
  "\001(\010\022/\n\'tschchartaxiscategoryshowmajorgri"
  "dlines\0302 \001(\010\022/\n\'tschchartaxiscategorysho"
  "wminorgridlines\0303 \001(\010\022D\n(tschchartaxisca"
  "tegorymajorgridlinestroke\0304 \001(\0132\022.TSD.St"
  "rokeArchive\022D\n(tschchartaxiscategorymino"
  "rgridlinestroke\0305 \001(\0132\022.TSD.StrokeArchiv"
  "e\022-\n%tschchartaxiscategorytickmarklocati"
  "on\0306 \001(\005\022/\n\'tschchartaxiscategoryshowmaj"
  "ortickmarks\0307 \001(\010\022/\n\'tschchartaxiscatego"
  "ryshowminortickmarks\0308 \001(\010\022.\n&tschcharta"
  "xiscategorylabelsorientation\0309 \001(\002\022.\n&ts"
  "chchartaxiscategoryhorizontalspacing\030: \001"
  "(\005\022,\n$tschchartaxiscategoryverticalspaci"
  "ng\030; \001(\005\022*\n\"tschchartaxiscategoryshowlas"
  "tlabel\030< \001(\010\022D\n(tschchartaxiscategorymaj"
  "orgridlineshadow\030\? \001(\0132\022.TSD.ShadowArchi"
  "ve\022D\n(tschchartaxiscategoryminorgridline"
  "shadow\030@ \001(\0132\022.TSD.ShadowArchive\0221\n)tsch"
  "chartaxiscategorymajorgridlineopacity\030A "
  "\001(\002\0221\n)tschchartaxiscategoryminorgridlin"
  "eopacity\030B \001(\002\022%\n\035tschchartaxiscategorys"
  "howaxis\030C \001(\010\022-\n%tschchartaxisdefaultlab"
  "elsorientation\030f \001(\002\0224\n,tschchartaxisdef"
  "aulttitleparagraphstyleindex\030n \001(\005\0224\n,ts"
  "chchartaxisdefaultlabelparagraphstyleind"
  "ex\030o \001(\005\0222\n*tschchartaxisvaluetitleparag"
  "raphstyleindex\030p \001(\005\0222\n*tschchartaxisval"
  "uelabelparagraphstyleindex\030q \001(\005\0225\n-tsch"
  "chartaxiscategorytitleparagraphstyleinde"
  "x\030r \001(\005\0225\n-tschchartaxiscategorylabelpar"
  "agraphstyleindex\030s \001(\005\022\?\n\"tschchartaxisv"
  "alue3dgridlinestroke\030\313\002 \001(\0132\022.TSD.Stroke"
  "Archive\022B\n%tschchartaxiscategory3dgridli"
  "nestroke\030\314\002 \001(\0132\022.TSD.StrokeArchive\022,\n#t"
  "schchartaxisvalue3dgridlineopacity\030\315\002 \001("
  "\002\022/\n&tschchartaxiscategory3dgridlineopac"
  "ity\030\316\002 \001(\002\"\214\007\n\030ChartAxisNonStyleArchive\022"
  " \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022F\n\033tsc"
  "hchartaxisdefaultusermin\030\013 \001(\0132!.TSCH.Ch"
  "artsNSNumberDoubleArchive\022F\n\033tschchartax"
  "isdefaultusermax\030\014 \001(\0132!.TSCH.ChartsNSNu"
  "mberDoubleArchive\022P\n tschchartaxisdefaul"
  "tnumberformat\030\r \001(\0132&.TSCH.PreUFF.Charts"
  "NumberFormatArchive\022&\n\036tschchartaxisdefa"
  "ultshowlabels\030\016 \001(\010\0220\n(tschchartaxisvalu"
  "enumberofminorgridlines\0302 \001(\005\022\037\n\027tschcha"
  "rtaxisvaluescale\0303 \001(\005\022)\n!tschchartaxisv"
  "aluenumberofdecades\0304 \001(\005\022$\n\034tschchartax"
  "isvalueshowlabels\0305 \001(\010\022#\n\033tschchartaxis"
  "valueshowtitle\0306 \001(\010\0220\n(tschchartaxisval"
  "uenumberofmajorgridlines\0307 \001(\005\022\037\n\027tschch"
  "artaxisvaluetitle\0308 \001(\t\022\'\n\037tschchartaxis"
  "categoryshowlabels\030d \001(\010\022-\n%tschchartaxi"
  "scategoryshowserieslabels\030e \001(\010\022&\n\036tschc"
  "hartaxiscategoryshowtitle\030f \001(\010\022\"\n\032tschc"
  "hartaxiscategorytitle\030g \001(\t\022,\n$tschchart"
  "axisdefaultnumberformattype\030x \001(\005\022,\n#tsc"
  "hchartaxisdefault3dlabelposition\030\320\002 \001(\005\022"
  "(\n tschchartaxiscategoryplottoedges\030t \001("
  "\010\"\342/\n\027ChartSeriesStyleArchive\022 \n\005super\030\001"
  " \002(\0132\021.TSS.StyleArchive\022C\n:tschchartseri"
  "esdefaulttrendlineequationparagraphstyle"
  "index\030\311\001 \001(\005\022C\n:tschchartseriesdefaulttr"
  "endlinersquaredparagraphstyleindex\030\312\001 \001("
  "\005\0227\n.tschchartseriesdefaulttrendlineequa"
  "tionopacity\030\315\001 \001(\002\0227\n.tschchartseriesdef"
  "aulttrendlinersquaredopacity\030\316\001 \001(\002\0220\n\026t"
  "schchartseriesbarfill\030\n \001(\0132\020.TSD.FillAr"
  "chive\0224\n\030tschchartseriesbarstroke\030\013 \001(\0132"
  "\022.TSD.StrokeArchive\022,\n$tschchartseriesba"
  "rvaluelabelposition\030\r \001(\005\0225\n\031tschchartse"
  "rieslinestroke\030\020 \001(\0132\022.TSD.StrokeArchive"
  "\0227\n\035tschchartserieslinesymbolfill\030\021 \001(\0132"
  "\020.TSD.FillArchive\022;\n\037tschchartseriesline"
  "symbolstroke\030\022 \001(\0132\022.TSD.StrokeArchive\022%"
  "\n\035tschchartserieslinesymbolsize\030\024 \001(\002\022-\n"
  "%tschchartserieslinevaluelabelposition\030\026"
  " \001(\005\0221\n\027tschchartseriesareafill\030\031 \001(\0132\020."
  "TSD.FillArchive\0225\n\031tschchartseriesareast"
  "roke\030\032 \001(\0132\022.TSD.StrokeArchive\022-\n%tschch"
  "artseriesareavaluelabelposition\030\034 \001(\005\0227\n"
  "\035tschchartseriesareasymbolfill\030\035 \001(\0132\020.T"
  "SD.FillArchive\022;\n\037tschchartseriesareasym"
  "bolstroke\030\036 \001(\0132\022.TSD.StrokeArchive\022%\n\035t"
  "schchartseriesareasymbolsize\030  \001(\002\0220\n\026ts"
  "chchartseriespiefill\030# \001(\0132\020.TSD.FillArc"
  "hive\0224\n\030tschchartseriespiestroke\030$ \001(\0132\022"
  ".TSD.StrokeArchive\0228\n\034tschchartseriessca"
  "tterstroke\030( \001(\0132\022.TSD.StrokeArchive\022:\n "
  "tschchartseriesscattersymbolfill\030) \001(\0132\020"
  ".TSD.FillArchive\022>\n\"tschchartseriesscatt"
  "ersymbolstroke\030* \001(\0132\022.TSD.StrokeArchive"
  "\022(\n tschchartseriesscattersymbolsize\030, \001"
  "(\002\0220\n(tschchartseriesscattervaluelabelpo"
  "sition\030. \001(\005\0224\n\032tschchartseriesdefaultfi"
  "ll\0302 \001(\0132\020.TSD.FillArchive\0220\n(tschcharts"
  "eriesdefaultvaluelabelposition\0304 \001(\005\0222\n*"
  "tschchartseriespiedeprecatedserieslabels"
  "on\030< \001(\010\0223\n\031tschchartseriescolumnfill\030> "
  "\001(\0132\020.TSD.FillArchive\0224\n\030tschchartseries"
  "pieshadow\030d \001(\0132\022.TSD.ShadowArchive\0224\n\030t"
  "schchartseriesbarshadow\030e \001(\0132\022.TSD.Shad"
  "owArchive\0225\n\031tschchartseriesareashadow\030f"
  " \001(\0132\022.TSD.ShadowArchive\0228\n\034tschchartser"
  "iesscattershadow\030g \001(\0132\022.TSD.ShadowArchi"
  "ve\022:\n\036tschchartseriesmixedlineshadow\030h \001"
  "(\0132\022.TSD.ShadowArchive\022:\n\036tschchartserie"
  "smixedareashadow\030i \001(\0132\022.TSD.ShadowArchi"
  "ve\022<\n tschchartseriesmixedcolumnshadow\030j"
  " \001(\0132\022.TSD.ShadowArchive\0225\n\031tschchartser"
  "ieslineshadow\030k \001(\0132\022.TSD.ShadowArchive\022"
  "8\n\034tschchartseriesdefaultshadow\030l \001(\0132\022."
  "TSD.ShadowArchive\022:\n\037tschchartseriesbubb"
  "lesymbolfill\030\317\001 \001(\0132\020.TSD.FillArchive\0228\n"
  "\033tschchartseriesbubblestroke\030\323\001 \001(\0132\022.TS"
  "D.StrokeArchive\022>\n!tschchartseriesbubble"
  "symbolstroke\030\324\001 \001(\0132\022.TSD.StrokeArchive\022"
  "0\n\'tschchartseriesbubblevaluelabelpositi"
  "on\030\325\001 \001(\005\0228\n\033tschchartseriesbubbleshadow"
  "\030\326\001 \001(\0132\022.TSD.ShadowArchive\0227\n.tschchart"
  "seriesbubblesymbolfilluseseriesstroke\030\327\001"
  " \001(\010\0227\n\032tschchartseries3dbarshadow\030\262\002 \001("
  "\0132\022.TSD.ShadowArchive\022:\n\035tschchartseries"
  "3dcolumnshadow\030\263\002 \001(\0132\022.TSD.ShadowArchiv"
  "e\0228\n\033tschchartseries3dlineshadow\030\264\002 \001(\0132"
  "\022.TSD.ShadowArchive\0228\n\033tschchartseries3d"
  "areashadow\030\265\002 \001(\0132\022.TSD.ShadowArchive\0227\n"
  "\032tschchartseries3dpieshadow\030\266\002 \001(\0132\022.TSD"
  ".ShadowArchive\0226\n.tschchartseriesdefault"
  "labelparagraphstyleindex\030n \001(\005\0222\n*tschch"
  "artseriesbarlabelparagraphstyleindex\030o \001"
  "(\005\0223\n+tschchartserieslinelabelparagraphs"
  "tyleindex\030p \001(\005\0223\n+tschchartseriesareala"
  "belparagraphstyleindex\030q \001(\005\0222\n*tschchar"
  "tseriespielabelparagraphstyleindex\030r \001(\005"
  "\0224\n,tschchartseriesmixedlabelparagraphst"
  "yleindex\030s \001(\005\022%\n\035tschchartseriesdefault"
  "opacity\030t \001(\002\0224\n,tschchartserieslinesymb"
  "olfilluseseriesstroke\030u \001(\010\0224\n,tschchart"
  "seriesareasymbolfilluseseriesstroke\030v \001("
  "\010\0227\n/tschchartseriesscattersymbolfilluse"
  "seriesstroke\030w \001(\010\0229\n1tschchartseriesmix"
  "edlinesymbolfilluseseriesstroke\030x \001(\010\0229\n"
  "1tschchartseriesmixedareasymbolfillusese"
  "riesstroke\030y \001(\010\0222\n*tschchartserieslines"
  "ymbolfilluseseriesfill\030z \001(\010\0222\n*tschchar"
  "tseriesareasymbolfilluseseriesfill\030{ \001(\010"
  "\0227\n/tschchartseriesmixedlinesymbolfillus"
  "eseriesfill\030| \001(\010\0227\n/tschchartseriesmixe"
  "dareasymbolfilluseseriesfill\030} \001(\010\0229\n\036ts"
  "chchartseriesmixedcolumnfill\030\202\001 \001(\0132\020.TS"
  "D.FillArchive\0227\n\034tschchartseriesmixedare"
  "afill\030\203\001 \001(\0132\020.TSD.FillArchive\022=\n tschch"
  "artseriesmixedcolumnstroke\030\204\001 \001(\0132\022.TSD."
  "StrokeArchive\022;\n\036tschchartseriesmixedlin"
  "estroke\030\205\001 \001(\0132\022.TSD.StrokeArchive\022;\n\036ts"
  "chchartseriesmixedareastroke\030\206\001 \001(\0132\022.TS"
  "D.StrokeArchive\022+\n\"tschchartseriesmixedl"
  "inesymbolsize\030\207\001 \001(\002\022+\n\"tschchartseriesm"
  "ixedareasymbolsize\030\210\001 \001(\002\022=\n\"tschchartse"
  "riesmixedlinesymbolfill\030\211\001 \001(\0132\020.TSD.Fil"
  "lArchive\022=\n\"tschchartseriesmixedareasymb"
  "olfill\030\212\001 \001(\0132\020.TSD.FillArchive\022A\n$tschc"
  "hartseriesmixedlinesymbolstroke\030\213\001 \001(\0132\022"
  ".TSD.StrokeArchive\022A\n$tschchartseriesmix"
  "edareasymbolstroke\030\214\001 \001(\0132\022.TSD.StrokeAr"
  "chive\0225\n,tschchartseriesmixedcolumnvalue"
  "labelposition\030\215\001 \001(\005\0223\n*tschchartseriesm"
  "ixedlinevaluelabelposition\030\216\001 \001(\005\0223\n*tsc"
  "hchartseriesmixedareavaluelabelposition\030"
  "\217\001 \001(\005\022>\n5tschchartseriesdefaultoutsidel"
  "abelparagraphstyleindex\030\226\001 \001(\005\022:\n1tschch"
  "artseriesbaroutsidelabelparagraphstylein"
  "dex\030\227\001 \001(\005\022;\n2tschchartseriesareaoutside"
  "labelparagraphstyleindex\030\231\001 \001(\005\022:\n1tschc"
  "hartseriespieoutsidelabelparagraphstylei"
  "ndex\030\232\001 \001(\005\022<\n3tschchartseriesmixedoutsi"
  "delabelparagraphstyleindex\030\233\001 \001(\005\0224\n+tsc"
  "hchartseriesstackedbarvaluelabelposition"
  "\030\234\001 \001(\005\0225\n,tschchartseriesstackedareaval"
  "uelabelposition\030\235\001 \001(\005\022B\n%tschchartserie"
  "sdefaulttrendlinestroke\030\247\001 \001(\0132\022.TSD.Str"
  "okeArchive\022B\n%tschchartseriesdefaulttren"
  "dlineshadow\030\250\001 \001(\0132\022.TSD.ShadowArchive\022A"
  "\n$tschchartseriesdefaulterrorbarshadow\030\264"
  "\001 \001(\0132\022.TSD.ShadowArchive\022A\n$tschchartse"
  "riesdefaulterrorbarstroke\030\265\001 \001(\0132\022.TSD.S"
  "trokeArchive\022I\n,tschchartseriesdefaulter"
  "rorbarstrokescatterx\030\266\001 \001(\0132\022.TSD.Stroke"
  "Archive\022C\n%tschchartseriesdefaulterrorba"
  "rlineend\030\267\001 \001(\0132\023.TSD.LineEndArchive\022K\n-"
  "tschchartseriesdefaulterrorbarlineendsca"
  "tterx\030\270\001 \001(\0132\023.TSD.LineEndArchive\022S\n&tsc"
  "hchartseriesdefaultdeprecated3dfill\030\254\002 \001"
  "(\0132\".TSCH.DEPRECATEDChart3DFillArchive\022O"
  "\n\"tschchartseriesbardeprecated3dfill\030\255\002 "
  "\001(\0132\".TSCH.DEPRECATEDChart3DFillArchive\022"
  "R\n%tschchartseriescolumndeprecated3dfill"
  "\030\256\002 \001(\0132\".TSCH.DEPRECATEDChart3DFillArch"
  "ive\022P\n#tschchartserieslinedeprecated3dfi"
  "ll\030\257\002 \001(\0132\".TSCH.DEPRECATEDChart3DFillAr"
  "chive\022P\n#tschchartseriesareadeprecated3d"
  "fill\030\260\002 \001(\0132\".TSCH.DEPRECATEDChart3DFill"
  "Archive\022O\n\"tschchartseriespiedeprecated3"
  "dfill\030\261\002 \001(\0132\".TSCH.DEPRECATEDChart3DFil"
  "lArchive\0223\n\030tschchartseries3dbarfill\030\300\002 "
  "\001(\0132\020.TSD.FillArchive\0226\n\033tschchartseries"
  "3dcolumnfill\030\301\002 \001(\0132\020.TSD.FillArchive\0224\n"
  "\031tschchartseries3dlinefill\030\302\002 \001(\0132\020.TSD."
  "FillArchive\0224\n\031tschchartseries3dareafill"
  "\030\303\002 \001(\0132\020.TSD.FillArchive\0223\n\030tschchartse"
  "ries3dpiefill\030\304\002 \001(\0132\020.TSD.FillArchive\"\344"
  "\032\n\032ChartSeriesNonStyleArchive\022 \n\005super\030\001"
  " \002(\0132\021.TSS.StyleArchive\022R\n\"tschchartseri"
  "esdefaultnumberformat\030\n \001(\0132&.TSCH.PreUF"
  "F.ChartsNumberFormatArchive\022.\n&tschchart"
  "seriesdefaultnumberformattype\030\013 \001(\005\022)\n!t"
  "schchartseriesbarshowvaluelabels\030\014 \001(\010\022%"
  "\n\035tschchartserieslinesymboltype\030\023 \001(\005\022%\n"
  "\035tschchartserieslineshowsymbol\030\024 \001(\010\022*\n\""
  "tschchartserieslineshowvaluelabels\030\025 \001(\010"
  "\022*\n\"tschchartseriesareashowvaluelabels\030\033"
  " \001(\010\022#\n\033tschchartserieslinelinetype\030\036 \001("
  "\005\022%\n\035tschchartseriesareasymboltype\030\037 \001(\005"
  "\022%\n\035tschchartseriesareashowsymbol\030  \001(\010\022"
  ")\n!tschchartseriespieshowvaluelabels\030% \001"
  "(\010\022-\n%tschchartseriesscattershowvaluelab"
  "els\030- \001(\010\022(\n tschchartseriespiewedgeexpl"
  "osion\0302 \001(\002\022-\n%tschchartseriesdefaultsho"
  "wvaluelabels\0303 \001(\010\022N\n\036tschchartseriespie"
  "numberformat\0304 \001(\0132&.TSCH.PreUFF.ChartsN"
  "umberFormatArchive\022*\n\"tschchartseriespie"
  "numberformattype\0305 \001(\005\022(\n tschchartserie"
  "spielabelexplosion\0306 \001(\002\022*\n\"tschchartser"
  "iesmixedlineshowsymbol\030: \001(\010\022*\n\"tschchar"
  "tseriesmixedareashowsymbol\030; \001(\010\022*\n\"tsch"
  "chartseriesmixedlinesymboltype\030< \001(\005\022*\n\""
  "tschchartseriesmixedareasymboltype\030= \001(\005"
  "\022+\n#tschchartseriesmixedshowvaluelabels\030"
  "> \001(\010\022(\n tschchartseriesmixedlinelinetyp"
  "e\030\? \001(\005\022*\n\"tschchartseriesdefaultyaxisor"
  "dinal\030A \001(\005\022*\n\"tschchartseriespieshowser"
  "ieslabels\030B \001(\010\022(\n tschchartseriesscatte"
  "rshowsymbol\030E \001(\010\022(\n tschchartseriesscat"
  "tersymboltype\030F \001(\005\022&\n\036tschchartseriessc"
  "atterlinetype\030G \001(\005\022&\n\036tschchartseriessc"
  "attershowline\030H \001(\010\022Y\n)tschchartseriesst"
  "ackedpercentnumberformat\030Z \001(\0132&.TSCH.Pr"
  "eUFF.ChartsNumberFormatArchive\022(\n tschch"
  "artseriesdefaultseriestype\030~ \001(\005\022,\n#tsch"
  "chartseriesdefaulttrendlinetype\030\240\001 \001(\005\022-"
  "\n$tschchartseriesdefaulttrendlineorder\030\241"
  "\001 \001(\005\022.\n%tschchartseriesdefaulttrendline"
  "period\030\242\001 \001(\005\0221\n(tschchartseriesdefaultt"
  "rendlineshowlabel\030\243\001 \001(\010\0223\n*tschchartser"
  "iesdefaulttrendlinelabelstring\030\244\001 \001(\t\0224\n"
  "+tschchartseriesdefaulttrendlineshowequa"
  "tion\030\245\001 \001(\010\0223\n*tschchartseriesdefaulttre"
  "ndlineshowr2value\030\246\001 \001(\010\022.\n%tschchartser"
  "iesdefaulterrorbarsetting\030\252\001 \001(\005\0226\n-tsch"
  "chartseriesdefaulterrorbarsettingscatter"
  "x\030\253\001 \001(\005\022+\n\"tschchartseriesdefaulterrorb"
  "artype\030\254\001 \001(\005\0223\n*tschchartseriesdefaulte"
  "rrorbartypescatterx\030\255\001 \001(\005\0221\n(tschcharts"
  "eriesdefaulterrorbarfixedvalue\030\256\001 \001(\002\0229\n"
  "0tschchartseriesdefaulterrorbarfixedvalu"
  "escatterx\030\257\001 \001(\002\0223\n*tschchartseriesdefau"
  "lterrorbarpercentvalue\030\260\001 \001(\002\022;\n2tschcha"
  "rtseriesdefaulterrorbarpercentvaluescatt"
  "erx\030\261\001 \001(\002\0222\n)tschchartseriesdefaulterro"
  "rbarstddevvalue\030\262\001 \001(\002\022:\n1tschchartserie"
  "sdefaulterrorbarstddevvaluescatterx\030\263\001 \001"
  "(\002\022e\n0tschchartseriesdefaulterrorbarcust"
  "ompositivedata\030\276\001 \001(\0132*.TSCH.ChartsNSArr"
  "ayOfNSNumberDoubleArchive\022m\n8tschchartse"
  "riesdefaulterrorbarcustompositivedatasca"
  "tterx\030\277\001 \001(\0132*.TSCH.ChartsNSArrayOfNSNum"
  "berDoubleArchive\022e\n0tschchartseriesdefau"
  "lterrorbarcustomnegativedata\030\300\001 \001(\0132*.TS"
  "CH.ChartsNSArrayOfNSNumberDoubleArchive\022"
  "m\n8tschchartseriesdefaulterrorbarcustomn"
  "egativedatascatterx\030\301\001 \001(\0132*.TSCH.Charts"
  "NSArrayOfNSNumberDoubleArchive\0227\n.tschch"
  "artseriesdefaulttrendlineequationoffsetx"
  "\030\302\001 \001(\002\0227\n.tschchartseriesdefaulttrendli"
  "neequationoffsety\030\303\001 \001(\002\0227\n.tschchartser"
  "iesdefaulttrendlinersquaredoffsetx\030\304\001 \001("
  "\002\0227\n.tschchartseriesdefaulttrendlinersqu"
  "aredoffsety\030\305\001 \001(\002\022,\n#tschchartseriesdef"
  "aultshowtrendline\030\306\001 \001(\010\022+\n\"tschchartser"
  "iesdefaultshowerrorbar\030\307\001 \001(\010\0223\n*tschcha"
  "rtseriesdefaultshowerrorbarscatterx\030\310\001 \001"
  "(\010\022+\n\"tschchartseriesbubblesizedimension"
  "\030\320\001 \001(\005\022-\n$tschchartseriesbubbleshowvalu"
  "elabels\030\321\001 \001(\010\022&\n\035tschchartseriesbubblel"
  "inetype\030\322\001 \001(\005\022.\n%tschchartseriesbubbles"
  "hownegativedata\030\330\001 \001(\010\022-\n$tschchartserie"
  "sbubbleadjustmentscale\030\331\001 \001(\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSCHPreUFFArchives_2eproto_deps[6] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSCHPreUFFArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSCHPreUFFArchives_2eproto = {
    false, false, 19509, descriptor_table_protodef_TSCHPreUFFArchives_2eproto,
    "TSCHPreUFFArchives.proto",
    &descriptor_table_TSCHPreUFFArchives_2eproto_once, descriptor_table_TSCHPreUFFArchives_2eproto_deps, 6, 14,
    schemas, file_default_instances, TableStruct_TSCHPreUFFArchives_2eproto::offsets,
    file_level_metadata_TSCHPreUFFArchives_2eproto, file_level_enum_descriptors_TSCHPreUFFArchives_2eproto,
    file_level_service_descriptors_TSCHPreUFFArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSCHPreUFFArchives_2eproto_getter() {
  return &descriptor_table_TSCHPreUFFArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSCHPreUFFArchives_2eproto(&descriptor_table_TSCHPreUFFArchives_2eproto);
namespace TSCH {
namespace PreUFF {

// ===================================================================

class ChartInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartInfoArchive>()._impl_._has_bits_);
  static const ::TSD::DrawableArchive& super(const ChartInfoArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::PreUFF::ChartModelArchive& chart_model(const ChartInfoArchive* msg);
  static void set_has_chart_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& style(const ChartInfoArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chart_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCH::PreUFF::LegendModelArchive& legend_model(const ChartInfoArchive* msg);
  static void set_has_legend_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::RectArchive& inner_chart_frame(const ChartInfoArchive* msg);
  static void set_has_inner_chart_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::SparseReferenceArray& series_private_styles(const ChartInfoArchive* msg);
  static void set_has_series_private_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::SparseReferenceArray& series_non_styles(const ChartInfoArchive* msg);
  static void set_has_series_non_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& non_style(const ChartInfoArchive* msg);
  static void set_has_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& mediator(const ChartInfoArchive* msg);
  static void set_has_mediator(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Point& cde_preview_origin(const ChartInfoArchive* msg);
  static void set_has_cde_preview_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& chart_style_preset(const ChartInfoArchive* msg);
  static void set_has_chart_style_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_last_row_sected_in_the_cde(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_last_column_sected_in_the_cde(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_chart_style_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_needs_calc_engine_deferred_import_action(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000813) ^ 0x00000813) != 0;
  }
};

const ::TSD::DrawableArchive&
ChartInfoArchive::_Internal::super(const ChartInfoArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCH::PreUFF::ChartModelArchive&
ChartInfoArchive::_Internal::chart_model(const ChartInfoArchive* msg) {
  return *msg->_impl_.chart_model_;
}
const ::TSP::Reference&
ChartInfoArchive::_Internal::style(const ChartInfoArchive* msg) {
  return *msg->_impl_.style_;
}
const ::TSCH::PreUFF::LegendModelArchive&
ChartInfoArchive::_Internal::legend_model(const ChartInfoArchive* msg) {
  return *msg->_impl_.legend_model_;
}
const ::TSCH::RectArchive&
ChartInfoArchive::_Internal::inner_chart_frame(const ChartInfoArchive* msg) {
  return *msg->_impl_.inner_chart_frame_;
}
const ::TSP::SparseReferenceArray&
ChartInfoArchive::_Internal::series_private_styles(const ChartInfoArchive* msg) {
  return *msg->_impl_.series_private_styles_;
}
const ::TSP::SparseReferenceArray&
ChartInfoArchive::_Internal::series_non_styles(const ChartInfoArchive* msg) {
  return *msg->_impl_.series_non_styles_;
}
const ::TSP::Reference&
ChartInfoArchive::_Internal::non_style(const ChartInfoArchive* msg) {
  return *msg->_impl_.non_style_;
}
const ::TSP::Reference&
ChartInfoArchive::_Internal::mediator(const ChartInfoArchive* msg) {
  return *msg->_impl_.mediator_;
}
const ::TSP::Point&
ChartInfoArchive::_Internal::cde_preview_origin(const ChartInfoArchive* msg) {
  return *msg->_impl_.cde_preview_origin_;
}
const ::TSP::Reference&
ChartInfoArchive::_Internal::chart_style_preset(const ChartInfoArchive* msg) {
  return *msg->_impl_.chart_style_preset_;
}
void ChartInfoArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartInfoArchive::clear_style() {
  if (_impl_.style_ != nullptr) _impl_.style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartInfoArchive::clear_inner_chart_frame() {
  if (_impl_.inner_chart_frame_ != nullptr) _impl_.inner_chart_frame_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartInfoArchive::clear_value_axis_styles() {
  _impl_.value_axis_styles_.Clear();
}
void ChartInfoArchive::clear_category_axis_styles() {
  _impl_.category_axis_styles_.Clear();
}
void ChartInfoArchive::clear_value_axis_nonstyles() {
  _impl_.value_axis_nonstyles_.Clear();
}
void ChartInfoArchive::clear_category_axis_nonstyles() {
  _impl_.category_axis_nonstyles_.Clear();
}
void ChartInfoArchive::clear_series_theme_styles() {
  _impl_.series_theme_styles_.Clear();
}
void ChartInfoArchive::clear_series_private_styles() {
  if (_impl_.series_private_styles_ != nullptr) _impl_.series_private_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartInfoArchive::clear_series_non_styles() {
  if (_impl_.series_non_styles_ != nullptr) _impl_.series_non_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartInfoArchive::clear_non_style() {
  if (_impl_.non_style_ != nullptr) _impl_.non_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartInfoArchive::clear_mediator() {
  if (_impl_.mediator_ != nullptr) _impl_.mediator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartInfoArchive::clear_cde_preview_origin() {
  if (_impl_.cde_preview_origin_ != nullptr) _impl_.cde_preview_origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartInfoArchive::clear_chart_style_preset() {
  if (_impl_.chart_style_preset_ != nullptr) _impl_.chart_style_preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartInfoArchive::clear_paragraph_styles() {
  _impl_.paragraph_styles_.Clear();
}
ChartInfoArchive::ChartInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartInfoArchive)
}
ChartInfoArchive::ChartInfoArchive(const ChartInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){from._impl_.value_axis_styles_}
    , decltype(_impl_.category_axis_styles_){from._impl_.category_axis_styles_}
    , decltype(_impl_.value_axis_nonstyles_){from._impl_.value_axis_nonstyles_}
    , decltype(_impl_.category_axis_nonstyles_){from._impl_.category_axis_nonstyles_}
    , decltype(_impl_.series_theme_styles_){from._impl_.series_theme_styles_}
    , decltype(_impl_.paragraph_styles_){from._impl_.paragraph_styles_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.chart_model_){nullptr}
    , decltype(_impl_.style_){nullptr}
    , decltype(_impl_.legend_model_){nullptr}
    , decltype(_impl_.inner_chart_frame_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_non_styles_){nullptr}
    , decltype(_impl_.non_style_){nullptr}
    , decltype(_impl_.mediator_){nullptr}
    , decltype(_impl_.cde_preview_origin_){nullptr}
    , decltype(_impl_.chart_style_preset_){nullptr}
    , decltype(_impl_.chart_type_){}
    , decltype(_impl_.last_row_sected_in_the_cde_){}
    , decltype(_impl_.last_column_sected_in_the_cde_){}
    , decltype(_impl_.chart_style_preset_index_){}
    , decltype(_impl_.needs_calc_engine_deferred_import_action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSD::DrawableArchive(*from._impl_.super_);
  }
  if (from._internal_has_chart_model()) {
    _this->_impl_.chart_model_ = new ::TSCH::PreUFF::ChartModelArchive(*from._impl_.chart_model_);
  }
  if (from._internal_has_style()) {
    _this->_impl_.style_ = new ::TSP::Reference(*from._impl_.style_);
  }
  if (from._internal_has_legend_model()) {
    _this->_impl_.legend_model_ = new ::TSCH::PreUFF::LegendModelArchive(*from._impl_.legend_model_);
  }
  if (from._internal_has_inner_chart_frame()) {
    _this->_impl_.inner_chart_frame_ = new ::TSCH::RectArchive(*from._impl_.inner_chart_frame_);
  }
  if (from._internal_has_series_private_styles()) {
    _this->_impl_.series_private_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.series_private_styles_);
  }
  if (from._internal_has_series_non_styles()) {
    _this->_impl_.series_non_styles_ = new ::TSP::SparseReferenceArray(*from._impl_.series_non_styles_);
  }
  if (from._internal_has_non_style()) {
    _this->_impl_.non_style_ = new ::TSP::Reference(*from._impl_.non_style_);
  }
  if (from._internal_has_mediator()) {
    _this->_impl_.mediator_ = new ::TSP::Reference(*from._impl_.mediator_);
  }
  if (from._internal_has_cde_preview_origin()) {
    _this->_impl_.cde_preview_origin_ = new ::TSP::Point(*from._impl_.cde_preview_origin_);
  }
  if (from._internal_has_chart_style_preset()) {
    _this->_impl_.chart_style_preset_ = new ::TSP::Reference(*from._impl_.chart_style_preset_);
  }
  ::memcpy(&_impl_.chart_type_, &from._impl_.chart_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.needs_calc_engine_deferred_import_action_) -
    reinterpret_cast<char*>(&_impl_.chart_type_)) + sizeof(_impl_.needs_calc_engine_deferred_import_action_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartInfoArchive)
}

inline void ChartInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_axis_styles_){arena}
    , decltype(_impl_.category_axis_styles_){arena}
    , decltype(_impl_.value_axis_nonstyles_){arena}
    , decltype(_impl_.category_axis_nonstyles_){arena}
    , decltype(_impl_.series_theme_styles_){arena}
    , decltype(_impl_.paragraph_styles_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.chart_model_){nullptr}
    , decltype(_impl_.style_){nullptr}
    , decltype(_impl_.legend_model_){nullptr}
    , decltype(_impl_.inner_chart_frame_){nullptr}
    , decltype(_impl_.series_private_styles_){nullptr}
    , decltype(_impl_.series_non_styles_){nullptr}
    , decltype(_impl_.non_style_){nullptr}
    , decltype(_impl_.mediator_){nullptr}
    , decltype(_impl_.cde_preview_origin_){nullptr}
    , decltype(_impl_.chart_style_preset_){nullptr}
    , decltype(_impl_.chart_type_){0}
    , decltype(_impl_.last_row_sected_in_the_cde_){0}
    , decltype(_impl_.last_column_sected_in_the_cde_){0}
    , decltype(_impl_.chart_style_preset_index_){0}
    , decltype(_impl_.needs_calc_engine_deferred_import_action_){false}
  };
}

ChartInfoArchive::~ChartInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_axis_styles_.~RepeatedPtrField();
  _impl_.category_axis_styles_.~RepeatedPtrField();
  _impl_.value_axis_nonstyles_.~RepeatedPtrField();
  _impl_.category_axis_nonstyles_.~RepeatedPtrField();
  _impl_.series_theme_styles_.~RepeatedPtrField();
  _impl_.paragraph_styles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.chart_model_;
  if (this != internal_default_instance()) delete _impl_.style_;
  if (this != internal_default_instance()) delete _impl_.legend_model_;
  if (this != internal_default_instance()) delete _impl_.inner_chart_frame_;
  if (this != internal_default_instance()) delete _impl_.series_private_styles_;
  if (this != internal_default_instance()) delete _impl_.series_non_styles_;
  if (this != internal_default_instance()) delete _impl_.non_style_;
  if (this != internal_default_instance()) delete _impl_.mediator_;
  if (this != internal_default_instance()) delete _impl_.cde_preview_origin_;
  if (this != internal_default_instance()) delete _impl_.chart_style_preset_;
}

void ChartInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_axis_styles_.Clear();
  _impl_.category_axis_styles_.Clear();
  _impl_.value_axis_nonstyles_.Clear();
  _impl_.category_axis_nonstyles_.Clear();
  _impl_.series_theme_styles_.Clear();
  _impl_.paragraph_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chart_model_ != nullptr);
      _impl_.chart_model_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.style_ != nullptr);
      _impl_.style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.legend_model_ != nullptr);
      _impl_.legend_model_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.inner_chart_frame_ != nullptr);
      _impl_.inner_chart_frame_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.series_private_styles_ != nullptr);
      _impl_.series_private_styles_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.series_non_styles_ != nullptr);
      _impl_.series_non_styles_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.non_style_ != nullptr);
      _impl_.non_style_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.mediator_ != nullptr);
      _impl_.mediator_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.cde_preview_origin_ != nullptr);
      _impl_.cde_preview_origin_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.chart_style_preset_ != nullptr);
      _impl_.chart_style_preset_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.chart_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.needs_calc_engine_deferred_import_action_) -
        reinterpret_cast<char*>(&_impl_.chart_type_)) + sizeof(_impl_.needs_calc_engine_deferred_import_action_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSD.DrawableArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.ChartType chart_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::ChartType_IsValid(val))) {
            _internal_set_chart_type(static_cast<::TSCH::ChartType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_legend_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.RectArchive inner_chart_frame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner_chart_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_styles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_styles = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference value_axis_nonstyles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference category_axis_nonstyles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_axis_nonstyles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference series_theme_styles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series_theme_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_private_styles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_private_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.SparseReferenceArray series_non_styles = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_series_non_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference non_style = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference mediator = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mediator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Point cde_preview_origin = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_cde_preview_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference chart_style_preset = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_chart_style_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference paragraph_styles = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_paragraph_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_row_sected_in_the_cde = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_last_row_sected_in_the_cde(&has_bits);
          _impl_.last_row_sected_in_the_cde_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_column_sected_in_the_cde = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_last_column_sected_in_the_cde(&has_bits);
          _impl_.last_column_sected_in_the_cde_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chart_style_preset_index = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_chart_style_preset_index(&has_bits);
          _impl_.chart_style_preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool needs_calc_engine_deferred_import_action = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_needs_calc_engine_deferred_import_action(&has_bits);
          _impl_.needs_calc_engine_deferred_import_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSD.DrawableArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chart_model(this),
        _Internal::chart_model(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::style(this),
        _Internal::style(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.ChartType chart_type = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_chart_type(), target);
  }

  // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::legend_model(this),
        _Internal::legend_model(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.RectArchive inner_chart_frame = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::inner_chart_frame(this),
        _Internal::inner_chart_frame(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference value_axis_styles = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference category_axis_styles = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_axis_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_axis_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_axis_nonstyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_axis_nonstyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_axis_nonstyles_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_axis_nonstyles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference series_theme_styles = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_series_theme_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_series_theme_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_private_styles = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::series_private_styles(this),
        _Internal::series_private_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.SparseReferenceArray series_non_styles = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::series_non_styles(this),
        _Internal::series_non_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference non_style = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::non_style(this),
        _Internal::non_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference mediator = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::mediator(this),
        _Internal::mediator(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Point cde_preview_origin = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::cde_preview_origin(this),
        _Internal::cde_preview_origin(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference chart_style_preset = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::chart_style_preset(this),
        _Internal::chart_style_preset(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference paragraph_styles = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paragraph_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_paragraph_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 last_row_sected_in_the_cde = 19;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_last_row_sected_in_the_cde(), target);
  }

  // optional int32 last_column_sected_in_the_cde = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_last_column_sected_in_the_cde(), target);
  }

  // optional int32 chart_style_preset_index = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_chart_style_preset_index(), target);
  }

  // optional bool needs_calc_engine_deferred_import_action = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_needs_calc_engine_deferred_import_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartInfoArchive)
  return target;
}

size_t ChartInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.PreUFF.ChartInfoArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_chart_model()) {
    // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chart_model_);
  }

  if (_internal_has_inner_chart_frame()) {
    // required .TSCH.RectArchive inner_chart_frame = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner_chart_frame_);
  }

  if (_internal_has_chart_type()) {
    // required .TSCH.ChartType chart_type = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_chart_type());
  }

  return total_size;
}
size_t ChartInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000813) ^ 0x00000813) == 0) {  // All required fields are present.
    // required .TSD.DrawableArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSCH.PreUFF.ChartModelArchive chart_model = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chart_model_);

    // required .TSCH.RectArchive inner_chart_frame = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner_chart_frame_);

    // required .TSCH.ChartType chart_type = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_chart_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference value_axis_styles = 7;
  total_size += 1UL * this->_internal_value_axis_styles_size();
  for (const auto& msg : this->_impl_.value_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_styles = 8;
  total_size += 1UL * this->_internal_category_axis_styles_size();
  for (const auto& msg : this->_impl_.category_axis_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 9;
  total_size += 1UL * this->_internal_value_axis_nonstyles_size();
  for (const auto& msg : this->_impl_.value_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 10;
  total_size += 1UL * this->_internal_category_axis_nonstyles_size();
  for (const auto& msg : this->_impl_.category_axis_nonstyles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference series_theme_styles = 11;
  total_size += 1UL * this->_internal_series_theme_styles_size();
  for (const auto& msg : this->_impl_.series_theme_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference paragraph_styles = 18;
  total_size += 2UL * this->_internal_paragraph_styles_size();
  for (const auto& msg : this->_impl_.paragraph_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.Reference style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_);
    }

    // optional .TSCH.PreUFF.LegendModelArchive legend_model = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legend_model_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.SparseReferenceArray series_private_styles = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_private_styles_);
    }

    // optional .TSP.SparseReferenceArray series_non_styles = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.series_non_styles_);
    }

    // optional .TSP.Reference non_style = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.non_style_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSP.Reference mediator = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mediator_);
    }

    // optional .TSP.Point cde_preview_origin = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cde_preview_origin_);
    }

    // optional .TSP.Reference chart_style_preset = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chart_style_preset_);
    }

  }
  if (cached_has_bits & 0x0000f000u) {
    // optional int32 last_row_sected_in_the_cde = 19;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_last_row_sected_in_the_cde());
    }

    // optional int32 last_column_sected_in_the_cde = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_last_column_sected_in_the_cde());
    }

    // optional int32 chart_style_preset_index = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_chart_style_preset_index());
    }

    // optional bool needs_calc_engine_deferred_import_action = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartInfoArchive::GetClassData() const { return &_class_data_; }


void ChartInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartInfoArchive*>(&to_msg);
  auto& from = static_cast<const ChartInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_axis_styles_.MergeFrom(from._impl_.value_axis_styles_);
  _this->_impl_.category_axis_styles_.MergeFrom(from._impl_.category_axis_styles_);
  _this->_impl_.value_axis_nonstyles_.MergeFrom(from._impl_.value_axis_nonstyles_);
  _this->_impl_.category_axis_nonstyles_.MergeFrom(from._impl_.category_axis_nonstyles_);
  _this->_impl_.series_theme_styles_.MergeFrom(from._impl_.series_theme_styles_);
  _this->_impl_.paragraph_styles_.MergeFrom(from._impl_.paragraph_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSD::DrawableArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chart_model()->::TSCH::PreUFF::ChartModelArchive::MergeFrom(
          from._internal_chart_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_style()->::TSP::Reference::MergeFrom(
          from._internal_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_legend_model()->::TSCH::PreUFF::LegendModelArchive::MergeFrom(
          from._internal_legend_model());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_inner_chart_frame()->::TSCH::RectArchive::MergeFrom(
          from._internal_inner_chart_frame());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_series_private_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_series_private_styles());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_series_non_styles()->::TSP::SparseReferenceArray::MergeFrom(
          from._internal_series_non_styles());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_non_style()->::TSP::Reference::MergeFrom(
          from._internal_non_style());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_mediator()->::TSP::Reference::MergeFrom(
          from._internal_mediator());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_cde_preview_origin()->::TSP::Point::MergeFrom(
          from._internal_cde_preview_origin());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_chart_style_preset()->::TSP::Reference::MergeFrom(
          from._internal_chart_style_preset());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.chart_type_ = from._impl_.chart_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.last_row_sected_in_the_cde_ = from._impl_.last_row_sected_in_the_cde_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.last_column_sected_in_the_cde_ = from._impl_.last_column_sected_in_the_cde_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.chart_style_preset_index_ = from._impl_.chart_style_preset_index_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.needs_calc_engine_deferred_import_action_ = from._impl_.needs_calc_engine_deferred_import_action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartInfoArchive::CopyFrom(const ChartInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.value_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_axis_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.value_axis_nonstyles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_axis_nonstyles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.series_theme_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.paragraph_styles_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_chart_model()) {
    if (!_impl_.chart_model_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!_impl_.style_->IsInitialized()) return false;
  }
  if (_internal_has_legend_model()) {
    if (!_impl_.legend_model_->IsInitialized()) return false;
  }
  if (_internal_has_inner_chart_frame()) {
    if (!_impl_.inner_chart_frame_->IsInitialized()) return false;
  }
  if (_internal_has_series_private_styles()) {
    if (!_impl_.series_private_styles_->IsInitialized()) return false;
  }
  if (_internal_has_series_non_styles()) {
    if (!_impl_.series_non_styles_->IsInitialized()) return false;
  }
  if (_internal_has_non_style()) {
    if (!_impl_.non_style_->IsInitialized()) return false;
  }
  if (_internal_has_mediator()) {
    if (!_impl_.mediator_->IsInitialized()) return false;
  }
  if (_internal_has_cde_preview_origin()) {
    if (!_impl_.cde_preview_origin_->IsInitialized()) return false;
  }
  if (_internal_has_chart_style_preset()) {
    if (!_impl_.chart_style_preset_->IsInitialized()) return false;
  }
  return true;
}

void ChartInfoArchive::InternalSwap(ChartInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.value_axis_styles_.InternalSwap(&other->_impl_.value_axis_styles_);
  _impl_.category_axis_styles_.InternalSwap(&other->_impl_.category_axis_styles_);
  _impl_.value_axis_nonstyles_.InternalSwap(&other->_impl_.value_axis_nonstyles_);
  _impl_.category_axis_nonstyles_.InternalSwap(&other->_impl_.category_axis_nonstyles_);
  _impl_.series_theme_styles_.InternalSwap(&other->_impl_.series_theme_styles_);
  _impl_.paragraph_styles_.InternalSwap(&other->_impl_.paragraph_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartInfoArchive, _impl_.needs_calc_engine_deferred_import_action_)
      + sizeof(ChartInfoArchive::_impl_.needs_calc_engine_deferred_import_action_)
      - PROTOBUF_FIELD_OFFSET(ChartInfoArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[0]);
}

// ===================================================================

class LegendModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendModelArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& info(const LegendModelArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::RectArchive& frame(const LegendModelArchive* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& style(const LegendModelArchive* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& non_style(const LegendModelArchive* msg);
  static void set_has_non_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::TSP::Reference&
LegendModelArchive::_Internal::info(const LegendModelArchive* msg) {
  return *msg->_impl_.info_;
}
const ::TSCH::RectArchive&
LegendModelArchive::_Internal::frame(const LegendModelArchive* msg) {
  return *msg->_impl_.frame_;
}
const ::TSP::Reference&
LegendModelArchive::_Internal::style(const LegendModelArchive* msg) {
  return *msg->_impl_.style_;
}
const ::TSP::Reference&
LegendModelArchive::_Internal::non_style(const LegendModelArchive* msg) {
  return *msg->_impl_.non_style_;
}
void LegendModelArchive::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LegendModelArchive::clear_frame() {
  if (_impl_.frame_ != nullptr) _impl_.frame_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LegendModelArchive::clear_style() {
  if (_impl_.style_ != nullptr) _impl_.style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LegendModelArchive::clear_non_style() {
  if (_impl_.non_style_ != nullptr) _impl_.non_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
LegendModelArchive::LegendModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.LegendModelArchive)
}
LegendModelArchive::LegendModelArchive(const LegendModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LegendModelArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.frame_){nullptr}
    , decltype(_impl_.style_){nullptr}
    , decltype(_impl_.non_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  if (from._internal_has_frame()) {
    _this->_impl_.frame_ = new ::TSCH::RectArchive(*from._impl_.frame_);
  }
  if (from._internal_has_style()) {
    _this->_impl_.style_ = new ::TSP::Reference(*from._impl_.style_);
  }
  if (from._internal_has_non_style()) {
    _this->_impl_.non_style_ = new ::TSP::Reference(*from._impl_.non_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.LegendModelArchive)
}

inline void LegendModelArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.frame_){nullptr}
    , decltype(_impl_.style_){nullptr}
    , decltype(_impl_.non_style_){nullptr}
  };
}

LegendModelArchive::~LegendModelArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.LegendModelArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LegendModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
  if (this != internal_default_instance()) delete _impl_.frame_;
  if (this != internal_default_instance()) delete _impl_.style_;
  if (this != internal_default_instance()) delete _impl_.non_style_;
}

void LegendModelArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LegendModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.LegendModelArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.frame_ != nullptr);
      _impl_.frame_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.style_ != nullptr);
      _impl_.style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.non_style_ != nullptr);
      _impl_.non_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendModelArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.RectArchive frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference non_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LegendModelArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.LegendModelArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // required .TSCH.RectArchive frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::frame(this),
        _Internal::frame(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::style(this),
        _Internal::style(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference non_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::non_style(this),
        _Internal::non_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.LegendModelArchive)
  return target;
}

size_t LegendModelArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.PreUFF.LegendModelArchive)
  size_t total_size = 0;

  if (_internal_has_frame()) {
    // required .TSCH.RectArchive frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frame_);
  }

  if (_internal_has_style()) {
    // required .TSP.Reference style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);
  }

  if (_internal_has_non_style()) {
    // required .TSP.Reference non_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.non_style_);
  }

  return total_size;
}
size_t LegendModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.LegendModelArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .TSCH.RectArchive frame = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frame_);

    // required .TSP.Reference style = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);

    // required .TSP.Reference non_style = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.non_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendModelArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LegendModelArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendModelArchive::GetClassData() const { return &_class_data_; }


void LegendModelArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LegendModelArchive*>(&to_msg);
  auto& from = static_cast<const LegendModelArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.LegendModelArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_frame()->::TSCH::RectArchive::MergeFrom(
          from._internal_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_style()->::TSP::Reference::MergeFrom(
          from._internal_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_non_style()->::TSP::Reference::MergeFrom(
          from._internal_non_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LegendModelArchive::CopyFrom(const LegendModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.LegendModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  if (_internal_has_frame()) {
    if (!_impl_.frame_->IsInitialized()) return false;
  }
  if (_internal_has_style()) {
    if (!_impl_.style_->IsInitialized()) return false;
  }
  if (_internal_has_non_style()) {
    if (!_impl_.non_style_->IsInitialized()) return false;
  }
  return true;
}

void LegendModelArchive::InternalSwap(LegendModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegendModelArchive, _impl_.non_style_)
      + sizeof(LegendModelArchive::_impl_.non_style_)
      - PROTOBUF_FIELD_OFFSET(LegendModelArchive, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendModelArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[1]);
}

// ===================================================================

class ChartModelArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartModelArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& info(const ChartModelArchive* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& grid(const ChartModelArchive* msg);
  static void set_has_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scatter_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::PreUFF::ChartGridArchive& inline_grid(const ChartModelArchive* msg);
  static void set_has_inline_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_multidataset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
ChartModelArchive::_Internal::info(const ChartModelArchive* msg) {
  return *msg->_impl_.info_;
}
const ::TSP::Reference&
ChartModelArchive::_Internal::grid(const ChartModelArchive* msg) {
  return *msg->_impl_.grid_;
}
const ::TSCH::PreUFF::ChartGridArchive&
ChartModelArchive::_Internal::inline_grid(const ChartModelArchive* msg) {
  return *msg->_impl_.inline_grid_;
}
void ChartModelArchive::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartModelArchive::clear_grid() {
  if (_impl_.grid_ != nullptr) _impl_.grid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ChartModelArchive::ChartModelArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartModelArchive)
}
ChartModelArchive::ChartModelArchive(const ChartModelArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartModelArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.series_types_){from._impl_.series_types_}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.inline_grid_){nullptr}
    , decltype(_impl_.scatter_format_){}
    , decltype(_impl_.multidataset_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::TSP::Reference(*from._impl_.info_);
  }
  if (from._internal_has_grid()) {
    _this->_impl_.grid_ = new ::TSP::Reference(*from._impl_.grid_);
  }
  if (from._internal_has_inline_grid()) {
    _this->_impl_.inline_grid_ = new ::TSCH::PreUFF::ChartGridArchive(*from._impl_.inline_grid_);
  }
  ::memcpy(&_impl_.scatter_format_, &from._impl_.scatter_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.multidataset_index_) -
    reinterpret_cast<char*>(&_impl_.scatter_format_)) + sizeof(_impl_.multidataset_index_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartModelArchive)
}

inline void ChartModelArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.series_types_){arena}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.grid_){nullptr}
    , decltype(_impl_.inline_grid_){nullptr}
    , decltype(_impl_.scatter_format_){0u}
    , decltype(_impl_.multidataset_index_){0u}
  };
}

ChartModelArchive::~ChartModelArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartModelArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartModelArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.series_types_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.info_;
  if (this != internal_default_instance()) delete _impl_.grid_;
  if (this != internal_default_instance()) delete _impl_.inline_grid_;
}

void ChartModelArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartModelArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartModelArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.series_types_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.grid_ != nullptr);
      _impl_.grid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inline_grid_ != nullptr);
      _impl_.inline_grid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.scatter_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.multidataset_index_) -
        reinterpret_cast<char*>(&_impl_.scatter_format_)) + sizeof(_impl_.multidataset_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartModelArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference grid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 series_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_series_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_series_types(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scatter_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_scatter_format(&has_bits);
          _impl_.scatter_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inline_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 multidataset_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_multidataset_index(&has_bits);
          _impl_.multidataset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartModelArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartModelArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference grid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::grid(this),
        _Internal::grid(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 series_types = 3;
  for (int i = 0, n = this->_internal_series_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_series_types(i), target);
  }

  // optional uint32 scatter_format = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_scatter_format(), target);
  }

  // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::inline_grid(this),
        _Internal::inline_grid(this).GetCachedSize(), target, stream);
  }

  // optional uint32 multidataset_index = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_multidataset_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartModelArchive)
  return target;
}

size_t ChartModelArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartModelArchive)
  size_t total_size = 0;

  // required .TSP.Reference grid = 2;
  if (_internal_has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 series_types = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.series_types_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_series_types_size());
    total_size += data_size;
  }

  // optional .TSP.Reference info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSCH.PreUFF.ChartGridArchive inline_grid = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inline_grid_);
    }

    // optional uint32 scatter_format = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scatter_format());
    }

    // optional uint32 multidataset_index = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_multidataset_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartModelArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartModelArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartModelArchive::GetClassData() const { return &_class_data_; }


void ChartModelArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartModelArchive*>(&to_msg);
  auto& from = static_cast<const ChartModelArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartModelArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.series_types_.MergeFrom(from._impl_.series_types_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_info()->::TSP::Reference::MergeFrom(
          from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_grid()->::TSP::Reference::MergeFrom(
          from._internal_grid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inline_grid()->::TSCH::PreUFF::ChartGridArchive::MergeFrom(
          from._internal_inline_grid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.scatter_format_ = from._impl_.scatter_format_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.multidataset_index_ = from._impl_.multidataset_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartModelArchive::CopyFrom(const ChartModelArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartModelArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartModelArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  if (_internal_has_grid()) {
    if (!_impl_.grid_->IsInitialized()) return false;
  }
  if (_internal_has_inline_grid()) {
    if (!_impl_.inline_grid_->IsInitialized()) return false;
  }
  return true;
}

void ChartModelArchive::InternalSwap(ChartModelArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.series_types_.InternalSwap(&other->_impl_.series_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartModelArchive, _impl_.multidataset_index_)
      + sizeof(ChartModelArchive::_impl_.multidataset_index_)
      - PROTOBUF_FIELD_OFFSET(ChartModelArchive, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartModelArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[2]);
}

// ===================================================================

class ChartGridArchive_ValueRow::_Internal {
 public:
};

ChartGridArchive_ValueRow::ChartGridArchive_ValueRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartGridArchive.ValueRow)
}
ChartGridArchive_ValueRow::ChartGridArchive_ValueRow(const ChartGridArchive_ValueRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGridArchive_ValueRow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartGridArchive.ValueRow)
}

inline void ChartGridArchive_ValueRow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChartGridArchive_ValueRow::~ChartGridArchive_ValueRow() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartGridArchive.ValueRow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGridArchive_ValueRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void ChartGridArchive_ValueRow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGridArchive_ValueRow::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive_ValueRow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGridArchive_ValueRow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartGridArchive.ValueRow)
  return target;
}

size_t ChartGridArchive_ValueRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_value_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGridArchive_ValueRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGridArchive_ValueRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGridArchive_ValueRow::GetClassData() const { return &_class_data_; }


void ChartGridArchive_ValueRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGridArchive_ValueRow*>(&to_msg);
  auto& from = static_cast<const ChartGridArchive_ValueRow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGridArchive_ValueRow::CopyFrom(const ChartGridArchive_ValueRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartGridArchive.ValueRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_ValueRow::IsInitialized() const {
  return true;
}

void ChartGridArchive_ValueRow::InternalSwap(ChartGridArchive_ValueRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive_ValueRow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[3]);
}

// ===================================================================

class ChartGridArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGridArchive>()._impl_._has_bits_);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dirty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ChartGridArchive::ChartGridArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartGridArchive)
}
ChartGridArchive::ChartGridArchive(const ChartGridArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGridArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_name_){from._impl_.row_name_}
    , decltype(_impl_.column_name_){from._impl_.column_name_}
    , decltype(_impl_.value_row_){from._impl_.value_row_}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.dirty_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.direction_, &from._impl_.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dirty_) -
    reinterpret_cast<char*>(&_impl_.direction_)) + sizeof(_impl_.dirty_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartGridArchive)
}

inline void ChartGridArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_name_){arena}
    , decltype(_impl_.column_name_){arena}
    , decltype(_impl_.value_row_){arena}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.dirty_){false}
  };
}

ChartGridArchive::~ChartGridArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartGridArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGridArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_name_.~RepeatedPtrField();
  _impl_.column_name_.~RepeatedPtrField();
  _impl_.value_row_.~RepeatedPtrField();
}

void ChartGridArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGridArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartGridArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_name_.Clear();
  _impl_.column_name_.Clear();
  _impl_.value_row_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dirty_) -
        reinterpret_cast<char*>(&_impl_.direction_)) + sizeof(_impl_.dirty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGridArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_direction(&has_bits);
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string row_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_row_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartGridArchive.row_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartGridArchive.column_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool dirty = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_dirty(&has_bits);
          _impl_.dirty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGridArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartGridArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 direction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_direction(), target);
  }

  // repeated string row_name = 2;
  for (int i = 0, n = this->_internal_row_name_size(); i < n; i++) {
    const auto& s = this->_internal_row_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartGridArchive.row_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string column_name = 3;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartGridArchive.column_name");
    target = stream->WriteString(3, s, target);
  }

  // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_row_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_row(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool dirty = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_dirty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartGridArchive)
  return target;
}

size_t ChartGridArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.PreUFF.ChartGridArchive)
  size_t total_size = 0;

  if (_internal_has_direction()) {
    // required int32 direction = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_direction());
  }

  if (_internal_has_dirty()) {
    // required bool dirty = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ChartGridArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartGridArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 direction = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_direction());

    // required bool dirty = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string row_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.row_name_.size());
  for (int i = 0, n = _impl_.row_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.row_name_.Get(i));
  }

  // repeated string column_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_name_.size());
  for (int i = 0, n = _impl_.column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_name_.Get(i));
  }

  // repeated .TSCH.PreUFF.ChartGridArchive.ValueRow value_row = 4;
  total_size += 1UL * this->_internal_value_row_size();
  for (const auto& msg : this->_impl_.value_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGridArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGridArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGridArchive::GetClassData() const { return &_class_data_; }


void ChartGridArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGridArchive*>(&to_msg);
  auto& from = static_cast<const ChartGridArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartGridArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_name_.MergeFrom(from._impl_.row_name_);
  _this->_impl_.column_name_.MergeFrom(from._impl_.column_name_);
  _this->_impl_.value_row_.MergeFrom(from._impl_.value_row_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dirty_ = from._impl_.dirty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGridArchive::CopyFrom(const ChartGridArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartGridArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ChartGridArchive::InternalSwap(ChartGridArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_name_.InternalSwap(&other->_impl_.row_name_);
  _impl_.column_name_.InternalSwap(&other->_impl_.column_name_);
  _impl_.value_row_.InternalSwap(&other->_impl_.value_row_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartGridArchive, _impl_.dirty_)
      + sizeof(ChartGridArchive::_impl_.dirty_)
      - PROTOBUF_FIELD_OFFSET(ChartGridArchive, _impl_.direction_)>(
          reinterpret_cast<char*>(&_impl_.direction_),
          reinterpret_cast<char*>(&other->_impl_.direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGridArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[4]);
}

// ===================================================================

class ChartsNumberFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartsNumberFormatArchive>()._impl_._has_bits_);
  static void set_has_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_format_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_decimal_places(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_negative_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_show_thousands_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fraction_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_suffix_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_base_places(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_base_use_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_use_accounting_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_custom(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::IndexSet& interstitial_string_insertion_indexes(const ChartsNumberFormatArchive* msg);
  static void set_has_interstitial_string_insertion_indexes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_index_from_right_of_last_digit_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_text_format(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_minimum_integer_width(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_decimal_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_number_of_non_space_integer_placeholder_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_number_of_non_space_decimal_placeholder_digits(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_format_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prefix_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x007fffe0) ^ 0x007fffe0) != 0;
  }
};

const ::TSP::IndexSet&
ChartsNumberFormatArchive::_Internal::interstitial_string_insertion_indexes(const ChartsNumberFormatArchive* msg) {
  return *msg->_impl_.interstitial_string_insertion_indexes_;
}
void ChartsNumberFormatArchive::clear_interstitial_string_insertion_indexes() {
  if (_impl_.interstitial_string_insertion_indexes_ != nullptr) _impl_.interstitial_string_insertion_indexes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
ChartsNumberFormatArchive::ChartsNumberFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartsNumberFormatArchive)
}
ChartsNumberFormatArchive::ChartsNumberFormatArchive(const ChartsNumberFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartsNumberFormatArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interstitial_strings_){from._impl_.interstitial_strings_}
    , decltype(_impl_.format_string_){}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.suffix_string_){}
    , decltype(_impl_.format_name_){}
    , decltype(_impl_.prefix_string_){}
    , decltype(_impl_.interstitial_string_insertion_indexes_){nullptr}
    , decltype(_impl_.value_type_){}
    , decltype(_impl_.decimal_places_){}
    , decltype(_impl_.negative_style_){}
    , decltype(_impl_.fraction_accuracy_){}
    , decltype(_impl_.base_){}
    , decltype(_impl_.base_places_){}
    , decltype(_impl_.show_thousands_separator_){}
    , decltype(_impl_.base_use_minus_sign_){}
    , decltype(_impl_.use_accounting_style_){}
    , decltype(_impl_.is_custom_){}
    , decltype(_impl_.index_from_right_of_last_digit_placeholder_){}
    , decltype(_impl_.scale_factor_){}
    , decltype(_impl_.is_text_format_){}
    , decltype(_impl_.minimum_integer_width_){}
    , decltype(_impl_.decimal_width_){}
    , decltype(_impl_.number_of_non_space_integer_placeholder_digits_){}
    , decltype(_impl_.number_of_non_space_decimal_placeholder_digits_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.format_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_format_string()) {
    _this->_impl_.format_string_.Set(from._internal_format_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    _this->_impl_.currency_code_.Set(from._internal_currency_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.suffix_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suffix_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_suffix_string()) {
    _this->_impl_.suffix_string_.Set(from._internal_suffix_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.format_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_format_name()) {
    _this->_impl_.format_name_.Set(from._internal_format_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prefix_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prefix_string()) {
    _this->_impl_.prefix_string_.Set(from._internal_prefix_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interstitial_string_insertion_indexes()) {
    _this->_impl_.interstitial_string_insertion_indexes_ = new ::TSP::IndexSet(*from._impl_.interstitial_string_insertion_indexes_);
  }
  ::memcpy(&_impl_.value_type_, &from._impl_.value_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_of_non_space_decimal_placeholder_digits_) -
    reinterpret_cast<char*>(&_impl_.value_type_)) + sizeof(_impl_.number_of_non_space_decimal_placeholder_digits_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartsNumberFormatArchive)
}

inline void ChartsNumberFormatArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interstitial_strings_){arena}
    , decltype(_impl_.format_string_){}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.suffix_string_){}
    , decltype(_impl_.format_name_){}
    , decltype(_impl_.prefix_string_){}
    , decltype(_impl_.interstitial_string_insertion_indexes_){nullptr}
    , decltype(_impl_.value_type_){0}
    , decltype(_impl_.decimal_places_){0u}
    , decltype(_impl_.negative_style_){0}
    , decltype(_impl_.fraction_accuracy_){0}
    , decltype(_impl_.base_){0u}
    , decltype(_impl_.base_places_){0u}
    , decltype(_impl_.show_thousands_separator_){false}
    , decltype(_impl_.base_use_minus_sign_){false}
    , decltype(_impl_.use_accounting_style_){false}
    , decltype(_impl_.is_custom_){false}
    , decltype(_impl_.index_from_right_of_last_digit_placeholder_){0u}
    , decltype(_impl_.scale_factor_){0}
    , decltype(_impl_.is_text_format_){false}
    , decltype(_impl_.minimum_integer_width_){0u}
    , decltype(_impl_.decimal_width_){0u}
    , decltype(_impl_.number_of_non_space_integer_placeholder_digits_){0u}
    , decltype(_impl_.number_of_non_space_decimal_placeholder_digits_){0u}
  };
  _impl_.format_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.suffix_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suffix_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prefix_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartsNumberFormatArchive::~ChartsNumberFormatArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartsNumberFormatArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartsNumberFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interstitial_strings_.~RepeatedPtrField();
  _impl_.format_string_.Destroy();
  _impl_.currency_code_.Destroy();
  _impl_.suffix_string_.Destroy();
  _impl_.format_name_.Destroy();
  _impl_.prefix_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interstitial_string_insertion_indexes_;
}

void ChartsNumberFormatArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartsNumberFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interstitial_strings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.format_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.suffix_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.format_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.prefix_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.interstitial_string_insertion_indexes_ != nullptr);
      _impl_.interstitial_string_insertion_indexes_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.value_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.decimal_places_) -
        reinterpret_cast<char*>(&_impl_.value_type_)) + sizeof(_impl_.decimal_places_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.negative_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_custom_) -
        reinterpret_cast<char*>(&_impl_.negative_style_)) + sizeof(_impl_.is_custom_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.index_from_right_of_last_digit_placeholder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_non_space_decimal_placeholder_digits_) -
        reinterpret_cast<char*>(&_impl_.index_from_right_of_last_digit_placeholder_)) + sizeof(_impl_.number_of_non_space_decimal_placeholder_digits_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartsNumberFormatArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCH.NumberValueType value_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::NumberValueType_IsValid(val))) {
            _internal_set_value_type(static_cast<::TSCH::NumberValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string format_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_format_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.format_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 decimal_places = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_decimal_places(&has_bits);
          _impl_.decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.currency_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.NegativeNumberStyle negative_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::NegativeNumberStyle_IsValid(val))) {
            _internal_set_negative_style(static_cast<::TSCH::NegativeNumberStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool show_thousands_separator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_show_thousands_separator(&has_bits);
          _impl_.show_thousands_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCH.FractionAccuracy fraction_accuracy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCH::FractionAccuracy_IsValid(val))) {
            _internal_set_fraction_accuracy(static_cast<::TSCH::FractionAccuracy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string suffix_string = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_suffix_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.suffix_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 base = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_base(&has_bits);
          _impl_.base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 base_places = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_base_places(&has_bits);
          _impl_.base_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool base_use_minus_sign = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_base_use_minus_sign(&has_bits);
          _impl_.base_use_minus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool use_accounting_style = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_use_accounting_style(&has_bits);
          _impl_.use_accounting_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_custom = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_custom(&has_bits);
          _impl_.is_custom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double scale_factor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_scale_factor(&has_bits);
          _impl_.scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string interstitial_strings = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_interstitial_strings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_interstitial_string_insertion_indexes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index_from_right_of_last_digit_placeholder = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_index_from_right_of_last_digit_placeholder(&has_bits);
          _impl_.index_from_right_of_last_digit_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_text_format = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_text_format(&has_bits);
          _impl_.is_text_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 minimum_integer_width = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_minimum_integer_width(&has_bits);
          _impl_.minimum_integer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 decimal_width = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_decimal_width(&has_bits);
          _impl_.decimal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 number_of_non_space_integer_placeholder_digits = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_number_of_non_space_integer_placeholder_digits(&has_bits);
          _impl_.number_of_non_space_integer_placeholder_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_number_of_non_space_decimal_placeholder_digits(&has_bits);
          _impl_.number_of_non_space_decimal_placeholder_digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string format_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_format_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.format_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string prefix_string = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_prefix_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartsNumberFormatArchive.prefix_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartsNumberFormatArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCH.NumberValueType value_type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value_type(), target);
  }

  // optional string format_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format_string().data(), static_cast<int>(this->_internal_format_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.format_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_format_string(), target);
  }

  // required uint32 decimal_places = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_decimal_places(), target);
  }

  // optional string currency_code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_currency_code(), target);
  }

  // required .TSCH.NegativeNumberStyle negative_style = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_negative_style(), target);
  }

  // required bool show_thousands_separator = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_show_thousands_separator(), target);
  }

  // required .TSCH.FractionAccuracy fraction_accuracy = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_fraction_accuracy(), target);
  }

  // optional string suffix_string = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suffix_string().data(), static_cast<int>(this->_internal_suffix_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.suffix_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_suffix_string(), target);
  }

  // required uint32 base = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_base(), target);
  }

  // required uint32 base_places = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_base_places(), target);
  }

  // required bool base_use_minus_sign = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_base_use_minus_sign(), target);
  }

  // required bool use_accounting_style = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_use_accounting_style(), target);
  }

  // required bool is_custom = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_custom(), target);
  }

  // required double scale_factor = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_scale_factor(), target);
  }

  // repeated string interstitial_strings = 15;
  for (int i = 0, n = this->_internal_interstitial_strings_size(); i < n; i++) {
    const auto& s = this->_internal_interstitial_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_strings");
    target = stream->WriteString(15, s, target);
  }

  // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::interstitial_string_insertion_indexes(this),
        _Internal::interstitial_string_insertion_indexes(this).GetCachedSize(), target, stream);
  }

  // required uint32 index_from_right_of_last_digit_placeholder = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_index_from_right_of_last_digit_placeholder(), target);
  }

  // required bool is_text_format = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_is_text_format(), target);
  }

  // required uint32 minimum_integer_width = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_minimum_integer_width(), target);
  }

  // required uint32 decimal_width = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_decimal_width(), target);
  }

  // required uint32 number_of_non_space_integer_placeholder_digits = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_number_of_non_space_integer_placeholder_digits(), target);
  }

  // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_number_of_non_space_decimal_placeholder_digits(), target);
  }

  // optional string format_name = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format_name().data(), static_cast<int>(this->_internal_format_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.format_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_format_name(), target);
  }

  // optional string prefix_string = 24;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefix_string().data(), static_cast<int>(this->_internal_prefix_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartsNumberFormatArchive.prefix_string");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_prefix_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartsNumberFormatArchive)
  return target;
}

size_t ChartsNumberFormatArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  size_t total_size = 0;

  if (_internal_has_interstitial_string_insertion_indexes()) {
    // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interstitial_string_insertion_indexes_);
  }

  if (_internal_has_value_type()) {
    // required .TSCH.NumberValueType value_type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  if (_internal_has_decimal_places()) {
    // required uint32 decimal_places = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decimal_places());
  }

  if (_internal_has_negative_style()) {
    // required .TSCH.NegativeNumberStyle negative_style = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_negative_style());
  }

  if (_internal_has_fraction_accuracy()) {
    // required .TSCH.FractionAccuracy fraction_accuracy = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fraction_accuracy());
  }

  if (_internal_has_base()) {
    // required uint32 base = 9;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base());
  }

  if (_internal_has_base_places()) {
    // required uint32 base_places = 10;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_places());
  }

  if (_internal_has_show_thousands_separator()) {
    // required bool show_thousands_separator = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_base_use_minus_sign()) {
    // required bool base_use_minus_sign = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_use_accounting_style()) {
    // required bool use_accounting_style = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_is_custom()) {
    // required bool is_custom = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_index_from_right_of_last_digit_placeholder()) {
    // required uint32 index_from_right_of_last_digit_placeholder = 17;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_index_from_right_of_last_digit_placeholder());
  }

  if (_internal_has_scale_factor()) {
    // required double scale_factor = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_is_text_format()) {
    // required bool is_text_format = 18;
    total_size += 2 + 1;
  }

  if (_internal_has_minimum_integer_width()) {
    // required uint32 minimum_integer_width = 19;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_minimum_integer_width());
  }

  if (_internal_has_decimal_width()) {
    // required uint32 decimal_width = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_decimal_width());
  }

  if (_internal_has_number_of_non_space_integer_placeholder_digits()) {
    // required uint32 number_of_non_space_integer_placeholder_digits = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_number_of_non_space_integer_placeholder_digits());
  }

  if (_internal_has_number_of_non_space_decimal_placeholder_digits()) {
    // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_number_of_non_space_decimal_placeholder_digits());
  }

  return total_size;
}
size_t ChartsNumberFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x007fffe0) ^ 0x007fffe0) == 0) {  // All required fields are present.
    // required .TSP.IndexSet interstitial_string_insertion_indexes = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interstitial_string_insertion_indexes_);

    // required .TSCH.NumberValueType value_type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_value_type());

    // required uint32 decimal_places = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decimal_places());

    // required .TSCH.NegativeNumberStyle negative_style = 5;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_negative_style());

    // required .TSCH.FractionAccuracy fraction_accuracy = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fraction_accuracy());

    // required uint32 base = 9;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base());

    // required uint32 base_places = 10;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_places());

    // required bool show_thousands_separator = 6;
    total_size += 1 + 1;

    // required bool base_use_minus_sign = 11;
    total_size += 1 + 1;

    // required bool use_accounting_style = 12;
    total_size += 1 + 1;

    // required bool is_custom = 13;
    total_size += 1 + 1;

    // required uint32 index_from_right_of_last_digit_placeholder = 17;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_index_from_right_of_last_digit_placeholder());

    // required double scale_factor = 14;
    total_size += 1 + 8;

    // required bool is_text_format = 18;
    total_size += 2 + 1;

    // required uint32 minimum_integer_width = 19;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_minimum_integer_width());

    // required uint32 decimal_width = 20;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_decimal_width());

    // required uint32 number_of_non_space_integer_placeholder_digits = 21;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_number_of_non_space_integer_placeholder_digits());

    // required uint32 number_of_non_space_decimal_placeholder_digits = 22;
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_number_of_non_space_decimal_placeholder_digits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string interstitial_strings = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.interstitial_strings_.size());
  for (int i = 0, n = _impl_.interstitial_strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.interstitial_strings_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string format_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format_string());
    }

    // optional string currency_code = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional string suffix_string = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suffix_string());
    }

    // optional string format_name = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_format_name());
    }

    // optional string prefix_string = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix_string());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartsNumberFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartsNumberFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartsNumberFormatArchive::GetClassData() const { return &_class_data_; }


void ChartsNumberFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartsNumberFormatArchive*>(&to_msg);
  auto& from = static_cast<const ChartsNumberFormatArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.interstitial_strings_.MergeFrom(from._impl_.interstitial_strings_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_format_string(from._internal_format_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_suffix_string(from._internal_suffix_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_format_name(from._internal_format_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_prefix_string(from._internal_prefix_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_interstitial_string_insertion_indexes()->::TSP::IndexSet::MergeFrom(
          from._internal_interstitial_string_insertion_indexes());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.value_type_ = from._impl_.value_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.decimal_places_ = from._impl_.decimal_places_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.negative_style_ = from._impl_.negative_style_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.fraction_accuracy_ = from._impl_.fraction_accuracy_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.base_ = from._impl_.base_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.base_places_ = from._impl_.base_places_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.show_thousands_separator_ = from._impl_.show_thousands_separator_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.base_use_minus_sign_ = from._impl_.base_use_minus_sign_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.use_accounting_style_ = from._impl_.use_accounting_style_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.is_custom_ = from._impl_.is_custom_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.index_from_right_of_last_digit_placeholder_ = from._impl_.index_from_right_of_last_digit_placeholder_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.scale_factor_ = from._impl_.scale_factor_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.is_text_format_ = from._impl_.is_text_format_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.minimum_integer_width_ = from._impl_.minimum_integer_width_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.decimal_width_ = from._impl_.decimal_width_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.number_of_non_space_integer_placeholder_digits_ = from._impl_.number_of_non_space_integer_placeholder_digits_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.number_of_non_space_decimal_placeholder_digits_ = from._impl_.number_of_non_space_decimal_placeholder_digits_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartsNumberFormatArchive::CopyFrom(const ChartsNumberFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartsNumberFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartsNumberFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_interstitial_string_insertion_indexes()) {
    if (!_impl_.interstitial_string_insertion_indexes_->IsInitialized()) return false;
  }
  return true;
}

void ChartsNumberFormatArchive::InternalSwap(ChartsNumberFormatArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.interstitial_strings_.InternalSwap(&other->_impl_.interstitial_strings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_string_, lhs_arena,
      &other->_impl_.format_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_code_, lhs_arena,
      &other->_impl_.currency_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.suffix_string_, lhs_arena,
      &other->_impl_.suffix_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_name_, lhs_arena,
      &other->_impl_.format_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefix_string_, lhs_arena,
      &other->_impl_.prefix_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartsNumberFormatArchive, _impl_.number_of_non_space_decimal_placeholder_digits_)
      + sizeof(ChartsNumberFormatArchive::_impl_.number_of_non_space_decimal_placeholder_digits_)
      - PROTOBUF_FIELD_OFFSET(ChartsNumberFormatArchive, _impl_.interstitial_string_insertion_indexes_)>(
          reinterpret_cast<char*>(&_impl_.interstitial_string_insertion_indexes_),
          reinterpret_cast<char*>(&other->_impl_.interstitial_string_insertion_indexes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartsNumberFormatArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[5]);
}

// ===================================================================

class ChartStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultgridbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschchartinfodefaultintersetgap(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfodefaultinterbargap(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartinfodefaultshowborder(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultborderstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultborderstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Color& tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaulttitlecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartinfodefaultgridbackgroundopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartinfodefaultcombinelayers(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSD::ShadowArchive& tschchartinfodefaultbordershadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbordershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartinfodefaultborderopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartinfodefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartinfodefaultdeprecatedmainfontfamily(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartinfodefaultdeprecatedmainfontnamedsize(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSD::ShadowArchive& tschchartinfodefaultdeprecatedtrendlineequationshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultdeprecatedtrendlineequationshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::ShadowArchive& tschchartinfodefaultdeprecatedtrendlinersquaredshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfodefaultdeprecatedtrendlineequationopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSD::ShadowArchive& tschchartinfobardeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfobardeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::ShadowArchive& tschchartinfocolumndeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfocolumndeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::ShadowArchive& tschchartinfolinedeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfolinedeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::ShadowArchive& tschchartinfoareadeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoareadeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::ShadowArchive& tschchartinfopiedeprecated3dshadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfopiedeprecated3dshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefault3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfobar3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoline3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoarea3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfopie3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodefaultdeprecated3dbeveledges(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartinfopiedeprecated3dbeveledges(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartinfobardeprecated3dbeveledges(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartinfocolumndeprecated3dbeveledges(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartinfodefaultdeprecated3dbarshape(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartinfodefault3dchartopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::StyleArchive&
ChartStyleArchive::_Internal::super(const ChartStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultbackgroundfill_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultbackgroundstroke_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultgridbackgroundfill_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultborderstroke(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultborderstroke_;
}
const ::TSP::Color&
ChartStyleArchive::_Internal::tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaulttitlecolor_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbordershadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultbordershadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultdeprecatedtrendlineequationshadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultdeprecatedtrendlinersquaredshadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfobardeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfobardeprecated3dshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfocolumndeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfocolumndeprecated3dshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfolinedeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfolinedeprecated3dshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfoareadeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoareadeprecated3dshadow_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfopiedeprecated3dshadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfopiedeprecated3dshadow_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfocolumn3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfobar3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoline3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoarea3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfopie3dlightingpackage_;
}
void ChartStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundfill() {
  if (_impl_.tschchartinfodefaultbackgroundfill_ != nullptr) _impl_.tschchartinfodefaultbackgroundfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundstroke() {
  if (_impl_.tschchartinfodefaultbackgroundstroke_ != nullptr) _impl_.tschchartinfodefaultbackgroundstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundfill() {
  if (_impl_.tschchartinfodefaultgridbackgroundfill_ != nullptr) _impl_.tschchartinfodefaultgridbackgroundfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartStyleArchive::clear_tschchartinfodefaultborderstroke() {
  if (_impl_.tschchartinfodefaultborderstroke_ != nullptr) _impl_.tschchartinfodefaultborderstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartStyleArchive::clear_tschchartinfodefaulttitlecolor() {
  if (_impl_.tschchartinfodefaulttitlecolor_ != nullptr) _impl_.tschchartinfodefaulttitlecolor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbordershadow() {
  if (_impl_.tschchartinfodefaultbordershadow_ != nullptr) _impl_.tschchartinfodefaultbordershadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedtrendlineequationshadow() {
  if (_impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_ != nullptr) _impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartStyleArchive::clear_tschchartinfodefaultdeprecatedtrendlinersquaredshadow() {
  if (_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ != nullptr) _impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartStyleArchive::clear_tschchartinfobardeprecated3dshadow() {
  if (_impl_.tschchartinfobardeprecated3dshadow_ != nullptr) _impl_.tschchartinfobardeprecated3dshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartStyleArchive::clear_tschchartinfocolumndeprecated3dshadow() {
  if (_impl_.tschchartinfocolumndeprecated3dshadow_ != nullptr) _impl_.tschchartinfocolumndeprecated3dshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ChartStyleArchive::clear_tschchartinfolinedeprecated3dshadow() {
  if (_impl_.tschchartinfolinedeprecated3dshadow_ != nullptr) _impl_.tschchartinfolinedeprecated3dshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ChartStyleArchive::clear_tschchartinfoareadeprecated3dshadow() {
  if (_impl_.tschchartinfoareadeprecated3dshadow_ != nullptr) _impl_.tschchartinfoareadeprecated3dshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void ChartStyleArchive::clear_tschchartinfopiedeprecated3dshadow() {
  if (_impl_.tschchartinfopiedeprecated3dshadow_ != nullptr) _impl_.tschchartinfopiedeprecated3dshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ChartStyleArchive::clear_tschchartinfodefault3dlightingpackage() {
  if (_impl_.tschchartinfodefault3dlightingpackage_ != nullptr) _impl_.tschchartinfodefault3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void ChartStyleArchive::clear_tschchartinfocolumn3dlightingpackage() {
  if (_impl_.tschchartinfocolumn3dlightingpackage_ != nullptr) _impl_.tschchartinfocolumn3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void ChartStyleArchive::clear_tschchartinfobar3dlightingpackage() {
  if (_impl_.tschchartinfobar3dlightingpackage_ != nullptr) _impl_.tschchartinfobar3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void ChartStyleArchive::clear_tschchartinfoline3dlightingpackage() {
  if (_impl_.tschchartinfoline3dlightingpackage_ != nullptr) _impl_.tschchartinfoline3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void ChartStyleArchive::clear_tschchartinfoarea3dlightingpackage() {
  if (_impl_.tschchartinfoarea3dlightingpackage_ != nullptr) _impl_.tschchartinfoarea3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void ChartStyleArchive::clear_tschchartinfopie3dlightingpackage() {
  if (_impl_.tschchartinfopie3dlightingpackage_ != nullptr) _impl_.tschchartinfopie3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
ChartStyleArchive::ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartStyleArchive)
}
ChartStyleArchive::ChartStyleArchive(const ChartStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfodefaultdeprecatedmainfontfamily_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaultborderstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaulttitlecolor_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbordershadow_){nullptr}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_){nullptr}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_){nullptr}
    , decltype(_impl_.tschchartinfobardeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfocolumndeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfolinedeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfoareadeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfopiedeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfobar3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoline3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoarea3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfopie3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefaultintersetgap_){}
    , decltype(_impl_.tschchartinfodefaultinterbargap_){}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundopacity_){}
    , decltype(_impl_.tschchartinfodefaultborderopacity_){}
    , decltype(_impl_.tschchartinfodefaulttitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartinfodefaultdeprecatedmainfontnamedsize_){}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_){}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_){}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlineequationopacity_){}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredopacity_){}
    , decltype(_impl_.tschchartinfodefaultshowborder_){}
    , decltype(_impl_.tschchartinfodefaultcombinelayers_){}
    , decltype(_impl_.tschchartinfodefaultdeprecated3dbeveledges_){}
    , decltype(_impl_.tschchartinfopiedeprecated3dbeveledges_){}
    , decltype(_impl_.tschchartinfobardeprecated3dbeveledges_){}
    , decltype(_impl_.tschchartinfocolumndeprecated3dbeveledges_){}
    , decltype(_impl_.tschchartinfodefaultdeprecated3dbarshape_){}
    , decltype(_impl_.tschchartinfodefault3dchartopacity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartinfodefaultdeprecatedmainfontfamily_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfodefaultdeprecatedmainfontfamily_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartinfodefaultdeprecatedmainfontfamily()) {
    _this->_impl_.tschchartinfodefaultdeprecatedmainfontfamily_.Set(from._internal_tschchartinfodefaultdeprecatedmainfontfamily(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_tschchartinfodefaultbackgroundfill()) {
    _this->_impl_.tschchartinfodefaultbackgroundfill_ = new ::TSD::FillArchive(*from._impl_.tschchartinfodefaultbackgroundfill_);
  }
  if (from._internal_has_tschchartinfodefaultbackgroundstroke()) {
    _this->_impl_.tschchartinfodefaultbackgroundstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartinfodefaultbackgroundstroke_);
  }
  if (from._internal_has_tschchartinfodefaultgridbackgroundfill()) {
    _this->_impl_.tschchartinfodefaultgridbackgroundfill_ = new ::TSD::FillArchive(*from._impl_.tschchartinfodefaultgridbackgroundfill_);
  }
  if (from._internal_has_tschchartinfodefaultborderstroke()) {
    _this->_impl_.tschchartinfodefaultborderstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartinfodefaultborderstroke_);
  }
  if (from._internal_has_tschchartinfodefaulttitlecolor()) {
    _this->_impl_.tschchartinfodefaulttitlecolor_ = new ::TSP::Color(*from._impl_.tschchartinfodefaulttitlecolor_);
  }
  if (from._internal_has_tschchartinfodefaultbordershadow()) {
    _this->_impl_.tschchartinfodefaultbordershadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfodefaultbordershadow_);
  }
  if (from._internal_has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
    _this->_impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_);
  }
  if (from._internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
    _this->_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_);
  }
  if (from._internal_has_tschchartinfobardeprecated3dshadow()) {
    _this->_impl_.tschchartinfobardeprecated3dshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfobardeprecated3dshadow_);
  }
  if (from._internal_has_tschchartinfocolumndeprecated3dshadow()) {
    _this->_impl_.tschchartinfocolumndeprecated3dshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfocolumndeprecated3dshadow_);
  }
  if (from._internal_has_tschchartinfolinedeprecated3dshadow()) {
    _this->_impl_.tschchartinfolinedeprecated3dshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfolinedeprecated3dshadow_);
  }
  if (from._internal_has_tschchartinfoareadeprecated3dshadow()) {
    _this->_impl_.tschchartinfoareadeprecated3dshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfoareadeprecated3dshadow_);
  }
  if (from._internal_has_tschchartinfopiedeprecated3dshadow()) {
    _this->_impl_.tschchartinfopiedeprecated3dshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfopiedeprecated3dshadow_);
  }
  if (from._internal_has_tschchartinfodefault3dlightingpackage()) {
    _this->_impl_.tschchartinfodefault3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfodefault3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfocolumn3dlightingpackage()) {
    _this->_impl_.tschchartinfocolumn3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfocolumn3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfobar3dlightingpackage()) {
    _this->_impl_.tschchartinfobar3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfobar3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfoline3dlightingpackage()) {
    _this->_impl_.tschchartinfoline3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfoline3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfoarea3dlightingpackage()) {
    _this->_impl_.tschchartinfoarea3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfoarea3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfopie3dlightingpackage()) {
    _this->_impl_.tschchartinfopie3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfopie3dlightingpackage_);
  }
  ::memcpy(&_impl_.tschchartinfodefaultintersetgap_, &from._impl_.tschchartinfodefaultintersetgap_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dchartopacity_) -
    reinterpret_cast<char*>(&_impl_.tschchartinfodefaultintersetgap_)) + sizeof(_impl_.tschchartinfodefault3dchartopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartStyleArchive)
}

inline void ChartStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfodefaultdeprecatedmainfontfamily_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaultborderstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaulttitlecolor_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbordershadow_){nullptr}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_){nullptr}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_){nullptr}
    , decltype(_impl_.tschchartinfobardeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfocolumndeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfolinedeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfoareadeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfopiedeprecated3dshadow_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfobar3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoline3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoarea3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfopie3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefaultintersetgap_){0}
    , decltype(_impl_.tschchartinfodefaultinterbargap_){0}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundopacity_){0}
    , decltype(_impl_.tschchartinfodefaultborderopacity_){0}
    , decltype(_impl_.tschchartinfodefaulttitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartinfodefaultdeprecatedmainfontnamedsize_){0}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_){0}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_){0}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlineequationopacity_){0}
    , decltype(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredopacity_){0}
    , decltype(_impl_.tschchartinfodefaultshowborder_){false}
    , decltype(_impl_.tschchartinfodefaultcombinelayers_){false}
    , decltype(_impl_.tschchartinfodefaultdeprecated3dbeveledges_){false}
    , decltype(_impl_.tschchartinfopiedeprecated3dbeveledges_){false}
    , decltype(_impl_.tschchartinfobardeprecated3dbeveledges_){false}
    , decltype(_impl_.tschchartinfocolumndeprecated3dbeveledges_){false}
    , decltype(_impl_.tschchartinfodefaultdeprecated3dbarshape_){0}
    , decltype(_impl_.tschchartinfodefault3dchartopacity_){0}
  };
  _impl_.tschchartinfodefaultdeprecatedmainfontfamily_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfodefaultdeprecatedmainfontfamily_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartStyleArchive::~ChartStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartinfodefaultdeprecatedmainfontfamily_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultbackgroundfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultbackgroundstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultgridbackgroundfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultborderstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaulttitlecolor_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultbordershadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobardeprecated3dshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfocolumndeprecated3dshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfolinedeprecated3dshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoareadeprecated3dshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfopiedeprecated3dshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfocolumn3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobar3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoline3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoarea3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfopie3dlightingpackage_;
}

void ChartStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartinfodefaultdeprecatedmainfontfamily_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultbackgroundfill_ != nullptr);
      _impl_.tschchartinfodefaultbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultbackgroundstroke_ != nullptr);
      _impl_.tschchartinfodefaultbackgroundstroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultgridbackgroundfill_ != nullptr);
      _impl_.tschchartinfodefaultgridbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultborderstroke_ != nullptr);
      _impl_.tschchartinfodefaultborderstroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaulttitlecolor_ != nullptr);
      _impl_.tschchartinfodefaulttitlecolor_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultbordershadow_ != nullptr);
      _impl_.tschchartinfodefaultbordershadow_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_ != nullptr);
      _impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_ != nullptr);
      _impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobardeprecated3dshadow_ != nullptr);
      _impl_.tschchartinfobardeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartinfocolumndeprecated3dshadow_ != nullptr);
      _impl_.tschchartinfocolumndeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfolinedeprecated3dshadow_ != nullptr);
      _impl_.tschchartinfolinedeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoareadeprecated3dshadow_ != nullptr);
      _impl_.tschchartinfoareadeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfopiedeprecated3dshadow_ != nullptr);
      _impl_.tschchartinfopiedeprecated3dshadow_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3dlightingpackage_ != nullptr);
      _impl_.tschchartinfodefault3dlightingpackage_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfocolumn3dlightingpackage_ != nullptr);
      _impl_.tschchartinfocolumn3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobar3dlightingpackage_ != nullptr);
      _impl_.tschchartinfobar3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoline3dlightingpackage_ != nullptr);
      _impl_.tschchartinfoline3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoarea3dlightingpackage_ != nullptr);
      _impl_.tschchartinfoarea3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfopie3dlightingpackage_ != nullptr);
      _impl_.tschchartinfopie3dlightingpackage_->Clear();
    }
  }
  if (cached_has_bits & 0x00e00000u) {
    ::memset(&_impl_.tschchartinfodefaultintersetgap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultgridbackgroundopacity_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultintersetgap_)) + sizeof(_impl_.tschchartinfodefaultgridbackgroundopacity_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartinfodefaultborderopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultshowborder_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultborderopacity_)) + sizeof(_impl_.tschchartinfodefaultshowborder_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.tschchartinfodefaultcombinelayers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dchartopacity_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultcombinelayers_)) + sizeof(_impl_.tschchartinfodefault3dchartopacity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultgridbackgroundfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultintersetgap = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_tschchartinfodefaultintersetgap(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultintersetgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultinterbargap = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_tschchartinfodefaultinterbargap(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultinterbargap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowborder = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartinfodefaultshowborder(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultshowborder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultborderstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaulttitlecolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultgridbackgroundopacity = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartinfodefaultgridbackgroundopacity(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultgridbackgroundopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultcombinelayers = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartinfodefaultcombinelayers(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultcombinelayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbordershadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultborderopacity = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_tschchartinfodefaultborderopacity(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultborderopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartinfodefaulttitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartinfodefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartinfodefaultdeprecatedmainfontfamily = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_tschchartinfodefaultdeprecatedmainfontfamily();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontfamily");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecatedmainfontnamedsize = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedmainfontnamedsize(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultdeprecatedmainfontnamedsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedtrendlineequationopacity(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultdeprecatedtrendlineequationopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultdeprecatedtrendlinersquaredopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobardeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
      case 309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumndeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfolinedeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoareadeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
      case 312:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopiedeprecated3dshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
      case 313:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
      case 314:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
      case 315:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
      case 316:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
      case 317:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
      case 318:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
      case 326:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartinfodefaultdeprecated3dbeveledges(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultdeprecated3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
      case 327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartinfopiedeprecated3dbeveledges(&_impl_._has_bits_);
          _impl_.tschchartinfopiedeprecated3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfobardeprecated3dbeveledges = 328;
      case 328:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartinfobardeprecated3dbeveledges(&_impl_._has_bits_);
          _impl_.tschchartinfobardeprecated3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
      case 329:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartinfocolumndeprecated3dbeveledges(&_impl_._has_bits_);
          _impl_.tschchartinfocolumndeprecated3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
      case 330:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartinfodefaultdeprecated3dbarshape(&_impl_._has_bits_);
          _impl_.tschchartinfodefaultdeprecated3dbarshape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefault3dchartopacity = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_tschchartinfodefault3dchartopacity(&_impl_._has_bits_);
          _impl_.tschchartinfodefault3dchartopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tschchartinfodefaultbackgroundfill(this),
        _Internal::tschchartinfodefaultbackgroundfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartinfodefaultbackgroundstroke(this),
        _Internal::tschchartinfodefaultbackgroundstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tschchartinfodefaultgridbackgroundfill(this),
        _Internal::tschchartinfodefaultgridbackgroundfill(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultintersetgap = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_tschchartinfodefaultintersetgap(), target);
  }

  // optional float tschchartinfodefaultinterbargap = 14;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_tschchartinfodefaultinterbargap(), target);
  }

  // optional bool tschchartinfodefaultshowborder = 15;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_tschchartinfodefaultshowborder(), target);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::tschchartinfodefaultborderstroke(this),
        _Internal::tschchartinfodefaultborderstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::tschchartinfodefaulttitlecolor(this),
        _Internal::tschchartinfodefaulttitlecolor(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultgridbackgroundopacity = 19;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartinfodefaultgridbackgroundopacity(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartinfodefaultcombinelayers = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_tschchartinfodefaultcombinelayers(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::tschchartinfodefaultbordershadow(this),
        _Internal::tschchartinfodefaultbordershadow(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultborderopacity = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_tschchartinfodefaultborderopacity(), target);
  }

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartinfodefaulttitleparagraphstyleindex(), target);
  }

  // optional string tschchartinfodefaultdeprecatedmainfontfamily = 24;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartinfodefaultdeprecatedmainfontfamily().data(), static_cast<int>(this->_internal_tschchartinfodefaultdeprecatedmainfontfamily().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartStyleArchive.tschchartinfodefaultdeprecatedmainfontfamily");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_tschchartinfodefaultdeprecatedmainfontfamily(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedmainfontnamedsize = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartinfodefaultdeprecatedmainfontnamedsize(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::tschchartinfodefaultdeprecatedtrendlineequationshadow(this),
        _Internal::tschchartinfodefaultdeprecatedtrendlineequationshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::tschchartinfodefaultdeprecatedtrendlinersquaredshadow(this),
        _Internal::tschchartinfodefaultdeprecatedtrendlinersquaredshadow(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_tschchartinfodefaultdeprecatedtrendlineequationopacity(), target);
  }

  // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_tschchartinfodefaultdeprecatedtrendlinersquaredopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(308, _Internal::tschchartinfobardeprecated3dshadow(this),
        _Internal::tschchartinfobardeprecated3dshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(309, _Internal::tschchartinfocolumndeprecated3dshadow(this),
        _Internal::tschchartinfocolumndeprecated3dshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(310, _Internal::tschchartinfolinedeprecated3dshadow(this),
        _Internal::tschchartinfolinedeprecated3dshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(311, _Internal::tschchartinfoareadeprecated3dshadow(this),
        _Internal::tschchartinfoareadeprecated3dshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(312, _Internal::tschchartinfopiedeprecated3dshadow(this),
        _Internal::tschchartinfopiedeprecated3dshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(313, _Internal::tschchartinfodefault3dlightingpackage(this),
        _Internal::tschchartinfodefault3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(314, _Internal::tschchartinfocolumn3dlightingpackage(this),
        _Internal::tschchartinfocolumn3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(315, _Internal::tschchartinfobar3dlightingpackage(this),
        _Internal::tschchartinfobar3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(316, _Internal::tschchartinfoline3dlightingpackage(this),
        _Internal::tschchartinfoline3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(317, _Internal::tschchartinfoarea3dlightingpackage(this),
        _Internal::tschchartinfoarea3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(318, _Internal::tschchartinfopie3dlightingpackage(this),
        _Internal::tschchartinfopie3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(326, this->_internal_tschchartinfodefaultdeprecated3dbeveledges(), target);
  }

  // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(327, this->_internal_tschchartinfopiedeprecated3dbeveledges(), target);
  }

  // optional bool tschchartinfobardeprecated3dbeveledges = 328;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(328, this->_internal_tschchartinfobardeprecated3dbeveledges(), target);
  }

  // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(329, this->_internal_tschchartinfocolumndeprecated3dbeveledges(), target);
  }

  // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(330, this->_internal_tschchartinfodefaultdeprecated3dbarshape(), target);
  }

  // optional float tschchartinfodefault3dchartopacity = 335;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(335, this->_internal_tschchartinfodefault3dchartopacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartStyleArchive)
  return target;
}

size_t ChartStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tschchartinfodefaultdeprecatedmainfontfamily = 24;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tschchartinfodefaultdeprecatedmainfontfamily());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultbackgroundfill_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultbackgroundstroke_);
    }

    // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultgridbackgroundfill_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultborderstroke_);
    }

    // optional .TSP.Color tschchartinfodefaulttitlecolor = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaulttitlecolor_);
    }

    // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultbordershadow_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlineequationshadow = 32;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfodefaultdeprecatedtrendlinersquaredshadow = 33;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfobardeprecated3dshadow = 308;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobardeprecated3dshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfocolumndeprecated3dshadow = 309;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfocolumndeprecated3dshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfolinedeprecated3dshadow = 310;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfolinedeprecated3dshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfoareadeprecated3dshadow = 311;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoareadeprecated3dshadow_);
    }

    // optional .TSD.ShadowArchive tschchartinfopiedeprecated3dshadow = 312;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfopiedeprecated3dshadow_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 313;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3dlightingpackage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 314;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfocolumn3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 315;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobar3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 316;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoline3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 317;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoarea3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 318;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfopie3dlightingpackage_);
    }

    // optional float tschchartinfodefaultintersetgap = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultinterbargap = 14;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultgridbackgroundopacity = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartinfodefaultborderopacity = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartinfodefaultdeprecatedmainfontnamedsize = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecatedmainfontnamedsize());
    }

    // optional int32 tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex());
    }

    // optional int32 tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex());
    }

    // optional float tschchartinfodefaultdeprecatedtrendlineequationopacity = 34;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfodefaultdeprecatedtrendlinersquaredopacity = 35;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfodefaultshowborder = 15;
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool tschchartinfodefaultcombinelayers = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultdeprecated3dbeveledges = 326;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfopiedeprecated3dbeveledges = 327;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfobardeprecated3dbeveledges = 328;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfocolumndeprecated3dbeveledges = 329;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfodefaultdeprecated3dbarshape = 330;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecated3dbarshape());
    }

    // optional float tschchartinfodefault3dchartopacity = 335;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartStyleArchive::GetClassData() const { return &_class_data_; }


void ChartStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartinfodefaultdeprecatedmainfontfamily(from._internal_tschchartinfodefaultdeprecatedmainfontfamily());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartinfodefaultbackgroundfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartinfodefaultbackgroundfill());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartinfodefaultbackgroundstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartinfodefaultbackgroundstroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartinfodefaultgridbackgroundfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartinfodefaultgridbackgroundfill());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartinfodefaultborderstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartinfodefaultborderstroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartinfodefaulttitlecolor()->::TSP::Color::MergeFrom(
          from._internal_tschchartinfodefaulttitlecolor());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartinfodefaultbordershadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfodefaultbordershadow());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartinfodefaultdeprecatedtrendlineequationshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfodefaultdeprecatedtrendlineequationshadow());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfodefaultdeprecatedtrendlinersquaredshadow());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartinfobardeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfobardeprecated3dshadow());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartinfocolumndeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfocolumndeprecated3dshadow());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartinfolinedeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfolinedeprecated3dshadow());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_tschchartinfoareadeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfoareadeprecated3dshadow());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_tschchartinfopiedeprecated3dshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfopiedeprecated3dshadow());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_tschchartinfodefault3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfodefault3dlightingpackage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_tschchartinfocolumn3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfocolumn3dlightingpackage());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_tschchartinfobar3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfobar3dlightingpackage());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_tschchartinfoline3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfoline3dlightingpackage());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_tschchartinfoarea3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfoarea3dlightingpackage());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_tschchartinfopie3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfopie3dlightingpackage());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartinfodefaultintersetgap_ = from._impl_.tschchartinfodefaultintersetgap_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartinfodefaultinterbargap_ = from._impl_.tschchartinfodefaultinterbargap_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartinfodefaultgridbackgroundopacity_ = from._impl_.tschchartinfodefaultgridbackgroundopacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartinfodefaultborderopacity_ = from._impl_.tschchartinfodefaultborderopacity_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartinfodefaulttitleparagraphstyleindex_ = from._impl_.tschchartinfodefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartinfodefaultdeprecatedmainfontnamedsize_ = from._impl_.tschchartinfodefaultdeprecatedmainfontnamedsize_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_ = from._impl_.tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_ = from._impl_.tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartinfodefaultdeprecatedtrendlineequationopacity_ = from._impl_.tschchartinfodefaultdeprecatedtrendlineequationopacity_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredopacity_ = from._impl_.tschchartinfodefaultdeprecatedtrendlinersquaredopacity_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartinfodefaultshowborder_ = from._impl_.tschchartinfodefaultshowborder_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartinfodefaultcombinelayers_ = from._impl_.tschchartinfodefaultcombinelayers_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartinfodefaultdeprecated3dbeveledges_ = from._impl_.tschchartinfodefaultdeprecated3dbeveledges_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartinfopiedeprecated3dbeveledges_ = from._impl_.tschchartinfopiedeprecated3dbeveledges_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartinfobardeprecated3dbeveledges_ = from._impl_.tschchartinfobardeprecated3dbeveledges_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartinfocolumndeprecated3dbeveledges_ = from._impl_.tschchartinfocolumndeprecated3dbeveledges_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartinfodefaultdeprecated3dbarshape_ = from._impl_.tschchartinfodefaultdeprecated3dbarshape_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartinfodefault3dchartopacity_ = from._impl_.tschchartinfodefault3dchartopacity_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartStyleArchive::CopyFrom(const ChartStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundfill()) {
    if (!_impl_.tschchartinfodefaultbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundstroke()) {
    if (!_impl_.tschchartinfodefaultbackgroundstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultgridbackgroundfill()) {
    if (!_impl_.tschchartinfodefaultgridbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultborderstroke()) {
    if (!_impl_.tschchartinfodefaultborderstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaulttitlecolor()) {
    if (!_impl_.tschchartinfodefaulttitlecolor_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbordershadow()) {
    if (!_impl_.tschchartinfodefaultbordershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultdeprecatedtrendlineequationshadow()) {
    if (!_impl_.tschchartinfodefaultdeprecatedtrendlineequationshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultdeprecatedtrendlinersquaredshadow()) {
    if (!_impl_.tschchartinfodefaultdeprecatedtrendlinersquaredshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobardeprecated3dshadow()) {
    if (!_impl_.tschchartinfobardeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumndeprecated3dshadow()) {
    if (!_impl_.tschchartinfocolumndeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfolinedeprecated3dshadow()) {
    if (!_impl_.tschchartinfolinedeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoareadeprecated3dshadow()) {
    if (!_impl_.tschchartinfoareadeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopiedeprecated3dshadow()) {
    if (!_impl_.tschchartinfopiedeprecated3dshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dlightingpackage()) {
    if (!_impl_.tschchartinfodefault3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dlightingpackage()) {
    if (!_impl_.tschchartinfocolumn3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dlightingpackage()) {
    if (!_impl_.tschchartinfobar3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dlightingpackage()) {
    if (!_impl_.tschchartinfoline3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoarea3dlightingpackage()) {
    if (!_impl_.tschchartinfoarea3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dlightingpackage()) {
    if (!_impl_.tschchartinfopie3dlightingpackage_->IsInitialized()) return false;
  }
  return true;
}

void ChartStyleArchive::InternalSwap(ChartStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartinfodefaultdeprecatedmainfontfamily_, lhs_arena,
      &other->_impl_.tschchartinfodefaultdeprecatedmainfontfamily_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartStyleArchive, _impl_.tschchartinfodefault3dchartopacity_)
      + sizeof(ChartStyleArchive::_impl_.tschchartinfodefault3dchartopacity_)
      - PROTOBUF_FIELD_OFFSET(ChartStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[6]);
}

// ===================================================================

class ChartNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartNonStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartNonStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschchartinfodefaulttitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartinfodefaultshowlegend(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartinfodefaultpiestartangle(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartinfodefaultshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartinfodefaultdeprecatedagainmainfontnamedsize(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3drotation(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3drotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfobar3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfobar3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoline3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoline3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoarea3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoarea3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfopie3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfopie3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dviewport(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefaultdeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefaultdeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumndeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfocolumndeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobardeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfobardeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfolinedeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfolinedeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoareadeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoareadeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopiedeprecated3dlightingpackage(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfopiedeprecated3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartinfodefaultskiphiddendata(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodefault3dbeveledges(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfodefault3dbarshape(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartinfodefault3dintersetdepthgap(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::StyleArchive&
ChartNonStyleArchive::_Internal::super(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3drotation(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3drotation_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfocolumn3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfobar3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfobar3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoline3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoline3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoarea3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoarea3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfopie3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfopie3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3dviewport_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefaultdeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultdeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfocolumndeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfocolumndeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfobardeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfobardeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfolinedeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfolinedeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfoareadeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoareadeprecated3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartNonStyleArchive::_Internal::tschchartinfopiedeprecated3dlightingpackage(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfopiedeprecated3dlightingpackage_;
}
void ChartNonStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3drotation() {
  if (_impl_.tschchartinfodefault3drotation_ != nullptr) _impl_.tschchartinfodefault3drotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dscale() {
  if (_impl_.tschchartinfodefault3dscale_ != nullptr) _impl_.tschchartinfodefault3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartNonStyleArchive::clear_tschchartinfocolumn3dscale() {
  if (_impl_.tschchartinfocolumn3dscale_ != nullptr) _impl_.tschchartinfocolumn3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartNonStyleArchive::clear_tschchartinfobar3dscale() {
  if (_impl_.tschchartinfobar3dscale_ != nullptr) _impl_.tschchartinfobar3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartNonStyleArchive::clear_tschchartinfoline3dscale() {
  if (_impl_.tschchartinfoline3dscale_ != nullptr) _impl_.tschchartinfoline3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartNonStyleArchive::clear_tschchartinfoarea3dscale() {
  if (_impl_.tschchartinfoarea3dscale_ != nullptr) _impl_.tschchartinfoarea3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartNonStyleArchive::clear_tschchartinfopie3dscale() {
  if (_impl_.tschchartinfopie3dscale_ != nullptr) _impl_.tschchartinfopie3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dviewport() {
  if (_impl_.tschchartinfodefault3dviewport_ != nullptr) _impl_.tschchartinfodefault3dviewport_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartNonStyleArchive::clear_tschchartinfodefaultdeprecated3dlightingpackage() {
  if (_impl_.tschchartinfodefaultdeprecated3dlightingpackage_ != nullptr) _impl_.tschchartinfodefaultdeprecated3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartNonStyleArchive::clear_tschchartinfocolumndeprecated3dlightingpackage() {
  if (_impl_.tschchartinfocolumndeprecated3dlightingpackage_ != nullptr) _impl_.tschchartinfocolumndeprecated3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ChartNonStyleArchive::clear_tschchartinfobardeprecated3dlightingpackage() {
  if (_impl_.tschchartinfobardeprecated3dlightingpackage_ != nullptr) _impl_.tschchartinfobardeprecated3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ChartNonStyleArchive::clear_tschchartinfolinedeprecated3dlightingpackage() {
  if (_impl_.tschchartinfolinedeprecated3dlightingpackage_ != nullptr) _impl_.tschchartinfolinedeprecated3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void ChartNonStyleArchive::clear_tschchartinfoareadeprecated3dlightingpackage() {
  if (_impl_.tschchartinfoareadeprecated3dlightingpackage_ != nullptr) _impl_.tschchartinfoareadeprecated3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ChartNonStyleArchive::clear_tschchartinfopiedeprecated3dlightingpackage() {
  if (_impl_.tschchartinfopiedeprecated3dlightingpackage_ != nullptr) _impl_.tschchartinfopiedeprecated3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
ChartNonStyleArchive::ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartNonStyleArchive)
}
ChartNonStyleArchive::ChartNonStyleArchive(const ChartNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfodefaulttitle_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartinfodefault3drotation_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dscale_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dscale_){nullptr}
    , decltype(_impl_.tschchartinfobar3dscale_){nullptr}
    , decltype(_impl_.tschchartinfoline3dscale_){nullptr}
    , decltype(_impl_.tschchartinfoarea3dscale_){nullptr}
    , decltype(_impl_.tschchartinfopie3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dviewport_){nullptr}
    , decltype(_impl_.tschchartinfodefaultdeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfocolumndeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfobardeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfolinedeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoareadeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfopiedeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefaultpiestartangle_){}
    , decltype(_impl_.tschchartinfodefaultdeprecatedagainmainfontnamedsize_){}
    , decltype(_impl_.tschchartinfodefaultshowlegend_){}
    , decltype(_impl_.tschchartinfodefaultshowtitle_){}
    , decltype(_impl_.tschchartinfodefaultskiphiddendata_){}
    , decltype(_impl_.tschchartinfodefault3dbeveledges_){}
    , decltype(_impl_.tschchartinfodefault3dintersetdepthgap_){}
    , decltype(_impl_.tschchartinfodefault3dbarshape_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartinfodefaulttitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfodefaulttitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartinfodefaulttitle()) {
    _this->_impl_.tschchartinfodefaulttitle_.Set(from._internal_tschchartinfodefaulttitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_tschchartinfodefault3drotation()) {
    _this->_impl_.tschchartinfodefault3drotation_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfodefault3drotation_);
  }
  if (from._internal_has_tschchartinfodefault3dscale()) {
    _this->_impl_.tschchartinfodefault3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfodefault3dscale_);
  }
  if (from._internal_has_tschchartinfocolumn3dscale()) {
    _this->_impl_.tschchartinfocolumn3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfocolumn3dscale_);
  }
  if (from._internal_has_tschchartinfobar3dscale()) {
    _this->_impl_.tschchartinfobar3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfobar3dscale_);
  }
  if (from._internal_has_tschchartinfoline3dscale()) {
    _this->_impl_.tschchartinfoline3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfoline3dscale_);
  }
  if (from._internal_has_tschchartinfoarea3dscale()) {
    _this->_impl_.tschchartinfoarea3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfoarea3dscale_);
  }
  if (from._internal_has_tschchartinfopie3dscale()) {
    _this->_impl_.tschchartinfopie3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfopie3dscale_);
  }
  if (from._internal_has_tschchartinfodefault3dviewport()) {
    _this->_impl_.tschchartinfodefault3dviewport_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfodefault3dviewport_);
  }
  if (from._internal_has_tschchartinfodefaultdeprecated3dlightingpackage()) {
    _this->_impl_.tschchartinfodefaultdeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfodefaultdeprecated3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfocolumndeprecated3dlightingpackage()) {
    _this->_impl_.tschchartinfocolumndeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfocolumndeprecated3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfobardeprecated3dlightingpackage()) {
    _this->_impl_.tschchartinfobardeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfobardeprecated3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfolinedeprecated3dlightingpackage()) {
    _this->_impl_.tschchartinfolinedeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfolinedeprecated3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfoareadeprecated3dlightingpackage()) {
    _this->_impl_.tschchartinfoareadeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfoareadeprecated3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfopiedeprecated3dlightingpackage()) {
    _this->_impl_.tschchartinfopiedeprecated3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfopiedeprecated3dlightingpackage_);
  }
  ::memcpy(&_impl_.tschchartinfodefaultpiestartangle_, &from._impl_.tschchartinfodefaultpiestartangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dbarshape_) -
    reinterpret_cast<char*>(&_impl_.tschchartinfodefaultpiestartangle_)) + sizeof(_impl_.tschchartinfodefault3dbarshape_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartNonStyleArchive)
}

inline void ChartNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfodefaulttitle_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartinfodefault3drotation_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dscale_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dscale_){nullptr}
    , decltype(_impl_.tschchartinfobar3dscale_){nullptr}
    , decltype(_impl_.tschchartinfoline3dscale_){nullptr}
    , decltype(_impl_.tschchartinfoarea3dscale_){nullptr}
    , decltype(_impl_.tschchartinfopie3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dviewport_){nullptr}
    , decltype(_impl_.tschchartinfodefaultdeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfocolumndeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfobardeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfolinedeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoareadeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfopiedeprecated3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefaultpiestartangle_){0}
    , decltype(_impl_.tschchartinfodefaultdeprecatedagainmainfontnamedsize_){0}
    , decltype(_impl_.tschchartinfodefaultshowlegend_){false}
    , decltype(_impl_.tschchartinfodefaultshowtitle_){false}
    , decltype(_impl_.tschchartinfodefaultskiphiddendata_){false}
    , decltype(_impl_.tschchartinfodefault3dbeveledges_){false}
    , decltype(_impl_.tschchartinfodefault3dintersetdepthgap_){0}
    , decltype(_impl_.tschchartinfodefault3dbarshape_){0}
  };
  _impl_.tschchartinfodefaulttitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfodefaulttitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartNonStyleArchive::~ChartNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartinfodefaulttitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3drotation_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfocolumn3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobar3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoline3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoarea3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfopie3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3dviewport_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultdeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfocolumndeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobardeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfolinedeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoareadeprecated3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfopiedeprecated3dlightingpackage_;
}

void ChartNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartinfodefaulttitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3drotation_ != nullptr);
      _impl_.tschchartinfodefault3drotation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3dscale_ != nullptr);
      _impl_.tschchartinfodefault3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartinfocolumn3dscale_ != nullptr);
      _impl_.tschchartinfocolumn3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobar3dscale_ != nullptr);
      _impl_.tschchartinfobar3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoline3dscale_ != nullptr);
      _impl_.tschchartinfoline3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoarea3dscale_ != nullptr);
      _impl_.tschchartinfoarea3dscale_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartinfopie3dscale_ != nullptr);
      _impl_.tschchartinfopie3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3dviewport_ != nullptr);
      _impl_.tschchartinfodefault3dviewport_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultdeprecated3dlightingpackage_ != nullptr);
      _impl_.tschchartinfodefaultdeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartinfocolumndeprecated3dlightingpackage_ != nullptr);
      _impl_.tschchartinfocolumndeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobardeprecated3dlightingpackage_ != nullptr);
      _impl_.tschchartinfobardeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfolinedeprecated3dlightingpackage_ != nullptr);
      _impl_.tschchartinfolinedeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoareadeprecated3dlightingpackage_ != nullptr);
      _impl_.tschchartinfoareadeprecated3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.tschchartinfopiedeprecated3dlightingpackage_ != nullptr);
      _impl_.tschchartinfopiedeprecated3dlightingpackage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartinfodefaultpiestartangle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dbarshape_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultpiestartangle_)) + sizeof(_impl_.tschchartinfodefault3dbarshape_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartinfodefaulttitle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_tschchartinfodefaulttitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaulttitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowlegend = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartinfodefaultshowlegend(&has_bits);
          _impl_.tschchartinfodefaultshowlegend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultpiestartangle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_tschchartinfodefaultpiestartangle(&has_bits);
          _impl_.tschchartinfodefaultpiestartangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowtitle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartinfodefaultshowtitle(&has_bits);
          _impl_.tschchartinfodefaultshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedagainmainfontnamedsize(&has_bits);
          _impl_.tschchartinfodefaultdeprecatedagainmainfontnamedsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3drotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
      case 313:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dviewport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultdeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumndeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobardeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
      case 323:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfolinedeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
      case 324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoareadeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
      case 325:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopiedeprecated3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultskiphiddendata = 326;
      case 326:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartinfodefaultskiphiddendata(&has_bits);
          _impl_.tschchartinfodefaultskiphiddendata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefault3dbeveledges = 327;
      case 327:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartinfodefault3dbeveledges(&has_bits);
          _impl_.tschchartinfodefault3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefault3dintersetdepthgap = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_tschchartinfodefault3dintersetdepthgap(&has_bits);
          _impl_.tschchartinfodefault3dintersetdepthgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefault3dbarshape = 336;
      case 336:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartinfodefault3dbarshape(&has_bits);
          _impl_.tschchartinfodefault3dbarshape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string tschchartinfodefaulttitle = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartinfodefaulttitle().data(), static_cast<int>(this->_internal_tschchartinfodefaulttitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartNonStyleArchive.tschchartinfodefaulttitle");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_tschchartinfodefaulttitle(), target);
  }

  // optional bool tschchartinfodefaultshowlegend = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_tschchartinfodefaultshowlegend(), target);
  }

  // optional float tschchartinfodefaultpiestartangle = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_tschchartinfodefaultpiestartangle(), target);
  }

  // optional bool tschchartinfodefaultshowtitle = 13;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_tschchartinfodefaultshowtitle(), target);
  }

  // optional int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartinfodefaultdeprecatedagainmainfontnamedsize(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(300, _Internal::tschchartinfodefault3drotation(this),
        _Internal::tschchartinfodefault3drotation(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(301, _Internal::tschchartinfodefault3dscale(this),
        _Internal::tschchartinfodefault3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(302, _Internal::tschchartinfocolumn3dscale(this),
        _Internal::tschchartinfocolumn3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(303, _Internal::tschchartinfobar3dscale(this),
        _Internal::tschchartinfobar3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(304, _Internal::tschchartinfoline3dscale(this),
        _Internal::tschchartinfoline3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(305, _Internal::tschchartinfoarea3dscale(this),
        _Internal::tschchartinfoarea3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(306, _Internal::tschchartinfopie3dscale(this),
        _Internal::tschchartinfopie3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(313, _Internal::tschchartinfodefault3dviewport(this),
        _Internal::tschchartinfodefault3dviewport(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(320, _Internal::tschchartinfodefaultdeprecated3dlightingpackage(this),
        _Internal::tschchartinfodefaultdeprecated3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(321, _Internal::tschchartinfocolumndeprecated3dlightingpackage(this),
        _Internal::tschchartinfocolumndeprecated3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(322, _Internal::tschchartinfobardeprecated3dlightingpackage(this),
        _Internal::tschchartinfobardeprecated3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(323, _Internal::tschchartinfolinedeprecated3dlightingpackage(this),
        _Internal::tschchartinfolinedeprecated3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(324, _Internal::tschchartinfoareadeprecated3dlightingpackage(this),
        _Internal::tschchartinfoareadeprecated3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(325, _Internal::tschchartinfopiedeprecated3dlightingpackage(this),
        _Internal::tschchartinfopiedeprecated3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional bool tschchartinfodefaultskiphiddendata = 326;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(326, this->_internal_tschchartinfodefaultskiphiddendata(), target);
  }

  // optional bool tschchartinfodefault3dbeveledges = 327;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(327, this->_internal_tschchartinfodefault3dbeveledges(), target);
  }

  // optional float tschchartinfodefault3dintersetdepthgap = 331;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(331, this->_internal_tschchartinfodefault3dintersetdepthgap(), target);
  }

  // optional int32 tschchartinfodefault3dbarshape = 336;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(336, this->_internal_tschchartinfodefault3dbarshape(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartNonStyleArchive)
  return target;
}

size_t ChartNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartNonStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tschchartinfodefaulttitle = 10;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tschchartinfodefaulttitle());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 300;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3drotation_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 301;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 302;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfocolumn3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 303;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobar3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 304;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoline3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 305;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoarea3dscale_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 306;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfopie3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 313;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3dviewport_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefaultdeprecated3dlightingpackage = 320;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultdeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumndeprecated3dlightingpackage = 321;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfocolumndeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobardeprecated3dlightingpackage = 322;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobardeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfolinedeprecated3dlightingpackage = 323;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfolinedeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoareadeprecated3dlightingpackage = 324;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoareadeprecated3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopiedeprecated3dlightingpackage = 325;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfopiedeprecated3dlightingpackage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartinfodefaultpiestartangle = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartinfodefaultdeprecatedagainmainfontnamedsize = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdeprecatedagainmainfontnamedsize());
    }

    // optional bool tschchartinfodefaultshowlegend = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodefaultshowtitle = 13;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodefaultskiphiddendata = 326;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefault3dbeveledges = 327;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartinfodefault3dintersetdepthgap = 331;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodefault3dbarshape = 336;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefault3dbarshape());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartNonStyleArchive::GetClassData() const { return &_class_data_; }


void ChartNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartinfodefaulttitle(from._internal_tschchartinfodefaulttitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartinfodefault3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfodefault3drotation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartinfodefault3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfodefault3dscale());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartinfocolumn3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfocolumn3dscale());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartinfobar3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfobar3dscale());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartinfoline3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfoline3dscale());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartinfoarea3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfoarea3dscale());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartinfopie3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfopie3dscale());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartinfodefault3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfodefault3dviewport());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartinfodefaultdeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfodefaultdeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartinfocolumndeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfocolumndeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartinfobardeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfobardeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_tschchartinfolinedeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfolinedeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_tschchartinfoareadeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfoareadeprecated3dlightingpackage());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_tschchartinfopiedeprecated3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfopiedeprecated3dlightingpackage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartinfodefaultpiestartangle_ = from._impl_.tschchartinfodefaultpiestartangle_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartinfodefaultdeprecatedagainmainfontnamedsize_ = from._impl_.tschchartinfodefaultdeprecatedagainmainfontnamedsize_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartinfodefaultshowlegend_ = from._impl_.tschchartinfodefaultshowlegend_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartinfodefaultshowtitle_ = from._impl_.tschchartinfodefaultshowtitle_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartinfodefaultskiphiddendata_ = from._impl_.tschchartinfodefaultskiphiddendata_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartinfodefault3dbeveledges_ = from._impl_.tschchartinfodefault3dbeveledges_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartinfodefault3dintersetdepthgap_ = from._impl_.tschchartinfodefault3dintersetdepthgap_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartinfodefault3dbarshape_ = from._impl_.tschchartinfodefault3dbarshape_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartNonStyleArchive::CopyFrom(const ChartNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartNonStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3drotation()) {
    if (!_impl_.tschchartinfodefault3drotation_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dscale()) {
    if (!_impl_.tschchartinfodefault3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dscale()) {
    if (!_impl_.tschchartinfocolumn3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dscale()) {
    if (!_impl_.tschchartinfobar3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dscale()) {
    if (!_impl_.tschchartinfoline3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoarea3dscale()) {
    if (!_impl_.tschchartinfoarea3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dscale()) {
    if (!_impl_.tschchartinfopie3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dviewport()) {
    if (!_impl_.tschchartinfodefault3dviewport_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultdeprecated3dlightingpackage()) {
    if (!_impl_.tschchartinfodefaultdeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumndeprecated3dlightingpackage()) {
    if (!_impl_.tschchartinfocolumndeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobardeprecated3dlightingpackage()) {
    if (!_impl_.tschchartinfobardeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfolinedeprecated3dlightingpackage()) {
    if (!_impl_.tschchartinfolinedeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoareadeprecated3dlightingpackage()) {
    if (!_impl_.tschchartinfoareadeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopiedeprecated3dlightingpackage()) {
    if (!_impl_.tschchartinfopiedeprecated3dlightingpackage_->IsInitialized()) return false;
  }
  return true;
}

void ChartNonStyleArchive::InternalSwap(ChartNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartinfodefaulttitle_, lhs_arena,
      &other->_impl_.tschchartinfodefaulttitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, _impl_.tschchartinfodefault3dbarshape_)
      + sizeof(ChartNonStyleArchive::_impl_.tschchartinfodefault3dbarshape_)
      - PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[7]);
}

// ===================================================================

class LegendStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const LegendStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::FillArchive& tschlegendmodeldefaultfill(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschlegendmodeldefaultstroke(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschlegendmodeldefaultshadow(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschlegendmodeldefaultopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschlegendmodeldefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
LegendStyleArchive::_Internal::super(const LegendStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::FillArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultfill(const LegendStyleArchive* msg) {
  return *msg->_impl_.tschlegendmodeldefaultfill_;
}
const ::TSD::StrokeArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultstroke(const LegendStyleArchive* msg) {
  return *msg->_impl_.tschlegendmodeldefaultstroke_;
}
const ::TSD::ShadowArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultshadow(const LegendStyleArchive* msg) {
  return *msg->_impl_.tschlegendmodeldefaultshadow_;
}
void LegendStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultfill() {
  if (_impl_.tschlegendmodeldefaultfill_ != nullptr) _impl_.tschlegendmodeldefaultfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultstroke() {
  if (_impl_.tschlegendmodeldefaultstroke_ != nullptr) _impl_.tschlegendmodeldefaultstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultshadow() {
  if (_impl_.tschlegendmodeldefaultshadow_ != nullptr) _impl_.tschlegendmodeldefaultshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
LegendStyleArchive::LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.LegendStyleArchive)
}
LegendStyleArchive::LegendStyleArchive(const LegendStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LegendStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultfill_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultstroke_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultshadow_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultopacity_){}
    , decltype(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_tschlegendmodeldefaultfill()) {
    _this->_impl_.tschlegendmodeldefaultfill_ = new ::TSD::FillArchive(*from._impl_.tschlegendmodeldefaultfill_);
  }
  if (from._internal_has_tschlegendmodeldefaultstroke()) {
    _this->_impl_.tschlegendmodeldefaultstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschlegendmodeldefaultstroke_);
  }
  if (from._internal_has_tschlegendmodeldefaultshadow()) {
    _this->_impl_.tschlegendmodeldefaultshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschlegendmodeldefaultshadow_);
  }
  ::memcpy(&_impl_.tschlegendmodeldefaultopacity_, &from._impl_.tschlegendmodeldefaultopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultopacity_)) + sizeof(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.LegendStyleArchive)
}

inline void LegendStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultfill_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultstroke_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultshadow_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultopacity_){0}
    , decltype(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_){0}
  };
}

LegendStyleArchive::~LegendStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.LegendStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LegendStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tschlegendmodeldefaultfill_;
  if (this != internal_default_instance()) delete _impl_.tschlegendmodeldefaultstroke_;
  if (this != internal_default_instance()) delete _impl_.tschlegendmodeldefaultshadow_;
}

void LegendStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LegendStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.LegendStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodeldefaultfill_ != nullptr);
      _impl_.tschlegendmodeldefaultfill_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodeldefaultstroke_ != nullptr);
      _impl_.tschlegendmodeldefaultstroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodeldefaultshadow_ != nullptr);
      _impl_.tschlegendmodeldefaultshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.tschlegendmodeldefaultopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultopacity_)) + sizeof(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschlegendmodeldefaultopacity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_tschlegendmodeldefaultopacity(&has_bits);
          _impl_.tschlegendmodeldefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschlegendmodeldefaultlabelparagraphstyleindex(&has_bits);
          _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LegendStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.LegendStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tschlegendmodeldefaultfill(this),
        _Internal::tschlegendmodeldefaultfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschlegendmodeldefaultstroke(this),
        _Internal::tschlegendmodeldefaultstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tschlegendmodeldefaultshadow(this),
        _Internal::tschlegendmodeldefaultshadow(this).GetCachedSize(), target, stream);
  }

  // optional float tschlegendmodeldefaultopacity = 15;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_tschlegendmodeldefaultopacity(), target);
  }

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.LegendStyleArchive)
  return target;
}

size_t LegendStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.LegendStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSD.FillArchive tschlegendmodeldefaultfill = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodeldefaultfill_);
    }

    // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodeldefaultstroke_);
    }

    // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodeldefaultshadow_);
    }

    // optional float tschlegendmodeldefaultopacity = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LegendStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendStyleArchive::GetClassData() const { return &_class_data_; }


void LegendStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LegendStyleArchive*>(&to_msg);
  auto& from = static_cast<const LegendStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.LegendStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschlegendmodeldefaultfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschlegendmodeldefaultfill());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschlegendmodeldefaultstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschlegendmodeldefaultstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschlegendmodeldefaultshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschlegendmodeldefaultshadow());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschlegendmodeldefaultopacity_ = from._impl_.tschlegendmodeldefaultopacity_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_ = from._impl_.tschlegendmodeldefaultlabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LegendStyleArchive::CopyFrom(const LegendStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.LegendStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultfill()) {
    if (!_impl_.tschlegendmodeldefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultstroke()) {
    if (!_impl_.tschlegendmodeldefaultstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultshadow()) {
    if (!_impl_.tschlegendmodeldefaultshadow_->IsInitialized()) return false;
  }
  return true;
}

void LegendStyleArchive::InternalSwap(LegendStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegendStyleArchive, _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_)
      + sizeof(LegendStyleArchive::_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(LegendStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[8]);
}

// ===================================================================

class LegendNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendNonStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const LegendNonStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
LegendNonStyleArchive::_Internal::super(const LegendNonStyleArchive* msg) {
  return *msg->_impl_.super_;
}
void LegendNonStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LegendNonStyleArchive::LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.LegendNonStyleArchive)
}
LegendNonStyleArchive::LegendNonStyleArchive(const LegendNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LegendNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.LegendNonStyleArchive)
}

inline void LegendNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

LegendNonStyleArchive::~LegendNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.LegendNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LegendNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void LegendNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LegendNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.LegendNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LegendNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.LegendNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.LegendNonStyleArchive)
  return target;
}

size_t LegendNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.LegendNonStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LegendNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendNonStyleArchive::GetClassData() const { return &_class_data_; }


void LegendNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LegendNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const LegendNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.LegendNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LegendNonStyleArchive::CopyFrom(const LegendNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.LegendNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendNonStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void LegendNonStyleArchive::InternalSwap(LegendNonStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[9]);
}

// ===================================================================

class ChartAxisStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartAxisStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartaxisvalueshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartaxisvalueshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartaxisvaluetickmarklocation(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxisvalueshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxisvalueshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxisvaluelabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxisvalueshowminimumlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschchartaxisvaluemajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisvalueminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxisvalueshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartaxiscategoryshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartaxiscategoryshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartaxiscategorytickmarklocation(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartaxiscategoryshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartaxiscategoryshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartaxiscategorylabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartaxiscategoryhorizontalspacing(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartaxiscategoryverticalspacing(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartaxiscategoryshowlastlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartaxiscategorymajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartaxiscategoryminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartaxiscategoryshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartaxisdefaultlabelsorientation(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartaxisdefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartaxisdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartaxisvaluetitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartaxisvaluelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartaxiscategorytitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartaxiscategorylabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalue3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategory3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisvalue3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tschchartaxiscategory3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
ChartAxisStyleArchive::_Internal::super(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvaluemajorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvalueminorgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvaluemajorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvalueminorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategorymajorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategoryminorgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategorymajorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategoryminorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvalue3dgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategory3dgridlinestroke_;
}
void ChartAxisStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlinestroke() {
  if (_impl_.tschchartaxisvaluemajorgridlinestroke_ != nullptr) _impl_.tschchartaxisvaluemajorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlinestroke() {
  if (_impl_.tschchartaxisvalueminorgridlinestroke_ != nullptr) _impl_.tschchartaxisvalueminorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineshadow() {
  if (_impl_.tschchartaxisvaluemajorgridlineshadow_ != nullptr) _impl_.tschchartaxisvaluemajorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineshadow() {
  if (_impl_.tschchartaxisvalueminorgridlineshadow_ != nullptr) _impl_.tschchartaxisvalueminorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlinestroke() {
  if (_impl_.tschchartaxiscategorymajorgridlinestroke_ != nullptr) _impl_.tschchartaxiscategorymajorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlinestroke() {
  if (_impl_.tschchartaxiscategoryminorgridlinestroke_ != nullptr) _impl_.tschchartaxiscategoryminorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineshadow() {
  if (_impl_.tschchartaxiscategorymajorgridlineshadow_ != nullptr) _impl_.tschchartaxiscategorymajorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineshadow() {
  if (_impl_.tschchartaxiscategoryminorgridlineshadow_ != nullptr) _impl_.tschchartaxiscategoryminorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlinestroke() {
  if (_impl_.tschchartaxisvalue3dgridlinestroke_ != nullptr) _impl_.tschchartaxisvalue3dgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlinestroke() {
  if (_impl_.tschchartaxiscategory3dgridlinestroke_ != nullptr) _impl_.tschchartaxiscategory3dgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
ChartAxisStyleArchive::ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartAxisStyleArchive)
}
ChartAxisStyleArchive::ChartAxisStyleArchive(const ChartAxisStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvalue3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategory3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalueshowmajorgridlines_){}
    , decltype(_impl_.tschchartaxisvalueshowminorgridlines_){}
    , decltype(_impl_.tschchartaxisvalueshowmajortickmarks_){}
    , decltype(_impl_.tschchartaxisvalueshowminortickmarks_){}
    , decltype(_impl_.tschchartaxisvaluetickmarklocation_){}
    , decltype(_impl_.tschchartaxisvaluelabelsorientation_){}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisvalueminorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisvalueshowminimumlabel_){}
    , decltype(_impl_.tschchartaxisvalueshowaxis_){}
    , decltype(_impl_.tschchartaxiscategoryshowmajorgridlines_){}
    , decltype(_impl_.tschchartaxiscategoryshowminorgridlines_){}
    , decltype(_impl_.tschchartaxiscategorytickmarklocation_){}
    , decltype(_impl_.tschchartaxiscategorylabelsorientation_){}
    , decltype(_impl_.tschchartaxiscategoryhorizontalspacing_){}
    , decltype(_impl_.tschchartaxiscategoryverticalspacing_){}
    , decltype(_impl_.tschchartaxiscategoryshowmajortickmarks_){}
    , decltype(_impl_.tschchartaxiscategoryshowminortickmarks_){}
    , decltype(_impl_.tschchartaxiscategoryshowlastlabel_){}
    , decltype(_impl_.tschchartaxiscategoryshowaxis_){}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineopacity_){}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisdefaultlabelsorientation_){}
    , decltype(_impl_.tschchartaxisdefaulttitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisdefaultlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisvaluetitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisvaluelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxiscategorytitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxiscategorylabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisvalue3dgridlineopacity_){}
    , decltype(_impl_.tschchartaxiscategory3dgridlineopacity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    _this->_impl_.tschchartaxisvaluemajorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisvaluemajorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisvalueminorgridlinestroke()) {
    _this->_impl_.tschchartaxisvalueminorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisvalueminorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    _this->_impl_.tschchartaxisvaluemajorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxisvaluemajorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxisvalueminorgridlineshadow()) {
    _this->_impl_.tschchartaxisvalueminorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxisvalueminorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    _this->_impl_.tschchartaxiscategorymajorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxiscategorymajorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    _this->_impl_.tschchartaxiscategoryminorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxiscategoryminorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    _this->_impl_.tschchartaxiscategorymajorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxiscategorymajorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    _this->_impl_.tschchartaxiscategoryminorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxiscategoryminorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxisvalue3dgridlinestroke()) {
    _this->_impl_.tschchartaxisvalue3dgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisvalue3dgridlinestroke_);
  }
  if (from._internal_has_tschchartaxiscategory3dgridlinestroke()) {
    _this->_impl_.tschchartaxiscategory3dgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxiscategory3dgridlinestroke_);
  }
  ::memcpy(&_impl_.tschchartaxisvalueshowmajorgridlines_, &from._impl_.tschchartaxisvalueshowmajorgridlines_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartaxiscategory3dgridlineopacity_) -
    reinterpret_cast<char*>(&_impl_.tschchartaxisvalueshowmajorgridlines_)) + sizeof(_impl_.tschchartaxiscategory3dgridlineopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartAxisStyleArchive)
}

inline void ChartAxisStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvalue3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategory3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalueshowmajorgridlines_){false}
    , decltype(_impl_.tschchartaxisvalueshowminorgridlines_){false}
    , decltype(_impl_.tschchartaxisvalueshowmajortickmarks_){false}
    , decltype(_impl_.tschchartaxisvalueshowminortickmarks_){false}
    , decltype(_impl_.tschchartaxisvaluetickmarklocation_){0}
    , decltype(_impl_.tschchartaxisvaluelabelsorientation_){0}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisvalueminorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisvalueshowminimumlabel_){false}
    , decltype(_impl_.tschchartaxisvalueshowaxis_){false}
    , decltype(_impl_.tschchartaxiscategoryshowmajorgridlines_){false}
    , decltype(_impl_.tschchartaxiscategoryshowminorgridlines_){false}
    , decltype(_impl_.tschchartaxiscategorytickmarklocation_){0}
    , decltype(_impl_.tschchartaxiscategorylabelsorientation_){0}
    , decltype(_impl_.tschchartaxiscategoryhorizontalspacing_){0}
    , decltype(_impl_.tschchartaxiscategoryverticalspacing_){0}
    , decltype(_impl_.tschchartaxiscategoryshowmajortickmarks_){false}
    , decltype(_impl_.tschchartaxiscategoryshowminortickmarks_){false}
    , decltype(_impl_.tschchartaxiscategoryshowlastlabel_){false}
    , decltype(_impl_.tschchartaxiscategoryshowaxis_){false}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisdefaultlabelsorientation_){0}
    , decltype(_impl_.tschchartaxisdefaulttitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisdefaultlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisvaluetitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisvaluelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxiscategorytitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxiscategorylabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisvalue3dgridlineopacity_){0}
    , decltype(_impl_.tschchartaxiscategory3dgridlineopacity_){0}
  };
}

ChartAxisStyleArchive::~ChartAxisStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartAxisStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvaluemajorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvalueminorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvaluemajorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvalueminorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategorymajorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategoryminorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategorymajorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategoryminorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvalue3dgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategory3dgridlinestroke_;
}

void ChartAxisStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartAxisStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvaluemajorgridlinestroke_ != nullptr);
      _impl_.tschchartaxisvaluemajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvalueminorgridlinestroke_ != nullptr);
      _impl_.tschchartaxisvalueminorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvaluemajorgridlineshadow_ != nullptr);
      _impl_.tschchartaxisvaluemajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvalueminorgridlineshadow_ != nullptr);
      _impl_.tschchartaxisvalueminorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategorymajorgridlinestroke_ != nullptr);
      _impl_.tschchartaxiscategorymajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategoryminorgridlinestroke_ != nullptr);
      _impl_.tschchartaxiscategoryminorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategorymajorgridlineshadow_ != nullptr);
      _impl_.tschchartaxiscategorymajorgridlineshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategoryminorgridlineshadow_ != nullptr);
      _impl_.tschchartaxiscategoryminorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvalue3dgridlinestroke_ != nullptr);
      _impl_.tschchartaxisvalue3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategory3dgridlinestroke_ != nullptr);
      _impl_.tschchartaxiscategory3dgridlinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.tschchartaxisvalueshowmajorgridlines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluetickmarklocation_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvalueshowmajorgridlines_)) + sizeof(_impl_.tschchartaxisvaluetickmarklocation_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartaxisvaluelabelsorientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategorytickmarklocation_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluelabelsorientation_)) + sizeof(_impl_.tschchartaxiscategorytickmarklocation_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartaxiscategorylabelsorientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategorymajorgridlineopacity_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategorylabelsorientation_)) + sizeof(_impl_.tschchartaxiscategorymajorgridlineopacity_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartaxiscategoryminorgridlineopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategorylabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryminorgridlineopacity_)) + sizeof(_impl_.tschchartaxiscategorylabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.tschchartaxisvalue3dgridlineopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategory3dgridlineopacity_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvalue3dgridlineopacity_)) + sizeof(_impl_.tschchartaxiscategory3dgridlineopacity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajorgridlines = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartaxisvalueshowmajorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminorgridlines = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartaxisvalueshowminorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetickmarklocation = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartaxisvaluetickmarklocation(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluetickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajortickmarks = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartaxisvalueshowmajortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminortickmarks = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartaxisvalueshowminortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluelabelsorientation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_tschchartaxisvaluelabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluelabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminimumlabel = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartaxisvalueshowminimumlabel(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowminimumlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluemajorgridlineopacity = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_tschchartaxisvaluemajorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluemajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvalueminorgridlineopacity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_tschchartaxisvalueminorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowaxis = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartaxisvalueshowaxis(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartaxiscategoryshowmajorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminorgridlines = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartaxiscategoryshowminorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytickmarklocation = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartaxiscategorytickmarklocation(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorytickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartaxiscategoryshowmajortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminortickmarks = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartaxiscategoryshowminortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorylabelsorientation = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_tschchartaxiscategorylabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorylabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartaxiscategoryhorizontalspacing(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryhorizontalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryverticalspacing = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartaxiscategoryverticalspacing(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryverticalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlastlabel = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartaxiscategoryshowlastlabel(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowlastlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorymajorgridlineopacity = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_tschchartaxiscategorymajorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorymajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategoryminorgridlineopacity = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_tschchartaxiscategoryminorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowaxis = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartaxiscategoryshowaxis(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisdefaultlabelsorientation = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_tschchartaxisdefaultlabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaultlabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartaxisdefaulttitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartaxisdefaultlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartaxisvaluetitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluetitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartaxisvaluelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartaxiscategorytitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorytitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartaxiscategorylabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorylabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
      case 331:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalue3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
      case 332:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategory3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvalue3dgridlineopacity = 333;
      case 333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_tschchartaxisvalue3dgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisvalue3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategory3dgridlineopacity = 334;
      case 334:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_tschchartaxiscategory3dgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxiscategory3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartAxisStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool tschchartaxisvalueshowmajorgridlines = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_tschchartaxisvalueshowmajorgridlines(), target);
  }

  // optional bool tschchartaxisvalueshowminorgridlines = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_tschchartaxisvalueshowminorgridlines(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tschchartaxisvaluemajorgridlinestroke(this),
        _Internal::tschchartaxisvaluemajorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::tschchartaxisvalueminorgridlinestroke(this),
        _Internal::tschchartaxisvalueminorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartaxisvaluetickmarklocation = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_tschchartaxisvaluetickmarklocation(), target);
  }

  // optional bool tschchartaxisvalueshowmajortickmarks = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_tschchartaxisvalueshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminortickmarks = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_tschchartaxisvalueshowminortickmarks(), target);
  }

  // optional float tschchartaxisvaluelabelsorientation = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_tschchartaxisvaluelabelsorientation(), target);
  }

  // optional bool tschchartaxisvalueshowminimumlabel = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_tschchartaxisvalueshowminimumlabel(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::tschchartaxisvaluemajorgridlineshadow(this),
        _Internal::tschchartaxisvaluemajorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::tschchartaxisvalueminorgridlineshadow(this),
        _Internal::tschchartaxisvalueminorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartaxisvaluemajorgridlineopacity = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_tschchartaxisvaluemajorgridlineopacity(), target);
  }

  // optional float tschchartaxisvalueminorgridlineopacity = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_tschchartaxisvalueminorgridlineopacity(), target);
  }

  // optional bool tschchartaxisvalueshowaxis = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_tschchartaxisvalueshowaxis(), target);
  }

  // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(50, this->_internal_tschchartaxiscategoryshowmajorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowminorgridlines = 51;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_tschchartaxiscategoryshowminorgridlines(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::tschchartaxiscategorymajorgridlinestroke(this),
        _Internal::tschchartaxiscategorymajorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::tschchartaxiscategoryminorgridlinestroke(this),
        _Internal::tschchartaxiscategoryminorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartaxiscategorytickmarklocation = 54;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(54, this->_internal_tschchartaxiscategorytickmarklocation(), target);
  }

  // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(55, this->_internal_tschchartaxiscategoryshowmajortickmarks(), target);
  }

  // optional bool tschchartaxiscategoryshowminortickmarks = 56;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(56, this->_internal_tschchartaxiscategoryshowminortickmarks(), target);
  }

  // optional float tschchartaxiscategorylabelsorientation = 57;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(57, this->_internal_tschchartaxiscategorylabelsorientation(), target);
  }

  // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(58, this->_internal_tschchartaxiscategoryhorizontalspacing(), target);
  }

  // optional int32 tschchartaxiscategoryverticalspacing = 59;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(59, this->_internal_tschchartaxiscategoryverticalspacing(), target);
  }

  // optional bool tschchartaxiscategoryshowlastlabel = 60;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartaxiscategoryshowlastlabel(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, _Internal::tschchartaxiscategorymajorgridlineshadow(this),
        _Internal::tschchartaxiscategorymajorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::tschchartaxiscategoryminorgridlineshadow(this),
        _Internal::tschchartaxiscategoryminorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartaxiscategorymajorgridlineopacity = 65;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(65, this->_internal_tschchartaxiscategorymajorgridlineopacity(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float tschchartaxiscategoryminorgridlineopacity = 66;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(66, this->_internal_tschchartaxiscategoryminorgridlineopacity(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool tschchartaxiscategoryshowaxis = 67;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(67, this->_internal_tschchartaxiscategoryshowaxis(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float tschchartaxisdefaultlabelsorientation = 102;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(102, this->_internal_tschchartaxisdefaultlabelsorientation(), target);
  }

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(110, this->_internal_tschchartaxisdefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(111, this->_internal_tschchartaxisdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(112, this->_internal_tschchartaxisvaluetitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(113, this->_internal_tschchartaxisvaluelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(114, this->_internal_tschchartaxiscategorytitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(115, this->_internal_tschchartaxiscategorylabelparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(331, _Internal::tschchartaxisvalue3dgridlinestroke(this),
        _Internal::tschchartaxisvalue3dgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(332, _Internal::tschchartaxiscategory3dgridlinestroke(this),
        _Internal::tschchartaxiscategory3dgridlinestroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float tschchartaxisvalue3dgridlineopacity = 333;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(333, this->_internal_tschchartaxisvalue3dgridlineopacity(), target);
  }

  // optional float tschchartaxiscategory3dgridlineopacity = 334;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(334, this->_internal_tschchartaxiscategory3dgridlineopacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartAxisStyleArchive)
  return target;
}

size_t ChartAxisStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartAxisStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvaluemajorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvalueminorgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvaluemajorgridlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 22;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvalueminorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 52;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategorymajorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 53;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategoryminorgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 63;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategorymajorgridlineshadow_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 64;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategoryminorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 331;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvalue3dgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 332;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategory3dgridlinestroke_);
    }

    // optional bool tschchartaxisvalueshowmajorgridlines = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowminorgridlines = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowmajortickmarks = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowminortickmarks = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxisvaluetickmarklocation = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluetickmarklocation());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartaxisvaluelabelsorientation = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisvaluemajorgridlineopacity = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisvalueminorgridlineopacity = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartaxisvalueshowminimumlabel = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowaxis = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajorgridlines = 50;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminorgridlines = 51;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxiscategorytickmarklocation = 54;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytickmarklocation());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartaxiscategorylabelsorientation = 57;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartaxiscategoryhorizontalspacing = 58;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategoryhorizontalspacing());
    }

    // optional int32 tschchartaxiscategoryverticalspacing = 59;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategoryverticalspacing());
    }

    // optional bool tschchartaxiscategoryshowmajortickmarks = 55;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminortickmarks = 56;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowlastlabel = 60;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowaxis = 67;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartaxiscategorymajorgridlineopacity = 65;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float tschchartaxiscategoryminorgridlineopacity = 66;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisdefaultlabelsorientation = 102;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 110;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 111;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 112;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluetitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 113;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluelabelparagraphstyleindex());
    }

    // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 114;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytitleparagraphstyleindex());
    }

    // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 115;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorylabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float tschchartaxisvalue3dgridlineopacity = 333;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxiscategory3dgridlineopacity = 334;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisStyleArchive::GetClassData() const { return &_class_data_; }


void ChartAxisStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartAxisStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartaxisvaluemajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisvaluemajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartaxisvalueminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisvalueminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartaxisvaluemajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxisvaluemajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartaxisvalueminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxisvalueminorgridlineshadow());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartaxiscategorymajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxiscategorymajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartaxiscategoryminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxiscategoryminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartaxiscategorymajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxiscategorymajorgridlineshadow());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartaxiscategoryminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxiscategoryminorgridlineshadow());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartaxisvalue3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisvalue3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartaxiscategory3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxiscategory3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartaxisvalueshowmajorgridlines_ = from._impl_.tschchartaxisvalueshowmajorgridlines_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartaxisvalueshowminorgridlines_ = from._impl_.tschchartaxisvalueshowminorgridlines_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartaxisvalueshowmajortickmarks_ = from._impl_.tschchartaxisvalueshowmajortickmarks_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartaxisvalueshowminortickmarks_ = from._impl_.tschchartaxisvalueshowminortickmarks_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartaxisvaluetickmarklocation_ = from._impl_.tschchartaxisvaluetickmarklocation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartaxisvaluelabelsorientation_ = from._impl_.tschchartaxisvaluelabelsorientation_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartaxisvaluemajorgridlineopacity_ = from._impl_.tschchartaxisvaluemajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartaxisvalueminorgridlineopacity_ = from._impl_.tschchartaxisvalueminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartaxisvalueshowminimumlabel_ = from._impl_.tschchartaxisvalueshowminimumlabel_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartaxisvalueshowaxis_ = from._impl_.tschchartaxisvalueshowaxis_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartaxiscategoryshowmajorgridlines_ = from._impl_.tschchartaxiscategoryshowmajorgridlines_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartaxiscategoryshowminorgridlines_ = from._impl_.tschchartaxiscategoryshowminorgridlines_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartaxiscategorytickmarklocation_ = from._impl_.tschchartaxiscategorytickmarklocation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartaxiscategorylabelsorientation_ = from._impl_.tschchartaxiscategorylabelsorientation_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartaxiscategoryhorizontalspacing_ = from._impl_.tschchartaxiscategoryhorizontalspacing_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartaxiscategoryverticalspacing_ = from._impl_.tschchartaxiscategoryverticalspacing_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartaxiscategoryshowmajortickmarks_ = from._impl_.tschchartaxiscategoryshowmajortickmarks_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartaxiscategoryshowminortickmarks_ = from._impl_.tschchartaxiscategoryshowminortickmarks_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartaxiscategoryshowlastlabel_ = from._impl_.tschchartaxiscategoryshowlastlabel_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartaxiscategoryshowaxis_ = from._impl_.tschchartaxiscategoryshowaxis_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartaxiscategorymajorgridlineopacity_ = from._impl_.tschchartaxiscategorymajorgridlineopacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartaxiscategoryminorgridlineopacity_ = from._impl_.tschchartaxiscategoryminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartaxisdefaultlabelsorientation_ = from._impl_.tschchartaxisdefaultlabelsorientation_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartaxisdefaulttitleparagraphstyleindex_ = from._impl_.tschchartaxisdefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartaxisdefaultlabelparagraphstyleindex_ = from._impl_.tschchartaxisdefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartaxisvaluetitleparagraphstyleindex_ = from._impl_.tschchartaxisvaluetitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartaxisvaluelabelparagraphstyleindex_ = from._impl_.tschchartaxisvaluelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartaxiscategorytitleparagraphstyleindex_ = from._impl_.tschchartaxiscategorytitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartaxiscategorylabelparagraphstyleindex_ = from._impl_.tschchartaxiscategorylabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartaxisvalue3dgridlineopacity_ = from._impl_.tschchartaxisvalue3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartaxiscategory3dgridlineopacity_ = from._impl_.tschchartaxiscategory3dgridlineopacity_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisStyleArchive::CopyFrom(const ChartAxisStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartAxisStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    if (!_impl_.tschchartaxisvaluemajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlinestroke()) {
    if (!_impl_.tschchartaxisvalueminorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    if (!_impl_.tschchartaxisvaluemajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlineshadow()) {
    if (!_impl_.tschchartaxisvalueminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    if (!_impl_.tschchartaxiscategorymajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    if (!_impl_.tschchartaxiscategoryminorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    if (!_impl_.tschchartaxiscategorymajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    if (!_impl_.tschchartaxiscategoryminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalue3dgridlinestroke()) {
    if (!_impl_.tschchartaxisvalue3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategory3dgridlinestroke()) {
    if (!_impl_.tschchartaxiscategory3dgridlinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisStyleArchive::InternalSwap(ChartAxisStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, _impl_.tschchartaxiscategory3dgridlineopacity_)
      + sizeof(ChartAxisStyleArchive::_impl_.tschchartaxiscategory3dgridlineopacity_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[10]);
}

// ===================================================================

class ChartAxisNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisNonStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartAxisNonStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermax(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschchartaxisdefaultshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisvaluenumberofminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartaxisvaluescale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartaxisvaluenumberofdecades(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartaxisvalueshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartaxisvalueshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxisvaluenumberofmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartaxisvaluetitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartaxiscategoryshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxiscategoryshowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxiscategoryshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxiscategorytitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschchartaxisdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisdefault3dlabelposition(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxiscategoryplottoedges(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSS::StyleArchive&
ChartAxisNonStyleArchive::_Internal::super(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultusermin_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultusermax_;
}
const ::TSCH::PreUFF::ChartsNumberFormatArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultnumberformat_;
}
void ChartAxisNonStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermin() {
  if (_impl_.tschchartaxisdefaultusermin_ != nullptr) _impl_.tschchartaxisdefaultusermin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermax() {
  if (_impl_.tschchartaxisdefaultusermax_ != nullptr) _impl_.tschchartaxisdefaultusermax_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartAxisNonStyleArchive)
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxisvaluetitle_){}
    , decltype(_impl_.tschchartaxiscategorytitle_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermin_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermax_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartaxisvaluenumberofminorgridlines_){}
    , decltype(_impl_.tschchartaxisvaluescale_){}
    , decltype(_impl_.tschchartaxisvaluenumberofdecades_){}
    , decltype(_impl_.tschchartaxisvaluenumberofmajorgridlines_){}
    , decltype(_impl_.tschchartaxisdefaultshowlabels_){}
    , decltype(_impl_.tschchartaxisvalueshowlabels_){}
    , decltype(_impl_.tschchartaxisvalueshowtitle_){}
    , decltype(_impl_.tschchartaxiscategoryshowlabels_){}
    , decltype(_impl_.tschchartaxiscategoryshowserieslabels_){}
    , decltype(_impl_.tschchartaxiscategoryshowtitle_){}
    , decltype(_impl_.tschchartaxiscategoryplottoedges_){}
    , decltype(_impl_.tschchartaxisdefaultnumberformattype_){}
    , decltype(_impl_.tschchartaxisdefault3dlabelposition_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartaxisvaluetitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxisvaluetitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartaxisvaluetitle()) {
    _this->_impl_.tschchartaxisvaluetitle_.Set(from._internal_tschchartaxisvaluetitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tschchartaxiscategorytitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxiscategorytitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartaxiscategorytitle()) {
    _this->_impl_.tschchartaxiscategorytitle_.Set(from._internal_tschchartaxiscategorytitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_tschchartaxisdefaultusermin()) {
    _this->_impl_.tschchartaxisdefaultusermin_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschchartaxisdefaultusermin_);
  }
  if (from._internal_has_tschchartaxisdefaultusermax()) {
    _this->_impl_.tschchartaxisdefaultusermax_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschchartaxisdefaultusermax_);
  }
  if (from._internal_has_tschchartaxisdefaultnumberformat()) {
    _this->_impl_.tschchartaxisdefaultnumberformat_ = new ::TSCH::PreUFF::ChartsNumberFormatArchive(*from._impl_.tschchartaxisdefaultnumberformat_);
  }
  ::memcpy(&_impl_.tschchartaxisvaluenumberofminorgridlines_, &from._impl_.tschchartaxisvaluenumberofminorgridlines_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartaxisdefault3dlabelposition_) -
    reinterpret_cast<char*>(&_impl_.tschchartaxisvaluenumberofminorgridlines_)) + sizeof(_impl_.tschchartaxisdefault3dlabelposition_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartAxisNonStyleArchive)
}

inline void ChartAxisNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxisvaluetitle_){}
    , decltype(_impl_.tschchartaxiscategorytitle_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermin_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermax_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartaxisvaluenumberofminorgridlines_){0}
    , decltype(_impl_.tschchartaxisvaluescale_){0}
    , decltype(_impl_.tschchartaxisvaluenumberofdecades_){0}
    , decltype(_impl_.tschchartaxisvaluenumberofmajorgridlines_){0}
    , decltype(_impl_.tschchartaxisdefaultshowlabels_){false}
    , decltype(_impl_.tschchartaxisvalueshowlabels_){false}
    , decltype(_impl_.tschchartaxisvalueshowtitle_){false}
    , decltype(_impl_.tschchartaxiscategoryshowlabels_){false}
    , decltype(_impl_.tschchartaxiscategoryshowserieslabels_){false}
    , decltype(_impl_.tschchartaxiscategoryshowtitle_){false}
    , decltype(_impl_.tschchartaxiscategoryplottoedges_){false}
    , decltype(_impl_.tschchartaxisdefaultnumberformattype_){0}
    , decltype(_impl_.tschchartaxisdefault3dlabelposition_){0}
  };
  _impl_.tschchartaxisvaluetitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxisvaluetitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tschchartaxiscategorytitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxiscategorytitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartAxisNonStyleArchive::~ChartAxisNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartAxisNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartaxisvaluetitle_.Destroy();
  _impl_.tschchartaxiscategorytitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultusermin_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultusermax_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultnumberformat_;
}

void ChartAxisNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartaxisvaluetitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.tschchartaxiscategorytitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultusermin_ != nullptr);
      _impl_.tschchartaxisdefaultusermin_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultusermax_ != nullptr);
      _impl_.tschchartaxisdefaultusermax_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultnumberformat_ != nullptr);
      _impl_.tschchartaxisdefaultnumberformat_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.tschchartaxisvaluenumberofminorgridlines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluescale_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluenumberofminorgridlines_)) + sizeof(_impl_.tschchartaxisvaluescale_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartaxisvaluenumberofdecades_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryshowtitle_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluenumberofdecades_)) + sizeof(_impl_.tschchartaxiscategoryshowtitle_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.tschchartaxiscategoryplottoedges_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisdefault3dlabelposition_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryplottoedges_)) + sizeof(_impl_.tschchartaxisdefault3dlabelposition_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermax(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisdefaultshowlabels = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartaxisdefaultshowlabels(&has_bits);
          _impl_.tschchartaxisdefaultshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartaxisvaluenumberofminorgridlines(&has_bits);
          _impl_.tschchartaxisvaluenumberofminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluescale = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartaxisvaluescale(&has_bits);
          _impl_.tschchartaxisvaluescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofdecades = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartaxisvaluenumberofdecades(&has_bits);
          _impl_.tschchartaxisvaluenumberofdecades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowlabels = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartaxisvalueshowlabels(&has_bits);
          _impl_.tschchartaxisvalueshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowtitle = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartaxisvalueshowtitle(&has_bits);
          _impl_.tschchartaxisvalueshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartaxisvaluenumberofmajorgridlines(&has_bits);
          _impl_.tschchartaxisvaluenumberofmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartaxisvaluetitle = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_tschchartaxisvaluetitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlabels = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartaxiscategoryshowlabels(&has_bits);
          _impl_.tschchartaxiscategoryshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowserieslabels = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartaxiscategoryshowserieslabels(&has_bits);
          _impl_.tschchartaxiscategoryshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowtitle = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartaxiscategoryshowtitle(&has_bits);
          _impl_.tschchartaxiscategoryshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartaxiscategorytitle = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_tschchartaxiscategorytitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryplottoedges = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartaxiscategoryplottoedges(&has_bits);
          _impl_.tschchartaxiscategoryplottoedges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultnumberformattype = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartaxisdefaultnumberformattype(&has_bits);
          _impl_.tschchartaxisdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefault3dlabelposition = 336;
      case 336:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartaxisdefault3dlabelposition(&has_bits);
          _impl_.tschchartaxisdefault3dlabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartaxisdefaultusermin(this),
        _Internal::tschchartaxisdefaultusermin(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tschchartaxisdefaultusermax(this),
        _Internal::tschchartaxisdefaultusermax(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::tschchartaxisdefaultnumberformat(this),
        _Internal::tschchartaxisdefaultnumberformat(this).GetCachedSize(), target, stream);
  }

  // optional bool tschchartaxisdefaultshowlabels = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_tschchartaxisdefaultshowlabels(), target);
  }

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_tschchartaxisvaluenumberofminorgridlines(), target);
  }

  // optional int32 tschchartaxisvaluescale = 51;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(51, this->_internal_tschchartaxisvaluescale(), target);
  }

  // optional int32 tschchartaxisvaluenumberofdecades = 52;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(52, this->_internal_tschchartaxisvaluenumberofdecades(), target);
  }

  // optional bool tschchartaxisvalueshowlabels = 53;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(53, this->_internal_tschchartaxisvalueshowlabels(), target);
  }

  // optional bool tschchartaxisvalueshowtitle = 54;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(54, this->_internal_tschchartaxisvalueshowtitle(), target);
  }

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(55, this->_internal_tschchartaxisvaluenumberofmajorgridlines(), target);
  }

  // optional string tschchartaxisvaluetitle = 56;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxisvaluetitle().data(), static_cast<int>(this->_internal_tschchartaxisvaluetitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_tschchartaxisvaluetitle(), target);
  }

  // optional bool tschchartaxiscategoryshowlabels = 100;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(100, this->_internal_tschchartaxiscategoryshowlabels(), target);
  }

  // optional bool tschchartaxiscategoryshowserieslabels = 101;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(101, this->_internal_tschchartaxiscategoryshowserieslabels(), target);
  }

  // optional bool tschchartaxiscategoryshowtitle = 102;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(102, this->_internal_tschchartaxiscategoryshowtitle(), target);
  }

  // optional string tschchartaxiscategorytitle = 103;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxiscategorytitle().data(), static_cast<int>(this->_internal_tschchartaxiscategorytitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_tschchartaxiscategorytitle(), target);
  }

  // optional bool tschchartaxiscategoryplottoedges = 116;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(116, this->_internal_tschchartaxiscategoryplottoedges(), target);
  }

  // optional int32 tschchartaxisdefaultnumberformattype = 120;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(120, this->_internal_tschchartaxisdefaultnumberformattype(), target);
  }

  // optional int32 tschchartaxisdefault3dlabelposition = 336;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(336, this->_internal_tschchartaxisdefault3dlabelposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartAxisNonStyleArchive)
  return target;
}

size_t ChartAxisNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tschchartaxisvaluetitle = 56;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxisvaluetitle());
    }

    // optional string tschchartaxiscategorytitle = 103;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxiscategorytitle());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultusermin_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultusermax_);
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartaxisdefaultnumberformat = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultnumberformat_);
    }

    // optional int32 tschchartaxisvaluenumberofminorgridlines = 50;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluenumberofminorgridlines());
    }

    // optional int32 tschchartaxisvaluescale = 51;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluescale());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartaxisvaluenumberofdecades = 52;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluenumberofdecades());
    }

    // optional int32 tschchartaxisvaluenumberofmajorgridlines = 55;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluenumberofmajorgridlines());
    }

    // optional bool tschchartaxisdefaultshowlabels = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowlabels = 53;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowtitle = 54;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowlabels = 100;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowserieslabels = 101;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowtitle = 102;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool tschchartaxiscategoryplottoedges = 116;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxisdefaultnumberformattype = 120;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaultnumberformattype());
    }

    // optional int32 tschchartaxisdefault3dlabelposition = 336;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefault3dlabelposition());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisNonStyleArchive::GetClassData() const { return &_class_data_; }


void ChartAxisNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartaxisvaluetitle(from._internal_tschchartaxisvaluetitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_tschchartaxiscategorytitle(from._internal_tschchartaxiscategorytitle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartaxisdefaultusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartaxisdefaultusermin());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartaxisdefaultusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartaxisdefaultusermax());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartaxisdefaultnumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(
          from._internal_tschchartaxisdefaultnumberformat());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartaxisvaluenumberofminorgridlines_ = from._impl_.tschchartaxisvaluenumberofminorgridlines_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartaxisvaluescale_ = from._impl_.tschchartaxisvaluescale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartaxisvaluenumberofdecades_ = from._impl_.tschchartaxisvaluenumberofdecades_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartaxisvaluenumberofmajorgridlines_ = from._impl_.tschchartaxisvaluenumberofmajorgridlines_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartaxisdefaultshowlabels_ = from._impl_.tschchartaxisdefaultshowlabels_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartaxisvalueshowlabels_ = from._impl_.tschchartaxisvalueshowlabels_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartaxisvalueshowtitle_ = from._impl_.tschchartaxisvalueshowtitle_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartaxiscategoryshowlabels_ = from._impl_.tschchartaxiscategoryshowlabels_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartaxiscategoryshowserieslabels_ = from._impl_.tschchartaxiscategoryshowserieslabels_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartaxiscategoryshowtitle_ = from._impl_.tschchartaxiscategoryshowtitle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartaxiscategoryplottoedges_ = from._impl_.tschchartaxiscategoryplottoedges_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartaxisdefaultnumberformattype_ = from._impl_.tschchartaxisdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartaxisdefault3dlabelposition_ = from._impl_.tschchartaxisdefault3dlabelposition_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisNonStyleArchive::CopyFrom(const ChartAxisNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartAxisNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisNonStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefaultnumberformat()) {
    if (!_impl_.tschchartaxisdefaultnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisNonStyleArchive::InternalSwap(ChartAxisNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartaxisvaluetitle_, lhs_arena,
      &other->_impl_.tschchartaxisvaluetitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartaxiscategorytitle_, lhs_arena,
      &other->_impl_.tschchartaxiscategorytitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, _impl_.tschchartaxisdefault3dlabelposition_)
      + sizeof(ChartAxisNonStyleArchive::_impl_.tschchartaxisdefault3dlabelposition_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[11]);
}

// ===================================================================

class ChartSeriesStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartSeriesStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationopacity(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredopacity(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static const ::TSD::FillArchive& tschchartseriesbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartseriesbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::FillArchive& tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschchartserieslinesymbolsize(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartserieslinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::TSD::FillArchive& tschchartseriesareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareastroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartseriesareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::TSD::FillArchive& tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartseriesareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::TSD::FillArchive& tschchartseriespiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiefill(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::StrokeArchive& tschchartseriespiestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscatterstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::FillArchive& tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartseriesscattersymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_tschchartseriesscattervaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::TSD::FillArchive& tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartseriesdefaultvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_tschchartseriespiedeprecatedserieslabelson(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static const ::TSD::FillArchive& tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriescolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSD::ShadowArchive& tschchartseriespieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespieshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSD::ShadowArchive& tschchartserieslineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSD::FillArchive& tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_tschchartseriesbubblevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubbleshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartseriesbubblesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlineshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareashadow(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpieshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_tschchartseriesbarlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_tschchartserieslinelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_tschchartseriesarealabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_tschchartseriespielabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_tschchartseriesmixedlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_tschchartseriesdefaultopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_tschchartseriesscattersymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareastroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartseriesmixedlinesymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_tschchartseriesmixedareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartseriesmixedcolumnvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_tschchartseriesmixedlinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_tschchartseriesmixedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_tschchartseriespieoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_tschchartseriesstackedbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_tschchartseriesstackedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlineshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstrokescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineend(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineendscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriesdefaultdeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultdeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriesbardeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbardeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriescolumndeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriescolumndeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartserieslinedeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinedeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriesareadeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareadeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::TSCH::DEPRECATEDChart3DFillArchive& tschchartseriespiedeprecated3dfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiedeprecated3dfill(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::TSD::FillArchive& tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarfill(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::TSD::FillArchive& tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnfill(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::TSD::FillArchive& tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlinefill(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::TSD::FillArchive& tschchartseries3dareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareafill(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::TSD::FillArchive& tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpiefill(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSS::StyleArchive&
ChartSeriesStyleArchive::_Internal::super(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbarfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinestroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinesymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinesymbolstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareafill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareastroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareasymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareasymbolstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespiefill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespiestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscatterstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscattersymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscattersymbolstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriescolumnfill_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespieshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscattershadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultshadow_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubblesymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubblestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubblesymbolstroke_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubbleshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dpieshadow_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareafill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedcolumnstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlinestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareastroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlinesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareasymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlinesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareasymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulttrendlinestroke_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulttrendlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultdeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultdeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbardeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbardeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriescolumndeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriescolumndeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinedeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinedeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareadeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareadeprecated3dfill_;
}
const ::TSCH::DEPRECATEDChart3DFillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiedeprecated3dfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespiedeprecated3dfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dbarfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dlinefill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dpiefill_;
}
void ChartSeriesStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarfill() {
  if (_impl_.tschchartseriesbarfill_ != nullptr) _impl_.tschchartseriesbarfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarstroke() {
  if (_impl_.tschchartseriesbarstroke_ != nullptr) _impl_.tschchartseriesbarstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinestroke() {
  if (_impl_.tschchartserieslinestroke_ != nullptr) _impl_.tschchartserieslinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfill() {
  if (_impl_.tschchartserieslinesymbolfill_ != nullptr) _impl_.tschchartserieslinesymbolfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolstroke() {
  if (_impl_.tschchartserieslinesymbolstroke_ != nullptr) _impl_.tschchartserieslinesymbolstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareafill() {
  if (_impl_.tschchartseriesareafill_ != nullptr) _impl_.tschchartseriesareafill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareastroke() {
  if (_impl_.tschchartseriesareastroke_ != nullptr) _impl_.tschchartseriesareastroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfill() {
  if (_impl_.tschchartseriesareasymbolfill_ != nullptr) _impl_.tschchartseriesareasymbolfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolstroke() {
  if (_impl_.tschchartseriesareasymbolstroke_ != nullptr) _impl_.tschchartseriesareasymbolstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiefill() {
  if (_impl_.tschchartseriespiefill_ != nullptr) _impl_.tschchartseriespiefill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiestroke() {
  if (_impl_.tschchartseriespiestroke_ != nullptr) _impl_.tschchartseriespiestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscatterstroke() {
  if (_impl_.tschchartseriesscatterstroke_ != nullptr) _impl_.tschchartseriesscatterstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfill() {
  if (_impl_.tschchartseriesscattersymbolfill_ != nullptr) _impl_.tschchartseriesscattersymbolfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolstroke() {
  if (_impl_.tschchartseriesscattersymbolstroke_ != nullptr) _impl_.tschchartseriesscattersymbolstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultfill() {
  if (_impl_.tschchartseriesdefaultfill_ != nullptr) _impl_.tschchartseriesdefaultfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriescolumnfill() {
  if (_impl_.tschchartseriescolumnfill_ != nullptr) _impl_.tschchartseriescolumnfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespieshadow() {
  if (_impl_.tschchartseriespieshadow_ != nullptr) _impl_.tschchartseriespieshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarshadow() {
  if (_impl_.tschchartseriesbarshadow_ != nullptr) _impl_.tschchartseriesbarshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareashadow() {
  if (_impl_.tschchartseriesareashadow_ != nullptr) _impl_.tschchartseriesareashadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattershadow() {
  if (_impl_.tschchartseriesscattershadow_ != nullptr) _impl_.tschchartseriesscattershadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlineshadow() {
  if (_impl_.tschchartseriesmixedlineshadow_ != nullptr) _impl_.tschchartseriesmixedlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareashadow() {
  if (_impl_.tschchartseriesmixedareashadow_ != nullptr) _impl_.tschchartseriesmixedareashadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnshadow() {
  if (_impl_.tschchartseriesmixedcolumnshadow_ != nullptr) _impl_.tschchartseriesmixedcolumnshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslineshadow() {
  if (_impl_.tschchartserieslineshadow_ != nullptr) _impl_.tschchartserieslineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultshadow() {
  if (_impl_.tschchartseriesdefaultshadow_ != nullptr) _impl_.tschchartseriesdefaultshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfill() {
  if (_impl_.tschchartseriesbubblesymbolfill_ != nullptr) _impl_.tschchartseriesbubblesymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblestroke() {
  if (_impl_.tschchartseriesbubblestroke_ != nullptr) _impl_.tschchartseriesbubblestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolstroke() {
  if (_impl_.tschchartseriesbubblesymbolstroke_ != nullptr) _impl_.tschchartseriesbubblesymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubbleshadow() {
  if (_impl_.tschchartseriesbubbleshadow_ != nullptr) _impl_.tschchartseriesbubbleshadow_->Clear();
  _impl_._has_bits_[1] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarshadow() {
  if (_impl_.tschchartseries3dbarshadow_ != nullptr) _impl_.tschchartseries3dbarshadow_->Clear();
  _impl_._has_bits_[1] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnshadow() {
  if (_impl_.tschchartseries3dcolumnshadow_ != nullptr) _impl_.tschchartseries3dcolumnshadow_->Clear();
  _impl_._has_bits_[1] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlineshadow() {
  if (_impl_.tschchartseries3dlineshadow_ != nullptr) _impl_.tschchartseries3dlineshadow_->Clear();
  _impl_._has_bits_[1] &= ~0x00400000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareashadow() {
  if (_impl_.tschchartseries3dareashadow_ != nullptr) _impl_.tschchartseries3dareashadow_->Clear();
  _impl_._has_bits_[1] &= ~0x00800000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpieshadow() {
  if (_impl_.tschchartseries3dpieshadow_ != nullptr) _impl_.tschchartseries3dpieshadow_->Clear();
  _impl_._has_bits_[1] &= ~0x01000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnfill() {
  if (_impl_.tschchartseriesmixedcolumnfill_ != nullptr) _impl_.tschchartseriesmixedcolumnfill_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareafill() {
  if (_impl_.tschchartseriesmixedareafill_ != nullptr) _impl_.tschchartseriesmixedareafill_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnstroke() {
  if (_impl_.tschchartseriesmixedcolumnstroke_ != nullptr) _impl_.tschchartseriesmixedcolumnstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinestroke() {
  if (_impl_.tschchartseriesmixedlinestroke_ != nullptr) _impl_.tschchartseriesmixedlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareastroke() {
  if (_impl_.tschchartseriesmixedareastroke_ != nullptr) _impl_.tschchartseriesmixedareastroke_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfill() {
  if (_impl_.tschchartseriesmixedlinesymbolfill_ != nullptr) _impl_.tschchartseriesmixedlinesymbolfill_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfill() {
  if (_impl_.tschchartseriesmixedareasymbolfill_ != nullptr) _impl_.tschchartseriesmixedareasymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolstroke() {
  if (_impl_.tschchartseriesmixedlinesymbolstroke_ != nullptr) _impl_.tschchartseriesmixedlinesymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolstroke() {
  if (_impl_.tschchartseriesmixedareasymbolstroke_ != nullptr) _impl_.tschchartseriesmixedareasymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinestroke() {
  if (_impl_.tschchartseriesdefaulttrendlinestroke_ != nullptr) _impl_.tschchartseriesdefaulttrendlinestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineshadow() {
  if (_impl_.tschchartseriesdefaulttrendlineshadow_ != nullptr) _impl_.tschchartseriesdefaulttrendlineshadow_->Clear();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarshadow() {
  if (_impl_.tschchartseriesdefaulterrorbarshadow_ != nullptr) _impl_.tschchartseriesdefaulterrorbarshadow_->Clear();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstroke() {
  if (_impl_.tschchartseriesdefaulterrorbarstroke_ != nullptr) _impl_.tschchartseriesdefaulterrorbarstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstrokescatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
  _impl_._has_bits_[1] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineend() {
  if (_impl_.tschchartseriesdefaulterrorbarlineend_ != nullptr) _impl_.tschchartseriesdefaulterrorbarlineend_->Clear();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineendscatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultdeprecated3dfill() {
  if (_impl_.tschchartseriesdefaultdeprecated3dfill_ != nullptr) _impl_.tschchartseriesdefaultdeprecated3dfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbardeprecated3dfill() {
  if (_impl_.tschchartseriesbardeprecated3dfill_ != nullptr) _impl_.tschchartseriesbardeprecated3dfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriescolumndeprecated3dfill() {
  if (_impl_.tschchartseriescolumndeprecated3dfill_ != nullptr) _impl_.tschchartseriescolumndeprecated3dfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinedeprecated3dfill() {
  if (_impl_.tschchartserieslinedeprecated3dfill_ != nullptr) _impl_.tschchartserieslinedeprecated3dfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareadeprecated3dfill() {
  if (_impl_.tschchartseriesareadeprecated3dfill_ != nullptr) _impl_.tschchartseriesareadeprecated3dfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiedeprecated3dfill() {
  if (_impl_.tschchartseriespiedeprecated3dfill_ != nullptr) _impl_.tschchartseriespiedeprecated3dfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarfill() {
  if (_impl_.tschchartseries3dbarfill_ != nullptr) _impl_.tschchartseries3dbarfill_->Clear();
  _impl_._has_bits_[1] &= ~0x02000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnfill() {
  if (_impl_.tschchartseries3dcolumnfill_ != nullptr) _impl_.tschchartseries3dcolumnfill_->Clear();
  _impl_._has_bits_[1] &= ~0x04000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlinefill() {
  if (_impl_.tschchartseries3dlinefill_ != nullptr) _impl_.tschchartseries3dlinefill_->Clear();
  _impl_._has_bits_[1] &= ~0x08000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareafill() {
  if (_impl_.tschchartseries3dareafill_ != nullptr) _impl_.tschchartseries3dareafill_->Clear();
  _impl_._has_bits_[1] &= ~0x10000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpiefill() {
  if (_impl_.tschchartseries3dpiefill_ != nullptr) _impl_.tschchartseries3dpiefill_->Clear();
  _impl_._has_bits_[1] &= ~0x20000000u;
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartSeriesStyleArchive)
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSeriesStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartseriesbarfill_){nullptr}
    , decltype(_impl_.tschchartseriesbarstroke_){nullptr}
    , decltype(_impl_.tschchartserieslinestroke_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesareafill_){nullptr}
    , decltype(_impl_.tschchartseriesareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriespiefill_){nullptr}
    , decltype(_impl_.tschchartseriespiestroke_){nullptr}
    , decltype(_impl_.tschchartseriesscatterstroke_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultfill_){nullptr}
    , decltype(_impl_.tschchartseriescolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriespieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesscattershadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartserieslineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareafill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineend_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesbubblestroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultdeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseriesbardeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseriescolumndeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartserieslinedeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseriesareadeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseriespiedeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseries3dbarshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dlineshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dareashadow_){nullptr}
    , decltype(_impl_.tschchartseries3dpieshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dbarfill_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseries3dlinefill_){nullptr}
    , decltype(_impl_.tschchartseries3dareafill_){nullptr}
    , decltype(_impl_.tschchartseries3dpiefill_){nullptr}
    , decltype(_impl_.tschchartseriesbarvaluelabelposition_){}
    , decltype(_impl_.tschchartserieslinesymbolsize_){}
    , decltype(_impl_.tschchartserieslinevaluelabelposition_){}
    , decltype(_impl_.tschchartseriesareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesareasymbolsize_){}
    , decltype(_impl_.tschchartseriesscattersymbolsize_){}
    , decltype(_impl_.tschchartseriesscattervaluelabelposition_){}
    , decltype(_impl_.tschchartseriesdefaultvaluelabelposition_){}
    , decltype(_impl_.tschchartseriesdefaultlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesbarlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartserieslinelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesarealabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriespielabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesmixedlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaultopacity_){}
    , decltype(_impl_.tschchartseriesscattersymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriespiedeprecatedserieslabelson_){}
    , decltype(_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesmixedlinesymbolsize_){}
    , decltype(_impl_.tschchartseriesmixedareasymbolsize_){}
    , decltype(_impl_.tschchartseriesmixedcolumnvaluelabelposition_){}
    , decltype(_impl_.tschchartseriesmixedlinevaluelabelposition_){}
    , decltype(_impl_.tschchartseriesmixedareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesstackedbarvaluelabelposition_){}
    , decltype(_impl_.tschchartseriesstackedareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationopacity_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_){}
    , decltype(_impl_.tschchartseriesbubblevaluelabelposition_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_tschchartseriesbarfill()) {
    _this->_impl_.tschchartseriesbarfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesbarfill_);
  }
  if (from._internal_has_tschchartseriesbarstroke()) {
    _this->_impl_.tschchartseriesbarstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesbarstroke_);
  }
  if (from._internal_has_tschchartserieslinestroke()) {
    _this->_impl_.tschchartserieslinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartserieslinestroke_);
  }
  if (from._internal_has_tschchartserieslinesymbolfill()) {
    _this->_impl_.tschchartserieslinesymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartserieslinesymbolfill_);
  }
  if (from._internal_has_tschchartserieslinesymbolstroke()) {
    _this->_impl_.tschchartserieslinesymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartserieslinesymbolstroke_);
  }
  if (from._internal_has_tschchartseriesareafill()) {
    _this->_impl_.tschchartseriesareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesareafill_);
  }
  if (from._internal_has_tschchartseriesareastroke()) {
    _this->_impl_.tschchartseriesareastroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesareastroke_);
  }
  if (from._internal_has_tschchartseriesareasymbolfill()) {
    _this->_impl_.tschchartseriesareasymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesareasymbolfill_);
  }
  if (from._internal_has_tschchartseriesareasymbolstroke()) {
    _this->_impl_.tschchartseriesareasymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesareasymbolstroke_);
  }
  if (from._internal_has_tschchartseriespiefill()) {
    _this->_impl_.tschchartseriespiefill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriespiefill_);
  }
  if (from._internal_has_tschchartseriespiestroke()) {
    _this->_impl_.tschchartseriespiestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriespiestroke_);
  }
  if (from._internal_has_tschchartseriesscatterstroke()) {
    _this->_impl_.tschchartseriesscatterstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesscatterstroke_);
  }
  if (from._internal_has_tschchartseriesscattersymbolfill()) {
    _this->_impl_.tschchartseriesscattersymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesscattersymbolfill_);
  }
  if (from._internal_has_tschchartseriesscattersymbolstroke()) {
    _this->_impl_.tschchartseriesscattersymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesscattersymbolstroke_);
  }
  if (from._internal_has_tschchartseriesdefaultfill()) {
    _this->_impl_.tschchartseriesdefaultfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesdefaultfill_);
  }
  if (from._internal_has_tschchartseriescolumnfill()) {
    _this->_impl_.tschchartseriescolumnfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriescolumnfill_);
  }
  if (from._internal_has_tschchartseriespieshadow()) {
    _this->_impl_.tschchartseriespieshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriespieshadow_);
  }
  if (from._internal_has_tschchartseriesbarshadow()) {
    _this->_impl_.tschchartseriesbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesbarshadow_);
  }
  if (from._internal_has_tschchartseriesareashadow()) {
    _this->_impl_.tschchartseriesareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesareashadow_);
  }
  if (from._internal_has_tschchartseriesscattershadow()) {
    _this->_impl_.tschchartseriesscattershadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesscattershadow_);
  }
  if (from._internal_has_tschchartseriesmixedlineshadow()) {
    _this->_impl_.tschchartseriesmixedlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesmixedlineshadow_);
  }
  if (from._internal_has_tschchartseriesmixedareashadow()) {
    _this->_impl_.tschchartseriesmixedareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesmixedareashadow_);
  }
  if (from._internal_has_tschchartseriesmixedcolumnshadow()) {
    _this->_impl_.tschchartseriesmixedcolumnshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesmixedcolumnshadow_);
  }
  if (from._internal_has_tschchartserieslineshadow()) {
    _this->_impl_.tschchartserieslineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartserieslineshadow_);
  }
  if (from._internal_has_tschchartseriesdefaultshadow()) {
    _this->_impl_.tschchartseriesdefaultshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesdefaultshadow_);
  }
  if (from._internal_has_tschchartseriesmixedcolumnfill()) {
    _this->_impl_.tschchartseriesmixedcolumnfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedcolumnfill_);
  }
  if (from._internal_has_tschchartseriesmixedareafill()) {
    _this->_impl_.tschchartseriesmixedareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedareafill_);
  }
  if (from._internal_has_tschchartseriesmixedcolumnstroke()) {
    _this->_impl_.tschchartseriesmixedcolumnstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedcolumnstroke_);
  }
  if (from._internal_has_tschchartseriesmixedlinestroke()) {
    _this->_impl_.tschchartseriesmixedlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedlinestroke_);
  }
  if (from._internal_has_tschchartseriesmixedareastroke()) {
    _this->_impl_.tschchartseriesmixedareastroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedareastroke_);
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolfill()) {
    _this->_impl_.tschchartseriesmixedlinesymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedlinesymbolfill_);
  }
  if (from._internal_has_tschchartseriesmixedareasymbolfill()) {
    _this->_impl_.tschchartseriesmixedareasymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedareasymbolfill_);
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolstroke()) {
    _this->_impl_.tschchartseriesmixedlinesymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedlinesymbolstroke_);
  }
  if (from._internal_has_tschchartseriesmixedareasymbolstroke()) {
    _this->_impl_.tschchartseriesmixedareasymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedareasymbolstroke_);
  }
  if (from._internal_has_tschchartseriesdefaulttrendlinestroke()) {
    _this->_impl_.tschchartseriesdefaulttrendlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaulttrendlinestroke_);
  }
  if (from._internal_has_tschchartseriesdefaulttrendlineshadow()) {
    _this->_impl_.tschchartseriesdefaulttrendlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesdefaulttrendlineshadow_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarshadow()) {
    _this->_impl_.tschchartseriesdefaulterrorbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesdefaulterrorbarshadow_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstroke()) {
    _this->_impl_.tschchartseriesdefaulterrorbarstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaulterrorbarstroke_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaulterrorbarstrokescatterx_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarlineend()) {
    _this->_impl_.tschchartseriesdefaulterrorbarlineend_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriesdefaulterrorbarlineend_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriesdefaulterrorbarlineendscatterx_);
  }
  if (from._internal_has_tschchartseriesbubblesymbolfill()) {
    _this->_impl_.tschchartseriesbubblesymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesbubblesymbolfill_);
  }
  if (from._internal_has_tschchartseriesbubblestroke()) {
    _this->_impl_.tschchartseriesbubblestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesbubblestroke_);
  }
  if (from._internal_has_tschchartseriesbubblesymbolstroke()) {
    _this->_impl_.tschchartseriesbubblesymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesbubblesymbolstroke_);
  }
  if (from._internal_has_tschchartseriesbubbleshadow()) {
    _this->_impl_.tschchartseriesbubbleshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesbubbleshadow_);
  }
  if (from._internal_has_tschchartseriesdefaultdeprecated3dfill()) {
    _this->_impl_.tschchartseriesdefaultdeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from._impl_.tschchartseriesdefaultdeprecated3dfill_);
  }
  if (from._internal_has_tschchartseriesbardeprecated3dfill()) {
    _this->_impl_.tschchartseriesbardeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from._impl_.tschchartseriesbardeprecated3dfill_);
  }
  if (from._internal_has_tschchartseriescolumndeprecated3dfill()) {
    _this->_impl_.tschchartseriescolumndeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from._impl_.tschchartseriescolumndeprecated3dfill_);
  }
  if (from._internal_has_tschchartserieslinedeprecated3dfill()) {
    _this->_impl_.tschchartserieslinedeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from._impl_.tschchartserieslinedeprecated3dfill_);
  }
  if (from._internal_has_tschchartseriesareadeprecated3dfill()) {
    _this->_impl_.tschchartseriesareadeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from._impl_.tschchartseriesareadeprecated3dfill_);
  }
  if (from._internal_has_tschchartseriespiedeprecated3dfill()) {
    _this->_impl_.tschchartseriespiedeprecated3dfill_ = new ::TSCH::DEPRECATEDChart3DFillArchive(*from._impl_.tschchartseriespiedeprecated3dfill_);
  }
  if (from._internal_has_tschchartseries3dbarshadow()) {
    _this->_impl_.tschchartseries3dbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dbarshadow_);
  }
  if (from._internal_has_tschchartseries3dcolumnshadow()) {
    _this->_impl_.tschchartseries3dcolumnshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dcolumnshadow_);
  }
  if (from._internal_has_tschchartseries3dlineshadow()) {
    _this->_impl_.tschchartseries3dlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dlineshadow_);
  }
  if (from._internal_has_tschchartseries3dareashadow()) {
    _this->_impl_.tschchartseries3dareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dareashadow_);
  }
  if (from._internal_has_tschchartseries3dpieshadow()) {
    _this->_impl_.tschchartseries3dpieshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dpieshadow_);
  }
  if (from._internal_has_tschchartseries3dbarfill()) {
    _this->_impl_.tschchartseries3dbarfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dbarfill_);
  }
  if (from._internal_has_tschchartseries3dcolumnfill()) {
    _this->_impl_.tschchartseries3dcolumnfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dcolumnfill_);
  }
  if (from._internal_has_tschchartseries3dlinefill()) {
    _this->_impl_.tschchartseries3dlinefill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dlinefill_);
  }
  if (from._internal_has_tschchartseries3dareafill()) {
    _this->_impl_.tschchartseries3dareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dareafill_);
  }
  if (from._internal_has_tschchartseries3dpiefill()) {
    _this->_impl_.tschchartseries3dpiefill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dpiefill_);
  }
  ::memcpy(&_impl_.tschchartseriesbarvaluelabelposition_, &from._impl_.tschchartseriesbarvaluelabelposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartseriesbubblevaluelabelposition_) -
    reinterpret_cast<char*>(&_impl_.tschchartseriesbarvaluelabelposition_)) + sizeof(_impl_.tschchartseriesbubblevaluelabelposition_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartSeriesStyleArchive)
}

inline void ChartSeriesStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartseriesbarfill_){nullptr}
    , decltype(_impl_.tschchartseriesbarstroke_){nullptr}
    , decltype(_impl_.tschchartserieslinestroke_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesareafill_){nullptr}
    , decltype(_impl_.tschchartseriesareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriespiefill_){nullptr}
    , decltype(_impl_.tschchartseriespiestroke_){nullptr}
    , decltype(_impl_.tschchartseriesscatterstroke_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultfill_){nullptr}
    , decltype(_impl_.tschchartseriescolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriespieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesscattershadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartserieslineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareafill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineend_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesbubblestroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultdeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseriesbardeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseriescolumndeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartserieslinedeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseriesareadeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseriespiedeprecated3dfill_){nullptr}
    , decltype(_impl_.tschchartseries3dbarshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dlineshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dareashadow_){nullptr}
    , decltype(_impl_.tschchartseries3dpieshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dbarfill_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseries3dlinefill_){nullptr}
    , decltype(_impl_.tschchartseries3dareafill_){nullptr}
    , decltype(_impl_.tschchartseries3dpiefill_){nullptr}
    , decltype(_impl_.tschchartseriesbarvaluelabelposition_){0}
    , decltype(_impl_.tschchartserieslinesymbolsize_){0}
    , decltype(_impl_.tschchartserieslinevaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesareasymbolsize_){0}
    , decltype(_impl_.tschchartseriesscattersymbolsize_){0}
    , decltype(_impl_.tschchartseriesscattervaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesdefaultvaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesdefaultlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesbarlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartserieslinelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesarealabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriespielabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesmixedlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaultopacity_){0}
    , decltype(_impl_.tschchartseriesscattersymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriespiedeprecatedserieslabelson_){false}
    , decltype(_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesmixedlinesymbolsize_){0}
    , decltype(_impl_.tschchartseriesmixedareasymbolsize_){0}
    , decltype(_impl_.tschchartseriesmixedcolumnvaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesmixedlinevaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesmixedareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesstackedbarvaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesstackedareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationopacity_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_){0}
    , decltype(_impl_.tschchartseriesbubblevaluelabelposition_){0}
  };
}

ChartSeriesStyleArchive::~ChartSeriesStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartSeriesStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSeriesStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbarfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbarstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinesymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinesymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareastroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareasymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareasymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespiefill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespiestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscatterstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscattersymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscattersymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriescolumnfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespieshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscattershadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedcolumnshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedcolumnfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedcolumnstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareastroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlinesymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareasymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlinesymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareasymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulttrendlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulttrendlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarlineend_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubblesymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubblestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubblesymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubbleshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultdeprecated3dfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbardeprecated3dfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriescolumndeprecated3dfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinedeprecated3dfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareadeprecated3dfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespiedeprecated3dfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dcolumnshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dpieshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dbarfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dcolumnfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dlinefill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dpiefill_;
}

void ChartSeriesStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSeriesStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbarfill_ != nullptr);
      _impl_.tschchartseriesbarfill_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbarstroke_ != nullptr);
      _impl_.tschchartseriesbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinestroke_ != nullptr);
      _impl_.tschchartserieslinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinesymbolfill_ != nullptr);
      _impl_.tschchartserieslinesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinesymbolstroke_ != nullptr);
      _impl_.tschchartserieslinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareafill_ != nullptr);
      _impl_.tschchartseriesareafill_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareastroke_ != nullptr);
      _impl_.tschchartseriesareastroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareasymbolfill_ != nullptr);
      _impl_.tschchartseriesareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareasymbolstroke_ != nullptr);
      _impl_.tschchartseriesareasymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespiefill_ != nullptr);
      _impl_.tschchartseriespiefill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespiestroke_ != nullptr);
      _impl_.tschchartseriespiestroke_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscatterstroke_ != nullptr);
      _impl_.tschchartseriesscatterstroke_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscattersymbolfill_ != nullptr);
      _impl_.tschchartseriesscattersymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscattersymbolstroke_ != nullptr);
      _impl_.tschchartseriesscattersymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultfill_ != nullptr);
      _impl_.tschchartseriesdefaultfill_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriescolumnfill_ != nullptr);
      _impl_.tschchartseriescolumnfill_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespieshadow_ != nullptr);
      _impl_.tschchartseriespieshadow_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbarshadow_ != nullptr);
      _impl_.tschchartseriesbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareashadow_ != nullptr);
      _impl_.tschchartseriesareashadow_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscattershadow_ != nullptr);
      _impl_.tschchartseriesscattershadow_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlineshadow_ != nullptr);
      _impl_.tschchartseriesmixedlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareashadow_ != nullptr);
      _impl_.tschchartseriesmixedareashadow_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedcolumnshadow_ != nullptr);
      _impl_.tschchartseriesmixedcolumnshadow_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslineshadow_ != nullptr);
      _impl_.tschchartserieslineshadow_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultshadow_ != nullptr);
      _impl_.tschchartseriesdefaultshadow_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedcolumnfill_ != nullptr);
      _impl_.tschchartseriesmixedcolumnfill_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareafill_ != nullptr);
      _impl_.tschchartseriesmixedareafill_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedcolumnstroke_ != nullptr);
      _impl_.tschchartseriesmixedcolumnstroke_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlinestroke_ != nullptr);
      _impl_.tschchartseriesmixedlinestroke_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareastroke_ != nullptr);
      _impl_.tschchartseriesmixedareastroke_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlinesymbolfill_ != nullptr);
      _impl_.tschchartseriesmixedlinesymbolfill_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareasymbolfill_ != nullptr);
      _impl_.tschchartseriesmixedareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlinesymbolstroke_ != nullptr);
      _impl_.tschchartseriesmixedlinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareasymbolstroke_ != nullptr);
      _impl_.tschchartseriesmixedareasymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulttrendlinestroke_ != nullptr);
      _impl_.tschchartseriesdefaulttrendlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulttrendlineshadow_ != nullptr);
      _impl_.tschchartseriesdefaulttrendlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarshadow_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarstroke_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarlineend_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarlineend_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubblesymbolfill_ != nullptr);
      _impl_.tschchartseriesbubblesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubblestroke_ != nullptr);
      _impl_.tschchartseriesbubblestroke_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubblesymbolstroke_ != nullptr);
      _impl_.tschchartseriesbubblesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubbleshadow_ != nullptr);
      _impl_.tschchartseriesbubbleshadow_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultdeprecated3dfill_ != nullptr);
      _impl_.tschchartseriesdefaultdeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbardeprecated3dfill_ != nullptr);
      _impl_.tschchartseriesbardeprecated3dfill_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriescolumndeprecated3dfill_ != nullptr);
      _impl_.tschchartseriescolumndeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinedeprecated3dfill_ != nullptr);
      _impl_.tschchartserieslinedeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareadeprecated3dfill_ != nullptr);
      _impl_.tschchartseriesareadeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespiedeprecated3dfill_ != nullptr);
      _impl_.tschchartseriespiedeprecated3dfill_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dbarshadow_ != nullptr);
      _impl_.tschchartseries3dbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dcolumnshadow_ != nullptr);
      _impl_.tschchartseries3dcolumnshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dlineshadow_ != nullptr);
      _impl_.tschchartseries3dlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dareashadow_ != nullptr);
      _impl_.tschchartseries3dareashadow_->Clear();
    }
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dpieshadow_ != nullptr);
      _impl_.tschchartseries3dpieshadow_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dbarfill_ != nullptr);
      _impl_.tschchartseries3dbarfill_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dcolumnfill_ != nullptr);
      _impl_.tschchartseries3dcolumnfill_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dlinefill_ != nullptr);
      _impl_.tschchartseries3dlinefill_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dareafill_ != nullptr);
      _impl_.tschchartseries3dareafill_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dpiefill_ != nullptr);
      _impl_.tschchartseries3dpiefill_->Clear();
    }
  }
  if (cached_has_bits & 0xc0000000u) {
    ::memset(&_impl_.tschchartseriesbarvaluelabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartserieslinesymbolsize_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbarvaluelabelposition_)) + sizeof(_impl_.tschchartserieslinesymbolsize_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartserieslinevaluelabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesbarlabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartserieslinevaluelabelposition_)) + sizeof(_impl_.tschchartseriesbarlabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartserieslinelabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_) -
        reinterpret_cast<char*>(&_impl_.tschchartserieslinelabelparagraphstyleindex_)) + sizeof(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartserieslinesymbolfilluseseriesfill_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesareasymbolfilluseseriesstroke_) -
        reinterpret_cast<char*>(&_impl_.tschchartserieslinesymbolfilluseseriesfill_)) + sizeof(_impl_.tschchartseriesareasymbolfilluseseriesstroke_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesmixedlinesymbolsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedlinesymbolsize_)) + sizeof(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_));
  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulttrendlinersquaredopacity_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_)) + sizeof(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_));
  }
  _impl_.tschchartseriesbubblevaluelabelposition_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbarfill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarvaluelabelposition = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriesbarvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieslinesymbolsize = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_tschchartserieslinesymbolsize(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinevaluelabelposition = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartserieslinevaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartserieslinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareafill = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareastroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareavaluelabelposition = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesareasymbolsize = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _Internal::set_has_tschchartseriesareasymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriespiefill = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiefill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscatterstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesscattersymbolsize = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_tschchartseriesscattersymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesscattersymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattervaluelabelposition = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartseriesscattervaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesscattervaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartseriesdefaultvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriespiedeprecatedserieslabelson(&_impl_._has_bits_);
          _impl_.tschchartseriespiedeprecatedserieslabelson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescolumnfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespieshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattershadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartseriesdefaultlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartseriesbarlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesbarlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartserieslinelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartserieslinelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesarealabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesarealabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriespielabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriespielabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesmixedlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaultopacity = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_tschchartseriesdefaultopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesscattersymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesscattersymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareastroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedlinesymbolsize = 135;
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedareasymbolsize = 136;
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_tschchartseriesmixedareasymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriesmixedcolumnvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedcolumnvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartseriesmixedlinevaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartseriesmixedareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartseriespieoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriespieoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesstackedbarvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesstackedareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
      case 180:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
      case 182:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
      case 184:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
      case 212:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblevaluelabelposition = 213;
      case 213:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartseriesbubblevaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
      case 214:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubbleshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
      case 215:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesbubblesymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultdeprecated3dfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbardeprecated3dfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescolumndeprecated3dfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinedeprecated3dfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareadeprecated3dfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiedeprecated3dfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
      case 307:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
      case 308:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
      case 309:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpieshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
      case 320:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
      case 321:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlinefill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dareafill = 323;
      case 323:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
      case 324:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpiefill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSeriesStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesbarfill = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tschchartseriesbarfill(this),
        _Internal::tschchartseriesbarfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartseriesbarstroke(this),
        _Internal::tschchartseriesbarstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriesbarvaluelabelposition = 13;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_tschchartseriesbarvaluelabelposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::tschchartserieslinestroke(this),
        _Internal::tschchartserieslinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tschchartserieslinesymbolfill(this),
        _Internal::tschchartserieslinesymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::tschchartserieslinesymbolstroke(this),
        _Internal::tschchartserieslinesymbolstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float tschchartserieslinesymbolsize = 20;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_tschchartserieslinesymbolsize(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartserieslinevaluelabelposition = 22;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_tschchartserieslinevaluelabelposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesareafill = 25;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::tschchartseriesareafill(this),
        _Internal::tschchartseriesareafill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::tschchartseriesareastroke(this),
        _Internal::tschchartseriesareastroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesareavaluelabelposition = 28;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_tschchartseriesareavaluelabelposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::tschchartseriesareasymbolfill(this),
        _Internal::tschchartseriesareasymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::tschchartseriesareasymbolstroke(this),
        _Internal::tschchartseriesareasymbolstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional float tschchartseriesareasymbolsize = 32;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_tschchartseriesareasymbolsize(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschchartseriespiefill = 35;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::tschchartseriespiefill(this),
        _Internal::tschchartseriespiefill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::tschchartseriespiestroke(this),
        _Internal::tschchartseriespiestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::tschchartseriesscatterstroke(this),
        _Internal::tschchartseriesscatterstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::tschchartseriesscattersymbolfill(this),
        _Internal::tschchartseriesscattersymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::tschchartseriesscattersymbolstroke(this),
        _Internal::tschchartseriesscattersymbolstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional float tschchartseriesscattersymbolsize = 44;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(44, this->_internal_tschchartseriesscattersymbolsize(), target);
  }

  // optional int32 tschchartseriesscattervaluelabelposition = 46;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_tschchartseriesscattervaluelabelposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::tschchartseriesdefaultfill(this),
        _Internal::tschchartseriesdefaultfill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(52, this->_internal_tschchartseriesdefaultvaluelabelposition(), target);
  }

  // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartseriespiedeprecatedserieslabelson(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::tschchartseriescolumnfill(this),
        _Internal::tschchartseriescolumnfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::tschchartseriespieshadow(this),
        _Internal::tschchartseriespieshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::tschchartseriesbarshadow(this),
        _Internal::tschchartseriesbarshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::tschchartseriesareashadow(this),
        _Internal::tschchartseriesareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::tschchartseriesscattershadow(this),
        _Internal::tschchartseriesscattershadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::tschchartseriesmixedlineshadow(this),
        _Internal::tschchartseriesmixedlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::tschchartseriesmixedareashadow(this),
        _Internal::tschchartseriesmixedareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(106, _Internal::tschchartseriesmixedcolumnshadow(this),
        _Internal::tschchartseriesmixedcolumnshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, _Internal::tschchartserieslineshadow(this),
        _Internal::tschchartserieslineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, _Internal::tschchartseriesdefaultshadow(this),
        _Internal::tschchartseriesdefaultshadow(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(110, this->_internal_tschchartseriesdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(111, this->_internal_tschchartseriesbarlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(112, this->_internal_tschchartserieslinelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(113, this->_internal_tschchartseriesarealabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(114, this->_internal_tschchartseriespielabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(115, this->_internal_tschchartseriesmixedlabelparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaultopacity = 116;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(116, this->_internal_tschchartseriesdefaultopacity(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(117, this->_internal_tschchartserieslinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(118, this->_internal_tschchartseriesareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(119, this->_internal_tschchartseriesscattersymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(120, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(121, this->_internal_tschchartseriesmixedareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(122, this->_internal_tschchartserieslinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(123, this->_internal_tschchartseriesareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(124, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(125, this->_internal_tschchartseriesmixedareasymbolfilluseseriesfill(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(130, _Internal::tschchartseriesmixedcolumnfill(this),
        _Internal::tschchartseriesmixedcolumnfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(131, _Internal::tschchartseriesmixedareafill(this),
        _Internal::tschchartseriesmixedareafill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(132, _Internal::tschchartseriesmixedcolumnstroke(this),
        _Internal::tschchartseriesmixedcolumnstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(133, _Internal::tschchartseriesmixedlinestroke(this),
        _Internal::tschchartseriesmixedlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(134, _Internal::tschchartseriesmixedareastroke(this),
        _Internal::tschchartseriesmixedareastroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional float tschchartseriesmixedlinesymbolsize = 135;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(135, this->_internal_tschchartseriesmixedlinesymbolsize(), target);
  }

  // optional float tschchartseriesmixedareasymbolsize = 136;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(136, this->_internal_tschchartseriesmixedareasymbolsize(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(137, _Internal::tschchartseriesmixedlinesymbolfill(this),
        _Internal::tschchartseriesmixedlinesymbolfill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(138, _Internal::tschchartseriesmixedareasymbolfill(this),
        _Internal::tschchartseriesmixedareasymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(139, _Internal::tschchartseriesmixedlinesymbolstroke(this),
        _Internal::tschchartseriesmixedlinesymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(140, _Internal::tschchartseriesmixedareasymbolstroke(this),
        _Internal::tschchartseriesmixedareasymbolstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(141, this->_internal_tschchartseriesmixedcolumnvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(142, this->_internal_tschchartseriesmixedlinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(143, this->_internal_tschchartseriesmixedareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(150, this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(151, this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(153, this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(154, this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(155, this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(156, this->_internal_tschchartseriesstackedbarvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(157, this->_internal_tschchartseriesstackedareavaluelabelposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(167, _Internal::tschchartseriesdefaulttrendlinestroke(this),
        _Internal::tschchartseriesdefaulttrendlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(168, _Internal::tschchartseriesdefaulttrendlineshadow(this),
        _Internal::tschchartseriesdefaulttrendlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(180, _Internal::tschchartseriesdefaulterrorbarshadow(this),
        _Internal::tschchartseriesdefaulterrorbarshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(181, _Internal::tschchartseriesdefaulterrorbarstroke(this),
        _Internal::tschchartseriesdefaulterrorbarstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(182, _Internal::tschchartseriesdefaulterrorbarstrokescatterx(this),
        _Internal::tschchartseriesdefaulterrorbarstrokescatterx(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(183, _Internal::tschchartseriesdefaulterrorbarlineend(this),
        _Internal::tschchartseriesdefaulterrorbarlineend(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(184, _Internal::tschchartseriesdefaulterrorbarlineendscatterx(this),
        _Internal::tschchartseriesdefaulterrorbarlineendscatterx(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(201, this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(202, this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(205, this->_internal_tschchartseriesdefaulttrendlineequationopacity(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(206, this->_internal_tschchartseriesdefaulttrendlinersquaredopacity(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(207, _Internal::tschchartseriesbubblesymbolfill(this),
        _Internal::tschchartseriesbubblesymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(211, _Internal::tschchartseriesbubblestroke(this),
        _Internal::tschchartseriesbubblestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(212, _Internal::tschchartseriesbubblesymbolstroke(this),
        _Internal::tschchartseriesbubblesymbolstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 tschchartseriesbubblevaluelabelposition = 213;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(213, this->_internal_tschchartseriesbubblevaluelabelposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(214, _Internal::tschchartseriesbubbleshadow(this),
        _Internal::tschchartseriesbubbleshadow(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(215, this->_internal_tschchartseriesbubblesymbolfilluseseriesstroke(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(300, _Internal::tschchartseriesdefaultdeprecated3dfill(this),
        _Internal::tschchartseriesdefaultdeprecated3dfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(301, _Internal::tschchartseriesbardeprecated3dfill(this),
        _Internal::tschchartseriesbardeprecated3dfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(302, _Internal::tschchartseriescolumndeprecated3dfill(this),
        _Internal::tschchartseriescolumndeprecated3dfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(303, _Internal::tschchartserieslinedeprecated3dfill(this),
        _Internal::tschchartserieslinedeprecated3dfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(304, _Internal::tschchartseriesareadeprecated3dfill(this),
        _Internal::tschchartseriesareadeprecated3dfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(305, _Internal::tschchartseriespiedeprecated3dfill(this),
        _Internal::tschchartseriespiedeprecated3dfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(306, _Internal::tschchartseries3dbarshadow(this),
        _Internal::tschchartseries3dbarshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(307, _Internal::tschchartseries3dcolumnshadow(this),
        _Internal::tschchartseries3dcolumnshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(308, _Internal::tschchartseries3dlineshadow(this),
        _Internal::tschchartseries3dlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(309, _Internal::tschchartseries3dareashadow(this),
        _Internal::tschchartseries3dareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(310, _Internal::tschchartseries3dpieshadow(this),
        _Internal::tschchartseries3dpieshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(320, _Internal::tschchartseries3dbarfill(this),
        _Internal::tschchartseries3dbarfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(321, _Internal::tschchartseries3dcolumnfill(this),
        _Internal::tschchartseries3dcolumnfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(322, _Internal::tschchartseries3dlinefill(this),
        _Internal::tschchartseries3dlinefill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dareafill = 323;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(323, _Internal::tschchartseries3dareafill(this),
        _Internal::tschchartseries3dareafill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(324, _Internal::tschchartseries3dpiefill(this),
        _Internal::tschchartseries3dpiefill(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartSeriesStyleArchive)
  return target;
}

size_t ChartSeriesStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSD.FillArchive tschchartseriesbarfill = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbarfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbarstroke = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinestroke = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinestroke_);
    }

    // optional .TSD.FillArchive tschchartserieslinesymbolfill = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinesymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinesymbolstroke_);
    }

    // optional .TSD.FillArchive tschchartseriesareafill = 25;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareafill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesareastroke = 26;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareastroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.FillArchive tschchartseriesareasymbolfill = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareasymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 30;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareasymbolstroke_);
    }

    // optional .TSD.FillArchive tschchartseriespiefill = 35;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespiefill_);
    }

    // optional .TSD.StrokeArchive tschchartseriespiestroke = 36;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespiestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 40;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscatterstroke_);
    }

    // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 41;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscattersymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 42;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscattersymbolstroke_);
    }

    // optional .TSD.FillArchive tschchartseriesdefaultfill = 50;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultfill_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.FillArchive tschchartseriescolumnfill = 62;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriescolumnfill_);
    }

    // optional .TSD.ShadowArchive tschchartseriespieshadow = 100;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespieshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesbarshadow = 101;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbarshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesareashadow = 102;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesscattershadow = 103;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscattershadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 104;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 105;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 106;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedcolumnshadow_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.ShadowArchive tschchartserieslineshadow = 107;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 108;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultshadow_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 130;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedcolumnfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedareafill = 131;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareafill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 132;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedcolumnstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 133;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 134;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareastroke_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 137;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlinesymbolfill_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 138;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareasymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 139;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlinesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 140;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareasymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 167;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulttrendlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 168;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulttrendlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 180;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 181;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 182;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarstrokescatterx_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 183;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarlineend_);
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 184;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarlineendscatterx_);
    }

    // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 207;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubblesymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 211;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubblestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 212;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubblesymbolstroke_);
    }

    // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 214;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubbleshadow_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesdefaultdeprecated3dfill = 300;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultdeprecated3dfill_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesbardeprecated3dfill = 301;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbardeprecated3dfill_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriescolumndeprecated3dfill = 302;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriescolumndeprecated3dfill_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartserieslinedeprecated3dfill = 303;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinedeprecated3dfill_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriesareadeprecated3dfill = 304;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareadeprecated3dfill_);
    }

    // optional .TSCH.DEPRECATEDChart3DFillArchive tschchartseriespiedeprecated3dfill = 305;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespiedeprecated3dfill_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 306;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dbarshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 307;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dcolumnshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 308;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dareashadow = 309;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dareashadow_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 310;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dpieshadow_);
    }

    // optional .TSD.FillArchive tschchartseries3dbarfill = 320;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dbarfill_);
    }

    // optional .TSD.FillArchive tschchartseries3dcolumnfill = 321;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dcolumnfill_);
    }

    // optional .TSD.FillArchive tschchartseries3dlinefill = 322;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dlinefill_);
    }

    // optional .TSD.FillArchive tschchartseries3dareafill = 323;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dareafill_);
    }

    // optional .TSD.FillArchive tschchartseries3dpiefill = 324;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dpiefill_);
    }

    // optional int32 tschchartseriesbarvaluelabelposition = 13;
    if (cached_has_bits & 0x40000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesbarvaluelabelposition());
    }

    // optional float tschchartserieslinesymbolsize = 20;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartserieslinevaluelabelposition = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinevaluelabelposition());
    }

    // optional int32 tschchartseriesareavaluelabelposition = 28;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareavaluelabelposition());
    }

    // optional float tschchartseriesareasymbolsize = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesscattersymbolsize = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesscattervaluelabelposition = 46;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattervaluelabelposition());
    }

    // optional int32 tschchartseriesdefaultvaluelabelposition = 52;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultvaluelabelposition());
    }

    // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 110;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbarlabelparagraphstyleindex = 111;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarlabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartserieslinelabelparagraphstyleindex = 112;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesarealabelparagraphstyleindex = 113;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesarealabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespielabelparagraphstyleindex = 114;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespielabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 115;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlabelparagraphstyleindex());
    }

    // optional float tschchartseriesdefaultopacity = 116;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 119;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 120;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 121;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool tschchartserieslinesymbolfilluseseriesfill = 122;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareasymbolfilluseseriesfill = 123;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 124;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 125;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespiedeprecatedserieslabelson = 60;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 215;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesstroke = 117;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareasymbolfilluseseriesstroke = 118;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartseriesmixedlinesymbolsize = 135;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesmixedareasymbolsize = 136;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 141;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedcolumnvaluelabelposition());
    }

    // optional int32 tschchartseriesmixedlinevaluelabelposition = 142;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinevaluelabelposition());
    }

    // optional int32 tschchartseriesmixedareavaluelabelposition = 143;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareavaluelabelposition());
    }

    // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 150;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 151;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 153;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex());
    }

  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 154;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 155;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesstackedbarvaluelabelposition = 156;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedbarvaluelabelposition());
    }

    // optional int32 tschchartseriesstackedareavaluelabelposition = 157;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedareavaluelabelposition());
    }

    // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 201;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex());
    }

    // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 202;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex());
    }

    // optional float tschchartseriesdefaulttrendlineequationopacity = 205;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredopacity = 206;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  // optional int32 tschchartseriesbubblevaluelabelposition = 213;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_tschchartseriesbubblevaluelabelposition());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSeriesStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesStyleArchive::GetClassData() const { return &_class_data_; }


void ChartSeriesStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSeriesStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartSeriesStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartseriesbarfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesbarfill());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseriesbarstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesbarstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartserieslinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartserieslinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartserieslinesymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartserieslinesymbolfill());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartserieslinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartserieslinesymbolstroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseriesareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesareafill());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseriesareastroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesareastroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartseriesareasymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesareasymbolfill());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartseriesareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesareasymbolstroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartseriespiefill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriespiefill());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartseriespiestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriespiestroke());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartseriesscatterstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesscatterstroke());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_tschchartseriesscattersymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesscattersymbolfill());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_tschchartseriesscattersymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesscattersymbolstroke());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_tschchartseriesdefaultfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesdefaultfill());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_tschchartseriescolumnfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriescolumnfill());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_tschchartseriespieshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriespieshadow());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_tschchartseriesbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesbarshadow());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_tschchartseriesareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesareashadow());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_tschchartseriesscattershadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesscattershadow());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_tschchartseriesmixedlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesmixedlineshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_tschchartseriesmixedareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesmixedareashadow());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_tschchartseriesmixedcolumnshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesmixedcolumnshadow());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_tschchartserieslineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartserieslineshadow());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_tschchartseriesdefaultshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesdefaultshadow());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_tschchartseriesmixedcolumnfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedcolumnfill());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_tschchartseriesmixedareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedareafill());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_tschchartseriesmixedcolumnstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedcolumnstroke());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_tschchartseriesmixedlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedlinestroke());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_tschchartseriesmixedareastroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedareastroke());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_tschchartseriesmixedlinesymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedlinesymbolfill());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschchartseriesmixedareasymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedareasymbolfill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartseriesmixedlinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedlinesymbolstroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseriesmixedareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedareasymbolstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartseriesdefaulttrendlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaulttrendlinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartseriesdefaulttrendlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesdefaulttrendlineshadow());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarshadow());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarstroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarstrokescatterx());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarlineend()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarlineend());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarlineendscatterx());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartseriesbubblesymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesbubblesymbolfill());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartseriesbubblestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesbubblestroke());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartseriesbubblesymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesbubblesymbolstroke());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_tschchartseriesbubbleshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesbubbleshadow());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_tschchartseriesdefaultdeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(
          from._internal_tschchartseriesdefaultdeprecated3dfill());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_tschchartseriesbardeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(
          from._internal_tschchartseriesbardeprecated3dfill());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_tschchartseriescolumndeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(
          from._internal_tschchartseriescolumndeprecated3dfill());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_tschchartserieslinedeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(
          from._internal_tschchartserieslinedeprecated3dfill());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_tschchartseriesareadeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(
          from._internal_tschchartseriesareadeprecated3dfill());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_tschchartseriespiedeprecated3dfill()->::TSCH::DEPRECATEDChart3DFillArchive::MergeFrom(
          from._internal_tschchartseriespiedeprecated3dfill());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_tschchartseries3dbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dbarshadow());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_tschchartseries3dcolumnshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dcolumnshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_tschchartseries3dlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dlineshadow());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_tschchartseries3dareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dareashadow());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_tschchartseries3dpieshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dpieshadow());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_tschchartseries3dbarfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dbarfill());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_tschchartseries3dcolumnfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dcolumnfill());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_tschchartseries3dlinefill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dlinefill());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_tschchartseries3dareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dareafill());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_tschchartseries3dpiefill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dpiefill());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesbarvaluelabelposition_ = from._impl_.tschchartseriesbarvaluelabelposition_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartserieslinesymbolsize_ = from._impl_.tschchartserieslinesymbolsize_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartserieslinevaluelabelposition_ = from._impl_.tschchartserieslinevaluelabelposition_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriesareavaluelabelposition_ = from._impl_.tschchartseriesareavaluelabelposition_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriesareasymbolsize_ = from._impl_.tschchartseriesareasymbolsize_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriesscattersymbolsize_ = from._impl_.tschchartseriesscattersymbolsize_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartseriesscattervaluelabelposition_ = from._impl_.tschchartseriesscattervaluelabelposition_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriesdefaultvaluelabelposition_ = from._impl_.tschchartseriesdefaultvaluelabelposition_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartseriesdefaultlabelparagraphstyleindex_ = from._impl_.tschchartseriesdefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriesbarlabelparagraphstyleindex_ = from._impl_.tschchartseriesbarlabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartserieslinelabelparagraphstyleindex_ = from._impl_.tschchartserieslinelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesarealabelparagraphstyleindex_ = from._impl_.tschchartseriesarealabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartseriespielabelparagraphstyleindex_ = from._impl_.tschchartseriespielabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesmixedlabelparagraphstyleindex_ = from._impl_.tschchartseriesmixedlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriesdefaultopacity_ = from._impl_.tschchartseriesdefaultopacity_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesscattersymbolfilluseseriesstroke_ = from._impl_.tschchartseriesscattersymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_ = from._impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_ = from._impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartserieslinesymbolfilluseseriesfill_ = from._impl_.tschchartserieslinesymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesareasymbolfilluseseriesfill_ = from._impl_.tschchartseriesareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_ = from._impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_ = from._impl_.tschchartseriesmixedareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriespiedeprecatedserieslabelson_ = from._impl_.tschchartseriespiedeprecatedserieslabelson_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_ = from._impl_.tschchartseriesbubblesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartserieslinesymbolfilluseseriesstroke_ = from._impl_.tschchartserieslinesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesareasymbolfilluseseriesstroke_ = from._impl_.tschchartseriesareasymbolfilluseseriesstroke_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesmixedlinesymbolsize_ = from._impl_.tschchartseriesmixedlinesymbolsize_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriesmixedareasymbolsize_ = from._impl_.tschchartseriesmixedareasymbolsize_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseriesmixedcolumnvaluelabelposition_ = from._impl_.tschchartseriesmixedcolumnvaluelabelposition_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesmixedlinevaluelabelposition_ = from._impl_.tschchartseriesmixedlinevaluelabelposition_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesmixedareavaluelabelposition_ = from._impl_.tschchartseriesmixedareavaluelabelposition_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriespieoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriesstackedbarvaluelabelposition_ = from._impl_.tschchartseriesstackedbarvaluelabelposition_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriesstackedareavaluelabelposition_ = from._impl_.tschchartseriesstackedareavaluelabelposition_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = from._impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = from._impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationopacity_ = from._impl_.tschchartseriesdefaulttrendlineequationopacity_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredopacity_ = from._impl_.tschchartseriesdefaulttrendlinersquaredopacity_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_tschchartseriesbubblevaluelabelposition(from._internal_tschchartseriesbubblevaluelabelposition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesStyleArchive::CopyFrom(const ChartSeriesStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartSeriesStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarfill()) {
    if (!_impl_.tschchartseriesbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarstroke()) {
    if (!_impl_.tschchartseriesbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinestroke()) {
    if (!_impl_.tschchartserieslinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolfill()) {
    if (!_impl_.tschchartserieslinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolstroke()) {
    if (!_impl_.tschchartserieslinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareafill()) {
    if (!_impl_.tschchartseriesareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareastroke()) {
    if (!_impl_.tschchartseriesareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolfill()) {
    if (!_impl_.tschchartseriesareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolstroke()) {
    if (!_impl_.tschchartseriesareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiefill()) {
    if (!_impl_.tschchartseriespiefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiestroke()) {
    if (!_impl_.tschchartseriespiestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscatterstroke()) {
    if (!_impl_.tschchartseriesscatterstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolfill()) {
    if (!_impl_.tschchartseriesscattersymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolstroke()) {
    if (!_impl_.tschchartseriesscattersymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultfill()) {
    if (!_impl_.tschchartseriesdefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescolumnfill()) {
    if (!_impl_.tschchartseriescolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespieshadow()) {
    if (!_impl_.tschchartseriespieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarshadow()) {
    if (!_impl_.tschchartseriesbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareashadow()) {
    if (!_impl_.tschchartseriesareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattershadow()) {
    if (!_impl_.tschchartseriesscattershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlineshadow()) {
    if (!_impl_.tschchartseriesmixedlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareashadow()) {
    if (!_impl_.tschchartseriesmixedareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnshadow()) {
    if (!_impl_.tschchartseriesmixedcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslineshadow()) {
    if (!_impl_.tschchartserieslineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultshadow()) {
    if (!_impl_.tschchartseriesdefaultshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnfill()) {
    if (!_impl_.tschchartseriesmixedcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareafill()) {
    if (!_impl_.tschchartseriesmixedareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnstroke()) {
    if (!_impl_.tschchartseriesmixedcolumnstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinestroke()) {
    if (!_impl_.tschchartseriesmixedlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareastroke()) {
    if (!_impl_.tschchartseriesmixedareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolfill()) {
    if (!_impl_.tschchartseriesmixedlinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolfill()) {
    if (!_impl_.tschchartseriesmixedareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolstroke()) {
    if (!_impl_.tschchartseriesmixedlinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolstroke()) {
    if (!_impl_.tschchartseriesmixedareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlinestroke()) {
    if (!_impl_.tschchartseriesdefaulttrendlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlineshadow()) {
    if (!_impl_.tschchartseriesdefaulttrendlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarshadow()) {
    if (!_impl_.tschchartseriesdefaulterrorbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstroke()) {
    if (!_impl_.tschchartseriesdefaulterrorbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    if (!_impl_.tschchartseriesdefaulterrorbarstrokescatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarlineend()) {
    if (!_impl_.tschchartseriesdefaulterrorbarlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    if (!_impl_.tschchartseriesdefaulterrorbarlineendscatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolfill()) {
    if (!_impl_.tschchartseriesbubblesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblestroke()) {
    if (!_impl_.tschchartseriesbubblestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolstroke()) {
    if (!_impl_.tschchartseriesbubblesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubbleshadow()) {
    if (!_impl_.tschchartseriesbubbleshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultdeprecated3dfill()) {
    if (!_impl_.tschchartseriesdefaultdeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbardeprecated3dfill()) {
    if (!_impl_.tschchartseriesbardeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescolumndeprecated3dfill()) {
    if (!_impl_.tschchartseriescolumndeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinedeprecated3dfill()) {
    if (!_impl_.tschchartserieslinedeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareadeprecated3dfill()) {
    if (!_impl_.tschchartseriesareadeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiedeprecated3dfill()) {
    if (!_impl_.tschchartseriespiedeprecated3dfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarshadow()) {
    if (!_impl_.tschchartseries3dbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnshadow()) {
    if (!_impl_.tschchartseries3dcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlineshadow()) {
    if (!_impl_.tschchartseries3dlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareashadow()) {
    if (!_impl_.tschchartseries3dareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpieshadow()) {
    if (!_impl_.tschchartseries3dpieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarfill()) {
    if (!_impl_.tschchartseries3dbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnfill()) {
    if (!_impl_.tschchartseries3dcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlinefill()) {
    if (!_impl_.tschchartseries3dlinefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareafill()) {
    if (!_impl_.tschchartseries3dareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpiefill()) {
    if (!_impl_.tschchartseries3dpiefill_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesStyleArchive::InternalSwap(ChartSeriesStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  swap(_impl_._has_bits_[3], other->_impl_._has_bits_[3]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, _impl_.tschchartseriesbubblevaluelabelposition_)
      + sizeof(ChartSeriesStyleArchive::_impl_.tschchartseriesbubblevaluelabelposition_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[12]);
}

// ===================================================================

class ChartSeriesNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesNonStyleArchive>()._impl_._has_bits_);
  static const ::TSS::StyleArchive& super(const ChartSeriesNonStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartseriesdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartseriesbarshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartserieslinesymboltype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartserieslineshowsymbol(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartserieslineshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartseriesareashowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartserieslinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartseriesareasymboltype(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartseriesareashowsymbol(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartseriespieshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartseriesscattershowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartseriespiewedgeexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaultshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriespienumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschchartseriespienumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartseriespielabelexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartseriesmixedlineshowsymbol(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartseriesmixedareashowsymbol(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartseriesmixedlinesymboltype(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartseriesmixedareasymboltype(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartseriesmixedshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartseriesmixedlinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartseriesdefaultyaxisordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartseriespieshowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartseriesscattershowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartseriesscattersymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartseriesscatterlinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartseriesscattershowline(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSCH::PreUFF::ChartsNumberFormatArchive& tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesstackedpercentnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschchartseriesdefaultseriestype(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartseriesdefaulttrendlinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartseriesdefaulttrendlineorder(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tschchartseriesdefaulttrendlineperiod(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowlabel(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartseriesdefaulttrendlinelabelstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowequation(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowr2value(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsettingscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_tschchartseriesdefaulterrorbartype(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_tschchartseriesdefaulterrorbartypescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvalue(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvalue(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvalue(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_tschchartseriesdefaultshowtrendline(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbar(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbarscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_tschchartseriesbubblesizedimension(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_tschchartseriesbubbleshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_tschchartseriesbubblelinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_tschchartseriesbubbleshownegativedata(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriesbubbleadjustmentscale(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSS::StyleArchive&
ChartSeriesNonStyleArchive::_Internal::super(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCH::PreUFF::ChartsNumberFormatArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultnumberformat_;
}
const ::TSCH::PreUFF::ChartsNumberFormatArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespienumberformat_;
}
const ::TSCH::PreUFF::ChartsNumberFormatArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesstackedpercentnumberformat_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
void ChartSeriesNonStyleArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedata() {
  if (_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedata() {
  if (_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.PreUFF.ChartSeriesNonStyleArchive)
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSeriesNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulttrendlinelabelstring_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriespienumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesstackedpercentnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultnumberformattype_){}
    , decltype(_impl_.tschchartserieslinesymboltype_){}
    , decltype(_impl_.tschchartseriesbarshowvaluelabels_){}
    , decltype(_impl_.tschchartserieslineshowsymbol_){}
    , decltype(_impl_.tschchartserieslineshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesareashowvaluelabels_){}
    , decltype(_impl_.tschchartserieslinelinetype_){}
    , decltype(_impl_.tschchartseriesareasymboltype_){}
    , decltype(_impl_.tschchartseriesareashowsymbol_){}
    , decltype(_impl_.tschchartseriespieshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesscattershowvaluelabels_){}
    , decltype(_impl_.tschchartseriesdefaultshowvaluelabels_){}
    , decltype(_impl_.tschchartseriespiewedgeexplosion_){}
    , decltype(_impl_.tschchartseriespienumberformattype_){}
    , decltype(_impl_.tschchartseriespielabelexplosion_){}
    , decltype(_impl_.tschchartseriesmixedlinesymboltype_){}
    , decltype(_impl_.tschchartseriesmixedareasymboltype_){}
    , decltype(_impl_.tschchartseriesmixedlineshowsymbol_){}
    , decltype(_impl_.tschchartseriesmixedareashowsymbol_){}
    , decltype(_impl_.tschchartseriesmixedshowvaluelabels_){}
    , decltype(_impl_.tschchartseriespieshowserieslabels_){}
    , decltype(_impl_.tschchartseriesmixedlinelinetype_){}
    , decltype(_impl_.tschchartseriesdefaultyaxisordinal_){}
    , decltype(_impl_.tschchartseriesscattersymboltype_){}
    , decltype(_impl_.tschchartseriesscatterlinetype_){}
    , decltype(_impl_.tschchartseriesscattershowsymbol_){}
    , decltype(_impl_.tschchartseriesscattershowline_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowlabel_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowequation_){}
    , decltype(_impl_.tschchartseriesdefaultseriestype_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinetype_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineorder_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineperiod_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsetting_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsettingscatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbartype_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbartypescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvalue_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvalue_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvalue_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowr2value_){}
    , decltype(_impl_.tschchartseriesdefaultshowtrendline_){}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbar_){}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbarscatterx_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsetx_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsety_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_){}
    , decltype(_impl_.tschchartseriesbubblesizedimension_){}
    , decltype(_impl_.tschchartseriesbubblelinetype_){}
    , decltype(_impl_.tschchartseriesbubbleshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesbubbleshownegativedata_){}
    , decltype(_impl_.tschchartseriesbubbleadjustmentscale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartseriesdefaulttrendlinelabelstring()) {
    _this->_impl_.tschchartseriesdefaulttrendlinelabelstring_.Set(from._internal_tschchartseriesdefaulttrendlinelabelstring(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSS::StyleArchive(*from._impl_.super_);
  }
  if (from._internal_has_tschchartseriesdefaultnumberformat()) {
    _this->_impl_.tschchartseriesdefaultnumberformat_ = new ::TSCH::PreUFF::ChartsNumberFormatArchive(*from._impl_.tschchartseriesdefaultnumberformat_);
  }
  if (from._internal_has_tschchartseriespienumberformat()) {
    _this->_impl_.tschchartseriespienumberformat_ = new ::TSCH::PreUFF::ChartsNumberFormatArchive(*from._impl_.tschchartseriespienumberformat_);
  }
  if (from._internal_has_tschchartseriesstackedpercentnumberformat()) {
    _this->_impl_.tschchartseriesstackedpercentnumberformat_ = new ::TSCH::PreUFF::ChartsNumberFormatArchive(*from._impl_.tschchartseriesstackedpercentnumberformat_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedata()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustompositivedata_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustomnegativedata_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  }
  ::memcpy(&_impl_.tschchartseriesdefaultnumberformattype_, &from._impl_.tschchartseriesdefaultnumberformattype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartseriesbubbleadjustmentscale_) -
    reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultnumberformattype_)) + sizeof(_impl_.tschchartseriesbubbleadjustmentscale_));
  // @@protoc_insertion_point(copy_constructor:TSCH.PreUFF.ChartSeriesNonStyleArchive)
}

inline void ChartSeriesNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulttrendlinelabelstring_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriespienumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesstackedpercentnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultnumberformattype_){0}
    , decltype(_impl_.tschchartserieslinesymboltype_){0}
    , decltype(_impl_.tschchartseriesbarshowvaluelabels_){false}
    , decltype(_impl_.tschchartserieslineshowsymbol_){false}
    , decltype(_impl_.tschchartserieslineshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesareashowvaluelabels_){false}
    , decltype(_impl_.tschchartserieslinelinetype_){0}
    , decltype(_impl_.tschchartseriesareasymboltype_){0}
    , decltype(_impl_.tschchartseriesareashowsymbol_){false}
    , decltype(_impl_.tschchartseriespieshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesscattershowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesdefaultshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriespiewedgeexplosion_){0}
    , decltype(_impl_.tschchartseriespienumberformattype_){0}
    , decltype(_impl_.tschchartseriespielabelexplosion_){0}
    , decltype(_impl_.tschchartseriesmixedlinesymboltype_){0}
    , decltype(_impl_.tschchartseriesmixedareasymboltype_){0}
    , decltype(_impl_.tschchartseriesmixedlineshowsymbol_){false}
    , decltype(_impl_.tschchartseriesmixedareashowsymbol_){false}
    , decltype(_impl_.tschchartseriesmixedshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriespieshowserieslabels_){false}
    , decltype(_impl_.tschchartseriesmixedlinelinetype_){0}
    , decltype(_impl_.tschchartseriesdefaultyaxisordinal_){0}
    , decltype(_impl_.tschchartseriesscattersymboltype_){0}
    , decltype(_impl_.tschchartseriesscatterlinetype_){0}
    , decltype(_impl_.tschchartseriesscattershowsymbol_){false}
    , decltype(_impl_.tschchartseriesscattershowline_){false}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowlabel_){false}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowequation_){false}
    , decltype(_impl_.tschchartseriesdefaultseriestype_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinetype_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineorder_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineperiod_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsetting_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsettingscatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbartype_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbartypescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvalue_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvalue_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvalue_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowr2value_){false}
    , decltype(_impl_.tschchartseriesdefaultshowtrendline_){false}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbar_){false}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbarscatterx_){false}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsetx_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsety_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_){0}
    , decltype(_impl_.tschchartseriesbubblesizedimension_){0}
    , decltype(_impl_.tschchartseriesbubblelinetype_){0}
    , decltype(_impl_.tschchartseriesbubbleshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesbubbleshownegativedata_){false}
    , decltype(_impl_.tschchartseriesbubbleadjustmentscale_){0}
  };
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartSeriesNonStyleArchive::~ChartSeriesNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSeriesNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultnumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespienumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesstackedpercentnumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}

void ChartSeriesNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSeriesNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartseriesdefaulttrendlinelabelstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultnumberformat_ != nullptr);
      _impl_.tschchartseriesdefaultnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespienumberformat_ != nullptr);
      _impl_.tschchartseriespienumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesstackedpercentnumberformat_ != nullptr);
      _impl_.tschchartseriesstackedpercentnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr);
    _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.tschchartseriesdefaultnumberformattype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartserieslinelinetype_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultnumberformattype_)) + sizeof(_impl_.tschchartserieslinelinetype_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesareasymboltype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriespielabelexplosion_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesareasymboltype_)) + sizeof(_impl_.tschchartseriespielabelexplosion_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesmixedlinesymboltype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultyaxisordinal_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedlinesymboltype_)) + sizeof(_impl_.tschchartseriesdefaultyaxisordinal_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartseriesscattersymboltype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulttrendlinetype_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesscattersymboltype_)) + sizeof(_impl_.tschchartseriesdefaulttrendlinetype_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartseriesdefaulttrendlineorder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulttrendlineorder_)) + sizeof(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesdefaulterrorbarpercentvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultshowerrorbarscatterx_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarpercentvalue_)) + sizeof(_impl_.tschchartseriesdefaultshowerrorbarscatterx_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesdefaulttrendlineequationoffsetx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesbubbleshownegativedata_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulttrendlineequationoffsetx_)) + sizeof(_impl_.tschchartseriesbubbleshownegativedata_));
  }
  _impl_.tschchartseriesbubbleadjustmentscale_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSS.StyleArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultnumberformattype = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriesdefaultnumberformattype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbarshowvaluelabels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tschchartseriesbarshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbarshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinesymboltype = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartserieslinesymboltype(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowsymbol = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartserieslineshowsymbol(&_impl_._has_bits_);
          _impl_.tschchartserieslineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowvaluelabels = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartserieslineshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartserieslineshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowvaluelabels = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesareashowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesareashowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelinetype = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartserieslinelinetype(&_impl_._has_bits_);
          _impl_.tschchartserieslinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareasymboltype = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartseriesareasymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowsymbol = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesareashowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowvaluelabels = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartseriespieshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriespieshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowvaluelabels = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriesscattershowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriespiewedgeexplosion = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_tschchartseriespiewedgeexplosion(&_impl_._has_bits_);
          _impl_.tschchartseriespiewedgeexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowvaluelabels = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesdefaultshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespienumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespienumberformattype = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartseriespienumberformattype(&_impl_._has_bits_);
          _impl_.tschchartseriespienumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriespielabelexplosion = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_tschchartseriespielabelexplosion(&_impl_._has_bits_);
          _impl_.tschchartseriespielabelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlineshowsymbol = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartseriesmixedlineshowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareashowsymbol = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesmixedareashowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinesymboltype = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedlinesymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareasymboltype = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesmixedareasymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedshowvaluelabels = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesmixedshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinelinetype = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartseriesmixedlinelinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultyaxisordinal = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartseriesdefaultyaxisordinal(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultyaxisordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowserieslabels = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriespieshowserieslabels(&_impl_._has_bits_);
          _impl_.tschchartseriespieshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowsymbol = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartseriesscattershowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattersymboltype = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartseriesscattersymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesscattersymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscatterlinetype = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartseriesscatterlinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesscatterlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowline = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartseriesscattershowline(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesstackedpercentnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultseriestype = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesdefaultseriestype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultseriestype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinetype = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineorder = 161;
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineorder(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineperiod(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowlabel(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowequation(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineshowequation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowr2value(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineshowr2value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsetting(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
      case 171:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsettingscatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarsettingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartype = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbartype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
      case 173:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartypescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbartypescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
      case 174:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvalue(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarfixedvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
      case 176:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvalue(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarpercentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
      case 178:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvalue(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarstddevvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
      case 190:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
      case 193:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
      case 194:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsetx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
      case 195:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsety(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
      case 196:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
      case 197:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsety(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowtrendline = 198;
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartseriesdefaultshowtrendline(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowtrendline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbar = 199;
      case 199:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbar(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowerrorbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbarscatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowerrorbarscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblesizedimension = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartseriesbubblesizedimension(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblesizedimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowvaluelabels = 209;
      case 209:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesbubbleshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblelinetype = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesbubblelinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshownegativedata = 216;
      case 216:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartseriesbubbleshownegativedata(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleshownegativedata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesbubbleadjustmentscale = 217;
      case 217:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_tschchartseriesbubbleadjustmentscale(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleadjustmentscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSeriesNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSS.StyleArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tschchartseriesdefaultnumberformat(this),
        _Internal::tschchartseriesdefaultnumberformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartseriesdefaultnumberformattype = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_tschchartseriesdefaultnumberformattype(), target);
  }

  // optional bool tschchartseriesbarshowvaluelabels = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_tschchartseriesbarshowvaluelabels(), target);
  }

  // optional int32 tschchartserieslinesymboltype = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartserieslinesymboltype(), target);
  }

  // optional bool tschchartserieslineshowsymbol = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_tschchartserieslineshowsymbol(), target);
  }

  // optional bool tschchartserieslineshowvaluelabels = 21;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_tschchartserieslineshowvaluelabels(), target);
  }

  // optional bool tschchartseriesareashowvaluelabels = 27;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartseriesareashowvaluelabels(), target);
  }

  // optional int32 tschchartserieslinelinetype = 30;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_tschchartserieslinelinetype(), target);
  }

  // optional int32 tschchartseriesareasymboltype = 31;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_tschchartseriesareasymboltype(), target);
  }

  // optional bool tschchartseriesareashowsymbol = 32;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartseriesareashowsymbol(), target);
  }

  // optional bool tschchartseriespieshowvaluelabels = 37;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_tschchartseriespieshowvaluelabels(), target);
  }

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(45, this->_internal_tschchartseriesscattershowvaluelabels(), target);
  }

  // optional float tschchartseriespiewedgeexplosion = 50;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(50, this->_internal_tschchartseriespiewedgeexplosion(), target);
  }

  // optional bool tschchartseriesdefaultshowvaluelabels = 51;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_tschchartseriesdefaultshowvaluelabels(), target);
  }

  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::tschchartseriespienumberformat(this),
        _Internal::tschchartseriespienumberformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartseriespienumberformattype = 53;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(53, this->_internal_tschchartseriespienumberformattype(), target);
  }

  // optional float tschchartseriespielabelexplosion = 54;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(54, this->_internal_tschchartseriespielabelexplosion(), target);
  }

  // optional bool tschchartseriesmixedlineshowsymbol = 58;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(58, this->_internal_tschchartseriesmixedlineshowsymbol(), target);
  }

  // optional bool tschchartseriesmixedareashowsymbol = 59;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(59, this->_internal_tschchartseriesmixedareashowsymbol(), target);
  }

  // optional int32 tschchartseriesmixedlinesymboltype = 60;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(60, this->_internal_tschchartseriesmixedlinesymboltype(), target);
  }

  // optional int32 tschchartseriesmixedareasymboltype = 61;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(61, this->_internal_tschchartseriesmixedareasymboltype(), target);
  }

  // optional bool tschchartseriesmixedshowvaluelabels = 62;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(62, this->_internal_tschchartseriesmixedshowvaluelabels(), target);
  }

  // optional int32 tschchartseriesmixedlinelinetype = 63;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(63, this->_internal_tschchartseriesmixedlinelinetype(), target);
  }

  // optional int32 tschchartseriesdefaultyaxisordinal = 65;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(65, this->_internal_tschchartseriesdefaultyaxisordinal(), target);
  }

  // optional bool tschchartseriespieshowserieslabels = 66;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(66, this->_internal_tschchartseriespieshowserieslabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesscattershowsymbol = 69;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(69, this->_internal_tschchartseriesscattershowsymbol(), target);
  }

  // optional int32 tschchartseriesscattersymboltype = 70;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(70, this->_internal_tschchartseriesscattersymboltype(), target);
  }

  // optional int32 tschchartseriesscatterlinetype = 71;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(71, this->_internal_tschchartseriesscatterlinetype(), target);
  }

  // optional bool tschchartseriesscattershowline = 72;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(72, this->_internal_tschchartseriesscattershowline(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(90, _Internal::tschchartseriesstackedpercentnumberformat(this),
        _Internal::tschchartseriesstackedpercentnumberformat(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriesdefaultseriestype = 126;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(126, this->_internal_tschchartseriesdefaultseriestype(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinetype = 160;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(160, this->_internal_tschchartseriesdefaulttrendlinetype(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineorder = 161;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(161, this->_internal_tschchartseriesdefaulttrendlineorder(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(162, this->_internal_tschchartseriesdefaulttrendlineperiod(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(163, this->_internal_tschchartseriesdefaulttrendlineshowlabel(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartseriesdefaulttrendlinelabelstring().data(), static_cast<int>(this->_internal_tschchartseriesdefaulttrendlinelabelstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.PreUFF.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
    target = stream->WriteStringMaybeAliased(
        164, this->_internal_tschchartseriesdefaulttrendlinelabelstring(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(165, this->_internal_tschchartseriesdefaulttrendlineshowequation(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(166, this->_internal_tschchartseriesdefaulttrendlineshowr2value(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(170, this->_internal_tschchartseriesdefaulterrorbarsetting(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(171, this->_internal_tschchartseriesdefaulterrorbarsettingscatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartype = 172;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(172, this->_internal_tschchartseriesdefaulterrorbartype(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(173, this->_internal_tschchartseriesdefaulterrorbartypescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(174, this->_internal_tschchartseriesdefaulterrorbarfixedvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(175, this->_internal_tschchartseriesdefaulterrorbarfixedvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(176, this->_internal_tschchartseriesdefaulterrorbarpercentvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(177, this->_internal_tschchartseriesdefaulterrorbarpercentvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(178, this->_internal_tschchartseriesdefaulterrorbarstddevvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(179, this->_internal_tschchartseriesdefaulterrorbarstddevvaluescatterx(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(190, _Internal::tschchartseriesdefaulterrorbarcustompositivedata(this),
        _Internal::tschchartseriesdefaulterrorbarcustompositivedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(191, _Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(this),
        _Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(192, _Internal::tschchartseriesdefaulterrorbarcustomnegativedata(this),
        _Internal::tschchartseriesdefaulterrorbarcustomnegativedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(193, _Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(this),
        _Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(194, this->_internal_tschchartseriesdefaulttrendlineequationoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(195, this->_internal_tschchartseriesdefaulttrendlineequationoffsety(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(196, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(197, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsety(), target);
  }

  // optional bool tschchartseriesdefaultshowtrendline = 198;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(198, this->_internal_tschchartseriesdefaultshowtrendline(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbar = 199;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(199, this->_internal_tschchartseriesdefaultshowerrorbar(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(200, this->_internal_tschchartseriesdefaultshowerrorbarscatterx(), target);
  }

  // optional int32 tschchartseriesbubblesizedimension = 208;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(208, this->_internal_tschchartseriesbubblesizedimension(), target);
  }

  // optional bool tschchartseriesbubbleshowvaluelabels = 209;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(209, this->_internal_tschchartseriesbubbleshowvaluelabels(), target);
  }

  // optional int32 tschchartseriesbubblelinetype = 210;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(210, this->_internal_tschchartseriesbubblelinetype(), target);
  }

  // optional bool tschchartseriesbubbleshownegativedata = 216;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(216, this->_internal_tschchartseriesbubbleshownegativedata(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional float tschchartseriesbubbleadjustmentscale = 217;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(217, this->_internal_tschchartseriesbubbleadjustmentscale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  return target;
}

size_t ChartSeriesNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  size_t total_size = 0;

  // required .TSS.StyleArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tschchartseriesdefaulttrendlinelabelstring = 164;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tschchartseriesdefaulttrendlinelabelstring());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesdefaultnumberformat = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultnumberformat_);
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriespienumberformat = 52;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespienumberformat_);
    }

    // optional .TSCH.PreUFF.ChartsNumberFormatArchive tschchartseriesstackedpercentnumberformat = 90;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesstackedpercentnumberformat_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 190;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustompositivedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 191;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 192;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 193;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
    }

    // optional int32 tschchartseriesdefaultnumberformattype = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesdefaultnumberformattype());
    }

    // optional int32 tschchartserieslinesymboltype = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinesymboltype());
    }

    // optional bool tschchartseriesbarshowvaluelabels = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartserieslineshowsymbol = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowvaluelabels = 21;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowvaluelabels = 27;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartserieslinelinetype = 30;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelinetype());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 tschchartseriesareasymboltype = 31;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareasymboltype());
    }

    // optional bool tschchartseriesareashowsymbol = 32;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowvaluelabels = 37;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowvaluelabels = 45;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowvaluelabels = 51;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriespiewedgeexplosion = 50;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriespienumberformattype = 53;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespienumberformattype());
    }

    // optional float tschchartseriespielabelexplosion = 54;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriesmixedlinesymboltype = 60;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinesymboltype());
    }

    // optional int32 tschchartseriesmixedareasymboltype = 61;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareasymboltype());
    }

    // optional bool tschchartseriesmixedlineshowsymbol = 58;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareashowsymbol = 59;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedshowvaluelabels = 62;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowserieslabels = 66;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesmixedlinelinetype = 63;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinelinetype());
    }

    // optional int32 tschchartseriesdefaultyaxisordinal = 65;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultyaxisordinal());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartseriesscattersymboltype = 70;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattersymboltype());
    }

    // optional int32 tschchartseriesscatterlinetype = 71;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscatterlinetype());
    }

    // optional bool tschchartseriesscattershowsymbol = 69;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowline = 72;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowlabel = 163;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowequation = 165;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesdefaultseriestype = 126;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultseriestype());
    }

    // optional int32 tschchartseriesdefaulttrendlinetype = 160;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinetype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartseriesdefaulttrendlineorder = 161;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineorder());
    }

    // optional int32 tschchartseriesdefaulttrendlineperiod = 162;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineperiod());
    }

    // optional int32 tschchartseriesdefaulterrorbarsetting = 170;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarsetting());
    }

    // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 171;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarsettingscatterx());
    }

    // optional int32 tschchartseriesdefaulterrorbartype = 172;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbartype());
    }

    // optional int32 tschchartseriesdefaulterrorbartypescatterx = 173;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbartypescatterx());
    }

    // optional float tschchartseriesdefaulterrorbarfixedvalue = 174;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 175;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartseriesdefaulterrorbarpercentvalue = 176;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 177;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarstddevvalue = 178;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 179;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesdefaulttrendlineshowr2value = 166;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowtrendline = 198;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowerrorbar = 199;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowerrorbarscatterx = 200;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartseriesdefaulttrendlineequationoffsetx = 194;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsety = 195;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 196;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 197;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesbubblesizedimension = 208;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblesizedimension());
    }

    // optional int32 tschchartseriesbubblelinetype = 210;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblelinetype());
    }

    // optional bool tschchartseriesbubbleshowvaluelabels = 209;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshownegativedata = 216;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  // optional float tschchartseriesbubbleadjustmentscale = 217;
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSeriesNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesNonStyleArchive::GetClassData() const { return &_class_data_; }


void ChartSeriesNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSeriesNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartSeriesNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartseriesdefaulttrendlinelabelstring(from._internal_tschchartseriesdefaulttrendlinelabelstring());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSS::StyleArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseriesdefaultnumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(
          from._internal_tschchartseriesdefaultnumberformat());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartseriespienumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(
          from._internal_tschchartseriespienumberformat());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartseriesstackedpercentnumberformat()->::TSCH::PreUFF::ChartsNumberFormatArchive::MergeFrom(
          from._internal_tschchartseriesstackedpercentnumberformat());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustompositivedata());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustomnegativedata());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesdefaultnumberformattype_ = from._impl_.tschchartseriesdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartserieslinesymboltype_ = from._impl_.tschchartserieslinesymboltype_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesbarshowvaluelabels_ = from._impl_.tschchartseriesbarshowvaluelabels_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartserieslineshowsymbol_ = from._impl_.tschchartserieslineshowsymbol_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartserieslineshowvaluelabels_ = from._impl_.tschchartserieslineshowvaluelabels_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriesareashowvaluelabels_ = from._impl_.tschchartseriesareashowvaluelabels_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartserieslinelinetype_ = from._impl_.tschchartserieslinelinetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesareasymboltype_ = from._impl_.tschchartseriesareasymboltype_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesareashowsymbol_ = from._impl_.tschchartseriesareashowsymbol_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriespieshowvaluelabels_ = from._impl_.tschchartseriespieshowvaluelabels_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesscattershowvaluelabels_ = from._impl_.tschchartseriesscattershowvaluelabels_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesdefaultshowvaluelabels_ = from._impl_.tschchartseriesdefaultshowvaluelabels_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriespiewedgeexplosion_ = from._impl_.tschchartseriespiewedgeexplosion_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriespienumberformattype_ = from._impl_.tschchartseriespienumberformattype_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriespielabelexplosion_ = from._impl_.tschchartseriespielabelexplosion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesmixedlinesymboltype_ = from._impl_.tschchartseriesmixedlinesymboltype_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriesmixedareasymboltype_ = from._impl_.tschchartseriesmixedareasymboltype_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseriesmixedlineshowsymbol_ = from._impl_.tschchartseriesmixedlineshowsymbol_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesmixedareashowsymbol_ = from._impl_.tschchartseriesmixedareashowsymbol_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesmixedshowvaluelabels_ = from._impl_.tschchartseriesmixedshowvaluelabels_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriespieshowserieslabels_ = from._impl_.tschchartseriespieshowserieslabels_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesmixedlinelinetype_ = from._impl_.tschchartseriesmixedlinelinetype_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesdefaultyaxisordinal_ = from._impl_.tschchartseriesdefaultyaxisordinal_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriesscattersymboltype_ = from._impl_.tschchartseriesscattersymboltype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriesscatterlinetype_ = from._impl_.tschchartseriesscatterlinetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriesscattershowsymbol_ = from._impl_.tschchartseriesscattershowsymbol_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriesscattershowline_ = from._impl_.tschchartseriesscattershowline_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartseriesdefaulttrendlineshowlabel_ = from._impl_.tschchartseriesdefaulttrendlineshowlabel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriesdefaulttrendlineshowequation_ = from._impl_.tschchartseriesdefaulttrendlineshowequation_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartseriesdefaultseriestype_ = from._impl_.tschchartseriesdefaultseriestype_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriesdefaulttrendlinetype_ = from._impl_.tschchartseriesdefaulttrendlinetype_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartseriesdefaulttrendlineorder_ = from._impl_.tschchartseriesdefaulttrendlineorder_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesdefaulttrendlineperiod_ = from._impl_.tschchartseriesdefaulttrendlineperiod_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartseriesdefaulterrorbarsetting_ = from._impl_.tschchartseriesdefaulterrorbarsetting_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesdefaulterrorbarsettingscatterx_ = from._impl_.tschchartseriesdefaulterrorbarsettingscatterx_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriesdefaulterrorbartype_ = from._impl_.tschchartseriesdefaulterrorbartype_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesdefaulterrorbartypescatterx_ = from._impl_.tschchartseriesdefaulterrorbartypescatterx_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarfixedvalue_ = from._impl_.tschchartseriesdefaulterrorbarfixedvalue_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_ = from._impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarpercentvalue_ = from._impl_.tschchartseriesdefaulterrorbarpercentvalue_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_ = from._impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarstddevvalue_ = from._impl_.tschchartseriesdefaulterrorbarstddevvalue_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_ = from._impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineshowr2value_ = from._impl_.tschchartseriesdefaulttrendlineshowr2value_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesdefaultshowtrendline_ = from._impl_.tschchartseriesdefaultshowtrendline_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriesdefaultshowerrorbar_ = from._impl_.tschchartseriesdefaultshowerrorbar_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesdefaultshowerrorbarscatterx_ = from._impl_.tschchartseriesdefaultshowerrorbarscatterx_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationoffsetx_ = from._impl_.tschchartseriesdefaulttrendlineequationoffsetx_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationoffsety_ = from._impl_.tschchartseriesdefaulttrendlineequationoffsety_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_ = from._impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_ = from._impl_.tschchartseriesdefaulttrendlinersquaredoffsety_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesbubblesizedimension_ = from._impl_.tschchartseriesbubblesizedimension_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriesbubblelinetype_ = from._impl_.tschchartseriesbubblelinetype_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesbubbleshowvaluelabels_ = from._impl_.tschchartseriesbubbleshowvaluelabels_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesbubbleshownegativedata_ = from._impl_.tschchartseriesbubbleshownegativedata_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (from._internal_has_tschchartseriesbubbleadjustmentscale()) {
    _this->_internal_set_tschchartseriesbubbleadjustmentscale(from._internal_tschchartseriesbubbleadjustmentscale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesNonStyleArchive::CopyFrom(const ChartSeriesNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.PreUFF.ChartSeriesNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesNonStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultnumberformat()) {
    if (!_impl_.tschchartseriesdefaultnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespienumberformat()) {
    if (!_impl_.tschchartseriespienumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesstackedpercentnumberformat()) {
    if (!_impl_.tschchartseriesstackedpercentnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesNonStyleArchive::InternalSwap(ChartSeriesNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartseriesdefaulttrendlinelabelstring_, lhs_arena,
      &other->_impl_.tschchartseriesdefaulttrendlinelabelstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleadjustmentscale_)
      + sizeof(ChartSeriesNonStyleArchive::_impl_.tschchartseriesbubbleadjustmentscale_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHPreUFFArchives_2eproto_getter, &descriptor_table_TSCHPreUFFArchives_2eproto_once,
      file_level_metadata_TSCHPreUFFArchives_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PreUFF
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartInfoArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::LegendModelArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::LegendModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::LegendModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartModelArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartModelArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartModelArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartGridArchive_ValueRow*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartGridArchive_ValueRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartGridArchive_ValueRow >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartGridArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartGridArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartGridArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartsNumberFormatArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartsNumberFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartsNumberFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::LegendStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::LegendStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::LegendStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::LegendNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::LegendNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::LegendNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartAxisStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartAxisStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartAxisStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartAxisNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartAxisNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartAxisNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartSeriesStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartSeriesStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartSeriesStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::PreUFF::ChartSeriesNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::PreUFF::ChartSeriesNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::PreUFF::ChartSeriesNonStyleArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
